Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62442.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([2, 4, 5, 9, 11, 12, 19])
  9 [3:-1]
-- < 4 [1:-1]
---- > 5 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 13 [0:0] L
set([4, 5, 9, 11, 12, 13, 19])
  9 [3:0]
-- < 4 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 5 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 13 [0:0] L
set([2, 3, 4, 5, 9, 11, 12, 13, 19])
  9 [3:0]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 13 [0:0] L
set([2, 3, 4, 5, 8, 9, 11, 12, 13, 19])
  9 [3:0]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 13 [0:0] L
set([2, 3, 4, 5, 8, 9, 11, 12, 13, 19])
  9 [3:0]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 5 [1:-1]
------ > 8 [0:0] L
-- > 12 [2:-1]
---- < 11 [0:0] L
---- > 19 [1:1]
------ < 13 [0:0] L
set([2, 3, 4, 5, 8, 9, 11, 12, 13, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f265a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 98 steps

SAVING TEST AS failure.62442.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 3
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 4
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 1                                                                 # STEP 6
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int1 = 3                                                                 # STEP 8
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 10
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 13
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 16
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 18
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 6                                                                # STEP 20
ACTION: int0 = 6 
int0 = 15 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 21
ACTION: int3 = 2 
int3 = 6 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 6, 15]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 23
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([6, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 26
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 6                                                                # STEP 27
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 7                                                                # STEP 31
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 2                                                                # STEP 34
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 7, 6, 15]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 36
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 38
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 16                                                               # STEP 40
ACTION: int3 = 16 
int3 = 2 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 41
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 42
ACTION: int1 = 20 
int1 = 3 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 45
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 48
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([2, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([19, 14]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 49
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101d86f38> : <type 'instance'>
avl_REF2 = set([2, 7, 6, 15]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 51
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 54
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 56
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 57
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 58
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 4                                                                # STEP 60
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 61
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 62
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int2)                                                       # STEP 63
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 64
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 19                                                               # STEP 65
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 66
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 67
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 4, 14, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 69
ACTION: int3 = 15 
int3 = 19 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 70
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([19, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 71
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 73
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 20                                                               # STEP 74
ACTION: int2 = 20 
int2 = 7 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 75
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 76
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int2)                                                       # STEP 77
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 8                                                                # STEP 78
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 79
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 9                                                                # STEP 80
ACTION: int3 = 9 
int3 = 15 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 81
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 19, 14]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 82
ACTION: int1 = 4 
int1 = 16 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 83
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
avl_REF2 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 13                                                               # STEP 84
ACTION: int0 = 13 
int0 = 19 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 85
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 86
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 87
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 88
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13, 14, 16, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 89
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 90
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 91
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101b568c0> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 92
ACTION: int1 = 19 
int1 = 4 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 93
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 4, 7]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 94
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 95
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102813248> : <type 'instance'>
avl_REF2 = set([13, 14, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 96
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([8, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 4, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 97
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1028130e0> : <type 'instance'>
avl_REF1 = set([8, 9, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 9, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cce758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:31.005877) Mon May  1 18:31:47 2017 [ 159 stmts 210 branches ]
  13 [2:0]
-- < 11 [1:1]
---- < 5 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([5, 11, 13, 15, 18, 20])
  13 [2:0]
-- < 11 [1:1]
---- < 5 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([5, 11, 13, 15, 18, 20])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 10, 11, 18])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 11, 15, 18])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 11, 15, 18])
  9 [3:-1]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 15 [2:-1]
---- < 11 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([1, 7, 9, 11, 15, 18, 20])
  9 [2:0]
-- < 7 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 7, 9, 11, 15, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 78
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2467668056 TOTAL RUNTIME
5 EXECUTED
476 TOTAL TEST OPERATIONS
24.8104493618 TIME SPENT EXECUTING TEST OPERATIONS
0.0507810115814 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9241073132 TIME SPENT CHECKING PROPERTIES
49.734556675 TOTAL TIME SPENT RUNNING SUT
0.00343799591064 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 6                                                                 # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
int0 = 15                                                                # STEP 2
avl2.insert(int3)                                                        # STEP 3
avl2.delete(int3)                                                        # STEP 4
avl2.delete(int3)                                                        # STEP 5
int2 = 1                                                                 # STEP 6
avl2.insert(int3)                                                        # STEP 7
int1 = 3                                                                 # STEP 8
avl2.delete(int3)                                                        # STEP 9
result = avl2.find(int0)                                                # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.insert(int2)                                                       # STEP 13
avl2.delete(int0)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
result = avl2.find(int1)                                                # STEP 16
avl2.insert(int0)                                                       # STEP 17
avl2 == avl2                                                            # STEP 18
avl2.insert(int0)                                                       # STEP 19
int0 = 6                                                                # STEP 20
int3 = 2                                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
result = avl2.find(int0)                                                # STEP 23
avl2.insert(int0)                                                       # STEP 24
avl2.delete(int2)                                                       # STEP 25
avl2 == avl2                                                            # STEP 26
int2 = 6                                                                # STEP 27
avl2.insert(int3)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
result = avl2.find(int3)                                                # STEP 30
int0 = 7                                                                # STEP 31
avl2.insert(int2)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
int2 = 2                                                                # STEP 34
avl2.insert(int0)                                                       # STEP 35
avl0 = avl.AVLTree()                                                    # STEP 36
avl0.insert(int3)                                                       # STEP 37
result = avl2.find(int3)                                                # STEP 38
avl0.insert(int3)                                                       # STEP 39
int3 = 16                                                               # STEP 40
int0 = 14                                                               # STEP 41
int1 = 20                                                               # STEP 42
result = avl2.find(int3)                                                # STEP 43
avl0.delete(int3)                                                       # STEP 44
int3 = 19                                                               # STEP 45
avl0.insert(int0)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl0.delete(int2)                                                       # STEP 48
int3 = 19                                                               # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
avl1 = avl.AVLTree()                                                    # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl2.delete(int1)                                                       # STEP 53
avl2.insert(int0)                                                       # STEP 54
avl0.delete(int0)                                                       # STEP 55
int1 = 12                                                               # STEP 56
int0 = 19                                                               # STEP 57
int2 = 7                                                                # STEP 58
avl0.delete(int1)                                                       # STEP 59
int1 = 4                                                                # STEP 60
avl2.insert(int0)                                                       # STEP 61
avl1 == avl2                                                            # STEP 62
avl1.insert(int2)                                                       # STEP 63
result = avl0.find(int3)                                                # STEP 64
int0 = 19                                                               # STEP 65
avl1 == avl1                                                            # STEP 66
avl2.insert(int1)                                                       # STEP 67
avl2.insert(int2)                                                       # STEP 68
int3 = 15                                                               # STEP 69
avl2.delete(int2)                                                       # STEP 70
avl2.delete(int1)                                                       # STEP 71
avl1.delete(int3)                                                       # STEP 72
avl0.insert(int0)                                                       # STEP 73
int2 = 20                                                               # STEP 74
int1 = 16                                                               # STEP 75
result = avl2.inorder()                                                 # STEP 76
avl0.delete(int2)                                                       # STEP 77
int2 = 8                                                                # STEP 78
avl2.delete(int3)                                                       # STEP 79
int3 = 9                                                                # STEP 80
avl2.insert(int1)                                                       # STEP 81
int1 = 4                                                                # STEP 82
avl1 == avl2                                                            # STEP 83
int0 = 13                                                               # STEP 84
result = avl1.inorder()                                                 # STEP 85
avl1.delete(int2)                                                       # STEP 86
result = avl2.find(int0)                                                # STEP 87
avl2.insert(int0)                                                       # STEP 88
avl1.insert(int1)                                                       # STEP 89
result = avl0.inorder()                                                 # STEP 90
avl0.delete(int1)                                                       # STEP 91
int1 = 19                                                               # STEP 92
avl1.insert(int2)                                                       # STEP 93
int0 = 4                                                                # STEP 94
result = avl2.find(int1)                                                # STEP 95
avl1.insert(int3)                                                       # STEP 96
avl1.delete(int0)                                                       # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cce758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

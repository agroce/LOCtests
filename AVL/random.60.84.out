Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.850.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a9fcf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.850.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 1
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 3
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 6                                                                 # STEP 6
ACTION: int0 = 6 
int0 = 19 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 1                                                                # STEP 10
ACTION: int2 = 1 
int2 = 20 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 11
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 6]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 13
ACTION: int0 = 9 
int0 = 6 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 14
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 6                                                                # STEP 16
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 17
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 3                                                                # STEP 19
ACTION: int0 = 3 
int0 = 9 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 7                                                                # STEP 21
ACTION: int2 = 7 
int2 = 6 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 22
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([8, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20, 6]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 25
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 26
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1050ee3f8> : <type 'instance'>
avl_REF2 = set([20, 6]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 27
ACTION: int3 = 2 
int3 = 8 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 11                                                               # STEP 29
ACTION: int0 = 11 
int0 = 3 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 31
ACTION: int3 = 4 
int3 = 2 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 32
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 13]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 34
ACTION: int1 = 6 
int1 = 13 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 35
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 36
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 13]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 38
ACTION: int3 = 1 
int3 = 4 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 4, 13, 15]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 40
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 41
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 42
ACTION: int1 = 8 
int1 = 6 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 43
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 44
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 4, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 48
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 49
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 50
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 51
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 52
ACTION: int1 = 4 
int1 = 7 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 53
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 54
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104edf290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 18                                                               # STEP 56
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 57
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 2, 4, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 58
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 16                                                               # STEP 61
ACTION: int3 = 16 
int3 = 13 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 62
ACTION: int2 = 4 
int2 = 18 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 63
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104edf290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e82c20> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104d56440> : <type 'instance'>
avl_REF2 = set([1, 2, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ef4fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #31 (0:00:30.008425) Fri Apr 28 07:28:44 2017 [ 149 stmts 198 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 1
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.19652915 TOTAL RUNTIME
8 EXECUTED
667 TOTAL TEST OPERATIONS
27.3909707069 TIME SPENT EXECUTING TEST OPERATIONS
0.0240304470062 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.6602120399 TIME SPENT CHECKING PROPERTIES
55.0511827469 TOTAL TIME SPENT RUNNING SUT
0.00459098815918 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 20                                                                # STEP 0
int0 = 19                                                                # STEP 1
int3 = 8                                                                 # STEP 2
int1 = 15                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
int0 = 6                                                                 # STEP 6
avl2.insert(int2)                                                        # STEP 7
result = avl2.find(int2)                                                 # STEP 8
avl2.delete(int1)                                                        # STEP 9
int2 = 1                                                                # STEP 10
result = avl2.find(int1)                                                # STEP 11
avl2.insert(int0)                                                       # STEP 12
int0 = 9                                                                # STEP 13
int1 = 13                                                               # STEP 14
avl2.delete(int2)                                                       # STEP 15
int2 = 6                                                                # STEP 16
avl2 == avl2                                                            # STEP 17
avl2.delete(int0)                                                       # STEP 18
int0 = 3                                                                # STEP 19
avl2.insert(int2)                                                       # STEP 20
int2 = 7                                                                # STEP 21
result = avl2.inorder()                                                 # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2 == avl2                                                            # STEP 25
avl2 = avl.AVLTree()                                                    # STEP 26
int3 = 2                                                                # STEP 27
avl2.delete(int0)                                                       # STEP 28
int0 = 11                                                               # STEP 29
avl2.insert(int3)                                                       # STEP 30
int3 = 4                                                                # STEP 31
result = avl2.find(int1)                                                # STEP 32
avl2.insert(int1)                                                       # STEP 33
int1 = 6                                                                # STEP 34
result = avl2.find(int2)                                                # STEP 35
int2 = 15                                                               # STEP 36
avl2.insert(int3)                                                       # STEP 37
int3 = 1                                                                # STEP 38
avl2.insert(int2)                                                       # STEP 39
int2 = 11                                                               # STEP 40
result = avl2.find(int1)                                                # STEP 41
int1 = 8                                                                # STEP 42
result = avl2.find(int1)                                                # STEP 43
result = avl2.find(int1)                                                # STEP 44
avl2.insert(int3)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
int0 = 8                                                                # STEP 48
int1 = 7                                                                # STEP 49
int3 = 13                                                               # STEP 50
result = avl1.find(int1)                                                # STEP 51
int1 = 4                                                                # STEP 52
result = avl1.find(int3)                                                # STEP 53
avl0 = avl.AVLTree()                                                    # STEP 54
avl2.delete(int2)                                                       # STEP 55
int2 = 18                                                               # STEP 56
avl2.delete(int3)                                                       # STEP 57
avl2 == avl2                                                            # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl1.insert(int2)                                                       # STEP 60
int3 = 16                                                               # STEP 61
int2 = 4                                                                # STEP 62
result = avl0.find(int1)                                                # STEP 63
avl1.insert(int1)                                                       # STEP 64
avl2.delete(int2)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ef4fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99542.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 15 [2:1]
---- < 11 [1:1]
------ < 8 [0:0] L
---- > 18 [0:0] L
set([1, 5, 7, 8, 11, 15, 18])
  6 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 10 [1:-1]
---- > 18 [0:0] L
set([2, 3, 5, 6, 10, 18])
TEST #4 STEP #86 (0:00:30.055087) Fri Apr 28 04:16:21 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057d4710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 57 steps

SAVING TEST AS failure.99542.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 16                                                                # STEP 0
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 3
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 5
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                 # STEP 6
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                                # STEP 7
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 6                                                                 # STEP 9
ACTION: int3 = 6 
int3 = 8 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 11
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 12
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 13
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 14
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 2]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 16
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 6                                                                # STEP 17
ACTION: int2 = 6 
int2 = 2 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 2, 6]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 22
ACTION: int0 = 16 
int0 = 18 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 23
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 24
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 1                                                                # STEP 26
ACTION: int1 = 1 
int1 = 13 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 2                                                                # STEP 29
ACTION: int2 = 2 
int2 = 6 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 18, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 31
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 32
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 33
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([16, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 17                                                               # STEP 34
ACTION: int0 = 17 
int0 = 16 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 1, 2, 14, 6]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 36
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x105365680> : <type 'instance'>
avl_REF2 = set([16, 18, 6]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 39
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 40
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 43
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 6                                                                # STEP 44
ACTION: int1 = 6 
int1 = 18 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 5                                                                # STEP 47
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 48
ACTION: int3 = 11 
int3 = 8 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 6                                                                # STEP 51
ACTION: int3 = 6 
int3 = 11 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 52
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 54
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105353a70> : <type 'instance'>
avl_REF2 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 56
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105366098> : <type 'instance'>
avl_REF1 = set([16, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 1, 2]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10535fcf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 51
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1625490189 TOTAL RUNTIME
8 EXECUTED
708 TOTAL TEST OPERATIONS
27.6161761284 TIME SPENT EXECUTING TEST OPERATIONS
0.0264317989349 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7512540817 TIME SPENT CHECKING PROPERTIES
55.3674302101 TOTAL TIME SPENT RUNNING SUT
0.00483345985413 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 16                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int0 = 18                                                                # STEP 2
int1 = 19                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int3)                                                 # STEP 5
result = avl1.find(int1)                                                 # STEP 6
int1 = 13                                                                # STEP 7
result = avl1.find(int3)                                                 # STEP 8
int3 = 6                                                                 # STEP 9
avl1.insert(int2)                                                       # STEP 10
int2 = 2                                                                # STEP 11
avl2 = avl.AVLTree()                                                    # STEP 12
result = avl1.find(int1)                                                # STEP 13
avl2.delete(int0)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
result = avl1.find(int0)                                                # STEP 16
int2 = 6                                                                # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
int0 = 16                                                               # STEP 22
int3 = 8                                                                # STEP 23
int1 = 13                                                               # STEP 24
avl2.delete(int1)                                                       # STEP 25
int1 = 1                                                                # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl1.delete(int1)                                                       # STEP 28
int2 = 2                                                                # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl1.insert(int1)                                                       # STEP 31
int1 = 14                                                               # STEP 32
avl2 == avl2                                                            # STEP 33
int0 = 17                                                               # STEP 34
avl1.insert(int1)                                                       # STEP 35
avl2 = avl.AVLTree()                                                    # STEP 36
result = avl2.find(int1)                                                # STEP 37
avl1.delete(int1)                                                       # STEP 38
result = avl1.find(int1)                                                # STEP 39
int1 = 18                                                               # STEP 40
avl1 == avl1                                                            # STEP 41
avl2.insert(int1)                                                       # STEP 42
avl2 == avl1                                                            # STEP 43
int1 = 6                                                                # STEP 44
avl1.delete(int0)                                                       # STEP 45
avl1.delete(int3)                                                       # STEP 46
int0 = 5                                                                # STEP 47
int3 = 11                                                               # STEP 48
avl2.insert(int0)                                                       # STEP 49
avl1.delete(int3)                                                       # STEP 50
int3 = 6                                                                # STEP 51
int0 = 2                                                                # STEP 52
avl2.delete(int1)                                                       # STEP 53
int1 = 14                                                               # STEP 54
avl2.delete(int0)                                                       # STEP 55
avl1.delete(int3)                                                       # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10535fcf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

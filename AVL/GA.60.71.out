Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14695.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102033950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.14695.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 2
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 4
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 11                                                                # STEP 5
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 6
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 10                                                                # STEP 7
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 9
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 11
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 4]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 12
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 11, 4]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 15
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 20                                                               # STEP 17
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 18
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 19
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 20
ACTION: int2 = 12 
int2 = 4 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 22
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl1                                                            # STEP 23
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 25
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 26
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 27
ACTION: int0 = 11 
int0 = 7 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 28
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 18                                                               # STEP 29
ACTION: int1 = 18 
int1 = 20 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 17                                                               # STEP 33
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 34
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 35
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 36
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10272a488> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 10, 11, 4, 5]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 41
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10271e128> : <type 'instance'>
avl_REF0 = set([8, 10, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 10, 4, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10218e290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #99 (0:00:30.048590) Sun Apr 30 04:46:17 2017 [ 133 stmts 178 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102206e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.14695.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 1
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 2                                                                 # STEP 6
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 2 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 5]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 10
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 11
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 12
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 5, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 5]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 15
ACTION: int3 = 13 
int3 = 15 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 14                                                               # STEP 17
ACTION: int0 = 14 
int0 = 8 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 5]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 21
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 22
ACTION: int0 = 1 
int0 = 14 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([1, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 5, 13]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 24
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 12                                                               # STEP 26
ACTION: int1 = 12 
int1 = 6 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 28
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102333680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 3, 5, 13]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 3 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1022fb4d0> : <type 'instance'>
avl_REF1 = set([1, 2, 3, 5, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 3, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10230e050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102239518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.14695.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 2
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 3
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int2 = 5                                                                 # STEP 6
ACTION: int2 = 5 
int2 = 12 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 8                                                                 # STEP 8
ACTION: int1 = 8 
int1 = 14 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 9
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 4                                                                # STEP 12
ACTION: int0 = 4 
int0 = 8 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 13                                                               # STEP 14
ACTION: int1 = 13 
int1 = 8 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 13]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 16
ACTION: int1 = 3 
int1 = 13 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 17
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 15                                                               # STEP 19
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 20
ACTION: int3 = 6 
int3 = 8 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 21
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 11                                                               # STEP 23
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 13, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 26
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 29
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 32
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 33
ACTION: int3 = 1 
int3 = 14 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 34
ACTION: int1 = 17 
int1 = 5 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 35
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 37
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int3)                                                # STEP 38
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 3                                                                # STEP 39
ACTION: int0 = 3 
int0 = 11 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 41
ACTION: int1 = 11 
int1 = 17 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 12, 13, 6]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 43
ACTION: int0 = 3 
int0 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 45
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 46
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 6                                                                # STEP 47
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 5                                                                # STEP 49
ACTION: int0 = 5 
int0 = 6 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([3, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 12, 13, 6]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 51
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([1, 3, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int1)                                                # STEP 52
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 53
ACTION: int1 = 14 
int1 = 11 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 54
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([1, 3, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 3                                                                # STEP 56
ACTION: int3 = 3 
int3 = 1 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 57
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 14, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 59
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 5, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 60
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([1, 3, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 3, 6, 12, 13, 15]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 61
ACTION: int0 = 7 
int0 = 5 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 62
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 3, 5, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 63
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([1, 3, 6, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 6, 7, 12, 13, 15]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 64
ACTION: int3 = 1 
int3 = 3 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 65
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([1, 3, 6, 7, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int0)                                                       # STEP 66
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 67
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 68
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([1, 3, 6, 7, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 69
ACTION: int0 = 20 
int0 = 8 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 70
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 71
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl_REF2 = set([1, 3, 6, 7, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2 == avl1                                                            # STEP 72
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102206440> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10222b0e0> : <type 'instance'>
avl_REF2 = set([1, 3, 6, 7, 12, 13, 15]) : <type 'set'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 73
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1022f1290> : <type 'instance'>
avl_REF0 = set([17, 3, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 5, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10222e2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 69
STOPPING TESTING DUE TO TIMEOUT
7.28235683548 PERCENT COVERED
60.2738039494 TOTAL RUNTIME
6 EXECUTED
417 TOTAL TEST OPERATIONS
22.0332283974 TIME SPENT EXECUTING TEST OPERATIONS
0.0174167156219 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.1815690994 TIME SPENT CHECKING PROPERTIES
44.2147974968 TOTAL TIME SPENT RUNNING SUT
0.00452017784119 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 4                                                                 # STEP 0
int0 = 14                                                                # STEP 1
int3 = 14                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int0)                                                        # STEP 4
int1 = 11                                                                # STEP 5
result = avl0.find(int3)                                                 # STEP 6
int3 = 10                                                                # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
int0 = 6                                                                 # STEP 9
avl0.insert(int2)                                                       # STEP 10
avl0.insert(int3)                                                       # STEP 11
int3 = 13                                                               # STEP 12
avl0.insert(int1)                                                       # STEP 13
avl0 == avl0                                                            # STEP 14
avl0.delete(int0)                                                       # STEP 15
result = avl0.find(int3)                                                # STEP 16
int1 = 20                                                               # STEP 17
int0 = 7                                                                # STEP 18
int3 = 5                                                                # STEP 19
int2 = 12                                                               # STEP 20
result = avl1.find(int3)                                                # STEP 21
result = avl0.find(int0)                                                # STEP 22
avl0 == avl1                                                            # STEP 23
avl0.insert(int3)                                                       # STEP 24
result = avl0.find(int3)                                                # STEP 25
int3 = 5                                                                # STEP 26
int0 = 11                                                               # STEP 27
avl0.delete(int1)                                                       # STEP 28
int1 = 18                                                               # STEP 29
avl0.delete(int1)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl0.insert(int3)                                                       # STEP 32
int3 = 17                                                               # STEP 33
int1 = 8                                                                # STEP 34
int2 = 9                                                                # STEP 35
avl1 == avl0                                                            # STEP 36
avl0.delete(int2)                                                       # STEP 37
avl1.insert(int1)                                                       # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl0.insert(int1)                                                       # STEP 40
avl0.delete(int0)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10218e290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 5                                                                 # STEP 0
int3 = 16                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int0 = 16                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
int0 = 2                                                                 # STEP 6
avl1.insert(int0)                                                        # STEP 7
int0 = 8                                                                 # STEP 8
avl1.insert(int1)                                                        # STEP 9
int1 = 1                                                                # STEP 10
result = avl1.find(int3)                                                # STEP 11
int3 = 15                                                               # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl1.delete(int3)                                                       # STEP 14
int3 = 13                                                               # STEP 15
avl1.delete(int0)                                                       # STEP 16
int0 = 14                                                               # STEP 17
avl1 == avl1                                                            # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
int1 = 6                                                                # STEP 21
int0 = 1                                                                # STEP 22
avl1.insert(int3)                                                       # STEP 23
int3 = 3                                                                # STEP 24
avl1.delete(int1)                                                       # STEP 25
int1 = 12                                                               # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl2 = avl.AVLTree()                                                    # STEP 28
avl1.insert(int3)                                                       # STEP 29
int3 = 8                                                                # STEP 30
avl1.delete(int0)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10230e050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 14                                                                # STEP 0
int2 = 12                                                                # STEP 1
int0 = 8                                                                 # STEP 2
int3 = 8                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 5                                                                 # STEP 6
avl2.delete(int1)                                                        # STEP 7
int1 = 8                                                                 # STEP 8
avl0 = avl.AVLTree()                                                     # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl2.delete(int0)                                                       # STEP 11
int0 = 4                                                                # STEP 12
avl0.delete(int2)                                                       # STEP 13
int1 = 13                                                               # STEP 14
avl2.insert(int1)                                                       # STEP 15
int1 = 3                                                                # STEP 16
result = avl2.find(int3)                                                # STEP 17
avl0.delete(int3)                                                       # STEP 18
int2 = 15                                                               # STEP 19
int3 = 6                                                                # STEP 20
result = avl0.find(int0)                                                # STEP 21
result = avl0.inorder()                                                 # STEP 22
int0 = 11                                                               # STEP 23
avl2.insert(int3)                                                       # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl2 == avl2                                                            # STEP 26
int3 = 14                                                               # STEP 27
result = avl2.find(int1)                                                # STEP 28
int1 = 5                                                                # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl0.insert(int3)                                                       # STEP 31
avl1 = avl.AVLTree()                                                    # STEP 32
int3 = 1                                                                # STEP 33
int1 = 17                                                               # STEP 34
result = avl1.find(int0)                                                # STEP 35
result = avl2.find(int0)                                                # STEP 36
avl0 == avl2                                                            # STEP 37
result = avl0.find(int3)                                                # STEP 38
int0 = 3                                                                # STEP 39
avl0.insert(int1)                                                       # STEP 40
int1 = 11                                                               # STEP 41
avl2.insert(int0)                                                       # STEP 42
int0 = 3                                                                # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl0.delete(int0)                                                       # STEP 45
result = avl0.find(int0)                                                # STEP 46
int0 = 6                                                                # STEP 47
avl0.delete(int0)                                                       # STEP 48
int0 = 5                                                                # STEP 49
avl2.insert(int3)                                                       # STEP 50
avl1 == avl2                                                            # STEP 51
result = avl1.find(int1)                                                # STEP 52
int1 = 14                                                               # STEP 53
avl1 == avl2                                                            # STEP 54
avl0.insert(int1)                                                       # STEP 55
int3 = 3                                                                # STEP 56
int1 = 12                                                               # STEP 57
avl0.insert(int2)                                                       # STEP 58
avl0.insert(int0)                                                       # STEP 59
avl2.insert(int2)                                                       # STEP 60
int0 = 7                                                                # STEP 61
avl0.insert(int3)                                                       # STEP 62
avl2.insert(int0)                                                       # STEP 63
int3 = 1                                                                # STEP 64
avl2 == avl2                                                            # STEP 65
avl1.insert(int0)                                                       # STEP 66
int0 = 8                                                                # STEP 67
result = avl2.find(int0)                                                # STEP 68
int0 = 20                                                               # STEP 69
int2 = 17                                                               # STEP 70
avl2.insert(int1)                                                       # STEP 71
avl2 == avl1                                                            # STEP 72
avl0.delete(int2)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10222e2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
182 BRANCHES COVERED
135 STATEMENTS COVERED

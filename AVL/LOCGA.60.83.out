Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62505.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([5, 10, 11, 16, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bcc6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 59 steps

SAVING TEST AS failure.62505.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 2
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 10                                                                # STEP 3
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 4
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 5
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 9                                                                 # STEP 9
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 10
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int3 = 4                                                                # STEP 16
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 20
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 6                                                                # STEP 21
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 10]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 20                                                               # STEP 25
ACTION: int0 = 20 
int0 = 17 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 26
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 27
ACTION: int2 = 5 
int2 = 16 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([16, 17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 11                                                               # STEP 30
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([16, 17, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 10, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl1                                                            # STEP 36
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF2 = set([16, 17, 10, 5]) : <type 'set'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([16, 17, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([16, 17, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17, 10, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([16, 17, 10, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 10, 11, 16, 17, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 41
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([5, 10, 11, 16, 17, 20]) : <type 'set'>
  16 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([5, 10, 11, 16, 17, 20])
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 43
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([5, 10, 11, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([10, 11, 16, 17, 20]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 44
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 20]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 46
ACTION: int0 = 17 
int0 = 20 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 47
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 48
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10, 11, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 12                                                               # STEP 49
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 50
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 11, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10, 11, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 11, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 52
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10, 11, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([10, 16, 17, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 53
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 6                                                                # STEP 54
ACTION: int2 = 6 
int2 = 18 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 55
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7c710> : <type 'instance'>
avl_REF2 = set([10, 16, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 56
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 11, 20]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 57
ACTION: int0 = 18 
int0 = 17 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a87290> : <type 'instance'>
avl_REF1 = set([16, 17, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 17, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10178e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ef2c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.62505.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102e7f560> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102e7f560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x102e7f560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                  # STEP 4
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 19                                                                # STEP 5
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 2                                                                 # STEP 9
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 11
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 10                                                               # STEP 12
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 14
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 19                                                               # STEP 17
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 18
ACTION: int0 = 4 
int0 = 19 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 14                                                               # STEP 22
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 24
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 19, 4]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 28
ACTION: int3 = 7 
int3 = 19 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 9                                                                # STEP 32
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 33
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 34
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 19, 4, 14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 37
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a66a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 38
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 12                                                               # STEP 39
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a66a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([10, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12, 10, 19, 4, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 42
ACTION: int0 = 4 
int0 = 14 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([12, 10, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 15                                                               # STEP 44
ACTION: int3 = 15 
int3 = 9 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 45
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ef2d88> : <type 'instance'>
avl_REF0 = set([12, 10, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([12, 10, 19, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105059d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 18 [1:1]
---- < 14 [0:0] L
set([2, 7, 8, 10, 14, 18])
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 7, 8, 10, 13, 14, 18])
TEST #3 STEP #71 (0:00:30.083086) Mon May  1 18:41:12 2017 [ 144 stmts 192 branches ]
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 7, 8, 10, 13, 14, 18])
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 7, 8, 10, 13, 14, 18])
  10 [3:-1]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 18 [1:1]
------ < 15 [0:0] L
set([2, 7, 8, 10, 13, 14, 15, 18])
  10 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 7, 8, 10, 13, 14, 18])
  10 [3:-1]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([2, 7, 8, 10, 13, 14, 18, 19])
  10 [3:-1]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([2, 7, 8, 10, 13, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10506be60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.62505.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 2                                                                 # STEP 0
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 7
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 8
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 9                                                                # STEP 11
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 12
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                # STEP 16
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 17
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 3, 12]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 3, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 20, 3, 12]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 24
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102c23bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 27
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 20, 3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c23bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c23bd8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c23bd8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a774d0> : <type 'instance'>
avl_REF1 = set([8, 20, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 20, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a49fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a6b758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.62505.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 2
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 10
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 22
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 25
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 29
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 10                                                               # STEP 31
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 6                                                                # STEP 33
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 34
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 35
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int2)                                                # STEP 37
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 14                                                               # STEP 38
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 6, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 41
ACTION: int2 = 3 
int2 = 6 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 42
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 44
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 47
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 11, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 5                                                                # STEP 51
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 52
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 11, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 54
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 18                                                               # STEP 56
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 12                                                               # STEP 58
ACTION: int2 = 12 
int2 = 3 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 60
ACTION: int1 = 2 
int1 = 5 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 63
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 64
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 12                                                               # STEP 66
ACTION: int1 = 12 
int1 = 2 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 69
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 11, 12, 6, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 15                                                               # STEP 71
ACTION: int0 = 15 
int0 = 18 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 72
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 73
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 74
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 75
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 12, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 76
ACTION: int2 = 15 
int2 = 17 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 77
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 78
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 11, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 79
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.insert(int2)                                                       # STEP 80
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 81
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 82
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([17, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 18, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 83
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 84
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2 == avl0                                                            # STEP 85
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102a6fa70> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 15]) : <type 'set'>
avl_REF0 = set([3, 6, 7, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.delete(int2)                                                       # STEP 86
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1050615f0> : <type 'instance'>
avl_REF2 = set([17, 18, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([17, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050481b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.66105629716 PERCENT COVERED
69.2858839035 TOTAL RUNTIME
7 EXECUTED
425 TOTAL TEST OPERATIONS
22.4581718445 TIME SPENT EXECUTING TEST OPERATIONS
0.0488984584808 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.6474487782 TIME SPENT CHECKING PROPERTIES
45.1056206226 TOTAL TIME SPENT RUNNING SUT
0.00445222854614 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
result = avl2.inorder()                                                  # STEP 2
int2 = 10                                                                # STEP 3
avl2.insert(int2)                                                        # STEP 4
int0 = 17                                                                # STEP 5
avl2.insert(int2)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
result = avl2.inorder()                                                  # STEP 8
int1 = 9                                                                 # STEP 9
int2 = 16                                                               # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl2.delete(int1)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
int3 = 4                                                                # STEP 16
avl2.insert(int0)                                                       # STEP 17
avl1.insert(int2)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
result = avl2.find(int2)                                                # STEP 20
int1 = 6                                                                # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
int0 = 20                                                               # STEP 25
int3 = 11                                                               # STEP 26
int2 = 5                                                                # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl2.delete(int3)                                                       # STEP 29
int3 = 11                                                               # STEP 30
result = avl1.find(int1)                                                # STEP 31
avl2.insert(int2)                                                       # STEP 32
avl1.insert(int0)                                                       # STEP 33
result = avl1.inorder()                                                 # STEP 34
avl1.delete(int1)                                                       # STEP 35
avl2 == avl1                                                            # STEP 36
avl2.delete(int1)                                                       # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl2.insert(int0)                                                       # STEP 39
avl2.insert(int3)                                                       # STEP 40
avl2.display()                                                          # STEP 41
avl1.insert(int1)                                                       # STEP 42
avl2.delete(int2)                                                       # STEP 43
int2 = 18                                                               # STEP 44
avl1.delete(int1)                                                       # STEP 45
int0 = 17                                                               # STEP 46
int1 = 15                                                               # STEP 47
result = avl2.find(int1)                                                # STEP 48
int1 = 12                                                               # STEP 49
avl1.insert(int3)                                                       # STEP 50
avl2.insert(int2)                                                       # STEP 51
avl2.delete(int3)                                                       # STEP 52
avl1.insert(int3)                                                       # STEP 53
int2 = 6                                                                # STEP 54
result = avl2.find(int0)                                                # STEP 55
avl1.insert(int0)                                                       # STEP 56
int0 = 18                                                               # STEP 57
avl1.delete(int3)                                                       # STEP 58
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10178e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
result = avl0.inorder()                                                  # STEP 3
result = avl0.inorder()                                                  # STEP 4
int0 = 19                                                                # STEP 5
avl0.insert(int0)                                                        # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.insert(int0)                                                        # STEP 8
int1 = 2                                                                 # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl0 == avl0                                                            # STEP 11
int2 = 10                                                               # STEP 12
result = avl0.find(int2)                                                # STEP 13
avl0.delete(int0)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
int3 = 19                                                               # STEP 17
int0 = 4                                                                # STEP 18
avl0.insert(int3)                                                       # STEP 19
avl0.insert(int0)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
int0 = 14                                                               # STEP 22
avl0.delete(int0)                                                       # STEP 23
result = avl0.find(int3)                                                # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
int3 = 7                                                                # STEP 28
avl0.delete(int3)                                                       # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl0.delete(int0)                                                       # STEP 31
int3 = 9                                                                # STEP 32
result = avl0.find(int3)                                                # STEP 33
result = avl0.find(int3)                                                # STEP 34
avl0.delete(int1)                                                       # STEP 35
avl0.insert(int0)                                                       # STEP 36
avl1 = avl.AVLTree()                                                    # STEP 37
avl0.delete(int3)                                                       # STEP 38
int2 = 12                                                               # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
int0 = 4                                                                # STEP 42
avl0.delete(int3)                                                       # STEP 43
int3 = 15                                                               # STEP 44
int1 = 2                                                                # STEP 45
avl0.delete(int0)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105059d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int3 = 2                                                                 # STEP 0
int1 = 5                                                                 # STEP 1
int2 = 8                                                                 # STEP 2
int0 = 16                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
int2 = 12                                                                # STEP 7
int3 = 6                                                                 # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
int2 = 9                                                                # STEP 11
int1 = 20                                                               # STEP 12
avl1.delete(int3)                                                       # STEP 13
result = avl1.find(int3)                                                # STEP 14
avl1.delete(int2)                                                       # STEP 15
int2 = 9                                                                # STEP 16
int3 = 3                                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
result = avl1.find(int0)                                                # STEP 19
avl1.delete(int3)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl2 = avl.AVLTree()                                                    # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
result = avl1.find(int2)                                                # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl2.delete(int0)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a49fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
avl0 = avl.AVLTree()                                                     # STEP 0
int2 = 7                                                                 # STEP 1
result = avl0.find(int2)                                                 # STEP 2
avl0.delete(int2)                                                        # STEP 3
avl0.delete(int2)                                                        # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
avl0.insert(int2)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.insert(int2)                                                        # STEP 9
avl0 == avl0                                                            # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.insert(int2)                                                       # STEP 18
avl0.delete(int2)                                                       # STEP 19
avl0.delete(int2)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
int2 = 11                                                               # STEP 22
avl0.delete(int2)                                                       # STEP 23
avl0.delete(int2)                                                       # STEP 24
result = avl0.find(int2)                                                # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl0.delete(int2)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
result = avl0.find(int2)                                                # STEP 29
avl0.insert(int2)                                                       # STEP 30
int2 = 10                                                               # STEP 31
result = avl0.find(int2)                                                # STEP 32
int2 = 6                                                                # STEP 33
int3 = 6                                                                # STEP 34
int1 = 19                                                               # STEP 35
result = avl0.inorder()                                                 # STEP 36
result = avl0.find(int2)                                                # STEP 37
int0 = 14                                                               # STEP 38
avl0.insert(int2)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
int2 = 3                                                                # STEP 41
result = avl0.find(int2)                                                # STEP 42
avl0.delete(int0)                                                       # STEP 43
avl0 == avl0                                                            # STEP 44
avl0.delete(int1)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
avl0 == avl0                                                            # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl0.insert(int3)                                                       # STEP 49
result = avl0.inorder()                                                 # STEP 50
int1 = 5                                                                # STEP 51
avl0.insert(int2)                                                       # STEP 52
avl0.delete(int3)                                                       # STEP 53
avl0.delete(int1)                                                       # STEP 54
avl0.delete(int3)                                                       # STEP 55
int0 = 18                                                               # STEP 56
avl0.insert(int2)                                                       # STEP 57
int2 = 12                                                               # STEP 58
avl0.insert(int3)                                                       # STEP 59
int1 = 2                                                                # STEP 60
avl0.delete(int2)                                                       # STEP 61
avl0.delete(int1)                                                       # STEP 62
avl2 = avl.AVLTree()                                                    # STEP 63
int2 = 17                                                               # STEP 64
result = avl0.inorder()                                                 # STEP 65
int1 = 12                                                               # STEP 66
result = avl2.inorder()                                                 # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl0.insert(int1)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
int0 = 15                                                               # STEP 71
avl2.delete(int0)                                                       # STEP 72
avl2.insert(int2)                                                       # STEP 73
int0 = 20                                                               # STEP 74
avl0.delete(int1)                                                       # STEP 75
int2 = 15                                                               # STEP 76
avl2.delete(int3)                                                       # STEP 77
avl0.insert(int2)                                                       # STEP 78
avl0 == avl0                                                            # STEP 79
avl2.insert(int2)                                                       # STEP 80
avl0.delete(int0)                                                       # STEP 81
avl2.insert(int0)                                                       # STEP 82
avl0.insert(int2)                                                       # STEP 83
avl0.insert(int3)                                                       # STEP 84
avl2 == avl0                                                            # STEP 85
avl2.delete(int2)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050481b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
198 BRANCHES COVERED
148 STATEMENTS COVERED

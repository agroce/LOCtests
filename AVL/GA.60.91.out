Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14987.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  4 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 10 [1:0]
---- < 8 [0:0] L
---- > 12 [0:0] L
set([1, 2, 4, 8, 10, 12])
TEST #3 STEP #78 (0:00:30.024452) Sun Apr 30 05:27:09 2017 [ 161 stmts 214 branches ]
  16 [3:1]
-- < 6 [2:1]
---- < 4 [1:0]
------ < 2 [0:0] L
------ > 5 [0:0] L
---- > 11 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([2, 4, 5, 6, 11, 16, 17, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d98368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.14987.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 2
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 3
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 13                                                                # STEP 6
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int3 = 12                                                                # STEP 8
ACTION: int3 = 12 
int3 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 12]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 10
ACTION: int1 = 18 
int1 = 9 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 10                                                               # STEP 12
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 10, 12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 8                                                                # STEP 15
ACTION: int1 = 8 
int1 = 10 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 17
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 20
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 21
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 10]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 23
ACTION: int1 = 10 
int1 = 4 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 24
ACTION: int3 = 17 
int3 = 12 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 26
ACTION: int2 = 4 
int2 = 8 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 28
ACTION: int1 = 6 
int1 = 10 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 17                                                               # STEP 30
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 16                                                               # STEP 33
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 34
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 35
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 36
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1 == avl2                                                            # STEP 37
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 38
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 40
ACTION: int0 = 7 
int0 = 16 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 41
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 45
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 2                                                                # STEP 46
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 47
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 48
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 49
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 20                                                               # STEP 50
ACTION: int2 = 20 
int2 = 4 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 51
ACTION: int0 = 18 
int0 = 7 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 52
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 5                                                                # STEP 53
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 10, 5]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 56
ACTION: int3 = 11 
int3 = 2 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 57
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1051d29e0> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 10, 18, 5]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 59
ACTION: int0 = 13 
int0 = 18 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 60
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 11, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 61
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 14                                                               # STEP 62
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 63
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1051d04d0> : <type 'instance'>
avl_REF0 = set([17, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1051ef560> : <type 'instance'>
avl_REF2 = set([9, 10, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9, 10, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051dbdd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 27
STOPPING TESTING DUE TO TIMEOUT
8.57332009268 PERCENT COVERED
60.2400090694 TOTAL RUNTIME
6 EXECUTED
492 TOTAL TEST OPERATIONS
26.3351035118 TIME SPENT EXECUTING TEST OPERATIONS
0.020170211792 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.5694742203 TIME SPENT CHECKING PROPERTIES
52.9045777321 TOTAL TIME SPENT RUNNING SUT
0.00482320785522 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int3 = 12                                                                # STEP 1
int0 = 3                                                                 # STEP 2
int1 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
int0 = 13                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
int3 = 12                                                                # STEP 8
avl2.insert(int1)                                                        # STEP 9
int1 = 18                                                               # STEP 10
avl2.delete(int1)                                                       # STEP 11
int1 = 10                                                               # STEP 12
avl2.insert(int1)                                                       # STEP 13
result = avl2.inorder()                                                 # STEP 14
int1 = 8                                                                # STEP 15
result = avl2.find(int2)                                                # STEP 16
int2 = 8                                                                # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.delete(int1)                                                       # STEP 19
int1 = 4                                                                # STEP 20
result = avl2.find(int1)                                                # STEP 21
avl2.delete(int3)                                                       # STEP 22
int1 = 10                                                               # STEP 23
int3 = 17                                                               # STEP 24
result = avl2.find(int2)                                                # STEP 25
int2 = 4                                                                # STEP 26
result = avl2.find(int1)                                                # STEP 27
int1 = 6                                                                # STEP 28
avl2.delete(int1)                                                       # STEP 29
int1 = 17                                                               # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.delete(int3)                                                       # STEP 32
int0 = 16                                                               # STEP 33
avl1 = avl.AVLTree()                                                    # STEP 34
int3 = 15                                                               # STEP 35
avl2 == avl1                                                            # STEP 36
avl1 == avl2                                                            # STEP 37
avl0 = avl.AVLTree()                                                    # STEP 38
avl1.insert(int0)                                                       # STEP 39
int0 = 7                                                                # STEP 40
avl0.delete(int2)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
result = avl2.find(int3)                                                # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl0.delete(int0)                                                       # STEP 45
int3 = 2                                                                # STEP 46
int1 = 3                                                                # STEP 47
avl0.insert(int0)                                                       # STEP 48
avl2.delete(int1)                                                       # STEP 49
int2 = 20                                                               # STEP 50
int0 = 18                                                               # STEP 51
avl2.delete(int3)                                                       # STEP 52
int1 = 5                                                                # STEP 53
avl1.delete(int1)                                                       # STEP 54
avl2.insert(int1)                                                       # STEP 55
int3 = 11                                                               # STEP 56
avl0 == avl1                                                            # STEP 57
avl2.insert(int0)                                                       # STEP 58
int0 = 13                                                               # STEP 59
avl0.insert(int3)                                                       # STEP 60
avl2.delete(int0)                                                       # STEP 61
int0 = 14                                                               # STEP 62
avl0.delete(int1)                                                       # STEP 63
avl2.delete(int1)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051dbdd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

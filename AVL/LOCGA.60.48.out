Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62264.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([2, 4, 9, 12, 13, 19])
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([2, 4, 9, 12, 13, 19])
  12 [3:1]
-- < 4 [2:-1]
---- < 2 [0:0] L
---- > 9 [1:-1]
------ > 10 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([2, 4, 9, 10, 12, 13, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1022c6d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.62264.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 12                                                                # STEP 0
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 1
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 12]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 19                                                                # STEP 8
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 2                                                                # STEP 10
ACTION: int2 = 2 
int2 = 4 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 2, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 16
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([4, 2, 19]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 21
ACTION: int2 = 8 
int2 = 2 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 13                                                               # STEP 24
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 25
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 1                                                                # STEP 29
ACTION: int0 = 1 
int0 = 12 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 2, 19, 12, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 31
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 32
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 35
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([4, 2, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 4, 9, 12, 19]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 38
ACTION: int0 = 10 
int0 = 1 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 42
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.display()                                                          # STEP 43
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 9, 12, 13, 19])
==================================================
avl1.insert(int3)                                                       # STEP 44
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 45
ACTION: result = avl1.find(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 1                                                                # STEP 49
ACTION: int2 = 1 
int2 = 8 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 50
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
  12 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 9, 12, 13, 19])
==================================================
int3 = 10                                                               # STEP 51
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 52
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 53
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 54
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 4, 9, 12, 13, 19]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 55
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 57
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 58
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 59
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 4, 9, 10, 12, 13, 19]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 61
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 10, 12, 13, 19]) : <type 'set'>
  12 [3:1]
-- < 4 [2:-1]
---- < 2 [0:0] L
---- > 9 [1:-1]
------ > 10 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 4, 9, 10, 12, 13, 19])
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 10, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 4, 9, 10, 12, 13, 19]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 64
ACTION: int2 = 18 
int2 = 1 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 65
ACTION: int1 = 1 
int1 = 1 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 66
ACTION: int3 = 8 
int3 = 10 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 67
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 68
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 9, 10, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 4, 8, 9, 10, 12, 13, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 69
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102194a28> : <type 'instance'>
avl_REF1 = set([2, 4, 8, 9, 10, 12, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 4, 8, 9, 10, 12, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102349170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:35.103123) Mon May  1 18:05:11 2017 [ 157 stmts 208 branches ]
  11 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 8 [0:0] L
-- > 13 [1:-1]
---- > 14 [0:0] L
set([4, 5, 8, 11, 13, 14])
  8 [2:0]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 14 [0:0] L
set([4, 5, 8, 11, 13, 14])
  8 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 14 [1:-1]
------ > 18 [0:0] L
set([4, 5, 8, 11, 13, 14, 18])
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([4, 5, 7, 8, 11, 13, 14, 16])
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([4, 5, 7, 8, 11, 13, 14, 16])
  8 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:-1]
---- < 11 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([1, 4, 5, 8, 11, 13, 14, 16])
  8 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([1, 4, 5, 8, 10, 11, 13, 14, 16])
  8 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([1, 4, 5, 8, 10, 11, 13, 14, 16])
  8 [3:-1]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:0]
---- < 10 [1:0]
------ < 9 [0:0] L
------ > 11 [0:0] L
---- > 16 [1:1]
------ < 14 [0:0] L
set([1, 4, 5, 8, 9, 10, 11, 13, 14, 16])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 39
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2763798237 TOTAL RUNTIME
6 EXECUTED
509 TOTAL TEST OPERATIONS
26.2992572784 TIME SPENT EXECUTING TEST OPERATIONS
0.055543422699 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4335916042 TIME SPENT CHECKING PROPERTIES
52.7328488827 TOTAL TIME SPENT RUNNING SUT
0.00391674041748 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 12                                                                # STEP 0
int2 = 4                                                                 # STEP 1
int3 = 6                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl1.insert(int2)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
avl1.delete(int3)                                                        # STEP 7
int1 = 19                                                                # STEP 8
result = avl1.inorder()                                                  # STEP 9
int2 = 2                                                                # STEP 10
avl1.delete(int1)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1.delete(int3)                                                       # STEP 13
result = avl1.inorder()                                                 # STEP 14
result = avl1.inorder()                                                 # STEP 15
result = avl1.find(int0)                                                # STEP 16
result = avl1.find(int1)                                                # STEP 17
avl1.insert(int1)                                                       # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1.delete(int0)                                                       # STEP 20
int2 = 8                                                                # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1.insert(int1)                                                       # STEP 23
int3 = 13                                                               # STEP 24
result = avl1.find(int0)                                                # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
int0 = 1                                                                # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int1)                                                       # STEP 31
result = avl1.find(int0)                                                # STEP 32
avl1.delete(int0)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
int1 = 9                                                                # STEP 35
avl1.delete(int0)                                                       # STEP 36
avl1.insert(int1)                                                       # STEP 37
int0 = 10                                                               # STEP 38
avl1.delete(int3)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl1.insert(int3)                                                       # STEP 41
result = avl1.find(int3)                                                # STEP 42
avl1.display()                                                          # STEP 43
avl1.insert(int3)                                                       # STEP 44
result = avl1.find(int3)                                                # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl1.delete(int2)                                                       # STEP 47
avl1.insert(int1)                                                       # STEP 48
int2 = 1                                                                # STEP 49
avl1.display()                                                          # STEP 50
int3 = 10                                                               # STEP 51
int1 = 1                                                                # STEP 52
avl1 == avl1                                                            # STEP 53
avl1.insert(int2)                                                       # STEP 54
avl1.insert(int2)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl1.delete(int3)                                                       # STEP 57
avl1.delete(int1)                                                       # STEP 58
avl1.delete(int1)                                                       # STEP 59
avl1.insert(int0)                                                       # STEP 60
avl1.display()                                                          # STEP 61
avl1.delete(int0)                                                       # STEP 62
avl1.insert(int3)                                                       # STEP 63
int2 = 18                                                               # STEP 64
int1 = 1                                                                # STEP 65
int3 = 8                                                                # STEP 66
int0 = 13                                                               # STEP 67
avl1.insert(int3)                                                       # STEP 68
avl1.delete(int0)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102349170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.296.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #78 (0:00:30.027057) Fri Apr 28 06:00:08 2017 [ 135 stmts 182 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e841b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.296.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 8                                                                 # STEP 0
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 6
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 1                                                                 # STEP 7
ACTION: int1 = 1 
int1 = 8 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 10
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 11
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 15
ACTION: int1 = 9 
int1 = 4 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 8                                                                # STEP 18
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 5                                                                # STEP 20
ACTION: int1 = 5 
int1 = 9 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 19                                                               # STEP 24
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 8]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 30
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 31
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103990998> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 32
ACTION: int2 = 14 
int2 = 19 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 9                                                                # STEP 35
ACTION: int3 = 9 
int3 = 8 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 36
ACTION: int0 = 11 
int0 = 13 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([13, 5]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 39
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 40
ACTION: int2 = 3 
int2 = 14 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 8, 9]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 13, 5]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 44
ACTION: int0 = 20 
int0 = 11 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 45
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
avl_REF2 = set([16, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int1 = 9                                                                # STEP 48
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 4, 20]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 18                                                               # STEP 53
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 54
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3, 4, 20]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 55
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 56
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 19                                                               # STEP 57
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 58
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 59
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 20                                                               # STEP 60
ACTION: int0 = 20 
int0 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 61
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 8]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 62
ACTION: int1 = 19 
int1 = 9 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 63
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2 == avl0                                                            # STEP 64
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF2 = set([16, 8]) : <type 'set'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int3 = 17                                                               # STEP 65
ACTION: int3 = 17 
int3 = 13 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 66
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int0)                                                # STEP 67
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 68
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103b962d8> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b84b48> : <type 'instance'>
avl_REF2 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 8, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 70
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103bc2cf8> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([9, 3, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ed88c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 18
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.170263052 TOTAL RUNTIME
8 EXECUTED
689 TOTAL TEST OPERATIONS
27.1585915089 TIME SPENT EXECUTING TEST OPERATIONS
0.0229182243347 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.3155026436 TIME SPENT CHECKING PROPERTIES
54.4740941525 TOTAL TIME SPENT RUNNING SUT
0.00451397895813 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 8                                                                 # STEP 0
int3 = 17                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int0 = 16                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
result = avl0.find(int1)                                                 # STEP 6
int1 = 1                                                                 # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.insert(int1)                                                        # STEP 9
int2 = 4                                                                # STEP 10
int1 = 4                                                                # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
avl0.delete(int0)                                                       # STEP 13
avl1.insert(int1)                                                       # STEP 14
int1 = 9                                                                # STEP 15
avl1.insert(int1)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
int3 = 8                                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
int1 = 5                                                                # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
int2 = 19                                                               # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl2.insert(int0)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
int0 = 13                                                               # STEP 30
avl0 = avl.AVLTree()                                                    # STEP 31
int2 = 14                                                               # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
int3 = 9                                                                # STEP 35
int0 = 11                                                               # STEP 36
avl2.delete(int2)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
result = avl0.find(int2)                                                # STEP 39
int2 = 3                                                                # STEP 40
avl1.delete(int1)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl0.insert(int0)                                                       # STEP 43
int0 = 20                                                               # STEP 44
avl1 == avl2                                                            # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl2.insert(int3)                                                       # STEP 47
int1 = 9                                                                # STEP 48
avl1.insert(int0)                                                       # STEP 49
result = avl0.find(int0)                                                # STEP 50
avl1.insert(int1)                                                       # STEP 51
result = avl0.inorder()                                                 # STEP 52
int3 = 18                                                               # STEP 53
avl1.insert(int2)                                                       # STEP 54
result = avl2.find(int0)                                                # STEP 55
result = avl1.find(int3)                                                # STEP 56
int2 = 19                                                               # STEP 57
int3 = 13                                                               # STEP 58
result = avl1.inorder()                                                 # STEP 59
int0 = 20                                                               # STEP 60
avl2.delete(int1)                                                       # STEP 61
int1 = 19                                                               # STEP 62
avl0.insert(int3)                                                       # STEP 63
avl2 == avl0                                                            # STEP 64
int3 = 17                                                               # STEP 65
avl1 == avl1                                                            # STEP 66
result = avl0.find(int0)                                                # STEP 67
result = avl0.inorder()                                                 # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl1.delete(int0)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ed88c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

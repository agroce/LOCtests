Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.98861.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c4df38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.98861.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 2
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 3
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                             # STEP 4
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 10                                                                # STEP 5
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 18                                                               # STEP 11
ACTION: int2 = 18 
int2 = 10 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1049a4518> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 15
ACTION: int3 = 3 
int3 = 1 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 4                                                                # STEP 17
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 3]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 20
ACTION: int3 = 3 
int3 = 3 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 21
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 10                                                               # STEP 23
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 18, 3]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 3]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 1, 3]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 30
ACTION: int2 = 11 
int2 = 18 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 1, 3, 11]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([19, 1, 3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 34
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([19, 1]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 36
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 39
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 1, 11]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 41
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([19, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 1, 10, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 43
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 1, 10, 11, 3]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 44
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 11, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 12                                                               # STEP 46
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 11, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([19, 1, 10, 11]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 52
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104e823f8> : <type 'instance'>
avl_REF1 = set([19, 1, 10, 11]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 54
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 8                                                                # STEP 55
ACTION: int2 = 8 
int2 = 15 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 12, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 6                                                                # STEP 63
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 64
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 65
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 66
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 67
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 68
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 69
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 71
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 12, 6, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 72
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int2)                                                       # STEP 73
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f48f38> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 74
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f23a28> : <type 'instance'>
avl_REF2 = set([10, 12, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a8a998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a8c5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 20 steps

SAVING TEST AS failure.98861.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 19                                                                # STEP 0
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 1
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 6
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 10
ACTION: int3 = 3 
int3 = 3 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 3, 4]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 18, 3, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 18, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8cd40> : <type 'instance'>
avl_REF2 = set([8, 18, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 18, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f72830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  11 [2:0]
-- < 8 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 12 [1:-1]
---- > 14 [0:0] L
set([5, 8, 10, 11, 12, 14])
  11 [2:0]
-- < 8 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 12 [1:-1]
---- > 14 [0:0] L
set([5, 8, 10, 11, 12, 14])
  11 [2:0]
-- < 8 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 12 [1:-1]
---- > 14 [0:0] L
set([5, 8, 10, 11, 12, 14])
TEST #5 STEP #13 (0:00:30.058405) Fri Apr 28 03:14:09 2017 [ 163 stmts 218 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aadef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 15 steps

SAVING TEST AS failure.98861.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 1
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 2
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int2 = 20                                                                # STEP 9
ACTION: int2 = 20 
int2 = 10 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 6]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 11
ACTION: int0 = 12 
int0 = 6 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 20, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 18, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a0f680> : <type 'instance'>
avl_REF2 = set([4, 18, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 18, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f594d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab4320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.98861.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 8                                                                 # STEP 0
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 1
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 3
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = 13 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 18                                                                # STEP 8
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 10
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 12, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 7                                                                # STEP 18
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 19
ACTION: int0 = 16 
int0 = 18 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 20
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 12, 13, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 12, 13]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 3                                                                # STEP 28
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 29
ACTION: int2 = 10 
int2 = 6 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 30
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 16, 12, 13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 16, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 16, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 12                                                               # STEP 35
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 16, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 37
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([8, 16, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 40
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 44
ACTION: int3 = 8 
int3 = 3 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 9                                                                # STEP 47
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 48
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 14                                                               # STEP 51
ACTION: int1 = 14 
int1 = 9 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 8                                                                # STEP 53
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 54
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 8, 9, 13, 16]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 55
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 56
ACTION: int0 = 17 
int0 = 12 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 57
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([3, 9, 12, 13, 16]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 59
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104abaa70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 60
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 3                                                                # STEP 61
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 62
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 63
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104abaa70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab4878> : <type 'instance'>
avl_REF2 = set([3, 9, 12, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 12, 13, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104abb950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ab9830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.98861.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 6
ACTION: int0 = 14 
int0 = 20 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 10
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 12
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 16
ACTION: int3 = 13 
int3 = 7 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 18
ACTION: int2 = 8 
int2 = 1 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 19
ACTION: int1 = 1 
int1 = 3 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 21
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 23
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 11                                                               # STEP 24
ACTION: int3 = 11 
int3 = 13 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([8, 1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 28
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 29
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 32
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 20                                                               # STEP 36
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 42
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 19]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 44
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 14                                                               # STEP 47
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 48
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 49
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 50
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 1, 19, 20, 17]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 9                                                                # STEP 52
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 56
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 19, 20, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 57
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 19, 20, 9, 17]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 58
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 59
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 60
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 61
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab9b00> : <type 'instance'>
avl_REF0 = set([11, 1, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f82d88> : <type 'instance'>
avl_REF1 = set([1, 19, 20, 9, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 20, 9, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f6c998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
8.65580448065 PERCENT COVERED
60.2043910027 TOTAL RUNTIME
9 EXECUTED
567 TOTAL TEST OPERATIONS
21.0595722198 TIME SPENT EXECUTING TEST OPERATIONS
0.0655045509338 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.1881945133 TIME SPENT CHECKING PROPERTIES
42.2477667332 TOTAL TIME SPENT RUNNING SUT
0.00545382499695 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
int0 = 12                                                                # STEP 1
int3 = 1                                                                 # STEP 2
avl1.delete(int0)                                                        # STEP 3
avl1 == avl1                                                             # STEP 4
int2 = 10                                                                # STEP 5
result = avl1.inorder()                                                  # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int2 = 18                                                               # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int3)                                                       # STEP 14
int3 = 3                                                                # STEP 15
avl1.delete(int0)                                                       # STEP 16
int0 = 4                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.insert(int3)                                                       # STEP 19
int3 = 3                                                                # STEP 20
int1 = 19                                                               # STEP 21
result = avl1.inorder()                                                 # STEP 22
int0 = 10                                                               # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.insert(int2)                                                       # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl1.insert(int1)                                                       # STEP 29
int2 = 11                                                               # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl1.delete(int2)                                                       # STEP 33
result = avl1.inorder()                                                 # STEP 34
avl1.delete(int3)                                                       # STEP 35
int1 = 14                                                               # STEP 36
avl1.delete(int0)                                                       # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl2 = avl.AVLTree()                                                    # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl2 == avl1                                                            # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.insert(int3)                                                       # STEP 43
int2 = 15                                                               # STEP 44
avl1.insert(int0)                                                       # STEP 45
int1 = 12                                                               # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
avl2.insert(int2)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl1 = avl.AVLTree()                                                    # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl1.delete(int0)                                                       # STEP 54
int2 = 8                                                                # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl2.delete(int0)                                                       # STEP 57
avl2.insert(int0)                                                       # STEP 58
avl1.insert(int2)                                                       # STEP 59
result = avl2.inorder()                                                 # STEP 60
avl2.delete(int3)                                                       # STEP 61
avl1.delete(int0)                                                       # STEP 62
int2 = 6                                                                # STEP 63
result = avl2.inorder()                                                 # STEP 64
avl1.insert(int1)                                                       # STEP 65
result = avl2.find(int1)                                                # STEP 66
avl2.insert(int1)                                                       # STEP 67
result = avl2.inorder()                                                 # STEP 68
avl2.delete(int3)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
avl2.insert(int2)                                                       # STEP 71
result = avl2.inorder()                                                 # STEP 72
avl1.insert(int2)                                                       # STEP 73
avl2.delete(int1)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a8a998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 19                                                                # STEP 0
int2 = 4                                                                 # STEP 1
int3 = 3                                                                 # STEP 2
int1 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 8                                                                 # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
int3 = 3                                                                # STEP 10
avl2.delete(int2)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.insert(int3)                                                       # STEP 15
result = avl2.find(int2)                                                # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.delete(int0)                                                       # STEP 18
avl2.delete(int3)                                                       # STEP 19
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f72830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int3 = 4                                                                 # STEP 0
int2 = 10                                                                # STEP 1
int0 = 6                                                                 # STEP 2
int1 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int2)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
int2 = 20                                                                # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 12                                                               # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.insert(int3)                                                       # STEP 13
avl2.delete(int2)                                                       # STEP 14
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f594d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int3 = 8                                                                 # STEP 0
int0 = 13                                                                # STEP 1
int2 = 12                                                                # STEP 2
int1 = 6                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
int0 = 18                                                                # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 18                                                                # STEP 8
avl2.insert(int2)                                                        # STEP 9
int2 = 13                                                               # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
int3 = 7                                                                # STEP 18
int0 = 16                                                               # STEP 19
int2 = 6                                                                # STEP 20
avl2 == avl2                                                            # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.insert(int1)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
result = avl2.find(int2)                                                # STEP 25
avl2.delete(int3)                                                       # STEP 26
result = avl2.inorder()                                                 # STEP 27
int3 = 3                                                                # STEP 28
int2 = 10                                                               # STEP 29
int1 = 11                                                               # STEP 30
avl2.delete(int2)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
int0 = 12                                                               # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.insert(int3)                                                       # STEP 37
avl2.delete(int2)                                                       # STEP 38
avl2.delete(int1)                                                       # STEP 39
result = avl2.find(int3)                                                # STEP 40
result = avl2.inorder()                                                 # STEP 41
result = avl2.inorder()                                                 # STEP 42
result = avl2.find(int3)                                                # STEP 43
int3 = 8                                                                # STEP 44
avl2.insert(int0)                                                       # STEP 45
result = avl2.inorder()                                                 # STEP 46
int1 = 9                                                                # STEP 47
result = avl2.find(int3)                                                # STEP 48
avl2.insert(int1)                                                       # STEP 49
avl2.delete(int2)                                                       # STEP 50
int1 = 14                                                               # STEP 51
avl2.delete(int2)                                                       # STEP 52
int2 = 8                                                                # STEP 53
avl2.delete(int0)                                                       # STEP 54
avl2.insert(int0)                                                       # STEP 55
int0 = 17                                                               # STEP 56
avl2.delete(int1)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
avl0 = avl.AVLTree()                                                    # STEP 59
avl2.delete(int0)                                                       # STEP 60
int3 = 3                                                                # STEP 61
result = avl2.find(int2)                                                # STEP 62
avl0.insert(int1)                                                       # STEP 63
avl2.delete(int3)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104abb950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 4
int3 = 7                                                                 # STEP 0
int2 = 1                                                                 # STEP 1
int1 = 3                                                                 # STEP 2
int0 = 20                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 14                                                                # STEP 6
avl0.delete(int0)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.delete(int0)                                                       # STEP 10
avl0.delete(int1)                                                       # STEP 11
result = avl0.find(int3)                                                # STEP 12
avl0.insert(int2)                                                       # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl0.delete(int1)                                                       # STEP 15
int3 = 13                                                               # STEP 16
int0 = 19                                                               # STEP 17
int2 = 8                                                                # STEP 18
int1 = 1                                                                # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0 == avl0                                                            # STEP 21
avl0.delete(int3)                                                       # STEP 22
result = avl0.find(int3)                                                # STEP 23
int3 = 11                                                               # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl0.delete(int2)                                                       # STEP 27
avl0 == avl0                                                            # STEP 28
avl1 = avl.AVLTree()                                                    # STEP 29
avl0.insert(int0)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl0.delete(int3)                                                       # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
avl0.insert(int0)                                                       # STEP 35
int0 = 20                                                               # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl0.delete(int2)                                                       # STEP 38
avl0.insert(int3)                                                       # STEP 39
result = avl1.inorder()                                                 # STEP 40
avl0.insert(int3)                                                       # STEP 41
avl0.delete(int2)                                                       # STEP 42
avl1.insert(int1)                                                       # STEP 43
int1 = 17                                                               # STEP 44
avl0.insert(int3)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
int3 = 14                                                               # STEP 47
avl1.insert(int0)                                                       # STEP 48
avl0.delete(int2)                                                       # STEP 49
avl0.insert(int1)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
int2 = 9                                                                # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl1.delete(int2)                                                       # STEP 54
avl0.delete(int1)                                                       # STEP 55
avl1.insert(int1)                                                       # STEP 56
avl1.insert(int2)                                                       # STEP 57
avl1.insert(int1)                                                       # STEP 58
avl0.delete(int3)                                                       # STEP 59
int3 = 19                                                               # STEP 60
result = avl0.find(int0)                                                # STEP 61
avl1.delete(int3)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f6c998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

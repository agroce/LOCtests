Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14969.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 10 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([2, 7, 10, 11, 15, 20])
TEST #3 STEP #76 (0:00:30.068321) Sun Apr 30 05:25:07 2017 [ 158 stmts 210 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d8bb00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.14969.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 11                                                                # STEP 9
ACTION: int1 = 11 
int1 = 18 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 11]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 12
ACTION: int0 = 17 
int0 = 12 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 13
ACTION: int2 = 8 
int2 = 6 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 14
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 18, 11]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 17
ACTION: int3 = 2 
int3 = 10 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 18
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 20
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 20                                                               # STEP 22
ACTION: int1 = 20 
int1 = 4 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 17                                                               # STEP 24
ACTION: int1 = 17 
int1 = 20 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 26
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 28
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 30
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 18, 11, 17]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 32
ACTION: int2 = 13 
int2 = 7 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 33
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 6                                                                # STEP 34
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 5                                                                # STEP 36
ACTION: int1 = 5 
int1 = 17 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 38
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 39
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 18, 11, 2, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 43
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 44
ACTION: int0 = 11 
int0 = 17 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 45
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 46
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 47
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 48
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 2, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 3                                                                # STEP 49
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 50
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
avl_REF2 = set([9, 18, 11, 2, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int2)                                                # STEP 51
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 52
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 53
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 2, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 54
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 2                                                                # STEP 55
ACTION: int1 = 2 
int1 = 3 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 56
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103d05b90> : <type 'instance'>
avl_REF2 = set([9, 18, 11, 2, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 9, 10, 11, 17, 18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 58
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 59
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 11, 5]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 60
ACTION: int3 = 7 
int3 = 10 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 61
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([18, 11, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([18, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 11, 5, 6]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 64
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([18, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 66
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103cf6248> : <type 'instance'>
avl_REF0 = set([18, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb6ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 18
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.2709519863 TOTAL RUNTIME
6 EXECUTED
485 TOTAL TEST OPERATIONS
26.2557241917 TIME SPENT EXECUTING TEST OPERATIONS
0.0198490619659 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4325838089 TIME SPENT CHECKING PROPERTIES
52.6883080006 TOTAL TIME SPENT RUNNING SUT
0.00500345230103 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 6                                                                 # STEP 0
int0 = 12                                                                # STEP 1
int1 = 18                                                                # STEP 2
int3 = 10                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2 == avl2                                                             # STEP 6
avl2.insert(int1)                                                        # STEP 7
avl2.delete(int2)                                                        # STEP 8
int1 = 11                                                                # STEP 9
avl2.delete(int0)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
int0 = 17                                                               # STEP 12
int2 = 8                                                                # STEP 13
int1 = 9                                                                # STEP 14
avl2.insert(int1)                                                       # STEP 15
result = avl2.find(int3)                                                # STEP 16
int3 = 2                                                                # STEP 17
int1 = 4                                                                # STEP 18
result = avl2.find(int2)                                                # STEP 19
int2 = 7                                                                # STEP 20
avl2.delete(int1)                                                       # STEP 21
int1 = 20                                                               # STEP 22
avl2.delete(int1)                                                       # STEP 23
int1 = 17                                                               # STEP 24
result = avl2.find(int2)                                                # STEP 25
result = avl2.find(int0)                                                # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl0 = avl.AVLTree()                                                    # STEP 28
result = avl2.inorder()                                                 # STEP 29
avl2 == avl2                                                            # STEP 30
avl2.insert(int1)                                                       # STEP 31
int2 = 13                                                               # STEP 32
avl0.delete(int2)                                                       # STEP 33
int2 = 6                                                                # STEP 34
result = avl2.inorder()                                                 # STEP 35
int1 = 5                                                                # STEP 36
result = avl2.find(int2)                                                # STEP 37
int2 = 5                                                                # STEP 38
int0 = 17                                                               # STEP 39
avl0.delete(int0)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
int3 = 13                                                               # STEP 43
int0 = 11                                                               # STEP 44
result = avl0.find(int3)                                                # STEP 45
result = avl0.find(int3)                                                # STEP 46
int3 = 10                                                               # STEP 47
result = avl2.find(int2)                                                # STEP 48
int1 = 3                                                                # STEP 49
avl0 == avl2                                                            # STEP 50
result = avl0.find(int2)                                                # STEP 51
int2 = 18                                                               # STEP 52
result = avl2.find(int1)                                                # STEP 53
result = avl0.inorder()                                                 # STEP 54
int1 = 2                                                                # STEP 55
avl2.insert(int3)                                                       # STEP 56
avl0.delete(int2)                                                       # STEP 57
avl0.insert(int0)                                                       # STEP 58
avl0.insert(int2)                                                       # STEP 59
int3 = 7                                                                # STEP 60
int0 = 6                                                                # STEP 61
result = avl0.inorder()                                                 # STEP 62
avl0.insert(int0)                                                       # STEP 63
int0 = 7                                                                # STEP 64
result = avl0.inorder()                                                 # STEP 65
avl0.delete(int2)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb6ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

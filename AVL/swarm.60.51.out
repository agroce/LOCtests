Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.224.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d347a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.224.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 1
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 2
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
int1 = 20                                                                # STEP 6
ACTION: int1 = 20 
int1 = 3 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl2                                                             # STEP 9
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 15                                                               # STEP 10
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 12, 7]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 13
ACTION: int1 = 1 
int1 = 20 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 3, 12, 7]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 15
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([17, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 17                                                               # STEP 18
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 19
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 20
ACTION: int3 = 8 
int3 = 15 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 21
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl2                                                            # STEP 25
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int1 = 20                                                               # STEP 26
ACTION: int1 = 20 
int1 = 1 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 28
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([15, 17, 3, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 7, 12, 15, 17, 20]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 31
ACTION: int1 = 13 
int1 = 20 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 32
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 14                                                               # STEP 33
ACTION: int0 = 14 
int0 = 17 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 10                                                               # STEP 36
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 19]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 39
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 40
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 41
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 20]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 43
ACTION: int1 = 17 
int1 = 16 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 2                                                                # STEP 45
ACTION: int3 = 2 
int3 = 6 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 3, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2, 19]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 48
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF2 = set([16, 3, 20]) : <type 'set'>
avl_REF0 = set([1, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int2 = 14                                                               # STEP 49
ACTION: int2 = 14 
int2 = 3 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 50
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([1, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2, 19, 17]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 51
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 18                                                               # STEP 52
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 53
ACTION: int3 = 19 
int3 = 2 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 54
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([16, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 55
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 1                                                                # STEP 56
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([1, 2, 19, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 2, 17]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 58
ACTION: int3 = 11 
int3 = 19 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 59
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 11                                                               # STEP 60
ACTION: int1 = 11 
int1 = 18 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 61
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF0 = set([1, 2, 17]) : <type 'set'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int3)                                                       # STEP 62
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([1, 2, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2, 11, 17]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 63
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 64
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF1 = set([3, 7, 10, 12, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 7, 10, 12, 14, 15, 17, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([1, 2, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 1, 2, 11, 17]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 67
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
avl_REF1 = set([3, 7, 10, 12, 14, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int1 = 1                                                                # STEP 68
ACTION: int1 = 1 
int1 = 11 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 69
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 3                                                                # STEP 71
ACTION: int3 = 3 
int3 = 5 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 72
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 73
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2 == avl1                                                            # STEP 74
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10503d3f8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104d03f80> : <type 'instance'>
avl_REF2 = set([16, 3, 20, 14]) : <type 'set'>
avl_REF1 = set([3, 7, 10, 12, 14, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.delete(int1)                                                       # STEP 75
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049643f8> : <type 'instance'>
avl_REF0 = set([19, 1, 2, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19, 2, 11, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049afa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:33.050181) Fri Apr 28 05:48:58 2017 [ 150 stmts 200 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 35
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.224971056 TOTAL RUNTIME
8 EXECUTED
711 TOTAL TEST OPERATIONS
27.1228075027 TIME SPENT EXECUTING TEST OPERATIONS
0.0232145786285 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.3223581314 TIME SPENT CHECKING PROPERTIES
54.4451656342 TOTAL TIME SPENT RUNNING SUT
0.00436592102051 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
int1 = 3                                                                 # STEP 1
int3 = 12                                                                # STEP 2
int0 = 17                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
int1 = 20                                                                # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
avl1 == avl2                                                             # STEP 9
int3 = 15                                                               # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
int1 = 1                                                                # STEP 13
avl1.insert(int0)                                                       # STEP 14
int2 = 1                                                                # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
int0 = 17                                                               # STEP 18
avl0 = avl.AVLTree()                                                    # STEP 19
int3 = 8                                                                # STEP 20
avl2 == avl0                                                            # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1 == avl2                                                            # STEP 25
int1 = 20                                                               # STEP 26
avl0.delete(int3)                                                       # STEP 27
int3 = 19                                                               # STEP 28
avl2.delete(int0)                                                       # STEP 29
avl1.insert(int1)                                                       # STEP 30
int1 = 13                                                               # STEP 31
avl1.delete(int3)                                                       # STEP 32
int0 = 14                                                               # STEP 33
avl0.insert(int3)                                                       # STEP 34
avl2.delete(int1)                                                       # STEP 35
int3 = 10                                                               # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl1.insert(int3)                                                       # STEP 38
int2 = 3                                                                # STEP 39
int1 = 16                                                               # STEP 40
int3 = 6                                                                # STEP 41
avl2.insert(int1)                                                       # STEP 42
int1 = 17                                                               # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 2                                                                # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl2 == avl0                                                            # STEP 48
int2 = 14                                                               # STEP 49
avl0.insert(int1)                                                       # STEP 50
avl1 == avl1                                                            # STEP 51
int1 = 18                                                               # STEP 52
int3 = 19                                                               # STEP 53
avl2.insert(int2)                                                       # STEP 54
avl1 == avl1                                                            # STEP 55
int2 = 1                                                                # STEP 56
avl0.delete(int3)                                                       # STEP 57
int3 = 11                                                               # STEP 58
avl1.delete(int1)                                                       # STEP 59
int1 = 11                                                               # STEP 60
avl0 == avl2                                                            # STEP 61
avl0.insert(int3)                                                       # STEP 62
int3 = 19                                                               # STEP 63
avl1.insert(int0)                                                       # STEP 64
avl2.delete(int1)                                                       # STEP 65
avl0.insert(int3)                                                       # STEP 66
avl2 == avl1                                                            # STEP 67
int1 = 1                                                                # STEP 68
int3 = 5                                                                # STEP 69
avl2.delete(int3)                                                       # STEP 70
int3 = 3                                                                # STEP 71
int0 = 16                                                               # STEP 72
avl2.insert(int3)                                                       # STEP 73
avl2 == avl1                                                            # STEP 74
avl0.delete(int1)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049afa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

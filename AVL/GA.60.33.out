Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14155.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e8f200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.14155.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 20                                                                # STEP 7
ACTION: int3 = 20 
int3 = 19 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 14 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 11
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 12
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 8                                                                # STEP 13
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 15
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 16
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2 == avl1                                                            # STEP 20
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2 == avl1                                                            # STEP 21
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 23
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 12                                                               # STEP 24
ACTION: int2 = 12 
int2 = 2 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12, 20]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 28
ACTION: int2 = 6 
int2 = 12 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 11                                                               # STEP 30
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 31
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 4                                                                # STEP 33
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 35
ACTION: result = avl1.find(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 16                                                               # STEP 36
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 37
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 38
ACTION: int2 = 19 
int2 = 6 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 39
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 20]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 41
ACTION: int2 = 6 
int2 = 19 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 20, 4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 44
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 45
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF2 = set([12, 20, 4]) : <type 'set'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x103aef638> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 48
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 49
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103af8878> : <type 'instance'>
avl_REF2 = set([12, 20, 4]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 51
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 52
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 13                                                               # STEP 53
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 54
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 55
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 57
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 3                                                                # STEP 58
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 59
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 60
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 17                                                               # STEP 61
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 62
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 63
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 3                                                                # STEP 65
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 15]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 67
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 68
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 69
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 3, 15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 70
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038a02d8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 16                                                               # STEP 71
ACTION: int1 = 16 
int1 = 17 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 72
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([17, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17, 3, 15]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 73
ACTION: int1 = 1 
int1 = 16 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 74
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1027b0e18> : <type 'instance'>
avl_REF1 = set([16, 17, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 17, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027295a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:36.462543) Sun Apr 30 03:28:38 2017 [ 148 stmts 195 branches ]
  14 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([3, 9, 10, 14, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038809e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 85 steps

SAVING TEST AS failure.14155.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 1
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 20                                                                # STEP 3
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 4
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                                # STEP 6
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 7
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int2 = 5                                                                 # STEP 9
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 10
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 15                                                               # STEP 12
ACTION: int3 = 15 
int3 = 9 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 13
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 15
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 5]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 18
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 20, 5]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 21
ACTION: int1 = 8 
int1 = 12 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 23
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 15                                                               # STEP 24
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 25
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 26
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 27
ACTION: int3 = 2 
int3 = 15 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 28
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 5                                                                # STEP 29
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 31
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 33
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 3                                                                # STEP 34
ACTION: int0 = 3 
int0 = 5 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 11                                                               # STEP 37
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 38
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 39
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 40
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 41
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 42
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 43
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 45
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 15                                                               # STEP 46
ACTION: int1 = 15 
int1 = 11 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 47
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 15]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 49
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 50
ACTION: int0 = 1 
int0 = 7 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 13                                                               # STEP 53
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 54
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 55
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 18, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([1, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 20                                                               # STEP 57
ACTION: int1 = 20 
int1 = 15 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 58
ACTION: int2 = 13 
int2 = 13 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 59
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 60
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([1, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 62
ACTION: int3 = 5 
int3 = 6 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 63
ACTION: int0 = 13 
int0 = 1 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 64
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([1, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 18, 13, 15]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 65
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1027180e0> : <type 'instance'>
avl_REF0 = set([1, 18, 13, 15]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038b43b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 66
ACTION: int2 = 16 
int2 = 13 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 67
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b43b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 68
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 69
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 70
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 71
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1038b4fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 72
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b4fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 73
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 74
ACTION: int1 = 11 
int1 = 20 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 75
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b43b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 76
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 77
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038b4fc8> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 78
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 7                                                                # STEP 79
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 80
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038b43b0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                               # STEP 81
ACTION: int1 = 17 
int1 = 7 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 82
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 83
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 84
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038a47a0> : <type 'instance'>
avl_REF2 = set([10, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([10, 5, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103864518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.63952333664 PERCENT COVERED
64.9769361019 TOTAL RUNTIME
6 EXECUTED
460 TOTAL TEST OPERATIONS
23.9906926155 TIME SPENT EXECUTING TEST OPERATIONS
0.0189056396484 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.1135394573 TIME SPENT CHECKING PROPERTIES
48.1042320728 TOTAL TIME SPENT RUNNING SUT
0.00478434562683 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 19                                                                # STEP 0
int0 = 14                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int1 = 2                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
avl2.delete(int0)                                                        # STEP 6
int3 = 20                                                                # STEP 7
int0 = 8                                                                 # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
avl2.insert(int3)                                                       # STEP 10
result = avl2.find(int3)                                                # STEP 11
avl2.delete(int1)                                                       # STEP 12
int3 = 8                                                                # STEP 13
avl1.insert(int0)                                                       # STEP 14
int1 = 16                                                               # STEP 15
result = avl1.find(int2)                                                # STEP 16
int0 = 19                                                               # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl2 == avl1                                                            # STEP 20
avl2 == avl1                                                            # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1 == avl1                                                            # STEP 23
int2 = 12                                                               # STEP 24
result = avl2.inorder()                                                 # STEP 25
result = avl1.inorder()                                                 # STEP 26
avl2.insert(int2)                                                       # STEP 27
int2 = 6                                                                # STEP 28
avl2.delete(int1)                                                       # STEP 29
int1 = 11                                                               # STEP 30
result = avl1.find(int1)                                                # STEP 31
avl2.delete(int0)                                                       # STEP 32
int1 = 4                                                                # STEP 33
avl2.insert(int0)                                                       # STEP 34
result = avl1.find(int3)                                                # STEP 35
int0 = 16                                                               # STEP 36
result = avl2.find(int2)                                                # STEP 37
int2 = 19                                                               # STEP 38
int3 = 15                                                               # STEP 39
avl2.delete(int2)                                                       # STEP 40
int2 = 6                                                                # STEP 41
avl2.insert(int1)                                                       # STEP 42
avl1.delete(int1)                                                       # STEP 43
int1 = 15                                                               # STEP 44
avl2 == avl1                                                            # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
int0 = 4                                                                # STEP 48
avl2 = avl.AVLTree()                                                    # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl2 == avl2                                                            # STEP 51
result = avl2.find(int0)                                                # STEP 52
int2 = 13                                                               # STEP 53
avl2.insert(int0)                                                       # STEP 54
int0 = 12                                                               # STEP 55
avl1.insert(int3)                                                       # STEP 56
result = avl1.inorder()                                                 # STEP 57
int3 = 3                                                                # STEP 58
avl2 == avl2                                                            # STEP 59
avl1.insert(int1)                                                       # STEP 60
int1 = 17                                                               # STEP 61
result = avl2.find(int2)                                                # STEP 62
int2 = 8                                                                # STEP 63
avl2.delete(int2)                                                       # STEP 64
int2 = 3                                                                # STEP 65
avl1.insert(int3)                                                       # STEP 66
int3 = 10                                                               # STEP 67
avl2 == avl2                                                            # STEP 68
avl1.insert(int1)                                                       # STEP 69
avl2 == avl2                                                            # STEP 70
int1 = 16                                                               # STEP 71
avl1.insert(int1)                                                       # STEP 72
int1 = 1                                                                # STEP 73
avl1.delete(int2)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027295a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 10                                                                # STEP 0
int2 = 18                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int0 = 20                                                                # STEP 3
int3 = 9                                                                 # STEP 4
avl0.delete(int2)                                                        # STEP 5
int2 = 18                                                                # STEP 6
result = avl0.find(int2)                                                 # STEP 7
avl0.insert(int2)                                                        # STEP 8
int2 = 5                                                                 # STEP 9
result = avl0.find(int3)                                                # STEP 10
result = avl0.inorder()                                                 # STEP 11
int3 = 15                                                               # STEP 12
avl2 = avl.AVLTree()                                                    # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl0 == avl2                                                            # STEP 15
result = avl2.find(int2)                                                # STEP 16
avl2.insert(int1)                                                       # STEP 17
int1 = 12                                                               # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
int1 = 8                                                                # STEP 21
avl0.delete(int0)                                                       # STEP 22
result = avl2.find(int3)                                                # STEP 23
int2 = 15                                                               # STEP 24
avl0 == avl0                                                            # STEP 25
result = avl0.find(int3)                                                # STEP 26
int3 = 2                                                                # STEP 27
result = avl2.find(int2)                                                # STEP 28
int0 = 5                                                                # STEP 29
avl0.delete(int0)                                                       # STEP 30
result = avl0.find(int1)                                                # STEP 31
avl0.delete(int0)                                                       # STEP 32
avl2 == avl2                                                            # STEP 33
int0 = 3                                                                # STEP 34
avl2.delete(int1)                                                       # STEP 35
result = avl0.find(int0)                                                # STEP 36
int1 = 11                                                               # STEP 37
int2 = 11                                                               # STEP 38
int0 = 7                                                                # STEP 39
result = avl0.inorder()                                                 # STEP 40
result = avl0.find(int3)                                                # STEP 41
int3 = 14                                                               # STEP 42
avl0 == avl0                                                            # STEP 43
avl2.delete(int1)                                                       # STEP 44
result = avl0.find(int3)                                                # STEP 45
int1 = 15                                                               # STEP 46
avl2.insert(int0)                                                       # STEP 47
avl0.insert(int1)                                                       # STEP 48
int3 = 6                                                                # STEP 49
int0 = 1                                                                # STEP 50
avl2.delete(int2)                                                       # STEP 51
avl0.insert(int1)                                                       # STEP 52
int2 = 13                                                               # STEP 53
result = avl2.find(int0)                                                # STEP 54
avl0.insert(int0)                                                       # STEP 55
avl0.delete(int2)                                                       # STEP 56
int1 = 20                                                               # STEP 57
int2 = 13                                                               # STEP 58
result = avl2.find(int1)                                                # STEP 59
result = avl0.find(int1)                                                # STEP 60
avl2.delete(int3)                                                       # STEP 61
int3 = 5                                                                # STEP 62
int0 = 13                                                               # STEP 63
avl0.insert(int2)                                                       # STEP 64
avl0 = avl.AVLTree()                                                    # STEP 65
int2 = 16                                                               # STEP 66
avl0.delete(int3)                                                       # STEP 67
result = avl2.find(int2)                                                # STEP 68
int2 = 18                                                               # STEP 69
int3 = 8                                                                # STEP 70
avl1 = avl.AVLTree()                                                    # STEP 71
avl1.insert(int1)                                                       # STEP 72
result = avl2.find(int1)                                                # STEP 73
int1 = 11                                                               # STEP 74
avl0.insert(int3)                                                       # STEP 75
int3 = 3                                                                # STEP 76
avl1.insert(int1)                                                       # STEP 77
result = avl2.inorder()                                                 # STEP 78
int1 = 7                                                                # STEP 79
avl0.delete(int1)                                                       # STEP 80
int1 = 17                                                               # STEP 81
result = avl2.find(int2)                                                # STEP 82
int2 = 20                                                               # STEP 83
avl2.delete(int2)                                                       # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103864518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

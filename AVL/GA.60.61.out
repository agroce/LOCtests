Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14559.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f69518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.14559.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 16                                                                # STEP 0
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 3
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 6
ACTION: result = avl0.find(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 2                                                                 # STEP 7
ACTION: int1 = 2 
int1 = 9 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 8
ACTION: int2 = 16 
int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 9]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 10
ACTION: int2 = 14 
int2 = 16 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 9, 8]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 13
ACTION: int0 = 11 
int0 = 8 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 11                                                               # STEP 16
ACTION: int3 = 11 
int3 = 19 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102a232d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a232d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 19
ACTION: int2 = 8 
int2 = 14 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a232d8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a232d8> : <type 'instance'>
avl_REF2 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 23
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 24
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102b5a878> : <type 'instance'>
avl_REF0 = set([16, 9, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 9, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102928098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #34 (0:00:30.076154) Sun Apr 30 04:25:56 2017 [ 148 stmts 195 branches ]
  7 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 8 [0:0] L
---- > 16 [0:0] L
set([2, 5, 7, 8, 15, 16])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
8.50711684873 PERCENT COVERED
60.273154974 TOTAL RUNTIME
7 EXECUTED
543 TOTAL TEST OPERATIONS
28.5046906471 TIME SPENT EXECUTING TEST OPERATIONS
0.0218985080719 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.7444896698 TIME SPENT CHECKING PROPERTIES
57.2491803169 TOTAL TIME SPENT RUNNING SUT
0.00528192520142 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 16                                                                # STEP 0
int3 = 19                                                                # STEP 1
int1 = 9                                                                 # STEP 2
int0 = 8                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
result = avl0.find(int2)                                                 # STEP 6
int1 = 2                                                                 # STEP 7
int2 = 16                                                                # STEP 8
avl0.insert(int2)                                                        # STEP 9
int2 = 14                                                               # STEP 10
result = avl0.inorder()                                                 # STEP 11
avl0.insert(int0)                                                       # STEP 12
int0 = 11                                                               # STEP 13
avl0.delete(int3)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
int3 = 11                                                               # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
avl2.insert(int2)                                                       # STEP 18
int2 = 8                                                                # STEP 19
avl2.insert(int1)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl0.insert(int3)                                                       # STEP 22
int1 = 10                                                               # STEP 23
int3 = 19                                                               # STEP 24
avl0.delete(int2)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102928098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

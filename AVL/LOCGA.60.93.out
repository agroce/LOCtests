Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62579.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b9b098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.62579.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 2
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 7                                                                 # STEP 3
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                        # STEP 4
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 8                                                                 # STEP 5
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 20                                                               # STEP 12
ACTION: int3 = 20 
int3 = 7 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 13
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 7]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 14
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 15
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 19                                                               # STEP 17
ACTION: int2 = 19 
int2 = 8 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 18
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 19
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 19                                                               # STEP 25
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 27
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 20                                                               # STEP 28
ACTION: int1 = 20 
int1 = 18 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 20, 7]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 34
ACTION: result = avl0.find(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl2                                                            # STEP 35
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 14                                                               # STEP 36
ACTION: int3 = 14 
int3 = 19 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 38
ACTION: result = avl0.find(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl2                                                            # STEP 39
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([14, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 41
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 14, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 14, 7]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 44
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF2 = set([19, 14, 7]) : <type 'set'>
avl_REF0 = set([20, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int3 = 10                                                               # STEP 46
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([20, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([14, 7]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 48
ACTION: int1 = 15 
int1 = 20 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 49
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 14, 7]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 50
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 51
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 54
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 14]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 55
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 56
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 4, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 58
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 59
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 61
ACTION: int1 = 19 
int1 = 4 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 62
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 63
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 64
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([19, 4, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 7, 14, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 65
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 14, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 68
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 69
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([4, 7, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 8                                                                # STEP 70
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 71
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 3, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 72
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([4, 7, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 73
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([8, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 74
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d47e60> : <type 'instance'>
avl_REF2 = set([4, 7, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 75
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1029d95a8> : <type 'instance'>
avl_REF0 = set([8, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 3, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102cbec20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ea97a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.62579.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 8                                                                 # STEP 0
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 3
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 20                                                                # STEP 9
ACTION: int3 = 20 
int3 = 8 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 11
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 12
ACTION: int0 = 10 
int0 = 12 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 13
ACTION: int1 = 1 
int1 = 8 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 15
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 17
ACTION: result = avl2.find(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 10]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 20
ACTION: int1 = 20 
int1 = 1 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 8                                                                # STEP 22
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 10]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 13                                                               # STEP 27
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 10, 13]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 30
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 3                                                                # STEP 33
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 35
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 37
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 4                                                                # STEP 38
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 8, 10, 13, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 44
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([3, 8, 10, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 10, 13, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 10, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 48
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 50
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 51
ACTION: int1 = 8 
int1 = 20 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 52
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 15                                                               # STEP 55
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 56
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 8, 10, 13, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 59
ACTION: int2 = 13 
int2 = 19 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 60
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 61
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 63
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 19, 15]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 64
ACTION: int3 = 9 
int3 = 8 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 65
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 66
ACTION: int1 = 11 
int1 = 15 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 67
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 68
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 2                                                                # STEP 69
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 70
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 71
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 8, 10, 11, 13, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 11, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 8, 10, 11, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 73
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 8, 10, 11, 13, 19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 74
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 75
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 76
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 9, 19, 12, 15]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 77
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 78
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x102ea9cf8> : <type 'instance'>
avl_REF2 = set([4, 8, 10, 11, 13, 19]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1017553b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 79
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017553b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 80
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1017553b0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 12                                                               # STEP 81
ACTION: int2 = 12 
int2 = 13 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 82
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 83
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 84
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017553b0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 12]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 85
ACTION: int1 = 2 
int1 = 9 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 86
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 8, 9, 15, 19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 87
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([2, 8, 9, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 9, 15, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 88
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 15                                                               # STEP 89
ACTION: int2 = 15 
int2 = 12 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 90
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 91
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174bd88> : <type 'instance'>
avl_REF1 = set([8, 9, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 9, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1017851b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:35.847997) Mon May  1 18:51:44 2017 [ 150 stmts 200 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1017659e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.62579.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 1
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 20                                                                # STEP 3
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 4
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 20 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int0 = 1                                                                 # STEP 9
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 11
ACTION: int1 = 16 
int1 = 6 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 14
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 17
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 5                                                                # STEP 20
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 6]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 22
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int0)                                                # STEP 25
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 26
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 27
ACTION: int2 = 5 
int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 6]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 30
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 31
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1017648c0> : <type 'instance'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d587a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d616c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 37 steps

SAVING TEST AS failure.62579.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 1
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 2
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 14]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 10
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 19, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 10, 19, 14]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 13
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([16, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([16, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 10, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([16, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 19                                                               # STEP 17
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 18
ACTION: int0 = 14 
int0 = 16 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 19
ACTION: int1 = 8 
int1 = 14 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 19, 14]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 23
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102d4e050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 24
ACTION: int2 = 11 
int2 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 10, 19, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 11, 10, 19, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([8, 11, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 10                                                               # STEP 28
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([8, 11, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 7                                                                # STEP 30
ACTION: int2 = 7 
int2 = 11 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 31
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 32
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([8, 11, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 33
ACTION: int1 = 14 
int1 = 7 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4e050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 35
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102d4e050> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 36
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102d61c20> : <type 'instance'>
avl_REF2 = set([8, 11, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 11, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f0a518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.80615206036 PERCENT COVERED
62.2472469807 TOTAL RUNTIME
6 EXECUTED
341 TOTAL TEST OPERATIONS
18.0918745995 TIME SPENT EXECUTING TEST OPERATIONS
0.039932012558 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
18.1506361961 TIME SPENT CHECKING PROPERTIES
36.2425107956 TOTAL TIME SPENT RUNNING SUT
0.00381636619568 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl0.inorder()                                                  # STEP 2
int3 = 7                                                                 # STEP 3
avl0.delete(int3)                                                        # STEP 4
int2 = 8                                                                 # STEP 5
int1 = 18                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl2.insert(int3)                                                       # STEP 10
avl2.insert(int3)                                                       # STEP 11
int3 = 20                                                               # STEP 12
avl2.insert(int2)                                                       # STEP 13
int0 = 19                                                               # STEP 14
avl0 == avl2                                                            # STEP 15
avl0.delete(int2)                                                       # STEP 16
int2 = 19                                                               # STEP 17
result = avl2.find(int3)                                                # STEP 18
int3 = 8                                                                # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
int3 = 19                                                               # STEP 25
avl2.delete(int1)                                                       # STEP 26
avl0 == avl2                                                            # STEP 27
int1 = 20                                                               # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
int2 = 8                                                                # STEP 32
avl0.delete(int1)                                                       # STEP 33
result = avl0.find(int3)                                                # STEP 34
avl0 == avl2                                                            # STEP 35
int3 = 14                                                               # STEP 36
result = avl2.find(int1)                                                # STEP 37
result = avl0.find(int1)                                                # STEP 38
avl0 == avl2                                                            # STEP 39
avl0.insert(int3)                                                       # STEP 40
avl0.insert(int1)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
avl2.insert(int3)                                                       # STEP 43
int0 = 3                                                                # STEP 44
avl2 == avl0                                                            # STEP 45
int3 = 10                                                               # STEP 46
avl0.delete(int1)                                                       # STEP 47
int1 = 15                                                               # STEP 48
avl0.insert(int0)                                                       # STEP 49
int0 = 7                                                                # STEP 50
avl0.delete(int1)                                                       # STEP 51
avl0.delete(int3)                                                       # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl0.delete(int0)                                                       # STEP 54
int1 = 4                                                                # STEP 55
result = avl0.find(int2)                                                # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl0.delete(int0)                                                       # STEP 58
avl2 == avl2                                                            # STEP 59
avl0.delete(int1)                                                       # STEP 60
int1 = 19                                                               # STEP 61
int3 = 15                                                               # STEP 62
int2 = 20                                                               # STEP 63
avl2.insert(int2)                                                       # STEP 64
avl0.delete(int1)                                                       # STEP 65
avl0.insert(int3)                                                       # STEP 66
avl0.delete(int1)                                                       # STEP 67
result = avl0.find(int3)                                                # STEP 68
avl2.delete(int3)                                                       # STEP 69
int2 = 8                                                                # STEP 70
avl0.insert(int2)                                                       # STEP 71
avl2.insert(int1)                                                       # STEP 72
avl0.delete(int1)                                                       # STEP 73
result = avl2.find(int3)                                                # STEP 74
avl0.delete(int3)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102cbec20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 8                                                                 # STEP 0
int0 = 12                                                                # STEP 1
int3 = 8                                                                 # STEP 2
int2 = 20                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
avl2.delete(int0)                                                        # STEP 7
avl2.insert(int2)                                                        # STEP 8
int3 = 20                                                                # STEP 9
avl2.delete(int1)                                                       # STEP 10
int2 = 10                                                               # STEP 11
int0 = 10                                                               # STEP 12
int1 = 1                                                                # STEP 13
avl2.delete(int3)                                                       # STEP 14
result = avl2.find(int0)                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
result = avl2.find(int3)                                                # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
int1 = 20                                                               # STEP 20
avl2.insert(int0)                                                       # STEP 21
int3 = 8                                                                # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.insert(int3)                                                       # STEP 24
avl2.insert(int0)                                                       # STEP 25
avl2.delete(int1)                                                       # STEP 26
int0 = 13                                                               # STEP 27
avl2.delete(int0)                                                       # STEP 28
avl2.insert(int0)                                                       # STEP 29
int0 = 16                                                               # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.delete(int0)                                                       # STEP 32
int2 = 3                                                                # STEP 33
result = avl2.inorder()                                                 # STEP 34
result = avl2.find(int1)                                                # STEP 35
avl2.insert(int2)                                                       # STEP 36
result = avl2.inorder()                                                 # STEP 37
int0 = 4                                                                # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
result = avl2.inorder()                                                 # STEP 41
avl2.insert(int1)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
avl2.delete(int2)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.insert(int0)                                                       # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
result = avl1.inorder()                                                 # STEP 48
result = avl2.inorder()                                                 # STEP 49
result = avl2.find(int1)                                                # STEP 50
int1 = 8                                                                # STEP 51
int2 = 19                                                               # STEP 52
avl2.insert(int1)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
int1 = 15                                                               # STEP 55
avl2.insert(int2)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
avl1.insert(int2)                                                       # STEP 58
int2 = 13                                                               # STEP 59
avl1.delete(int0)                                                       # STEP 60
result = avl2.inorder()                                                 # STEP 61
avl1.insert(int3)                                                       # STEP 62
avl1.insert(int1)                                                       # STEP 63
int3 = 9                                                                # STEP 64
int0 = 12                                                               # STEP 65
int1 = 11                                                               # STEP 66
avl1.insert(int3)                                                       # STEP 67
avl2.delete(int0)                                                       # STEP 68
int3 = 2                                                                # STEP 69
result = avl2.find(int0)                                                # STEP 70
avl2.insert(int1)                                                       # STEP 71
avl2.delete(int2)                                                       # STEP 72
avl2.insert(int2)                                                       # STEP 73
result = avl1.inorder()                                                 # STEP 74
avl1.delete(int2)                                                       # STEP 75
avl1.insert(int0)                                                       # STEP 76
int1 = 9                                                                # STEP 77
avl2 = avl.AVLTree()                                                    # STEP 78
avl2.insert(int0)                                                       # STEP 79
result = avl2.inorder()                                                 # STEP 80
int2 = 12                                                               # STEP 81
avl1.delete(int2)                                                       # STEP 82
avl1.insert(int1)                                                       # STEP 83
avl2.insert(int1)                                                       # STEP 84
int1 = 2                                                                # STEP 85
avl1.insert(int1)                                                       # STEP 86
avl1.delete(int3)                                                       # STEP 87
avl1.delete(int2)                                                       # STEP 88
int2 = 15                                                               # STEP 89
avl1.delete(int1)                                                       # STEP 90
avl1.delete(int2)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1017851b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
avl1 = avl.AVLTree()                                                     # STEP 0
avl1 == avl1                                                             # STEP 1
result = avl1.inorder()                                                  # STEP 2
int1 = 20                                                                # STEP 3
avl1.delete(int1)                                                        # STEP 4
result = avl1.find(int1)                                                 # STEP 5
avl1.delete(int1)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
avl1.insert(int1)                                                        # STEP 8
int0 = 1                                                                 # STEP 9
result = avl1.find(int1)                                                # STEP 10
int1 = 16                                                               # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1.delete(int1)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
result = avl1.find(int1)                                                # STEP 17
result = avl1.inorder()                                                 # STEP 18
result = avl1.inorder()                                                 # STEP 19
int2 = 5                                                                # STEP 20
avl1.insert(int1)                                                       # STEP 21
avl1 == avl1                                                            # STEP 22
result = avl1.find(int2)                                                # STEP 23
result = avl1.inorder()                                                 # STEP 24
result = avl1.find(int0)                                                # STEP 25
avl1.delete(int1)                                                       # STEP 26
int2 = 5                                                                # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
int2 = 18                                                               # STEP 30
avl1.delete(int1)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl1.delete(int0)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d587a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int3 = 19                                                                # STEP 0
int1 = 14                                                                # STEP 1
int2 = 11                                                                # STEP 2
int0 = 16                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.delete(int0)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.insert(int3)                                                        # STEP 9
int3 = 10                                                               # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
result = avl2.find(int3)                                                # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
int3 = 19                                                               # STEP 17
int0 = 14                                                               # STEP 18
int1 = 8                                                                # STEP 19
result = avl2.inorder()                                                 # STEP 20
result = avl2.find(int2)                                                # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl0 = avl.AVLTree()                                                    # STEP 23
int2 = 11                                                               # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl2.insert(int2)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
int0 = 10                                                               # STEP 28
result = avl2.inorder()                                                 # STEP 29
int2 = 7                                                                # STEP 30
int1 = 7                                                                # STEP 31
avl2.delete(int1)                                                       # STEP 32
int1 = 14                                                               # STEP 33
avl0.insert(int3)                                                       # STEP 34
result = avl0.find(int2)                                                # STEP 35
avl2.delete(int3)                                                       # STEP 36
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f0a518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61966.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([2, 3, 4, 12, 14, 15])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 14 [2:1]
---- < 10 [1:0]
------ < 6 [0:0] L
------ > 12 [0:0] L
---- > 15 [0:0] L
set([2, 3, 4, 6, 10, 12, 14, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b95908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.61966.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 3                                                                 # STEP 6
ACTION: int2 = 3 
int2 = 7 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 16
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x1038545f0> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 17
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 20                                                               # STEP 22
ACTION: int1 = 20 
int1 = 18 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 25
ACTION: int2 = 7 
int2 = 3 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 27
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 4                                                                # STEP 30
ACTION: int3 = 4 
int3 = 2 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 36
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7, 2, 3, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([7, 2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([7, 2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([7, 2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([7, 2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 42
ACTION: int2 = 5 
int2 = 7 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 10                                                               # STEP 44
ACTION: int0 = 10 
int0 = 2 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 45
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 46
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 5, 10, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 55
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 56
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 15                                                               # STEP 57
ACTION: int0 = 15 
int0 = 10 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 58
ACTION: int3 = 6 
int3 = 4 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 59
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 7                                                                # STEP 60
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 61
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 4, 12]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 63
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 65
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 66
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 14                                                               # STEP 67
ACTION: int0 = 14 
int0 = 15 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 68
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 69
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 71
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 72
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14, 7]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 73
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 3, 4, 12, 14, 15])
==================================================
result = avl2.inorder()                                                 # STEP 74
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 10                                                               # STEP 75
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 77
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 78
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 18                                                               # STEP 79
ACTION: int1 = 18 
int1 = 7 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 80
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 10, 12, 14, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 81
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 10, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 82
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a87050> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6, 14, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 83
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 17                                                               # STEP 84
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 85
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.display()                                                          # STEP 86
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 14 [2:1]
---- < 10 [1:0]
------ < 6 [0:0] L
------ > 12 [0:0] L
---- > 15 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 3, 4, 6, 10, 12, 14, 15])
==================================================
avl2.delete(int3)                                                       # STEP 87
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 88
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103cea3b0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 6, 10, 12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 3, 4, 6, 10, 12, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103aaa050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #18 (0:00:30.035715) Mon May  1 17:24:57 2017 [ 160 stmts 212 branches ]
  8 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 12 [1:-1]
---- > 16 [0:0] L
set([2, 4, 7, 8, 12, 16])
  13 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:1]
---- < 14 [0:0] L
set([2, 4, 7, 13, 14, 15])
  10 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 5 [1:-1]
------ > 9 [0:0] L
-- > 18 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([2, 3, 5, 9, 10, 11, 18, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2876911163 TOTAL RUNTIME
6 EXECUTED
502 TOTAL TEST OPERATIONS
25.4228568077 TIME SPENT EXECUTING TEST OPERATIONS
0.0538582801819 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.5721535683 TIME SPENT CHECKING PROPERTIES
50.995010376 TOTAL TIME SPENT RUNNING SUT
0.00402474403381 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
int0 = 15                                                                # STEP 1
int3 = 2                                                                 # STEP 2
int1 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 3                                                                 # STEP 6
result = avl2.inorder()                                                  # STEP 7
result = avl2.inorder()                                                  # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2 = avl.AVLTree()                                                    # STEP 16
avl2.delete(int1)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2 == avl2                                                            # STEP 21
int1 = 20                                                               # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
int2 = 7                                                                # STEP 25
avl2.insert(int0)                                                       # STEP 26
int0 = 2                                                                # STEP 27
avl2.insert(int3)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
int3 = 4                                                                # STEP 30
result = avl2.inorder()                                                 # STEP 31
result = avl2.inorder()                                                 # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
result = avl2.find(int2)                                                # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.delete(int2)                                                       # STEP 41
int2 = 5                                                                # STEP 42
avl2.insert(int3)                                                       # STEP 43
int0 = 10                                                               # STEP 44
int1 = 12                                                               # STEP 45
avl2.delete(int2)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
avl2.insert(int0)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl2.insert(int3)                                                       # STEP 51
avl2.delete(int1)                                                       # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl2.insert(int1)                                                       # STEP 54
result = avl2.find(int3)                                                # STEP 55
avl2.insert(int1)                                                       # STEP 56
int0 = 15                                                               # STEP 57
int3 = 6                                                                # STEP 58
avl2.delete(int2)                                                       # STEP 59
int1 = 7                                                                # STEP 60
avl2.insert(int0)                                                       # STEP 61
avl2.delete(int0)                                                       # STEP 62
int2 = 14                                                               # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl2.insert(int2)                                                       # STEP 65
avl2.insert(int2)                                                       # STEP 66
int0 = 14                                                               # STEP 67
avl0 = avl.AVLTree()                                                    # STEP 68
avl0.delete(int3)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
avl0.insert(int2)                                                       # STEP 71
avl0.insert(int1)                                                       # STEP 72
avl2.display()                                                          # STEP 73
result = avl2.inorder()                                                 # STEP 74
int2 = 10                                                               # STEP 75
avl0.delete(int3)                                                       # STEP 76
avl0.delete(int2)                                                       # STEP 77
avl2.delete(int3)                                                       # STEP 78
int1 = 18                                                               # STEP 79
avl2.insert(int2)                                                       # STEP 80
avl2.insert(int3)                                                       # STEP 81
avl0.insert(int3)                                                       # STEP 82
result = avl2.find(int2)                                                # STEP 83
int3 = 17                                                               # STEP 84
result = avl2.find(int0)                                                # STEP 85
avl2.display()                                                          # STEP 86
avl2.delete(int3)                                                       # STEP 87
avl2.delete(int0)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103aaa050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

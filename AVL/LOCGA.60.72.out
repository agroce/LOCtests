Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62428.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e6fd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.62428.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 20                                                                # STEP 2
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 3
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                 # STEP 4
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 18                                                               # STEP 12
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 20]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 16
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 20, 13]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 18
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 9                                                                # STEP 20
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 22
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 24
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 20]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 26
ACTION: int3 = 7 
int3 = 9 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 34
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 36
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 37
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 38
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 20, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 44
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([18, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 13                                                               # STEP 46
ACTION: int2 = 13 
int2 = 18 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 8                                                                # STEP 48
ACTION: int3 = 8 
int3 = 7 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 49
ACTION: int1 = 3 
int1 = 20 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 50
ACTION: int0 = 1 
int0 = 13 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 51
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 55
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 59
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18, 3, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 60
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 13]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 61
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 62
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 20, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([3, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 20, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 65
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10365fe60> : <type 'instance'>
avl_REF1 = set([9, 18, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 12                                                               # STEP 67
ACTION: int1 = 12 
int1 = 3 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 68
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([1, 3, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 69
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101ef37a0> : <type 'instance'>
avl_REF2 = set([1, 3, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 3, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105132d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  9 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([17, 19, 5, 6, 8, 9])
TEST #3 STEP #46 (0:00:30.022858) Mon May  1 18:29:44 2017 [ 158 stmts 208 branches ]
  6 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 19 [0:0] L
set([2, 5, 6, 11, 12, 19])
  8 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 14, 18, 19])
  8 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([2, 4, 8, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036f1ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 69 steps

SAVING TEST AS failure.62428.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 1
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 == avl2                                                             # STEP 2
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 10                                                                # STEP 3
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 5
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int2)                                                 # STEP 8
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 11
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 10                                                               # STEP 14
ACTION: int1 = 10 
int1 = 10 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 15
ACTION: int2 = 6 
int2 = 5 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 23
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 6]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 25
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 10                                                               # STEP 28
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 12                                                               # STEP 31
ACTION: int2 = 12 
int2 = 6 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 6]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 36
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 37
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 38
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 1                                                                # STEP 40
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 41
ACTION: int1 = 15 
int1 = 10 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 43
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 45
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 46
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 10, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 48
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 10]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 49
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 50
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 51
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 17                                                               # STEP 52
ACTION: int3 = 17 
int3 = 10 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 53
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 55
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 56
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 57
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([1, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([1, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 10, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 60
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([1, 10, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 64
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 65
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10352fd40> : <type 'instance'>
avl_REF2 = set([1, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 67
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 68
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1037cdc68> : <type 'instance'>
avl_REF0 = set([1, 10, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 20, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037ae1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.8619110584 TOTAL RUNTIME
6 EXECUTED
439 TOTAL TEST OPERATIONS
22.9392735958 TIME SPENT EXECUTING TEST OPERATIONS
0.0483365058899 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.1049141884 TIME SPENT CHECKING PROPERTIES
46.0441877842 TOTAL TIME SPENT RUNNING SUT
0.00403428077698 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
int1 = 20                                                                # STEP 2
avl2.delete(int1)                                                        # STEP 3
result = avl2.find(int1)                                                 # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.delete(int1)                                                        # STEP 8
avl2 == avl2                                                             # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2.delete(int1)                                                       # STEP 11
int2 = 18                                                               # STEP 12
avl2.delete(int1)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
int0 = 13                                                               # STEP 16
avl2.insert(int0)                                                       # STEP 17
avl1 = avl.AVLTree()                                                    # STEP 18
avl2.insert(int2)                                                       # STEP 19
int3 = 9                                                                # STEP 20
avl1.insert(int1)                                                       # STEP 21
result = avl1.find(int1)                                                # STEP 22
avl2.insert(int0)                                                       # STEP 23
result = avl1.inorder()                                                 # STEP 24
avl1.insert(int3)                                                       # STEP 25
int3 = 7                                                                # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl1.delete(int1)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl1.delete(int2)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl1.delete(int2)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl1.delete(int0)                                                       # STEP 36
avl1.delete(int2)                                                       # STEP 37
avl1.delete(int2)                                                       # STEP 38
avl2.insert(int1)                                                       # STEP 39
avl2.insert(int2)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl1.insert(int2)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
avl2.delete(int2)                                                       # STEP 44
result = avl2.inorder()                                                 # STEP 45
int2 = 13                                                               # STEP 46
avl1.delete(int0)                                                       # STEP 47
int3 = 8                                                                # STEP 48
int1 = 3                                                                # STEP 49
int0 = 1                                                                # STEP 50
avl1.delete(int1)                                                       # STEP 51
avl2.delete(int2)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl1.delete(int1)                                                       # STEP 54
avl2.delete(int1)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl1.delete(int0)                                                       # STEP 57
avl1.delete(int3)                                                       # STEP 58
avl1.insert(int1)                                                       # STEP 59
avl2.insert(int2)                                                       # STEP 60
result = avl1.find(int1)                                                # STEP 61
result = avl2.inorder()                                                 # STEP 62
avl2.insert(int1)                                                       # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl1.delete(int3)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
int1 = 12                                                               # STEP 67
result = avl2.find(int1)                                                # STEP 68
avl2.delete(int2)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105132d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
avl2 == avl2                                                             # STEP 1
avl2 == avl2                                                             # STEP 2
int1 = 10                                                                # STEP 3
int2 = 5                                                                 # STEP 4
avl2 == avl2                                                             # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
result = avl2.find(int2)                                                 # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.delete(int2)                                                       # STEP 10
result = avl2.find(int2)                                                # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
int1 = 10                                                               # STEP 14
int2 = 6                                                                # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.insert(int2)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2 == avl2                                                            # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2 == avl2                                                            # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
int3 = 10                                                               # STEP 28
avl2.insert(int1)                                                       # STEP 29
result = avl2.inorder()                                                 # STEP 30
int2 = 12                                                               # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl2.delete(int3)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2 == avl2                                                            # STEP 36
avl0 = avl.AVLTree()                                                    # STEP 37
avl0.delete(int1)                                                       # STEP 38
result = avl2.inorder()                                                 # STEP 39
int2 = 1                                                                # STEP 40
int1 = 15                                                               # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl2 == avl0                                                            # STEP 43
result = avl0.inorder()                                                 # STEP 44
avl2.insert(int3)                                                       # STEP 45
result = avl2.find(int2)                                                # STEP 46
avl2.insert(int2)                                                       # STEP 47
avl0.insert(int3)                                                       # STEP 48
avl0.insert(int2)                                                       # STEP 49
result = avl0.find(int2)                                                # STEP 50
avl0.insert(int2)                                                       # STEP 51
int3 = 17                                                               # STEP 52
int0 = 20                                                               # STEP 53
avl0.insert(int1)                                                       # STEP 54
avl0.insert(int1)                                                       # STEP 55
avl0.delete(int0)                                                       # STEP 56
result = avl2.inorder()                                                 # STEP 57
avl2.insert(int0)                                                       # STEP 58
avl2.delete(int3)                                                       # STEP 59
avl2.delete(int0)                                                       # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl0.insert(int0)                                                       # STEP 62
avl0.insert(int0)                                                       # STEP 63
avl0.delete(int3)                                                       # STEP 64
result = avl2.find(int1)                                                # STEP 65
avl0.insert(int1)                                                       # STEP 66
avl0.delete(int3)                                                       # STEP 67
avl0.delete(int2)                                                       # STEP 68
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1037ae1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

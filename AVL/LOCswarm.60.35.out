Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40522.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #20 (0:00:30.029780) Mon May  1 02:24:02 2017 [ 91 stmts 124 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.40522.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 1
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 5
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int0)                                                 # STEP 6
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 12                                                                # STEP 9
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 12, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 9                                                                # STEP 15
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 6                                                                # STEP 23
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 11]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 29
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 11, 1]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 12, 9, 6, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 34
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 12, 9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 38
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 40
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 10                                                               # STEP 42
ACTION: int3 = 10 
int3 = 5 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 44
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 7, 9, 10, 11, 12]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 46
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 48
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 50
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int0)                                                       # STEP 51
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 53
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.find(int1)                                                # STEP 55
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 56
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int2 = 14                                                               # STEP 58
ACTION: int2 = 14 
int2 = 11 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 59
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 10, 11, 14, 1]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 63
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 64
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 14, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 66
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 67
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 68
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 69
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 6, 7, 9, 10, 11, 12]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 70
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 71
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 13                                                               # STEP 72
ACTION: int2 = 13 
int2 = 14 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 73
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 74
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 75
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 6, 7, 9, 10, 11, 12]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 76
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 77
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x105a7e5f0> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 1]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1036917a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 78
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036917a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 79
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 80
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036917a0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 81
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 82
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 83
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 84
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 5                                                                # STEP 85
ACTION: int1 = 5 
int1 = 15 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 86
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 87
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 88
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 89
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1036917a0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 90
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036917a0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 91
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1036c4fc8> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 9, 10, 11, 12, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 6, 7, 9, 11, 12, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036acab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.04774277363 PERCENT COVERED
64.3568351269 TOTAL RUNTIME
7 EXECUTED
592 TOTAL TEST OPERATIONS
27.7973742485 TIME SPENT EXECUTING TEST OPERATIONS
0.0776085853577 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.9240705967 TIME SPENT CHECKING PROPERTIES
55.7214448452 TOTAL TIME SPENT RUNNING SUT
0.00408315658569 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 1                                                                 # STEP 0
int1 = 7                                                                 # STEP 1
int0 = 4                                                                 # STEP 2
int2 = 11                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int0)                                                 # STEP 5
result = avl1.find(int0)                                                 # STEP 6
avl1.insert(int1)                                                        # STEP 7
avl1.insert(int1)                                                        # STEP 8
int1 = 12                                                                # STEP 9
avl1.delete(int0)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.insert(int0)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
int1 = 9                                                                # STEP 15
avl1.delete(int1)                                                       # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.delete(int1)                                                       # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl1.insert(int1)                                                       # STEP 21
avl1.insert(int0)                                                       # STEP 22
int0 = 6                                                                # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.delete(int1)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
avl2.insert(int2)                                                       # STEP 28
result = avl1.find(int3)                                                # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
int3 = 5                                                                # STEP 34
result = avl2.inorder()                                                 # STEP 35
avl1.insert(int1)                                                       # STEP 36
avl1.insert(int2)                                                       # STEP 37
result = avl2.find(int2)                                                # STEP 38
avl2.insert(int2)                                                       # STEP 39
result = avl1.find(int1)                                                # STEP 40
avl1.delete(int3)                                                       # STEP 41
int3 = 10                                                               # STEP 42
avl1.insert(int2)                                                       # STEP 43
result = avl1.find(int1)                                                # STEP 44
avl1.insert(int3)                                                       # STEP 45
result = avl2.find(int2)                                                # STEP 46
avl2.insert(int3)                                                       # STEP 47
result = avl1.find(int3)                                                # STEP 48
result = avl2.inorder()                                                 # STEP 49
result = avl2.inorder()                                                 # STEP 50
avl1.delete(int0)                                                       # STEP 51
avl1.insert(int2)                                                       # STEP 52
avl1.delete(int3)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
result = avl1.find(int1)                                                # STEP 55
avl2.insert(int1)                                                       # STEP 56
avl2.insert(int1)                                                       # STEP 57
int2 = 14                                                               # STEP 58
int1 = 15                                                               # STEP 59
avl1.insert(int0)                                                       # STEP 60
avl1.delete(int3)                                                       # STEP 61
avl2.insert(int2)                                                       # STEP 62
int0 = 15                                                               # STEP 63
avl1.delete(int2)                                                       # STEP 64
avl2.delete(int2)                                                       # STEP 65
result = avl1.find(int0)                                                # STEP 66
avl2.delete(int1)                                                       # STEP 67
avl1.delete(int0)                                                       # STEP 68
avl1.insert(int3)                                                       # STEP 69
int0 = 17                                                               # STEP 70
avl1.delete(int0)                                                       # STEP 71
int2 = 13                                                               # STEP 72
avl1.insert(int2)                                                       # STEP 73
result = avl2.inorder()                                                 # STEP 74
avl1.delete(int2)                                                       # STEP 75
int2 = 10                                                               # STEP 76
avl2 = avl.AVLTree()                                                    # STEP 77
avl2.insert(int3)                                                       # STEP 78
avl1.insert(int1)                                                       # STEP 79
avl2.insert(int3)                                                       # STEP 80
result = avl1.find(int1)                                                # STEP 81
avl1.insert(int0)                                                       # STEP 82
avl1.insert(int3)                                                       # STEP 83
avl1.insert(int0)                                                       # STEP 84
int1 = 5                                                                # STEP 85
int3 = 5                                                                # STEP 86
avl1.insert(int2)                                                       # STEP 87
result = avl1.inorder()                                                 # STEP 88
result = avl2.inorder()                                                 # STEP 89
avl2.delete(int2)                                                       # STEP 90
avl1.delete(int2)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036acab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
168 BRANCHES COVERED
126 STATEMENTS COVERED

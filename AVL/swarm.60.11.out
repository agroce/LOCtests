Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99370.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 8 [1:-1]
---- > 17 [0:0] L
set([1, 2, 4, 6, 8, 17])
TEST #5 STEP #16 (0:00:30.011966) Fri Apr 28 03:46:34 2017 [ 162 stmts 216 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b42560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.99370.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 2
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 4
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 5
ACTION: int1 = 13 
int1 = 7 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 6
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                 # STEP 8
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 16                                                               # STEP 12
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 14
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 13]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 15
ACTION: int1 = 6 
int1 = 16 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 17
ACTION: int2 = 3 
int2 = 4 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 13, 6]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 19
ACTION: int1 = 19 
int1 = 6 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 20
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 4                                                                # STEP 22
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 23
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF1 = set([16, 13, 6]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl0                                                            # STEP 24
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF1 = set([16, 13, 6]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 25
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 29
ACTION: int2 = 20 
int2 = 3 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 13                                                               # STEP 31
ACTION: int1 = 13 
int1 = 19 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 32
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
avl_REF1 = set([16, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 4, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 36
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 37
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int1 = 4                                                                # STEP 38
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 39
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b14b48> : <type 'instance'>
avl_REF2 = set([9, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 41
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10509cbd8> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 43
ACTION: int0 = 13 
int0 = 9 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 44
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 5                                                                # STEP 46
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 13, 6, 5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 19                                                               # STEP 49
ACTION: int3 = 19 
int3 = 5 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 50
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105095b90> : <type 'instance'>
avl_REF1 = set([16, 9, 13, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 9, 6, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f24e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 18
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1700539589 TOTAL RUNTIME
9 EXECUTED
769 TOTAL TEST OPERATIONS
27.8970370293 TIME SPENT EXECUTING TEST OPERATIONS
0.0275886058807 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.074146986 TIME SPENT CHECKING PROPERTIES
55.9711840153 TOTAL TIME SPENT RUNNING SUT
0.00455284118652 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 11                                                                # STEP 1
int1 = 7                                                                 # STEP 2
avl2.insert(int1)                                                        # STEP 3
int0 = 9                                                                 # STEP 4
int1 = 13                                                                # STEP 5
int3 = 20                                                                # STEP 6
avl2.delete(int2)                                                        # STEP 7
int2 = 4                                                                 # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1 == avl1                                                            # STEP 11
int1 = 16                                                               # STEP 12
avl1 == avl1                                                            # STEP 13
avl1.insert(int1)                                                       # STEP 14
int1 = 6                                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
int2 = 3                                                                # STEP 17
avl1.insert(int1)                                                       # STEP 18
int1 = 19                                                               # STEP 19
avl0 = avl.AVLTree()                                                    # STEP 20
avl2.delete(int3)                                                       # STEP 21
int3 = 4                                                                # STEP 22
avl1 == avl0                                                            # STEP 23
avl1 == avl0                                                            # STEP 24
avl0 == avl0                                                            # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
int2 = 20                                                               # STEP 29
avl0.delete(int3)                                                       # STEP 30
int1 = 13                                                               # STEP 31
avl2 == avl1                                                            # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl0.delete(int1)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
int3 = 5                                                                # STEP 36
avl0 == avl1                                                            # STEP 37
int1 = 4                                                                # STEP 38
avl1 == avl0                                                            # STEP 39
avl2.insert(int0)                                                       # STEP 40
avl1.insert(int0)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
int0 = 13                                                               # STEP 43
int1 = 12                                                               # STEP 44
avl1.delete(int1)                                                       # STEP 45
int1 = 5                                                                # STEP 46
avl1.insert(int3)                                                       # STEP 47
avl1.delete(int2)                                                       # STEP 48
int3 = 19                                                               # STEP 49
avl1.delete(int0)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f24e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14600.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 14 [0:0] L
set([1, 2, 3, 9, 10, 14])
TEST #3 STEP #82 (0:00:30.061540) Sun Apr 30 04:32:02 2017 [ 140 stmts 185 branches ]
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 10 [1:0]
---- < 9 [0:0] L
---- > 14 [0:0] L
set([1, 2, 3, 9, 10, 14])
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([1, 4, 6, 9, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d746c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.14600.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 2
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 3]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 9
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 3, 20]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 11
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 12
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 13
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 14
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 15
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 10                                                               # STEP 17
ACTION: int0 = 10 
int0 = 15 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 3, 20, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 21
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 19                                                               # STEP 22
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 23
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 24
ACTION: int3 = 16 
int3 = 18 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 26
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 16 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104d9dcf8> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 1                                                                # STEP 32
ACTION: int0 = 1 
int0 = 10 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 33
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x104d9d098> : <type 'instance'>
avl_REF0 = set([9, 3, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 20, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104db0488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.54021847071 PERCENT COVERED
61.2656319141 TOTAL RUNTIME
7 EXECUTED
535 TOTAL TEST OPERATIONS
28.5632824898 TIME SPENT EXECUTING TEST OPERATIONS
0.0232353210449 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.6472172737 TIME SPENT CHECKING PROPERTIES
57.2104997635 TOTAL TIME SPENT RUNNING SUT
0.00520539283752 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int0 = 3                                                                 # STEP 2
int2 = 7                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
int0 = 15                                                                # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 1                                                                # STEP 11
result = avl0.find(int3)                                                # STEP 12
int3 = 18                                                               # STEP 13
result = avl0.find(int2)                                                # STEP 14
int2 = 9                                                                # STEP 15
avl0.delete(int0)                                                       # STEP 16
int0 = 10                                                               # STEP 17
result = avl1.find(int3)                                                # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.insert(int1)                                                       # STEP 20
result = avl0.inorder()                                                 # STEP 21
int2 = 19                                                               # STEP 22
int1 = 9                                                                # STEP 23
int3 = 16                                                               # STEP 24
avl1.insert(int2)                                                       # STEP 25
int2 = 10                                                               # STEP 26
avl0.delete(int3)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
avl1 == avl1                                                            # STEP 29
int3 = 8                                                                # STEP 30
avl1 == avl1                                                            # STEP 31
int0 = 1                                                                # STEP 32
avl0.delete(int2)                                                       # STEP 33
avl0.delete(int1)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104db0488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
213 BRANCHES COVERED
161 STATEMENTS COVERED

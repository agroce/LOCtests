Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62339.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102525fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 14 steps

SAVING TEST AS failure.62339.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 5
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 9, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([8, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 13, 16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([8, 9, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([8, 9, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([8, 9, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029ebc68> : <type 'instance'>
avl_REF2 = set([8, 9, 13, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 13, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a02a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  7 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 18, 19])
  7 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 18, 19])
  7 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 8 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 18, 19])
  7 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [2:1]
---- < 8 [1:-1]
------ > 13 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 13, 18, 19])
  7 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 18 [2:1]
---- < 13 [1:0]
------ < 8 [0:0] L
------ > 14 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 13, 14, 18, 19])
  7 [3:-1]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 13 [2:0]
---- < 8 [1:-1]
------ > 12 [0:0] L
---- > 18 [1:0]
------ < 14 [0:0] L
------ > 19 [0:0] L
set([2, 6, 7, 8, 12, 13, 14, 18, 19])
  13 [3:0]
-- < 7 [2:0]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 12, 13, 14, 15, 18, 19])
  13 [3:0]
-- < 7 [2:0]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 12, 13, 14, 15, 18, 19])
  13 [3:0]
-- < 7 [2:0]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 12, 13, 14, 15, 18, 19])
  13 [3:0]
-- < 7 [2:0]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 18 [2:1]
---- < 14 [1:-1]
------ > 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 8, 12, 13, 14, 15, 18, 19])
TEST #4 STEP #61 (0:00:30.102552) Mon May  1 18:16:29 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10289bc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.62339.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 1
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int3 = 18                                                                # STEP 7
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 11
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 14]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 14
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 18
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 14]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 20
ACTION: int0 = 14 
int0 = 14 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 11, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 3                                                                # STEP 28
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int2 = 1                                                                # STEP 32
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102e74b48> : <type 'instance'>
avl_REF2 = set([3, 18, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 18, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102eac7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dbfc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.62339.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 1
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 2
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 6
ACTION: int0 = 8 
int0 = 9 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                 # STEP 7
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 18]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 12
ACTION: int0 = 9 
int0 = 8 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 18, 17]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9, 18, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 17]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 15
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 16
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([18, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 10, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([18, 10, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 18, 10, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9, 18, 10, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029a9440> : <type 'instance'>
avl_REF1 = set([9, 18, 10, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 18, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a5c200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 9, 11, 12, 15, 17])
  12 [3:1]
-- < 9 [2:1]
---- < 7 [1:-1]
------ > 8 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 8, 9, 11, 12, 15, 17])
  12 [3:1]
-- < 9 [2:1]
---- < 7 [1:-1]
------ > 8 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 15 [0:0] L
set([7, 8, 9, 11, 12, 15, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 35
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2026598454 TOTAL RUNTIME
8 EXECUTED
505 TOTAL TEST OPERATIONS
26.2702531815 TIME SPENT EXECUTING TEST OPERATIONS
0.0600321292877 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.3254165649 TIME SPENT CHECKING PROPERTIES
52.5956697464 TOTAL TIME SPENT RUNNING SUT
0.00667858123779 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 16                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int2 = 9                                                                 # STEP 2
int0 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int1)                                                 # STEP 5
avl2.insert(int0)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int1)                                                        # STEP 9
avl2.insert(int2)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2 == avl2                                                            # STEP 12
avl2.delete(int3)                                                       # STEP 13
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a02a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
avl2 == avl2                                                             # STEP 1
int0 = 14                                                                # STEP 2
avl2.insert(int0)                                                        # STEP 3
avl2.delete(int0)                                                        # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl2.insert(int0)                                                        # STEP 6
int3 = 18                                                                # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.delete(int0)                                                       # STEP 10
result = avl2.find(int0)                                                # STEP 11
avl2.insert(int0)                                                       # STEP 12
avl2.insert(int3)                                                       # STEP 13
int1 = 3                                                                # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
int2 = 11                                                               # STEP 18
avl2.insert(int0)                                                       # STEP 19
int0 = 14                                                               # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl2.insert(int3)                                                       # STEP 22
result = avl2.inorder()                                                 # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
result = avl2.find(int1)                                                # STEP 26
result = avl2.inorder()                                                 # STEP 27
int3 = 3                                                                # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.insert(int3)                                                       # STEP 31
int2 = 1                                                                # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl2.delete(int0)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102eac7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 18                                                                # STEP 0
int3 = 17                                                                # STEP 1
int2 = 1                                                                 # STEP 2
int0 = 9                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
int0 = 8                                                                 # STEP 6
result = avl1.find(int2)                                                 # STEP 7
int2 = 10                                                                # STEP 8
avl1.delete(int0)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
int0 = 9                                                                # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
int1 = 17                                                               # STEP 15
int3 = 5                                                                # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.delete(int1)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a5c200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

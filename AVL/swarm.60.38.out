Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99866.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 8 [0:0] L
-- > 20 [1:1]
---- < 17 [0:0] L
set([6, 7, 8, 10, 17, 20])
TEST #4 STEP #93 (0:00:30.020415) Fri Apr 28 05:09:12 2017 [ 147 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044285f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.99866.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 1                                                                 # STEP 0
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int0 = 15                                                                # STEP 6
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = 16 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 9
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 == avl0                                                            # STEP 11
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 13
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 14
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 7                                                                # STEP 17
ACTION: int1 = 7 
int1 = 1 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 18
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 12                                                               # STEP 21
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 22
ACTION: int1 = 3 
int1 = 7 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 24
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15, 3, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([15, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([15, 3, 5, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([10, 5, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([15, 3, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 13                                                               # STEP 29
ACTION: int1 = 13 
int1 = 5 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10434fd88> : <type 'instance'>
avl_REF0 = set([10, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 15, 5, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104408bd8> : <type 'instance'>
avl_REF2 = set([15, 3, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 5, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104312b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 23
STOPPING TESTING DUE TO TIMEOUT
7.80454699695 PERCENT COVERED
60.2115709782 TOTAL RUNTIME
9 EXECUTED
755 TOTAL TEST OPERATIONS
28.6511616707 TIME SPENT EXECUTING TEST OPERATIONS
0.0265924930573 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8575415611 TIME SPENT CHECKING PROPERTIES
57.5087032318 TOTAL TIME SPENT RUNNING SUT
0.00514030456543 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 1                                                                 # STEP 0
int3 = 10                                                                # STEP 1
int2 = 16                                                                # STEP 2
int0 = 7                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 15                                                                # STEP 6
avl0.delete(int2)                                                        # STEP 7
int2 = 10                                                                # STEP 8
avl2 = avl.AVLTree()                                                     # STEP 9
avl2 == avl2                                                            # STEP 10
avl0 == avl0                                                            # STEP 11
result = avl0.inorder()                                                 # STEP 12
avl0.insert(int3)                                                       # STEP 13
int3 = 19                                                               # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
int1 = 7                                                                # STEP 17
avl0 == avl2                                                            # STEP 18
avl2.insert(int1)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
int2 = 12                                                               # STEP 21
int1 = 3                                                                # STEP 22
avl2.insert(int1)                                                       # STEP 23
int1 = 5                                                                # STEP 24
avl2.insert(int0)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
int1 = 13                                                               # STEP 29
avl0.insert(int0)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104312b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
198 BRANCHES COVERED
147 STATEMENTS COVERED

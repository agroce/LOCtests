Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1061.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f3b5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 39 steps

SAVING TEST AS failure.1061.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 16                                                                # STEP 0
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 2
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 5
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 9                                                                 # STEP 9
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 10
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 13
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 19
ACTION: int1 = 8 
int1 = 19 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 20
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 21
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 22
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 25
ACTION: int0 = 1 
int0 = 9 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 9]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 27
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 9, 13]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9, 13, 1]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 38
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104f88950> : <type 'instance'>
avl_REF0 = set([8, 9, 13, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 9, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059845a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([4, 8, 13, 15, 17, 20])
  13 [3:-1]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 17 [2:1]
---- < 15 [1:1]
------ < 14 [0:0] L
---- > 20 [0:0] L
set([4, 8, 13, 14, 15, 17, 20])
  13 [2:0]
-- < 4 [1:-1]
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([4, 8, 13, 15, 17, 20])
  5 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
set([1, 4, 5, 10, 13, 15])
  5 [2:0]
-- < 4 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 15 [0:0] L
set([1, 4, 5, 10, 13, 15])
  15 [2:0]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([6, 8, 11, 15, 16, 17])
  15 [3:1]
-- < 8 [2:1]
---- < 6 [1:1]
------ < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([3, 6, 8, 11, 15, 16, 17])
  8 [3:-1]
-- < 6 [1:-1]
---- > 7 [0:0] L
-- > 15 [2:-1]
---- < 11 [0:0] L
---- > 16 [1:-1]
------ > 20 [0:0] L
set([6, 7, 8, 11, 15, 16, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b927e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.1061.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 1
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 2
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 3
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                                # STEP 6
ACTION: int2 = 17 
int2 = 11 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 1]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 14
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 5, 1]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([13, 5, 1]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 19
ACTION: int3 = 15 
int3 = 13 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([13, 5, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([13, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([13, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 23
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 25
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b92f38> : <type 'instance'>
avl_REF2 = set([17, 13, 5, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 13, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bcfef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #6 (0:00:30.068378) Fri Apr 28 08:04:29 2017 [ 159 stmts 210 branches ]
  15 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([5, 10, 11, 15, 19, 20])
  15 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([5, 10, 11, 15, 19, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 5, 10, 11, 15, 19, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 5, 10, 11, 15, 19, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 5, 10, 11, 15, 19, 20])
  15 [3:1]
-- < 10 [2:1]
---- < 5 [1:1]
------ < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 5, 10, 11, 15, 19, 20])
  7 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 17 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([1, 5, 7, 14, 17, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.2106571198 TOTAL RUNTIME
8 EXECUTED
635 TOTAL TEST OPERATIONS
26.9671370983 TIME SPENT EXECUTING TEST OPERATIONS
0.0728657245636 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0851655006 TIME SPENT CHECKING PROPERTIES
54.052302599 TOTAL TIME SPENT RUNNING SUT
0.00471878051758 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 16                                                                # STEP 0
int2 = 19                                                                # STEP 1
int1 = 19                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.insert(int2)                                                        # STEP 4
int2 = 8                                                                 # STEP 5
avl0.delete(int2)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
int0 = 9                                                                 # STEP 9
result = avl0.find(int3)                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
avl0.delete(int0)                                                       # STEP 13
result = avl0.inorder()                                                 # STEP 14
avl0.insert(int1)                                                       # STEP 15
result = avl0.inorder()                                                 # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int1)                                                       # STEP 18
int1 = 8                                                                # STEP 19
int2 = 8                                                                # STEP 20
result = avl0.inorder()                                                 # STEP 21
result = avl0.find(int1)                                                # STEP 22
avl0.delete(int0)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
int0 = 1                                                                # STEP 25
avl0.insert(int1)                                                       # STEP 26
int3 = 13                                                               # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.delete(int1)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl0.insert(int0)                                                       # STEP 37
avl0.delete(int3)                                                       # STEP 38
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059845a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 13                                                                # STEP 0
int0 = 5                                                                 # STEP 1
int2 = 11                                                                # STEP 2
int1 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 17                                                                # STEP 6
avl2.insert(int3)                                                        # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl2.insert(int2)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
avl2.delete(int3)                                                       # STEP 11
avl2.delete(int0)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl2 == avl2                                                            # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.insert(int3)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
int3 = 15                                                               # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.delete(int2)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
result = avl2.find(int2)                                                # STEP 23
result = avl2.inorder()                                                 # STEP 24
result = avl2.find(int0)                                                # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104bcfef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

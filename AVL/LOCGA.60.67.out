Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62393.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([7, 9, 11, 15, 16, 19])
  11 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([7, 9, 11, 15, 16, 19])
  11 [2:0]
-- < 7 [1:-1]
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([7, 10, 11, 15, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051993b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.62393.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl0                                                             # STEP 3
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int1 = 18                                                                # STEP 4
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 5
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 6
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 10
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 17
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 18
ACTION: int1 = 6 
int1 = 18 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 24
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 28
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 30
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 19, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 19]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 34
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 7                                                                # STEP 37
ACTION: int2 = 7 
int2 = 11 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 38
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 19, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 19, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 42
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10, 6]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 46
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 47
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 48
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 9, 19, 7]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 50
ACTION: int0 = 11 
int0 = 13 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 51
ACTION: int1 = 3 
int1 = 9 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 53
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 9, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 54
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.find(int3)                                                # STEP 55
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 9, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 9, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 19, 11, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 10                                                               # STEP 61
ACTION: int0 = 10 
int0 = 11 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 62
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 63
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 64
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([16, 9, 19, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7, 9, 11, 15, 16, 19]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 65
ACTION: int3 = 5 
int3 = 15 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 66
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 4                                                                # STEP 67
ACTION: int3 = 4 
int3 = 5 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 68
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.display()                                                          # STEP 69
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 15, 16, 19]) : <type 'set'>
  11 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 15, 16, 19])
==================================================
avl2.display()                                                          # STEP 70
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 15, 16, 19]) : <type 'set'>
  11 [2:0]
-- < 9 [1:1]
---- < 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 15, 16, 19])
==================================================
avl0.delete(int2)                                                       # STEP 71
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([7, 11, 15, 16, 19]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 73
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 74
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 75
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 76
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 77
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 78
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 79
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl_REF1 = set([9, 18, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 19, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 80
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7, 10, 11, 15, 16, 19]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 81
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 10, 11, 15, 16, 19]) : <type 'set'>
  11 [2:0]
-- < 7 [1:-1]
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 10, 11, 15, 16, 19])
==================================================
avl0.insert(int0)                                                       # STEP 82
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 83
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 10, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 84
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([7, 10, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7, 10, 11, 15, 16, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 85
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([3, 7, 10, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 7, 9, 10, 11, 15, 16, 19]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 86
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x1031ede60> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF1 = set([18, 19, 6]) : <type 'set'>
avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 87
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105290cb0> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 16                                                               # STEP 88
ACTION: int3 = 16 
int3 = 4 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 89
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103603ea8> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([10, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103500290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #8 (0:00:30.069112) Mon May  1 18:24:39 2017 [ 162 stmts 216 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050823b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 66 steps

SAVING TEST AS failure.62393.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 1
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 4
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 4]) : <type 'set'>
==================================================
int3 = 14                                                                # STEP 7
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 16 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 4, 14]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 17
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 21
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 19, 4, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 23
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 16                                                               # STEP 25
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 28
ACTION: int1 = 8 
int1 = 19 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 29
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 15                                                               # STEP 30
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 31
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 33
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([16, 19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([19, 4, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([19, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 4, 6, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 36
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 37
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 41
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 42
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 44
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([8, 19, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 6, 8, 14, 15, 19]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 45
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 49
ACTION: int1 = 1 
int1 = 15 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 50
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 51
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 6, 8, 14, 15, 16, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 55
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 58
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 59
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 19                                                               # STEP 60
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                               # STEP 62
ACTION: int3 = 10 
int3 = 16 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 63
ACTION: int2 = 8 
int2 = 15 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 65
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105082638> : <type 'instance'>
avl_REF2 = set([4, 6, 8, 14, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 6, 8, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10360bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 62
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2288751602 TOTAL RUNTIME
5 EXECUTED
418 TOTAL TEST OPERATIONS
21.7434318066 TIME SPENT EXECUTING TEST OPERATIONS
0.0469410419464 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.8403966427 TIME SPENT CHECKING PROPERTIES
43.5838284492 TOTAL TIME SPENT RUNNING SUT
0.00356435775757 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1 == avl0                                                             # STEP 3
int1 = 18                                                                # STEP 4
int3 = 16                                                                # STEP 5
int2 = 8                                                                 # STEP 6
avl2.insert(int3)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl0.delete(int3)                                                       # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.insert(int3)                                                       # STEP 13
avl0.delete(int1)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
int0 = 15                                                               # STEP 17
int1 = 6                                                                # STEP 18
result = avl2.find(int2)                                                # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl0.delete(int0)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl0.delete(int2)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
int2 = 11                                                               # STEP 28
avl1.delete(int0)                                                       # STEP 29
avl1 == avl1                                                            # STEP 30
int3 = 19                                                               # STEP 31
avl2.insert(int3)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
int0 = 13                                                               # STEP 34
avl2.delete(int2)                                                       # STEP 35
result = avl0.inorder()                                                 # STEP 36
int2 = 7                                                                # STEP 37
avl2.delete(int1)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl1.insert(int3)                                                       # STEP 41
int3 = 10                                                               # STEP 42
avl1.delete(int0)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
avl0.insert(int3)                                                       # STEP 45
int3 = 15                                                               # STEP 46
int2 = 9                                                                # STEP 47
int1 = 9                                                                # STEP 48
avl2.insert(int1)                                                       # STEP 49
int0 = 11                                                               # STEP 50
int1 = 3                                                                # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl2 == avl2                                                            # STEP 53
result = avl1.inorder()                                                 # STEP 54
result = avl0.find(int3)                                                # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl1.insert(int2)                                                       # STEP 58
result = avl0.inorder()                                                 # STEP 59
avl0.delete(int1)                                                       # STEP 60
int0 = 10                                                               # STEP 61
avl0.delete(int2)                                                       # STEP 62
result = avl1.inorder()                                                 # STEP 63
avl2.insert(int3)                                                       # STEP 64
int3 = 5                                                                # STEP 65
avl1.delete(int3)                                                       # STEP 66
int3 = 4                                                                # STEP 67
avl2.delete(int1)                                                       # STEP 68
avl2.display()                                                          # STEP 69
avl2.display()                                                          # STEP 70
avl0.delete(int2)                                                       # STEP 71
avl2.delete(int2)                                                       # STEP 72
avl1.delete(int1)                                                       # STEP 73
avl0.insert(int3)                                                       # STEP 74
avl1.insert(int2)                                                       # STEP 75
avl2.delete(int2)                                                       # STEP 76
avl1.insert(int2)                                                       # STEP 77
avl2.delete(int2)                                                       # STEP 78
avl1.delete(int2)                                                       # STEP 79
avl2.insert(int0)                                                       # STEP 80
avl2.display()                                                          # STEP 81
avl0.insert(int0)                                                       # STEP 82
avl2.insert(int0)                                                       # STEP 83
avl2.insert(int1)                                                       # STEP 84
avl2.insert(int2)                                                       # STEP 85
avl1 == avl0                                                            # STEP 86
result = avl2.inorder()                                                 # STEP 87
int3 = 16                                                               # STEP 88
avl0.delete(int3)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103500290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 4                                                                 # STEP 0
int2 = 13                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int0 = 16                                                                # STEP 3
int1 = 19                                                                # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
int3 = 14                                                                # STEP 7
avl2.delete(int1)                                                        # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2 == avl2                                                            # STEP 10
avl2.delete(int2)                                                       # STEP 11
avl2.delete(int3)                                                       # STEP 12
int0 = 6                                                                # STEP 13
result = avl2.inorder()                                                 # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
result = avl2.find(int0)                                                # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
result = avl2.find(int1)                                                # STEP 20
avl2.insert(int3)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.insert(int3)                                                       # STEP 23
avl2.insert(int2)                                                       # STEP 24
int3 = 16                                                               # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
int1 = 8                                                                # STEP 28
avl2 == avl2                                                            # STEP 29
int2 = 15                                                               # STEP 30
avl2 == avl2                                                            # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.delete(int3)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
int3 = 15                                                               # STEP 36
int1 = 15                                                               # STEP 37
avl2.delete(int3)                                                       # STEP 38
avl2.delete(int2)                                                       # STEP 39
avl2.delete(int2)                                                       # STEP 40
result = avl2.find(int2)                                                # STEP 41
result = avl2.inorder()                                                 # STEP 42
avl2.delete(int1)                                                       # STEP 43
avl2.insert(int1)                                                       # STEP 44
result = avl2.find(int0)                                                # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl2.delete(int2)                                                       # STEP 48
int1 = 1                                                                # STEP 49
int3 = 16                                                               # STEP 50
avl2.insert(int3)                                                       # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl2.delete(int2)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
avl2.delete(int3)                                                       # STEP 55
avl2.delete(int1)                                                       # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl2.delete(int3)                                                       # STEP 58
result = avl2.inorder()                                                 # STEP 59
int0 = 19                                                               # STEP 60
avl2.delete(int3)                                                       # STEP 61
int3 = 10                                                               # STEP 62
int2 = 8                                                                # STEP 63
avl2.delete(int3)                                                       # STEP 64
avl2.delete(int0)                                                       # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10360bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

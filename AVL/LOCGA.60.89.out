Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62552.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([1, 4, 11, 15, 16, 19])
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([1, 4, 11, 15, 16, 19])
TEST #3 STEP #83 (0:00:30.024695) Mon May  1 18:47:34 2017 [ 163 stmts 218 branches ]
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([1, 4, 11, 15, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104890128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.62552.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 15                                                                # STEP 0
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 1
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 3
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 20                                                                # STEP 9
ACTION: int2 = 20 
int2 = 8 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 10
ACTION: int1 = 1 
int1 = 6 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 1                                                                # STEP 12
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 13
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 15
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 21
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 23
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 4                                                                # STEP 24
ACTION: int2 = 4 
int2 = 4 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 25
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 13                                                               # STEP 28
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 15                                                               # STEP 30
ACTION: int1 = 15 
int1 = 1 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 33
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 34
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 11                                                               # STEP 35
ACTION: int0 = 11 
int0 = 15 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 36
ACTION: int3 = 19 
int3 = 13 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 37
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 19, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 8                                                                # STEP 43
ACTION: int3 = 8 
int3 = 19 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 4                                                                # STEP 45
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 4                                                                # STEP 49
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 51
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 52
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 53
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 1, 19, 15]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 54
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 16                                                               # STEP 55
ACTION: int0 = 16 
int0 = 11 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 16                                                               # STEP 57
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 58
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 59
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 61
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 62
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 1, 19, 4, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 63
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 11, 4]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 64
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.display()                                                          # STEP 66
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 4, 11, 15, 16, 19])
==================================================
avl2 == avl2                                                            # STEP 67
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 68
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.delete(int2)                                                       # STEP 69
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 70
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 71
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 72
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 73
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 74
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 18                                                               # STEP 75
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 77
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11, 4]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 78
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 79
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 4, 11, 15, 16, 19])
==================================================
avl2.insert(int2)                                                       # STEP 80
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 81
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 82
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 15                                                               # STEP 83
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 84
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.display()                                                          # STEP 85
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
  15 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 4, 11, 15, 16, 19])
==================================================
avl2.insert(int0)                                                       # STEP 86
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 87
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 88
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 4, 11, 16, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 89
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 90
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 11, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 91
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c30710> : <type 'instance'>
avl_REF0 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 92
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 93
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 94
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 11, 4, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 95
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103c0f680> : <type 'instance'>
avl_REF1 = set([16, 11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 96
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104987050> : <type 'instance'>
avl_REF2 = set([1, 4, 11, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 4, 11, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048975a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049b55f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 22 steps

SAVING TEST AS failure.62552.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 2
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 3
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 4
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 12]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 7
ACTION: int2 = 12 
int2 = 11 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 8                                                                 # STEP 9
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 16                                                               # STEP 11
ACTION: int3 = 16 
int3 = 12 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 12]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 15
ACTION: int0 = 4 
int0 = 8 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 16
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 11, 12]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 18
ACTION: int3 = 10 
int3 = 16 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 19
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([16, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 11, 12, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x104985290> : <type 'instance'>
avl_REF2 = set([16, 11, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 11, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d62fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c7d950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62552.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 1
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 3
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int1)                                                 # STEP 5
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 8
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 20                                                               # STEP 13
ACTION: int2 = 20 
int2 = 11 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 14
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 15
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 16
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl0                                                            # STEP 17
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int0)                                                # STEP 18
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 23
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 10                                                               # STEP 29
ACTION: int0 = 10 
int0 = 12 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 3                                                                # STEP 31
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 18, 12]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 33
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([16, 18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([16, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([16, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 20, 18, 12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([16, 20, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([16, 20, 18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 12, 16, 18, 20]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([3, 12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([3, 12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([3, 12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 10                                                               # STEP 41
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([3, 12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([12, 16, 18, 20]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 43
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 44
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 45
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 12, 16, 18, 20]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 46
ACTION: int0 = 14 
int0 = 10 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 47
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([10, 12, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([10, 12, 16, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c7dcb0> : <type 'instance'>
avl_REF0 = set([10, 12, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 12, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048bc7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 30
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.3023300171 TOTAL RUNTIME
6 EXECUTED
398 TOTAL TEST OPERATIONS
21.0600116253 TIME SPENT EXECUTING TEST OPERATIONS
0.0435786247253 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.1500623226 TIME SPENT CHECKING PROPERTIES
42.2100739479 TOTAL TIME SPENT RUNNING SUT
0.00384473800659 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 15                                                                # STEP 0
int1 = 6                                                                 # STEP 1
int2 = 8                                                                 # STEP 2
int3 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
int2 = 20                                                                # STEP 9
int1 = 1                                                                # STEP 10
avl0.delete(int2)                                                       # STEP 11
int3 = 1                                                                # STEP 12
int2 = 4                                                                # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl0.delete(int3)                                                       # STEP 15
result = avl0.inorder()                                                 # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl0.delete(int3)                                                       # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
result = avl2.find(int1)                                                # STEP 21
avl0.delete(int2)                                                       # STEP 22
result = avl0.inorder()                                                 # STEP 23
int2 = 4                                                                # STEP 24
result = avl0.inorder()                                                 # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl2 == avl2                                                            # STEP 27
int3 = 13                                                               # STEP 28
result = avl0.inorder()                                                 # STEP 29
int1 = 15                                                               # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl2.delete(int3)                                                       # STEP 32
avl1 = avl.AVLTree()                                                    # STEP 33
avl0.insert(int0)                                                       # STEP 34
int0 = 11                                                               # STEP 35
int3 = 19                                                               # STEP 36
avl2 == avl2                                                            # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl2.insert(int3)                                                       # STEP 39
result = avl1.inorder()                                                 # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl0.delete(int3)                                                       # STEP 42
int3 = 8                                                                # STEP 43
avl1.delete(int1)                                                       # STEP 44
int1 = 4                                                                # STEP 45
avl0.delete(int1)                                                       # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
int3 = 4                                                                # STEP 49
result = avl0.find(int0)                                                # STEP 50
result = avl1.find(int2)                                                # STEP 51
avl1.insert(int1)                                                       # STEP 52
avl2.insert(int0)                                                       # STEP 53
result = avl2.find(int1)                                                # STEP 54
int0 = 16                                                               # STEP 55
avl0.delete(int2)                                                       # STEP 56
int1 = 16                                                               # STEP 57
avl0.delete(int1)                                                       # STEP 58
avl0.insert(int1)                                                       # STEP 59
avl0.delete(int2)                                                       # STEP 60
avl1.insert(int3)                                                       # STEP 61
avl2.insert(int3)                                                       # STEP 62
avl1.insert(int1)                                                       # STEP 63
avl2.insert(int1)                                                       # STEP 64
avl0.insert(int1)                                                       # STEP 65
avl2.display()                                                          # STEP 66
avl2 == avl2                                                            # STEP 67
result = avl1.inorder()                                                 # STEP 68
avl0.delete(int2)                                                       # STEP 69
avl1.insert(int2)                                                       # STEP 70
avl0.delete(int2)                                                       # STEP 71
avl2.insert(int3)                                                       # STEP 72
result = avl2.inorder()                                                 # STEP 73
avl2.insert(int2)                                                       # STEP 74
int3 = 18                                                               # STEP 75
avl0.delete(int3)                                                       # STEP 76
avl1.delete(int1)                                                       # STEP 77
avl0.delete(int1)                                                       # STEP 78
avl2.display()                                                          # STEP 79
avl2.insert(int2)                                                       # STEP 80
avl1.delete(int3)                                                       # STEP 81
avl1.delete(int1)                                                       # STEP 82
int2 = 15                                                               # STEP 83
result = avl2.inorder()                                                 # STEP 84
avl2.display()                                                          # STEP 85
avl2.insert(int0)                                                       # STEP 86
avl0.delete(int3)                                                       # STEP 87
avl2.delete(int2)                                                       # STEP 88
avl0.insert(int1)                                                       # STEP 89
avl1.insert(int0)                                                       # STEP 90
avl0.insert(int1)                                                       # STEP 91
avl1.delete(int3)                                                       # STEP 92
avl2.delete(int3)                                                       # STEP 93
avl1.insert(int2)                                                       # STEP 94
avl1.delete(int1)                                                       # STEP 95
avl2.delete(int0)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048975a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
int3 = 12                                                                # STEP 1
int2 = 11                                                                # STEP 2
avl2.delete(int3)                                                        # STEP 3
avl2.insert(int3)                                                        # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
int2 = 12                                                                # STEP 7
avl2.insert(int3)                                                        # STEP 8
int0 = 8                                                                 # STEP 9
result = avl2.inorder()                                                 # STEP 10
int3 = 16                                                               # STEP 11
avl2.delete(int0)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int2)                                                       # STEP 14
int0 = 4                                                                # STEP 15
result = avl2.find(int0)                                                # STEP 16
avl2.insert(int3)                                                       # STEP 17
int3 = 10                                                               # STEP 18
int0 = 5                                                                # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.delete(int2)                                                       # STEP 21
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d62fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int2 = 11                                                                # STEP 0
int1 = 18                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int1)                                                        # STEP 3
avl0.delete(int2)                                                        # STEP 4
result = avl0.find(int1)                                                 # STEP 5
avl0.delete(int2)                                                        # STEP 6
avl0.delete(int1)                                                        # STEP 7
int3 = 6                                                                 # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
int2 = 20                                                               # STEP 13
avl0.delete(int3)                                                       # STEP 14
int0 = 12                                                               # STEP 15
result = avl0.find(int3)                                                # STEP 16
avl0 == avl0                                                            # STEP 17
result = avl0.find(int0)                                                # STEP 18
avl0.insert(int2)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.delete(int2)                                                       # STEP 22
int1 = 16                                                               # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
avl0.delete(int2)                                                       # STEP 28
int0 = 10                                                               # STEP 29
result = avl0.inorder()                                                 # STEP 30
int3 = 3                                                                # STEP 31
avl0.insert(int1)                                                       # STEP 32
result = avl0.inorder()                                                 # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl0.insert(int3)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int3)                                                       # STEP 40
int2 = 10                                                               # STEP 41
avl0.delete(int3)                                                       # STEP 42
int3 = 18                                                               # STEP 43
avl0.insert(int3)                                                       # STEP 44
avl0.insert(int0)                                                       # STEP 45
int0 = 14                                                               # STEP 46
avl0.delete(int3)                                                       # STEP 47
avl0.delete(int1)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048bc7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

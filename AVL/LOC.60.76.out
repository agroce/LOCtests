Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.698.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d23f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 46 steps

SAVING TEST AS failure.698.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 2
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                  # STEP 3
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 7                                                                 # STEP 5
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 6
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 7
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 8
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 10
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 4                                                                # STEP 11
ACTION: int3 = 4 
int3 = 3 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 12
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 14
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 15                                                               # STEP 16
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 17
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 20
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 10                                                               # STEP 21
ACTION: int1 = 10 
int1 = 15 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 22
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 4]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 27
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 15                                                               # STEP 29
ACTION: int1 = 15 
int1 = 10 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 3, 4, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 4, 7]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 35
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF2 = set([10, 4, 7]) : <type 'set'>
avl_REF1 = set([8, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 37
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([8, 3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 4, 7]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 38
ACTION: int2 = 4 
int2 = 3 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 39
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 5                                                                # STEP 41
ACTION: int0 = 5 
int0 = 7 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 42
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10434c8c0> : <type 'instance'>
avl_REF1 = set([3, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 3, 4, 7]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 43
ACTION: int3 = 8 
int3 = 17 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 44
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([10, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 10, 4, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102778638> : <type 'instance'>
avl_REF2 = set([8, 10, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 10, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10424ca28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 3, 9, 10, 17, 18, 20])
  10 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 9, 10, 17, 18, 20])
  10 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 9, 10, 17, 18, 20])
  10 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([2, 9, 10, 17, 18, 20])
TEST #4 STEP #94 (0:00:30.011042) Fri Apr 28 07:03:19 2017 [ 160 stmts 212 branches ]
  3 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 7 [2:-1]
---- < 6 [0:0] L
---- > 20 [1:1]
------ < 9 [0:0] L
set([1, 2, 3, 6, 7, 9, 20])
  7 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([2, 6, 7, 10, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059594d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.698.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 18                                                                # STEP 0
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int0 = 11                                                                # STEP 1
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 2
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 3
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 6
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl1                                                             # STEP 8
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 2                                                                # STEP 13
ACTION: int1 = 2 
int1 = 1 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 4                                                                # STEP 21
ACTION: int0 = 4 
int0 = 11 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 18, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([4, 18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 11, 12, 2]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18, 11, 12]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 8                                                                # STEP 29
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 18 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([18, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.find(int2)                                                # STEP 34
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([11, 12, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 36
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 37
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 3                                                                # STEP 38
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 41
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 42
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 43
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 48
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105959c20> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 11, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d3488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
62.2456870079 TOTAL RUNTIME
9 EXECUTED
696 TOTAL TEST OPERATIONS
26.9393954277 TIME SPENT EXECUTING TEST OPERATIONS
0.0720431804657 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.0932898521 TIME SPENT CHECKING PROPERTIES
54.0326852798 TOTAL TIME SPENT RUNNING SUT
0.00459575653076 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl2 == avl2                                                             # STEP 2
result = avl2.inorder()                                                  # STEP 3
result = avl2.inorder()                                                  # STEP 4
int0 = 7                                                                 # STEP 5
int3 = 3                                                                 # STEP 6
int1 = 13                                                                # STEP 7
int2 = 3                                                                 # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl2.delete(int3)                                                       # STEP 10
int3 = 4                                                                # STEP 11
int1 = 12                                                               # STEP 12
avl2.insert(int3)                                                       # STEP 13
result = avl1.find(int1)                                                # STEP 14
avl1.delete(int0)                                                       # STEP 15
int1 = 15                                                               # STEP 16
avl1.insert(int3)                                                       # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl2.delete(int0)                                                       # STEP 19
result = avl1.find(int0)                                                # STEP 20
int1 = 10                                                               # STEP 21
int3 = 8                                                                # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl1.insert(int2)                                                       # STEP 25
result = avl2.find(int1)                                                # STEP 26
result = avl2.find(int2)                                                # STEP 27
avl1.delete(int1)                                                       # STEP 28
int1 = 15                                                               # STEP 29
avl1.insert(int0)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl2 == avl1                                                            # STEP 35
avl2.delete(int2)                                                       # STEP 36
avl1.delete(int3)                                                       # STEP 37
int2 = 4                                                                # STEP 38
int3 = 17                                                               # STEP 39
result = avl1.inorder()                                                 # STEP 40
int0 = 5                                                                # STEP 41
avl1.insert(int3)                                                       # STEP 42
int3 = 8                                                                # STEP 43
avl2.insert(int3)                                                       # STEP 44
avl2.delete(int2)                                                       # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10424ca28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 18                                                                # STEP 0
int0 = 11                                                                # STEP 1
int1 = 1                                                                 # STEP 2
int2 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1 == avl1                                                             # STEP 6
avl1.delete(int1)                                                        # STEP 7
avl1 == avl1                                                             # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.insert(int2)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
int1 = 2                                                                # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int3)                                                       # STEP 19
result = avl1.inorder()                                                 # STEP 20
int0 = 4                                                                # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.delete(int0)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
int0 = 8                                                                # STEP 29
int3 = 8                                                                # STEP 30
avl1.insert(int3)                                                       # STEP 31
result = avl1.inorder()                                                 # STEP 32
avl1.insert(int2)                                                       # STEP 33
result = avl1.find(int2)                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
result = avl1.inorder()                                                 # STEP 36
avl1.delete(int0)                                                       # STEP 37
int3 = 3                                                                # STEP 38
avl1.delete(int0)                                                       # STEP 39
avl1.insert(int0)                                                       # STEP 40
int0 = 18                                                               # STEP 41
int2 = 20                                                               # STEP 42
result = avl1.find(int1)                                                # STEP 43
result = avl1.inorder()                                                 # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.delete(int1)                                                       # STEP 46
avl1.delete(int1)                                                       # STEP 47
result = avl1.find(int0)                                                # STEP 48
avl1.delete(int0)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d3488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

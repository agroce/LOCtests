Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.645.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b3df38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.645.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 14                                                                # STEP 0
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 1
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 2
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int0 = 3                                                                 # STEP 5
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 3                                                                # STEP 16
ACTION: int1 = 3 
int1 = 2 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 17
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 3, 15]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 20
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int2 = 4                                                                # STEP 25
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103adbd88> : <type 'instance'>
avl_REF1 = set([2, 3, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 3, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d6ddd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b98bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 24 steps

SAVING TEST AS failure.645.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 18                                                                # STEP 6
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 11
ACTION: int0 = 6 
int0 = 2 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int1 = 7                                                                # STEP 13
ACTION: int1 = 7 
int1 = 20 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 1                                                                # STEP 20
ACTION: int3 = 1 
int3 = 20 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103ba9200> : <type 'instance'>
avl_REF0 = set([18, 20, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 20, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e284d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
  8 [3:0]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [0:0] L
set([4, 5, 6, 7, 8, 14, 16, 18, 19])
  8 [3:0]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [0:0] L
set([4, 5, 6, 7, 8, 14, 16, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f24200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.645.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 2
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 2                                                                 # STEP 7
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 17                                                                # STEP 8
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 1                                                                # STEP 12
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 13
ACTION: int1 = 6 
int1 = 16 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 14
ACTION: int0 = 15 
int0 = 2 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 20
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 6                                                                # STEP 21
ACTION: int0 = 6 
int0 = 15 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 22
ACTION: int2 = 6 
int2 = 17 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 23
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 4                                                                # STEP 25
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 1]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 29
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 30
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 4, 6]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 34
ACTION: int1 = 10 
int1 = 4 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 8                                                                # STEP 36
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 39
ACTION: result = avl2.find(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 8, 6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 44
ACTION: int3 = 18 
int3 = 4 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 4                                                                # STEP 47
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 48
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 49
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 50
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 8, 4, 5, 6]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 51
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([16, 8, 4, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 6, 8, 16, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5, 6, 8, 10, 16, 18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 55
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 5, 6, 8, 16, 18]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 56
ACTION: int3 = 20 
int3 = 18 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 57
ACTION: int0 = 4 
int0 = 8 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 58
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 5, 6, 8, 16, 18, 19]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 60
ACTION: int1 = 14 
int1 = 10 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 6, 8, 16, 18, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 5, 6, 8, 16, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 65
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 66
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 67
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a61b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 68
ACTION: int0 = 7 
int0 = 4 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 69
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
==================================================
avl2.display()                                                          # STEP 70
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
==================================================
avl2.display()                                                          # STEP 71
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
  8 [3:-1]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 6 [0:0] L
-- > 18 [2:0]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 8, 14, 16, 18, 19, 20])
==================================================
result = avl0.find(int2)                                                # STEP 72
ACTION: result = avl0.find(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 73
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 74
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 76
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.display()                                                          # STEP 77
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
  8 [3:0]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 7, 8, 14, 16, 18, 19])
==================================================
avl2.insert(int1)                                                       # STEP 78
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 79
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a61b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 80
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
  8 [3:0]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 14 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 6, 7, 8, 14, 16, 18, 19])
==================================================
avl2.delete(int2)                                                       # STEP 81
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b78368> : <type 'instance'>
avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 5, 6, 7, 8, 14, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a55638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  15 [2:0]
-- < 10 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([4, 10, 11, 15, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a7b368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.645.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int1 = 5                                                                 # STEP 6
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 7
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 9                                                                # STEP 12
ACTION: int0 = 9 
int0 = 16 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 18]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 15
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 18, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 18, 19, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 18, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int2)                                                       # STEP 30
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 34
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl2                                                            # STEP 36
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 14                                                               # STEP 37
ACTION: int0 = 14 
int0 = 9 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0 == avl2                                                            # STEP 39
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 2                                                                # STEP 40
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 42
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 18, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 45
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 47
ACTION: int3 = 4 
int3 = 19 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 48
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 49
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 50
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 51
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 52
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 14]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 54
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 57
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 58
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 10                                                               # STEP 59
ACTION: int3 = 10 
int3 = 4 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 14]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 62
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 14, 18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 65
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 19, 4]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 67
ACTION: int0 = 20 
int0 = 10 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 10, 19, 4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 70
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 10, 4, 14]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 71
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 72
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 73
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 12                                                               # STEP 74
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 75
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([20, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 76
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([20, 10, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([20, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([20, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 79
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 80
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 81
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 18                                                               # STEP 82
ACTION: int2 = 18 
int2 = 4 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 83
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 84
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 20                                                               # STEP 85
ACTION: int3 = 20 
int3 = 5 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 86
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([20, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 10, 19, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 87
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 11                                                               # STEP 88
ACTION: int0 = 11 
int0 = 15 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 89
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([20, 10, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 10, 11, 15, 19, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 90
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x103f1d908> : <type 'instance'>
avl_REF1 = set([4, 10, 11, 15, 19, 20]) : <type 'set'>
  15 [2:0]
-- < 10 [1:0]
---- < 4 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 10, 11, 15, 19, 20])
==================================================
avl0.insert(int2)                                                       # STEP 91
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f2df38> : <type 'instance'>
avl_REF0 = set([20, 10, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 10, 4, 18, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 92
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a554d0> : <type 'instance'>
avl_REF2 = set([4, 9, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 9, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a76488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:37.560075) Fri Apr 28 06:54:13 2017 [ 148 stmts 197 branches ]
  15 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 9, 12, 15, 17, 20])
  15 [2:0]
-- < 9 [1:0]
---- < 4 [0:0] L
---- > 12 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([4, 9, 12, 15, 17, 20])
  15 [2:0]
-- < 8 [1:0]
---- < 5 [0:0] L
---- > 14 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([5, 8, 14, 15, 17, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 92
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.1859278679 TOTAL RUNTIME
7 EXECUTED
519 TOTAL TEST OPERATIONS
20.5421090126 TIME SPENT EXECUTING TEST OPERATIONS
0.0548810958862 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.6238193512 TIME SPENT CHECKING PROPERTIES
41.1659283638 TOTAL TIME SPENT RUNNING SUT
0.0042245388031 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 14                                                                # STEP 0
int1 = 2                                                                 # STEP 1
int3 = 15                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int1)                                                        # STEP 4
int0 = 3                                                                 # STEP 5
avl1.delete(int1)                                                        # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.delete(int0)                                                       # STEP 12
result = avl1.find(int2)                                                # STEP 13
result = avl1.inorder()                                                 # STEP 14
result = avl1.inorder()                                                 # STEP 15
int1 = 3                                                                # STEP 16
int3 = 15                                                               # STEP 17
avl1.insert(int1)                                                       # STEP 18
result = avl1.find(int0)                                                # STEP 19
result = avl1.find(int0)                                                # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.delete(int1)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
int2 = 4                                                                # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d6ddd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 20                                                                # STEP 0
int3 = 20                                                                # STEP 1
int0 = 2                                                                 # STEP 2
int2 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
int2 = 18                                                                # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
int0 = 6                                                                # STEP 11
avl0.insert(int3)                                                       # STEP 12
int1 = 7                                                                # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl0.insert(int1)                                                       # STEP 18
avl0.delete(int2)                                                       # STEP 19
int3 = 1                                                                # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0.delete(int0)                                                       # STEP 23
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e284d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 16                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.inorder()                                                  # STEP 2
avl2.insert(int1)                                                        # STEP 3
avl2.insert(int1)                                                        # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
int0 = 2                                                                 # STEP 7
int2 = 17                                                                # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.delete(int0)                                                       # STEP 11
int3 = 1                                                                # STEP 12
int1 = 6                                                                # STEP 13
int0 = 15                                                               # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
result = avl2.find(int1)                                                # STEP 20
int0 = 6                                                                # STEP 21
int2 = 6                                                                # STEP 22
avl2.insert(int1)                                                       # STEP 23
result = avl2.inorder()                                                 # STEP 24
int1 = 4                                                                # STEP 25
avl2.insert(int2)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.delete(int3)                                                       # STEP 28
int2 = 5                                                                # STEP 29
int3 = 4                                                                # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.insert(int0)                                                       # STEP 33
int1 = 10                                                               # STEP 34
avl2.insert(int0)                                                       # STEP 35
int0 = 8                                                                # STEP 36
avl2.delete(int3)                                                       # STEP 37
avl2.delete(int2)                                                       # STEP 38
result = avl2.find(int1)                                                # STEP 39
avl2.delete(int3)                                                       # STEP 40
avl2.delete(int0)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
int3 = 18                                                               # STEP 44
avl2.insert(int0)                                                       # STEP 45
avl2.insert(int2)                                                       # STEP 46
int2 = 4                                                                # STEP 47
avl2.delete(int3)                                                       # STEP 48
avl2.delete(int1)                                                       # STEP 49
avl2.insert(int2)                                                       # STEP 50
int2 = 19                                                               # STEP 51
avl2.insert(int3)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
avl2.delete(int2)                                                       # STEP 54
avl2.delete(int1)                                                       # STEP 55
int3 = 20                                                               # STEP 56
int0 = 4                                                                # STEP 57
avl2.delete(int2)                                                       # STEP 58
avl2.insert(int2)                                                       # STEP 59
int1 = 14                                                               # STEP 60
avl2.insert(int3)                                                       # STEP 61
avl2.delete(int3)                                                       # STEP 62
avl2.insert(int1)                                                       # STEP 63
avl2.delete(int3)                                                       # STEP 64
avl2.insert(int3)                                                       # STEP 65
avl2.insert(int0)                                                       # STEP 66
avl0 = avl.AVLTree()                                                    # STEP 67
int0 = 7                                                                # STEP 68
avl2.display()                                                          # STEP 69
avl2.display()                                                          # STEP 70
avl2.display()                                                          # STEP 71
result = avl0.find(int2)                                                # STEP 72
avl2.delete(int3)                                                       # STEP 73
avl2.delete(int3)                                                       # STEP 74
avl2.insert(int0)                                                       # STEP 75
avl2.delete(int3)                                                       # STEP 76
avl2.display()                                                          # STEP 77
avl2.insert(int1)                                                       # STEP 78
avl0.insert(int3)                                                       # STEP 79
avl2.display()                                                          # STEP 80
avl2.delete(int2)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a55638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int2 = 20                                                                # STEP 0
int3 = 19                                                                # STEP 1
int1 = 18                                                                # STEP 2
int0 = 16                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
int1 = 5                                                                 # STEP 6
result = avl2.find(int1)                                                 # STEP 7
avl2.delete(int0)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.delete(int0)                                                       # STEP 10
result = avl2.inorder()                                                 # STEP 11
int0 = 9                                                                # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl0 = avl.AVLTree()                                                    # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.insert(int1)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
avl0.delete(int0)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl2.delete(int2)                                                       # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
avl0.delete(int0)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
avl1.delete(int2)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
avl1 == avl2                                                            # STEP 36
int0 = 14                                                               # STEP 37
avl1.delete(int3)                                                       # STEP 38
avl0 == avl2                                                            # STEP 39
int2 = 2                                                                # STEP 40
avl1.insert(int3)                                                       # STEP 41
avl2.insert(int0)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
int1 = 20                                                               # STEP 45
avl0.insert(int0)                                                       # STEP 46
int3 = 4                                                                # STEP 47
int0 = 10                                                               # STEP 48
result = avl1.find(int3)                                                # STEP 49
avl1.delete(int0)                                                       # STEP 50
avl2.delete(int2)                                                       # STEP 51
avl2.delete(int0)                                                       # STEP 52
avl0.insert(int2)                                                       # STEP 53
avl0 == avl1                                                            # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl1.delete(int1)                                                       # STEP 57
avl0 == avl2                                                            # STEP 58
int3 = 10                                                               # STEP 59
avl0.delete(int2)                                                       # STEP 60
avl0.insert(int3)                                                       # STEP 61
int2 = 4                                                                # STEP 62
avl0.insert(int2)                                                       # STEP 63
avl2.delete(int2)                                                       # STEP 64
avl1.insert(int2)                                                       # STEP 65
avl1.insert(int3)                                                       # STEP 66
int0 = 20                                                               # STEP 67
avl1.insert(int0)                                                       # STEP 68
avl0.insert(int2)                                                       # STEP 69
avl0.insert(int0)                                                       # STEP 70
int3 = 5                                                                # STEP 71
avl2.insert(int2)                                                       # STEP 72
avl2.insert(int2)                                                       # STEP 73
int1 = 12                                                               # STEP 74
result = avl1.find(int2)                                                # STEP 75
result = avl0.find(int2)                                                # STEP 76
result = avl1.inorder()                                                 # STEP 77
avl1.insert(int2)                                                       # STEP 78
avl2.insert(int2)                                                       # STEP 79
result = avl2.inorder()                                                 # STEP 80
avl2.delete(int3)                                                       # STEP 81
int2 = 18                                                               # STEP 82
int0 = 15                                                               # STEP 83
result = avl2.inorder()                                                 # STEP 84
int3 = 20                                                               # STEP 85
avl1.insert(int0)                                                       # STEP 86
avl2.delete(int1)                                                       # STEP 87
int0 = 11                                                               # STEP 88
avl1.insert(int0)                                                       # STEP 89
avl1.display()                                                          # STEP 90
avl0.insert(int2)                                                       # STEP 91
avl2.delete(int2)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a76488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

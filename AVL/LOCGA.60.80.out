Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62484.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1020c9ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 64 steps

SAVING TEST AS failure.62484.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 10                                                                # STEP 7
ACTION: int1 = 10 
int1 = 3 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 8
ACTION: int2 = 18 
int2 = 12 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 15                                                               # STEP 15
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 22
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 23
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 19, 5, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 28
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10, 19, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 29
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([10, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 34
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 11                                                               # STEP 36
ACTION: int3 = 11 
int3 = 15 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 17                                                               # STEP 38
ACTION: int1 = 17 
int1 = 19 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 20                                                               # STEP 43
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 44
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 45
ACTION: int0 = 4 
int0 = 7 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 19, 4]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 47
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 48
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 2                                                                # STEP 49
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 19, 4, 18]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 51
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 52
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([10, 19, 4, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 10, 11, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 53
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([4, 10, 11, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 10, 18, 19]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 54
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([4, 10, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 55
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([4, 10, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 10, 18, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([4, 10, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4, 10, 18, 19, 20]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 57
ACTION: int2 = 19 
int2 = 20 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 58
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([2, 4, 10, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 59
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([2, 4, 10, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 14                                                               # STEP 60
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([2, 4, 10, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 10, 14, 18, 19, 20]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 62
ACTION: int3 = 19 
int3 = 14 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 63
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026d8200> : <type 'instance'>
avl_REF2 = set([2, 4, 10, 14, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 4, 10, 14, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1013974d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  15 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 7, 13, 15, 17, 18])
  15 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 7, 13, 15, 17, 18])
  15 [2:0]
-- < 7 [1:0]
---- < 1 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 17 [0:0] L
set([1, 7, 13, 15, 17, 18])
  8 [2:0]
-- < 7 [1:1]
---- < 6 [0:0] L
-- > 13 [1:0]
---- < 9 [0:0] L
---- > 16 [0:0] L
set([6, 7, 8, 9, 13, 16])
TEST #3 STEP #59 (0:00:30.094322) Mon May  1 18:38:09 2017 [ 157 stmts 208 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10174f200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.62484.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 20                                                                # STEP 0
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 1
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 3
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 14]) : <type 'set'>
==================================================
int3 = 18                                                                # STEP 9
ACTION: int3 = 18 
int3 = 20 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 20                                                               # STEP 11
ACTION: int0 = 20 
int0 = 14 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 13
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 14
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20, 14, 7]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 18
ACTION: int1 = 5 
int1 = 7 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 19
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([14, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([20, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 25
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20, 5]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 20, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 15                                                               # STEP 29
ACTION: int3 = 15 
int3 = 17 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 32
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 35
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 37
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 20                                                               # STEP 46
ACTION: int1 = 20 
int1 = 5 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 20                                                               # STEP 49
ACTION: int3 = 20 
int3 = 15 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 52
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 54
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 55
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 13                                                               # STEP 56
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 57
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 58
ACTION: int2 = 1 
int2 = 13 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 59
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 20, 5, 14, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 60
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([1, 20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 61
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 20, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 20, 15]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 64
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([1, 20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 66
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 67
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 69
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026f2e60> : <type 'instance'>
avl_REF2 = set([1, 20, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2, 15, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 70
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10174f4d0> : <type 'instance'>
avl_REF1 = set([1, 20, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10165b7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1016575f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.62484.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 7                                                                 # STEP 0
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 18]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 11
ACTION: int2 = 6 
int2 = 18 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 12
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 9, 18]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 15
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl2                                                            # STEP 16
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 9, 18, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 18, 6, 8]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101657c68> : <type 'instance'>
avl_REF2 = set([16, 9, 18, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 18, 6, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101725b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
8.09634358677 PERCENT COVERED
60.2741940022 TOTAL RUNTIME
6 EXECUTED
415 TOTAL TEST OPERATIONS
21.8138568401 TIME SPENT EXECUTING TEST OPERATIONS
0.0474181175232 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.846082449 TIME SPENT CHECKING PROPERTIES
43.6599392891 TOTAL TIME SPENT RUNNING SUT
0.00408387184143 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 7                                                                 # STEP 0
int2 = 12                                                                # STEP 1
int1 = 3                                                                 # STEP 2
int3 = 10                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
int1 = 10                                                                # STEP 7
int2 = 18                                                                # STEP 8
avl2.insert(int1)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
avl2.delete(int3)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
int3 = 15                                                               # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.insert(int1)                                                       # STEP 20
result = avl2.find(int2)                                                # STEP 21
int2 = 5                                                                # STEP 22
int1 = 19                                                               # STEP 23
avl2.insert(int2)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl2.delete(int0)                                                       # STEP 28
avl2.insert(int1)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
avl2.delete(int2)                                                       # STEP 34
result = avl2.inorder()                                                 # STEP 35
int3 = 11                                                               # STEP 36
avl2.insert(int1)                                                       # STEP 37
int1 = 17                                                               # STEP 38
avl2.delete(int1)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2.delete(int2)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
int2 = 20                                                               # STEP 43
int1 = 18                                                               # STEP 44
int0 = 4                                                                # STEP 45
avl2.insert(int0)                                                       # STEP 46
result = avl2.inorder()                                                 # STEP 47
avl2 == avl2                                                            # STEP 48
int0 = 2                                                                # STEP 49
avl2.insert(int1)                                                       # STEP 50
int1 = 2                                                                # STEP 51
avl2.insert(int3)                                                       # STEP 52
avl2.delete(int3)                                                       # STEP 53
result = avl2.inorder()                                                 # STEP 54
avl2.insert(int2)                                                       # STEP 55
avl2.insert(int0)                                                       # STEP 56
int2 = 19                                                               # STEP 57
avl2.insert(int1)                                                       # STEP 58
avl2.delete(int3)                                                       # STEP 59
int3 = 14                                                               # STEP 60
avl2.insert(int3)                                                       # STEP 61
int3 = 19                                                               # STEP 62
avl2.delete(int3)                                                       # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1013974d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 20                                                                # STEP 0
int1 = 7                                                                 # STEP 1
int0 = 14                                                                # STEP 2
int2 = 3                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1 == avl1                                                             # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
avl1.insert(int0)                                                        # STEP 8
int3 = 18                                                                # STEP 9
avl1 == avl1                                                            # STEP 10
int0 = 20                                                               # STEP 11
avl1 == avl1                                                            # STEP 12
result = avl1.find(int3)                                                # STEP 13
int3 = 17                                                               # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.delete(int3)                                                       # STEP 16
avl1.insert(int1)                                                       # STEP 17
int1 = 5                                                                # STEP 18
avl2 = avl.AVLTree()                                                    # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl1.insert(int0)                                                       # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl2.insert(int0)                                                       # STEP 24
avl2.insert(int1)                                                       # STEP 25
avl2.insert(int2)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
int3 = 15                                                               # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl1.delete(int2)                                                       # STEP 32
avl2.insert(int0)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
avl2.delete(int3)                                                       # STEP 35
result = avl1.find(int0)                                                # STEP 36
avl2.delete(int0)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
result = avl2.inorder()                                                 # STEP 45
int1 = 20                                                               # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl1.delete(int2)                                                       # STEP 48
int3 = 20                                                               # STEP 49
avl2.delete(int2)                                                       # STEP 50
avl1.insert(int1)                                                       # STEP 51
avl2.insert(int0)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl1.insert(int1)                                                       # STEP 54
avl1.delete(int2)                                                       # STEP 55
int2 = 13                                                               # STEP 56
result = avl1.find(int2)                                                # STEP 57
int2 = 1                                                                # STEP 58
avl1.insert(int2)                                                       # STEP 59
avl1.insert(int1)                                                       # STEP 60
avl2.insert(int2)                                                       # STEP 61
avl2.delete(int1)                                                       # STEP 62
avl2.insert(int1)                                                       # STEP 63
int1 = 2                                                                # STEP 64
avl1.insert(int0)                                                       # STEP 65
avl2.delete(int1)                                                       # STEP 66
avl2.delete(int1)                                                       # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl2.insert(int1)                                                       # STEP 69
avl1.delete(int0)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10165b7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int1 = 7                                                                 # STEP 0
int3 = 8                                                                 # STEP 1
int0 = 16                                                                # STEP 2
int2 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.insert(int2)                                                       # STEP 10
int2 = 6                                                                # STEP 11
int1 = 9                                                                # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.insert(int1)                                                       # STEP 14
result = avl2.find(int2)                                                # STEP 15
avl2 == avl2                                                            # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.insert(int2)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101725b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
210 BRANCHES COVERED
158 STATEMENTS COVERED

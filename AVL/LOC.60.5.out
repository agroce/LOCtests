Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99231.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041955a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.99231.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 2
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 3
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 7]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 20, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 10, 20, 7]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 17
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 10, 20]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 20
ACTION: result = avl1.find(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int1 = 17                                                               # STEP 21
ACTION: int1 = 17 
int1 = 10 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl1                                                            # STEP 23
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 20, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444ae60> : <type 'instance'>
avl_REF1 = set([8, 10, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 10, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104743758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  8 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 14, 19, 20])
  8 [2:0]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 14, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042bd488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.99231.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 16                                                                # STEP 0
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 3
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 4]) : <type 'set'>
==================================================
int2 = 8                                                                 # STEP 8
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 11
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 10                                                               # STEP 15
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 16
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 17
ACTION: int1 = 6 
int1 = 9 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 4, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 4, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 10, 4, 6, 15]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 25
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 27
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 28
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 10, 4, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([8, 10, 4, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 6, 7, 8, 10, 15]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 30
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 31
ACTION: result = avl1.find(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 32
ACTION: int3 = 6 
int3 = 16 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 6, 7, 8, 10, 15, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 6, 7, 8, 10, 14, 15, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 42
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([4, 8, 10, 15, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 48
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1042bd950> : <type 'instance'>
avl_REF1 = set([4, 7, 8, 10, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 7, 8, 10, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042b1518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  11 [2:0]
-- < 9 [1:0]
---- < 6 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([6, 9, 10, 11, 16, 17, 19])
  11 [2:0]
-- < 9 [1:-1]
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([9, 10, 11, 16, 17, 19])
  11 [2:0]
-- < 9 [1:-1]
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([9, 10, 11, 16, 17, 19])
  11 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([7, 9, 10, 11, 16, 17, 19])
  11 [3:1]
-- < 9 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 6, 9, 10, 11, 16, 17, 19])
  11 [3:1]
-- < 9 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 6, 9, 10, 11, 16, 17, 19])
TEST #5 STEP #38 (0:00:30.054120) Fri Apr 28 03:26:20 2017 [ 160 stmts 211 branches ]
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:1]
------ < 15 [0:0] L
set([1, 5, 6, 8, 13, 15, 16])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:0]
------ < 15 [0:0] L
------ > 17 [0:0] L
set([1, 5, 6, 8, 13, 15, 16, 17])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:0]
------ < 15 [0:0] L
------ > 17 [0:0] L
set([1, 5, 6, 8, 13, 15, 16, 17])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:0]
------ < 15 [0:0] L
------ > 17 [0:0] L
set([1, 5, 6, 8, 13, 15, 16, 17])
  6 [3:-1]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 13 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:0]
------ < 15 [0:0] L
------ > 17 [0:0] L
set([1, 5, 6, 8, 13, 15, 16, 17])
  13 [3:1]
-- < 9 [2:1]
---- < 4 [1:1]
------ < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([3, 4, 9, 11, 13, 19, 20])
  13 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 13, 19, 20])
  13 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 9, 11, 13, 17, 19, 20])
  17 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 17, 19, 20])
  17 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 17, 19, 20])
  17 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([3, 9, 11, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10467df80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.99231.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 1
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 3
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 14                                                                # STEP 9
ACTION: int2 = 14 
int2 = 8 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 10
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 14]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 13
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 12, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 12, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 12, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 4, 14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 24
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 25
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104683440> : <type 'instance'>
avl_REF2 = set([8, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 4, 14]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 29
ACTION: int2 = 12 
int2 = 14 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 30
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([11, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 4, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 32
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105862050> : <type 'instance'>
avl_REF0 = set([11, 4, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058663f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2207889557 TOTAL RUNTIME
9 EXECUTED
670 TOTAL TEST OPERATIONS
25.7752323151 TIME SPENT EXECUTING TEST OPERATIONS
0.0779769420624 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8469910622 TIME SPENT CHECKING PROPERTIES
51.6222233772 TOTAL TIME SPENT RUNNING SUT
0.00510001182556 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int3 = 20                                                                # STEP 2
int0 = 8                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.delete(int2)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.insert(int2)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
int0 = 3                                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
result = avl1.find(int3)                                                # STEP 20
int1 = 17                                                               # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl1 == avl1                                                            # STEP 23
avl1.insert(int2)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104743758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 16                                                                # STEP 0
int1 = 9                                                                 # STEP 1
int0 = 16                                                                # STEP 2
int2 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.delete(int2)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
int2 = 8                                                                 # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
int0 = 15                                                               # STEP 11
avl1.insert(int2)                                                       # STEP 12
avl1 == avl1                                                            # STEP 13
avl1.insert(int2)                                                       # STEP 14
int2 = 10                                                               # STEP 15
result = avl1.find(int1)                                                # STEP 16
int1 = 6                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.insert(int0)                                                       # STEP 24
int2 = 4                                                                # STEP 25
int1 = 18                                                               # STEP 26
int0 = 7                                                                # STEP 27
result = avl1.find(int2)                                                # STEP 28
avl1.insert(int0)                                                       # STEP 29
int2 = 14                                                               # STEP 30
result = avl1.find(int3)                                                # STEP 31
int3 = 6                                                                # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
avl1.insert(int1)                                                       # STEP 37
avl1.delete(int3)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl1.delete(int2)                                                       # STEP 41
int3 = 14                                                               # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
result = avl1.find(int3)                                                # STEP 46
avl1.insert(int3)                                                       # STEP 47
result = avl1.inorder()                                                 # STEP 48
avl1.delete(int1)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042b1518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int0 = 8                                                                 # STEP 0
int1 = 18                                                                # STEP 1
int2 = 8                                                                 # STEP 2
int3 = 8                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.delete(int2)                                                        # STEP 8
int2 = 14                                                                # STEP 9
int1 = 4                                                                # STEP 10
avl2.insert(int0)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
int0 = 12                                                               # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl0.delete(int0)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
int1 = 11                                                               # STEP 24
result = avl2.find(int1)                                                # STEP 25
avl2.delete(int1)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
int2 = 12                                                               # STEP 29
int0 = 5                                                                # STEP 30
avl0.insert(int0)                                                       # STEP 31
avl0.delete(int1)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058663f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99701.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #84 (0:00:30.063936) Fri Apr 28 04:40:42 2017 [ 135 stmts 182 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10433e680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.99701.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 1
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 3
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 1                                                                 # STEP 7
ACTION: int3 = 1 
int3 = 9 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int1)                                                 # STEP 9
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 10
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 11
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 12                                                               # STEP 12
ACTION: int0 = 12 
int0 = 14 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 13                                                               # STEP 14
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 11                                                               # STEP 16
ACTION: int1 = 11 
int1 = 15 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 19
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 11                                                               # STEP 23
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 24
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 14                                                               # STEP 25
ACTION: int3 = 14 
int3 = 13 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 28
ACTION: int2 = 2 
int2 = 3 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 29
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 30
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 9                                                                # STEP 33
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 34
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 35
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 36
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 5                                                                # STEP 40
ACTION: int1 = 5 
int1 = 9 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 41
ACTION: int0 = 9 
int0 = 17 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 5]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 43
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
avl_REF0 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 44
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 7                                                                # STEP 45
ACTION: int3 = 7 
int3 = 15 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 46
ACTION: int1 = 12 
int1 = 5 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 47
ACTION: int2 = 18 
int2 = 2 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 48
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 49
ACTION: int3 = 10 
int3 = 7 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 51
ACTION: int2 = 6 
int2 = 18 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 52
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 12, 5]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 55
ACTION: int0 = 8 
int0 = 9 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 56
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 57
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl0                                                            # STEP 58
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF0 = set([17, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 14                                                               # STEP 61
ACTION: int0 = 14 
int0 = 8 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 62
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0 == avl1                                                            # STEP 63
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF0 = set([17, 12, 5]) : <type 'set'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl0                                                            # STEP 65
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
avl_REF0 = set([17, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 15                                                               # STEP 66
ACTION: int1 = 15 
int1 = 7 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 67
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 13, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 69
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 70
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 71
ACTION: int1 = 15 
int1 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 14                                                               # STEP 73
ACTION: int0 = 14 
int0 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 74
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 75
ACTION: int2 = 12 
int2 = 6 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 76
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 77
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl2.find(int1)                                                # STEP 78
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 79
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 12]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 80
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int2)                                                       # STEP 81
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 82
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 83
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 14                                                               # STEP 84
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 85
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 86
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104354248> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 18                                                               # STEP 87
ACTION: int1 = 18 
int1 = 15 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 88
ACTION: int0 = 9 
int0 = 14 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 89
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int1)                                                # STEP 90
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466dcf8> : <type 'instance'>
avl_REF0 = set([17, 12, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 91
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042afef0> : <type 'instance'>
avl_REF2 = set([6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([6, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045ab638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 89
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.2013361454 TOTAL RUNTIME
7 EXECUTED
681 TOTAL TEST OPERATIONS
26.4475967884 TIME SPENT EXECUTING TEST OPERATIONS
0.023756980896 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.6162712574 TIME SPENT CHECKING PROPERTIES
53.0638680458 TOTAL TIME SPENT RUNNING SUT
0.00402402877808 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int3 = 9                                                                 # STEP 1
int2 = 18                                                                # STEP 2
int0 = 14                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int3)                                                 # STEP 5
avl0.delete(int2)                                                        # STEP 6
int3 = 1                                                                 # STEP 7
result = avl0.find(int0)                                                 # STEP 8
result = avl0.find(int1)                                                 # STEP 9
int1 = 15                                                               # STEP 10
int2 = 3                                                                # STEP 11
int0 = 12                                                               # STEP 12
avl0.delete(int3)                                                       # STEP 13
int3 = 13                                                               # STEP 14
avl0.delete(int1)                                                       # STEP 15
int1 = 11                                                               # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2 == avl0                                                            # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl2 == avl2                                                            # STEP 21
avl0.delete(int0)                                                       # STEP 22
int0 = 11                                                               # STEP 23
avl0 == avl0                                                            # STEP 24
int3 = 14                                                               # STEP 25
avl0.delete(int1)                                                       # STEP 26
result = avl0.find(int2)                                                # STEP 27
int2 = 2                                                                # STEP 28
result = avl0.find(int1)                                                # STEP 29
avl2.insert(int0)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
result = avl0.find(int3)                                                # STEP 32
int1 = 9                                                                # STEP 33
int3 = 15                                                               # STEP 34
int0 = 17                                                               # STEP 35
avl1 = avl.AVLTree()                                                    # STEP 36
avl0.delete(int3)                                                       # STEP 37
avl0.insert(int0)                                                       # STEP 38
avl2.delete(int1)                                                       # STEP 39
int1 = 5                                                                # STEP 40
int0 = 9                                                                # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl2 == avl0                                                            # STEP 43
avl0.delete(int2)                                                       # STEP 44
int3 = 7                                                                # STEP 45
int1 = 12                                                               # STEP 46
int2 = 18                                                               # STEP 47
result = avl2.find(int3)                                                # STEP 48
int3 = 10                                                               # STEP 49
avl1.insert(int2)                                                       # STEP 50
int2 = 6                                                                # STEP 51
result = avl0.find(int1)                                                # STEP 52
avl0.delete(int0)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
int0 = 8                                                                # STEP 55
int1 = 7                                                                # STEP 56
result = avl1.inorder()                                                 # STEP 57
avl1 == avl0                                                            # STEP 58
avl1.delete(int0)                                                       # STEP 59
result = avl2.inorder()                                                 # STEP 60
int0 = 14                                                               # STEP 61
avl1 == avl2                                                            # STEP 62
avl0 == avl1                                                            # STEP 63
avl2.delete(int1)                                                       # STEP 64
avl2 == avl0                                                            # STEP 65
int1 = 15                                                               # STEP 66
avl1 == avl2                                                            # STEP 67
avl2.insert(int0)                                                       # STEP 68
result = avl0.inorder()                                                 # STEP 69
avl0.insert(int1)                                                       # STEP 70
int1 = 15                                                               # STEP 71
avl1.delete(int3)                                                       # STEP 72
int0 = 14                                                               # STEP 73
avl2.insert(int2)                                                       # STEP 74
int2 = 12                                                               # STEP 75
int3 = 6                                                                # STEP 76
avl1 == avl0                                                            # STEP 77
result = avl2.find(int1)                                                # STEP 78
avl1.insert(int2)                                                       # STEP 79
avl1 == avl2                                                            # STEP 80
avl1.delete(int2)                                                       # STEP 81
result = avl2.find(int3)                                                # STEP 82
avl0.delete(int0)                                                       # STEP 83
int3 = 14                                                               # STEP 84
avl0.insert(int2)                                                       # STEP 85
avl1.delete(int0)                                                       # STEP 86
int1 = 18                                                               # STEP 87
int0 = 9                                                                # STEP 88
avl0 == avl2                                                            # STEP 89
result = avl0.find(int1)                                                # STEP 90
avl2.delete(int3)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045ab638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

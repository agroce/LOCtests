Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.631.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([6, 7, 9, 11, 12, 19])
TEST #4 STEP #55 (0:00:30.072323) Fri Apr 28 06:52:04 2017 [ 145 stmts 194 branches ]
  13 [2:0]
-- < 1 [1:-1]
---- > 3 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([1, 3, 13, 14, 15, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10592f638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.631.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 1
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 2                                                                 # STEP 3
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                 # STEP 4
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 3                                                                 # STEP 6
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 7
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 9
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 11
ACTION: int2 = 2 
int2 = 3 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 13
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 14
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 15
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 16
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 14                                                               # STEP 17
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 18
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 20
ACTION: int1 = 6 
int1 = 14 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 21
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 22
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0 == avl2                                                            # STEP 23
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 11                                                               # STEP 25
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 27
ACTION: result = avl2.find(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 8                                                                # STEP 29
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 3]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 31
ACTION: int1 = 14 
int1 = 6 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 3, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 14]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 34
ACTION: int2 = 12 
int2 = 11 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 35
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 37
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 12, 14]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 39
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 40
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
avl_REF0 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 1                                                                # STEP 41
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 11                                                               # STEP 43
ACTION: int2 = 11 
int2 = 1 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 44
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 46
ACTION: int3 = 11 
int3 = 8 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 47
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 1                                                                # STEP 49
ACTION: int0 = 1 
int0 = 1 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 50
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 51
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 10                                                               # STEP 53
ACTION: int3 = 10 
int3 = 11 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 54
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 55
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 12, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 56
ACTION: int0 = 11 
int0 = 1 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 57
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059488c0> : <type 'instance'>
avl_REF2 = set([1, 2, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 11, 12, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10110a908> : <type 'instance'>
avl_REF0 = set([11, 8, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 3, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10597e4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 97
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1838581562 TOTAL RUNTIME
7 EXECUTED
657 TOTAL TEST OPERATIONS
27.4471669197 TIME SPENT EXECUTING TEST OPERATIONS
0.0237998962402 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.541734457 TIME SPENT CHECKING PROPERTIES
54.9889013767 TOTAL TIME SPENT RUNNING SUT
0.00397682189941 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int2 = 8                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int3 = 2                                                                 # STEP 3
result = avl2.find(int2)                                                 # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 3                                                                 # STEP 6
int0 = 9                                                                 # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
result = avl0.find(int1)                                                 # STEP 9
avl0.insert(int2)                                                       # STEP 10
int2 = 2                                                                # STEP 11
avl2.insert(int3)                                                       # STEP 12
int3 = 6                                                                # STEP 13
result = avl0.find(int2)                                                # STEP 14
int2 = 7                                                                # STEP 15
result = avl0.find(int2)                                                # STEP 16
int1 = 14                                                               # STEP 17
int2 = 11                                                               # STEP 18
result = avl0.find(int1)                                                # STEP 19
int1 = 6                                                                # STEP 20
result = avl2.find(int0)                                                # STEP 21
avl0 == avl2                                                            # STEP 22
avl0 == avl2                                                            # STEP 23
avl2.delete(int1)                                                       # STEP 24
int0 = 11                                                               # STEP 25
avl2.delete(int3)                                                       # STEP 26
result = avl2.find(int2)                                                # STEP 27
avl2.delete(int3)                                                       # STEP 28
int3 = 8                                                                # STEP 29
avl0.insert(int2)                                                       # STEP 30
int1 = 14                                                               # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
int2 = 12                                                               # STEP 34
int1 = 7                                                                # STEP 35
avl0.insert(int0)                                                       # STEP 36
result = avl0.find(int0)                                                # STEP 37
avl2.insert(int2)                                                       # STEP 38
int2 = 1                                                                # STEP 39
avl2 == avl0                                                            # STEP 40
int0 = 1                                                                # STEP 41
avl2.delete(int2)                                                       # STEP 42
int2 = 11                                                               # STEP 43
result = avl0.find(int3)                                                # STEP 44
avl0.insert(int3)                                                       # STEP 45
int3 = 11                                                               # STEP 46
result = avl0.inorder()                                                 # STEP 47
avl0.delete(int0)                                                       # STEP 48
int0 = 1                                                                # STEP 49
avl0 == avl2                                                            # STEP 50
result = avl2.inorder()                                                 # STEP 51
avl0.insert(int3)                                                       # STEP 52
int3 = 10                                                               # STEP 53
avl0.delete(int1)                                                       # STEP 54
avl2.insert(int0)                                                       # STEP 55
int0 = 11                                                               # STEP 56
int1 = 10                                                               # STEP 57
avl2.insert(int2)                                                       # STEP 58
avl0.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10597e4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13870.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 13 [1:-1]
---- > 14 [0:0] L
set([4, 6, 7, 9, 13, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10328c3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.13870.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 1
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 8                                                                 # STEP 4
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 6
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 1                                                                 # STEP 7
ACTION: int1 = 1 
int1 = 8 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 7]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 10
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 12
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 9]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 14
ACTION: int3 = 13 
int3 = 9 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 13, 7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 16
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 13, 14, 7]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 19
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 13, 14, 7]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 21
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 4, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 23
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 13, 9]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([1, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 28
ACTION: int3 = 1 
int3 = 8 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 29
ACTION: int0 = 6 
int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 4, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 7                                                                # STEP 32
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 33
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([9, 4, 13, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 35
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 5                                                                # STEP 36
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 37
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 20                                                               # STEP 38
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 39
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 9                                                                # STEP 41
ACTION: int0 = 9 
int0 = 20 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 42
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 43
ACTION: int3 = 1 
int3 = 3 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 44
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.display()                                                          # STEP 45
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
  9 [2:0]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 13 [1:-1]
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 6, 7, 9, 13, 14])
==================================================
avl1.insert(int2)                                                       # STEP 46
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 1, 5, 13, 9]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 47
ACTION: int2 = 12 
int2 = 5 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 48
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103289a28> : <type 'instance'>
avl_REF2 = set([4, 6, 7, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103068560> : <type 'instance'>
avl_REF1 = set([8, 1, 5, 13, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 1, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10249c3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #92 (0:00:30.034894) Sun Apr 30 02:45:46 2017 [ 159 stmts 209 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10327c8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.13870.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 2
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 4                                                                 # STEP 4
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 5
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 11                                                                # STEP 7
ACTION: int0 = 11 
int0 = 5 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 10
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 12
ACTION: int3 = 15 
int3 = 4 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = 11 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 14
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 13                                                               # STEP 16
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 17
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 18
ACTION: int1 = 6 
int1 = 2 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 21
ACTION: int3 = 18 
int3 = 15 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 15]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 23
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 18                                                               # STEP 24
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 6, 15]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 26
ACTION: int3 = 14 
int3 = 18 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 27
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 30
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 31
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 7, 6, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 35
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 4                                                                # STEP 36
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10327ce18> : <type 'instance'>
avl_REF0 = set([18, 7, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([7, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103228a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 6
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.2138798237 TOTAL RUNTIME
7 EXECUTED
494 TOTAL TEST OPERATIONS
25.3111281395 TIME SPENT EXECUTING TEST OPERATIONS
0.0195324420929 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.5089440346 TIME SPENT CHECKING PROPERTIES
50.8200721741 TOTAL TIME SPENT RUNNING SUT
0.0052478313446 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 7                                                                 # STEP 0
int2 = 9                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int1 = 8                                                                 # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int1)                                                        # STEP 6
int1 = 1                                                                 # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
int0 = 6                                                                # STEP 10
avl1.insert(int1)                                                       # STEP 11
int1 = 14                                                               # STEP 12
avl1.insert(int2)                                                       # STEP 13
int3 = 13                                                               # STEP 14
avl2.insert(int3)                                                       # STEP 15
int2 = 15                                                               # STEP 16
avl2.insert(int1)                                                       # STEP 17
result = avl2.find(int1)                                                # STEP 18
int1 = 4                                                                # STEP 19
avl2.insert(int1)                                                       # STEP 20
int1 = 7                                                                # STEP 21
avl2.insert(int3)                                                       # STEP 22
result = avl1.find(int0)                                                # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int3 = 8                                                                # STEP 26
avl1.insert(int3)                                                       # STEP 27
int3 = 1                                                                # STEP 28
int0 = 6                                                                # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl1.insert(int3)                                                       # STEP 31
int3 = 7                                                                # STEP 32
avl2.insert(int0)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl2.delete(int2)                                                       # STEP 35
int2 = 5                                                                # STEP 36
result = avl2.find(int3)                                                # STEP 37
int0 = 20                                                               # STEP 38
int3 = 3                                                                # STEP 39
avl2.delete(int0)                                                       # STEP 40
int0 = 9                                                                # STEP 41
result = avl1.find(int3)                                                # STEP 42
int3 = 1                                                                # STEP 43
result = avl1.find(int2)                                                # STEP 44
avl2.display()                                                          # STEP 45
avl1.insert(int2)                                                       # STEP 46
int2 = 12                                                               # STEP 47
result = avl2.find(int2)                                                # STEP 48
avl1.delete(int0)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10249c3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int1 = 18                                                                # STEP 0
int2 = 11                                                                # STEP 1
int0 = 5                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
int3 = 4                                                                 # STEP 4
result = avl0.find(int0)                                                 # STEP 5
avl0.delete(int1)                                                        # STEP 6
int0 = 11                                                                # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0.delete(int3)                                                        # STEP 9
int1 = 2                                                                # STEP 10
avl0.insert(int0)                                                       # STEP 11
int3 = 15                                                               # STEP 12
int0 = 8                                                                # STEP 13
avl0.delete(int2)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
int2 = 13                                                               # STEP 16
result = avl0.find(int1)                                                # STEP 17
int1 = 6                                                                # STEP 18
result = avl0.find(int0)                                                # STEP 19
avl0.insert(int3)                                                       # STEP 20
int3 = 18                                                               # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0 == avl0                                                            # STEP 23
int0 = 18                                                               # STEP 24
avl0.insert(int3)                                                       # STEP 25
int3 = 14                                                               # STEP 26
int1 = 9                                                                # STEP 27
avl0.delete(int2)                                                       # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl0 == avl0                                                            # STEP 30
int2 = 15                                                               # STEP 31
avl0.insert(int2)                                                       # STEP 32
int2 = 7                                                                # STEP 33
avl0.insert(int2)                                                       # STEP 34
result = avl0.inorder()                                                 # STEP 35
int2 = 4                                                                # STEP 36
avl0.delete(int0)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103228a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

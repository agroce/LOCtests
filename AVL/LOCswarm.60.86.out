Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.46237.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #35 (0:00:30.062181) Mon May  1 03:16:04 2017 [ 147 stmts 196 branches ]
  14 [3:1]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18])
  14 [3:0]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18, 20])
  14 [3:0]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18, 20])
  14 [3:0]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18, 20])
  14 [3:0]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18, 20])
  14 [3:0]
-- < 5 [2:-1]
---- < 2 [0:0] L
---- > 8 [1:-1]
------ > 12 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([2, 5, 8, 12, 14, 15, 16, 18, 20])
  11 [3:0]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 3 [0:0] L
---- > 8 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([3, 5, 6, 8, 11, 15, 16, 17, 19, 20])
  11 [3:0]
-- < 6 [2:1]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 11, 15, 16, 17, 19, 20])
  11 [3:0]
-- < 6 [2:1]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 11, 15, 16, 17, 19, 20])
  14 [4:1]
-- < 8 [3:1]
---- < 5 [2:1]
------ < 2 [1:1]
-------- < 1 [0:0] L
------ > 6 [0:0] L
---- > 12 [1:1]
------ < 9 [0:0] L
-- > 16 [2:-1]
---- < 15 [0:0] L
---- > 18 [1:-1]
------ > 20 [0:0] L
set([1, 2, 5, 6, 8, 9, 12, 14, 15, 16, 18, 20])
  11 [3:0]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 9, 11, 15, 16, 17, 19, 20])
  11 [3:0]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 9, 11, 15, 16, 17, 19, 20])
  11 [3:0]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 9, 11, 15, 16, 17, 19, 20])
  11 [3:0]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 8 [1:-1]
------ > 9 [0:0] L
-- > 17 [2:0]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [1:-1]
------ > 20 [0:0] L
set([1, 3, 5, 6, 8, 9, 11, 15, 16, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032cf3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.46237.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 11                                                                # STEP 8
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 3]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 10
ACTION: int2 = 6 
int2 = 11 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 3, 6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 14                                                               # STEP 18
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 3, 14, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 24
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 9                                                                # STEP 27
ACTION: int2 = 9 
int2 = 6 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 28
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([11, 3, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 6, 9, 11, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                               # STEP 31
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 33
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 34
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 35
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 37
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 6, 9, 11, 12, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 39
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 17                                                               # STEP 42
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 43
ACTION: int2 = 13 
int2 = 9 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 11, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 6, 9, 11, 12]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 45
ACTION: int3 = 17 
int3 = 14 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103691908> : <type 'instance'>
avl_REF2 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 47
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10376a440> : <type 'instance'>
avl_REF1 = set([3, 6, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([3, 6, 9, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103213518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 75
STOPPING TESTING DUE TO TIMEOUT
8.86651510231 PERCENT COVERED
60.2303199768 TOTAL RUNTIME
7 EXECUTED
623 TOTAL TEST OPERATIONS
27.683426857 TIME SPENT EXECUTING TEST OPERATIONS
0.0795118808746 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.8942215443 TIME SPENT CHECKING PROPERTIES
55.5776484013 TOTAL TIME SPENT RUNNING SUT
0.00396013259888 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int2 = 20                                                                # STEP 2
avl1.insert(int2)                                                        # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.delete(int2)                                                        # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
int2 = 11                                                                # STEP 8
avl1.insert(int2)                                                        # STEP 9
int2 = 6                                                                # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
result = avl2.inorder()                                                 # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
int3 = 14                                                               # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
avl1.insert(int3)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
result = avl2.find(int3)                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
int2 = 9                                                                # STEP 27
int1 = 12                                                               # STEP 28
avl1.insert(int2)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
int0 = 15                                                               # STEP 31
avl2.insert(int2)                                                       # STEP 32
result = avl1.find(int0)                                                # STEP 33
avl2.delete(int2)                                                       # STEP 34
int0 = 17                                                               # STEP 35
avl2.insert(int0)                                                       # STEP 36
avl2.delete(int1)                                                       # STEP 37
avl1.insert(int1)                                                       # STEP 38
avl2.insert(int0)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
int0 = 17                                                               # STEP 42
int2 = 13                                                               # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 17                                                               # STEP 45
avl2.delete(int3)                                                       # STEP 46
avl1.delete(int1)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103213518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

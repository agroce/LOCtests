Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62165.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  15 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([1, 8, 9, 15, 16, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fdd8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.62165.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 2
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int1 = 16                                                                # STEP 4
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 7]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 11
ACTION: result = avl1.find(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 13
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 6                                                                # STEP 16
ACTION: int1 = 6 
int1 = 16 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 18
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 23
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 24
ACTION: int3 = 7 
int3 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 6                                                                # STEP 30
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 20                                                               # STEP 34
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 36
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 38
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 9                                                                # STEP 39
ACTION: int3 = 9 
int3 = 6 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 41
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 43
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 44
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 45
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 46
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 47
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 14                                                               # STEP 49
ACTION: int1 = 14 
int1 = 15 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8, 15]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 51
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 8, 1, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 53
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 14, 6]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 55
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 56
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([16, 8, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 8, 9, 15, 16]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 57
ACTION: int3 = 17 
int3 = 9 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 58
ACTION: int2 = 13 
int2 = 8 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 60
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 61
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 62
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 63
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 64
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 65
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 14, 6, 5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 14, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 13, 14, 6, 5]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 68
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
  15 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 8, 9, 15, 16, 17])
==================================================
int2 = 7                                                                # STEP 69
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 70
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 13, 14, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 71
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF0 = set([1, 13, 14, 6, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1 == avl0                                                            # STEP 72
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x103c9f9e0> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
avl_REF0 = set([1, 13, 14, 6, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int3)                                                       # STEP 73
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 9                                                                # STEP 74
ACTION: int3 = 9 
int3 = 5 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 75
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 13                                                               # STEP 76
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 77
ACTION: int1 = 16 
int1 = 14 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 78
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 7, 8, 9, 15, 16, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 79
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 7, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 80
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 7, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 18                                                               # STEP 81
ACTION: int2 = 18 
int2 = 7 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 82
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103bc2e60> : <type 'instance'>
avl_REF1 = set([1, 7, 8, 9, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 7, 8, 15, 16, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038a4f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050ef488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.62165.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 2
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 3
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 8]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 15
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 6, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 4                                                                # STEP 19
ACTION: int2 = 4 
int2 = 15 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 20
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 6, 15]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 22
ACTION: int1 = 10 
int1 = 8 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 6, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 6, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 3, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 6, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 8                                                                # STEP 30
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 8, 6, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1050ef998> : <type 'instance'>
avl_REF1 = set([16, 8, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 8, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051e8878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #46 (0:00:30.054368) Mon May  1 17:50:34 2017 [ 160 stmts 211 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eae638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 69 steps

SAVING TEST AS failure.62165.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 4
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 8                                                                 # STEP 7
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 2]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 1                                                                # STEP 15
ACTION: int2 = 1 
int2 = 8 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 17
ACTION: int3 = 11 
int3 = 2 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 3]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 22
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 3]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 26
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 1, 3, 11]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 29
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1, 3, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 19                                                               # STEP 31
ACTION: int1 = 19 
int1 = 4 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 32
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x103eae320> : <type 'instance'>
avl_REF2 = set([8, 1, 3, 11]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 34
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 4                                                                # STEP 35
ACTION: int2 = 4 
int2 = 1 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 36
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 19, 13]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 38
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 39
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 40
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 42
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 44
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 47
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 48
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 50
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 52
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 3                                                                # STEP 54
ACTION: int2 = 3 
int2 = 1 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 19, 4, 13, 14]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 56
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 19                                                               # STEP 58
ACTION: int0 = 19 
int0 = 4 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 59
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 19, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 4, 13, 14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 60
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103fccb90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103fccb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 3, 4, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 63
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 1                                                                # STEP 64
ACTION: int0 = 1 
int0 = 19 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 65
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 66
ACTION: int0 = 14 
int0 = 1 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 67
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103fccb90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 68
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103c017a0> : <type 'instance'>
avl_REF2 = set([1, 3, 4, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 3, 4, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e15248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e2dab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.62165.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 12                                                                # STEP 0
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 2
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 8                                                                 # STEP 8
ACTION: int1 = 8 
int1 = 13 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 10
ACTION: result = avl2.find(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 13
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 15
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 16
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 17
ACTION: int2 = 14 
int2 = 20 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 18
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 19
ACTION: int1 = 8 
int1 = 14 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 24
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 29
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 30
ACTION: int1 = 18 
int1 = 8 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 19                                                               # STEP 32
ACTION: int0 = 19 
int0 = 17 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 33
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 40
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 19, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 41
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 11                                                               # STEP 42
ACTION: int1 = 11 
int1 = 18 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 43
ACTION: int2 = 13 
int2 = 14 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 14                                                               # STEP 45
ACTION: int3 = 14 
int3 = 18 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 46
ACTION: int0 = 17 
int0 = 19 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 18, 19, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 50
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([17, 18, 19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 19, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 19                                                               # STEP 52
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 19, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 7                                                                # STEP 55
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 56
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 57
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 58
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103e2df38> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 7, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 59
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 60
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 61
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103feb128> : <type 'instance'>
avl_REF1 = set([18, 19, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e26cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
set([2, 3, 5, 6, 9, 10, 13, 14])
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
set([2, 3, 5, 6, 9, 10, 13, 14])
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
set([2, 3, 5, 6, 9, 10, 13, 14])
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
set([2, 3, 5, 6, 9, 10, 13, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c21f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 46 steps

SAVING TEST AS failure.62165.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 1                                                                 # STEP 0
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 1
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 3
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                        # STEP 8
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 12
ACTION: int1 = 1 
int1 = 14 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 14
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6, 14]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 20
ACTION: int0 = 2 
int0 = 6 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 14, 5]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 22
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 23
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 6, 14, 5]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 25
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([9, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([9, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 3                                                                # STEP 27
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([9, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([9, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 3, 6, 14, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 30
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([9, 3, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 5, 6, 9, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 3, 5, 6, 9, 13, 14]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 10                                                               # STEP 33
ACTION: int0 = 10 
int0 = 2 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 35
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.display()                                                          # STEP 36
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 5, 6, 9, 10, 13, 14])
==================================================
avl1.display()                                                          # STEP 37
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 5, 6, 9, 10, 13, 14])
==================================================
avl1.display()                                                          # STEP 38
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 5, 6, 9, 10, 13, 14])
==================================================
avl1.display()                                                          # STEP 39
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
  6 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 13 [2:1]
---- < 9 [1:-1]
------ > 10 [0:0] L
---- > 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 5, 6, 9, 10, 13, 14])
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 3, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 41
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 43
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 45
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103e2e368> : <type 'instance'>
avl_REF1 = set([1, 2, 5, 6, 9, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 2, 5, 6, 9, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fed0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
63.9234728813 TOTAL RUNTIME
6 EXECUTED
293 TOTAL TEST OPERATIONS
15.793504715 TIME SPENT EXECUTING TEST OPERATIONS
0.0362515449524 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
15.9059238434 TIME SPENT CHECKING PROPERTIES
31.6994285583 TOTAL TIME SPENT RUNNING SUT
0.00420999526978 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
int3 = 7                                                                 # STEP 1
avl1.delete(int3)                                                        # STEP 2
avl1.insert(int3)                                                        # STEP 3
int1 = 16                                                                # STEP 4
avl1.insert(int1)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int1)                                                        # STEP 7
result = avl1.find(int3)                                                 # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
result = avl1.find(int1)                                                # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl0 = avl.AVLTree()                                                    # STEP 13
avl0.delete(int1)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
int1 = 6                                                                # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl1.delete(int3)                                                       # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl0.delete(int3)                                                       # STEP 22
avl1.delete(int1)                                                       # STEP 23
int3 = 7                                                                # STEP 24
avl1.insert(int3)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl1 == avl1                                                            # STEP 29
int3 = 6                                                                # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.find(int3)                                                # STEP 32
result = avl0.find(int1)                                                # STEP 33
int0 = 20                                                               # STEP 34
avl1.insert(int0)                                                       # STEP 35
result = avl0.inorder()                                                 # STEP 36
avl1.delete(int1)                                                       # STEP 37
result = avl1.find(int0)                                                # STEP 38
int3 = 9                                                                # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl0.delete(int0)                                                       # STEP 41
avl1.delete(int0)                                                       # STEP 42
int2 = 8                                                                # STEP 43
int1 = 15                                                               # STEP 44
result = avl1.find(int2)                                                # STEP 45
result = avl0.find(int3)                                                # STEP 46
avl1.insert(int1)                                                       # STEP 47
avl1.delete(int3)                                                       # STEP 48
int1 = 14                                                               # STEP 49
avl1.insert(int2)                                                       # STEP 50
int0 = 1                                                                # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl0.insert(int0)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
int0 = 12                                                               # STEP 55
avl1.insert(int3)                                                       # STEP 56
int3 = 17                                                               # STEP 57
int2 = 13                                                               # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl1.insert(int3)                                                       # STEP 60
avl0.insert(int1)                                                       # STEP 61
avl0.delete(int3)                                                       # STEP 62
int3 = 5                                                                # STEP 63
result = avl1.inorder()                                                 # STEP 64
avl0.insert(int1)                                                       # STEP 65
avl0.insert(int3)                                                       # STEP 66
avl0.insert(int2)                                                       # STEP 67
avl1.display()                                                          # STEP 68
int2 = 7                                                                # STEP 69
avl0.insert(int1)                                                       # STEP 70
result = avl0.find(int0)                                                # STEP 71
avl1 == avl0                                                            # STEP 72
avl1.delete(int3)                                                       # STEP 73
int3 = 9                                                                # STEP 74
result = avl1.inorder()                                                 # STEP 75
int0 = 13                                                               # STEP 76
int1 = 16                                                               # STEP 77
avl1.insert(int2)                                                       # STEP 78
avl1.insert(int2)                                                       # STEP 79
avl1.insert(int2)                                                       # STEP 80
int2 = 18                                                               # STEP 81
avl1.delete(int3)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038a4f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 3                                                                 # STEP 0
int1 = 8                                                                 # STEP 1
int2 = 16                                                                # STEP 2
int0 = 6                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int2)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
int2 = 15                                                                # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.delete(int0)                                                       # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int2)                                                       # STEP 18
int2 = 4                                                                # STEP 19
int0 = 15                                                               # STEP 20
avl1.insert(int3)                                                       # STEP 21
int1 = 10                                                               # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl1.insert(int3)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
int2 = 8                                                                # STEP 30
avl1.insert(int2)                                                       # STEP 31
avl1.delete(int0)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051e8878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int0 = 3                                                                 # STEP 0
int3 = 2                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.insert(int0)                                                        # STEP 3
int1 = 12                                                                # STEP 4
result = avl2.inorder()                                                  # STEP 5
result = avl2.inorder()                                                  # STEP 6
int2 = 8                                                                 # STEP 7
avl2.delete(int0)                                                        # STEP 8
avl2.insert(int3)                                                        # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.delete(int3)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.delete(int1)                                                       # STEP 14
int2 = 1                                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
int3 = 11                                                               # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.insert(int0)                                                       # STEP 21
int0 = 13                                                               # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
int1 = 4                                                                # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
result = avl2.find(int1)                                                # STEP 29
avl2.insert(int2)                                                       # STEP 30
int1 = 19                                                               # STEP 31
avl2 = avl.AVLTree()                                                    # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2 == avl2                                                            # STEP 34
int2 = 4                                                                # STEP 35
avl2.insert(int1)                                                       # STEP 36
avl2.insert(int0)                                                       # STEP 37
int1 = 14                                                               # STEP 38
int3 = 14                                                               # STEP 39
int0 = 4                                                                # STEP 40
result = avl2.inorder()                                                 # STEP 41
result = avl2.find(int3)                                                # STEP 42
avl2.insert(int2)                                                       # STEP 43
int2 = 1                                                                # STEP 44
avl2.insert(int0)                                                       # STEP 45
avl2.insert(int0)                                                       # STEP 46
result = avl2.find(int2)                                                # STEP 47
avl2.delete(int1)                                                       # STEP 48
avl2.insert(int0)                                                       # STEP 49
result = avl2.find(int3)                                                # STEP 50
avl2.delete(int3)                                                       # STEP 51
avl2 == avl2                                                            # STEP 52
avl2.insert(int2)                                                       # STEP 53
int2 = 3                                                                # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl2 == avl2                                                            # STEP 56
avl2.insert(int1)                                                       # STEP 57
int0 = 19                                                               # STEP 58
avl2.delete(int0)                                                       # STEP 59
avl1 = avl.AVLTree()                                                    # STEP 60
result = avl1.inorder()                                                 # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl2.insert(int2)                                                       # STEP 63
int0 = 1                                                                # STEP 64
result = avl2.find(int0)                                                # STEP 65
int0 = 14                                                               # STEP 66
avl1.insert(int0)                                                       # STEP 67
avl2.delete(int0)                                                       # STEP 68
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e15248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
int3 = 12                                                                # STEP 0
int0 = 17                                                                # STEP 1
int2 = 20                                                                # STEP 2
int1 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
int1 = 8                                                                 # STEP 8
avl2.insert(int2)                                                        # STEP 9
result = avl2.find(int2)                                                # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
result = avl2.find(int1)                                                # STEP 13
avl2.delete(int2)                                                       # STEP 14
avl1 = avl.AVLTree()                                                    # STEP 15
int1 = 14                                                               # STEP 16
int2 = 14                                                               # STEP 17
result = avl1.find(int1)                                                # STEP 18
int1 = 8                                                                # STEP 19
avl1 == avl1                                                            # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.delete(int3)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl1.delete(int3)                                                       # STEP 28
int3 = 18                                                               # STEP 29
int1 = 18                                                               # STEP 30
avl2.delete(int1)                                                       # STEP 31
int0 = 19                                                               # STEP 32
avl1.insert(int2)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.delete(int1)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
avl2.insert(int1)                                                       # STEP 37
avl1.insert(int3)                                                       # STEP 38
avl2.delete(int1)                                                       # STEP 39
avl1.insert(int0)                                                       # STEP 40
result = avl1.inorder()                                                 # STEP 41
int1 = 11                                                               # STEP 42
int2 = 13                                                               # STEP 43
result = avl2.inorder()                                                 # STEP 44
int3 = 14                                                               # STEP 45
int0 = 17                                                               # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl2.insert(int2)                                                       # STEP 48
avl1.insert(int0)                                                       # STEP 49
avl1.delete(int0)                                                       # STEP 50
avl2.delete(int1)                                                       # STEP 51
int1 = 19                                                               # STEP 52
avl2.insert(int2)                                                       # STEP 53
result = avl1.find(int0)                                                # STEP 54
int2 = 7                                                                # STEP 55
result = avl2.find(int3)                                                # STEP 56
avl2.insert(int2)                                                       # STEP 57
avl2.insert(int1)                                                       # STEP 58
int0 = 7                                                                # STEP 59
int3 = 14                                                               # STEP 60
avl1.delete(int1)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e26cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 4
int0 = 1                                                                 # STEP 0
int2 = 3                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int1 = 14                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.delete(int2)                                                        # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl1.delete(int1)                                                        # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.delete(int0)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
int1 = 1                                                                # STEP 12
int0 = 6                                                                # STEP 13
int2 = 5                                                                # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1 == avl1                                                            # STEP 16
avl1.delete(int2)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.insert(int0)                                                       # STEP 19
int0 = 2                                                                # STEP 20
avl1.insert(int2)                                                       # STEP 21
int2 = 13                                                               # STEP 22
avl1 == avl1                                                            # STEP 23
avl1.insert(int3)                                                       # STEP 24
result = avl1.find(int2)                                                # STEP 25
avl1.delete(int0)                                                       # STEP 26
int3 = 3                                                                # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.insert(int0)                                                       # STEP 30
avl1.insert(int2)                                                       # STEP 31
result = avl1.inorder()                                                 # STEP 32
int0 = 10                                                               # STEP 33
avl1.insert(int0)                                                       # STEP 34
result = avl1.find(int0)                                                # STEP 35
avl1.display()                                                          # STEP 36
avl1.display()                                                          # STEP 37
avl1.display()                                                          # STEP 38
avl1.display()                                                          # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl1.insert(int2)                                                       # STEP 41
avl1.insert(int1)                                                       # STEP 42
int1 = 4                                                                # STEP 43
avl1.insert(int0)                                                       # STEP 44
avl1.delete(int2)                                                       # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fed0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

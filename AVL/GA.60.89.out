Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14954.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f96fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 94 steps

SAVING TEST AS failure.14954.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 4
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 2]) : <type 'set'>
==================================================
int2 = 18                                                                # STEP 7
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 8
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 2, 7]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 12
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 18
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([16, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 19
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 22
ACTION: int1 = 10 
int1 = 4 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 23
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 8                                                                # STEP 24
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 25
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.find(int2)                                                # STEP 27
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 7                                                                # STEP 28
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 29
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x10382c368> : <type 'instance'>
avl_REF0 = set([16, 2, 7]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 30
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 4]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 35
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 9                                                                # STEP 36
ACTION: int0 = 9 
int0 = 8 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 38
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 10]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 40
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 41
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int3 = 17                                                               # STEP 42
ACTION: int3 = 17 
int3 = 7 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 44
ACTION: result = avl0.find(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 45
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 46
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 11                                                               # STEP 47
ACTION: int2 = 11 
int2 = 10 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 48
ACTION: int1 = 14 
int1 = 10 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 49
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 50
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 2                                                                # STEP 51
ACTION: int1 = 2 
int1 = 14 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 52
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1 == avl0                                                            # STEP 53
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl0.find(int0)                                                # STEP 54
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 12                                                               # STEP 56
ACTION: int0 = 12 
int0 = 10 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 57
ACTION: int3 = 2 
int3 = 17 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 11]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 59
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 60
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 61
ACTION: avl1.delete(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 62
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 13                                                               # STEP 63
ACTION: int1 = 13 
int1 = 2 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 18, 11]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 65
ACTION: int0 = 16 
int0 = 12 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 66
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9, 11]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 67
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 68
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 2, 4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 10, 3]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 70
ACTION: int3 = 12 
int3 = 2 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 71
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 18                                                               # STEP 72
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 73
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x103d59b48> : <type 'instance'>
avl_REF1 = set([9, 11]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 74
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 16, 10, 3]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 75
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 5                                                                # STEP 76
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 77
ACTION: int0 = 6 
int0 = 16 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 78
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 16, 10, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 16, 10, 3, 18]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 79
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([8, 16, 10, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl2.find(int0)                                                # STEP 80
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 81
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 16, 10, 3, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 3                                                                # STEP 82
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 83
ACTION: int0 = 17 
int0 = 6 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 84
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl_REF2 = set([8, 2, 4]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int2 = 16                                                               # STEP 85
ACTION: int2 = 16 
int2 = 5 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 86
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 87
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.find(int0)                                                # STEP 88
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102796878> : <type 'instance'>
avl_REF2 = set([8, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 1                                                                # STEP 89
ACTION: int2 = 1 
int2 = 16 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 90
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 91
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103d4ccf8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
avl_REF0 = set([8, 16, 10, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int0 = 9                                                                # STEP 92
ACTION: int0 = 9 
int0 = 17 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 93
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1038957a0> : <type 'instance'>
avl_REF0 = set([8, 16, 10, 3, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 16, 10, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dd0d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #2 STEP #89 (0:00:30.107788) Sun Apr 30 05:23:05 2017 [ 131 stmts 175 branches ]
  13 [2:0]
-- < 4 [1:-1]
---- > 11 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([4, 11, 13, 15, 18, 19])
  14 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([6, 7, 10, 14, 19, 20])
  14 [2:0]
-- < 7 [1:0]
---- < 6 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([6, 7, 10, 14, 19, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 65
STOPPING TESTING DUE TO TIMEOUT
7.87818603112 PERCENT COVERED
60.2469520569 TOTAL RUNTIME
5 EXECUTED
459 TOTAL TEST OPERATIONS
24.7909691334 TIME SPENT EXECUTING TEST OPERATIONS
0.0172593593597 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9572992325 TIME SPENT CHECKING PROPERTIES
49.7482683659 TOTAL TIME SPENT RUNNING SUT
0.00411605834961 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 7                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int3 = 2                                                                 # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
int1 = 12                                                                # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
int2 = 18                                                                # STEP 7
int3 = 1                                                                 # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.insert(int0)                                                       # STEP 11
int1 = 4                                                                # STEP 12
int0 = 8                                                                # STEP 13
result = avl0.inorder()                                                 # STEP 14
result = avl0.inorder()                                                 # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
avl1 == avl0                                                            # STEP 18
avl2 = avl.AVLTree()                                                    # STEP 19
avl1 == avl1                                                            # STEP 20
avl2.insert(int1)                                                       # STEP 21
int1 = 10                                                               # STEP 22
result = avl1.find(int3)                                                # STEP 23
int0 = 8                                                                # STEP 24
result = avl1.find(int3)                                                # STEP 25
result = avl1.inorder()                                                 # STEP 26
result = avl2.find(int2)                                                # STEP 27
int3 = 7                                                                # STEP 28
avl0 = avl.AVLTree()                                                    # STEP 29
int2 = 10                                                               # STEP 30
avl0.insert(int0)                                                       # STEP 31
result = avl0.find(int1)                                                # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl2.insert(int0)                                                       # STEP 34
result = avl2.find(int0)                                                # STEP 35
int0 = 9                                                                # STEP 36
avl0.delete(int3)                                                       # STEP 37
result = avl1.find(int2)                                                # STEP 38
avl0.insert(int2)                                                       # STEP 39
avl2 == avl0                                                            # STEP 40
avl0 == avl2                                                            # STEP 41
int3 = 17                                                               # STEP 42
avl1.insert(int0)                                                       # STEP 43
result = avl0.find(int0)                                                # STEP 44
int0 = 10                                                               # STEP 45
avl1 == avl0                                                            # STEP 46
int2 = 11                                                               # STEP 47
int1 = 14                                                               # STEP 48
result = avl1.find(int1)                                                # STEP 49
result = avl1.inorder()                                                 # STEP 50
int1 = 2                                                                # STEP 51
result = avl0.find(int3)                                                # STEP 52
avl1 == avl0                                                            # STEP 53
result = avl0.find(int0)                                                # STEP 54
avl2.delete(int0)                                                       # STEP 55
int0 = 12                                                               # STEP 56
int3 = 2                                                                # STEP 57
avl1.insert(int2)                                                       # STEP 58
int2 = 18                                                               # STEP 59
result = avl2.find(int1)                                                # STEP 60
avl1.delete(int1)                                                       # STEP 61
result = avl1.find(int0)                                                # STEP 62
int1 = 13                                                               # STEP 63
avl1.insert(int2)                                                       # STEP 64
int0 = 16                                                               # STEP 65
avl1.delete(int2)                                                       # STEP 66
int2 = 3                                                                # STEP 67
avl2.insert(int3)                                                       # STEP 68
avl0.insert(int2)                                                       # STEP 69
int3 = 12                                                               # STEP 70
avl2.delete(int3)                                                       # STEP 71
int3 = 18                                                               # STEP 72
avl1 = avl.AVLTree()                                                    # STEP 73
avl0.insert(int0)                                                       # STEP 74
avl1.delete(int0)                                                       # STEP 75
int2 = 5                                                                # STEP 76
int0 = 6                                                                # STEP 77
avl0.insert(int3)                                                       # STEP 78
avl1 == avl0                                                            # STEP 79
result = avl2.find(int0)                                                # STEP 80
result = avl0.find(int2)                                                # STEP 81
int3 = 3                                                                # STEP 82
int0 = 17                                                               # STEP 83
avl2 == avl1                                                            # STEP 84
int2 = 16                                                               # STEP 85
avl1.delete(int2)                                                       # STEP 86
result = avl1.inorder()                                                 # STEP 87
result = avl2.find(int0)                                                # STEP 88
int2 = 1                                                                # STEP 89
avl1.insert(int1)                                                       # STEP 90
avl1 == avl0                                                            # STEP 91
int0 = 9                                                                # STEP 92
avl0.delete(int3)                                                       # STEP 93
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dd0d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
198 BRANCHES COVERED
147 STATEMENTS COVERED

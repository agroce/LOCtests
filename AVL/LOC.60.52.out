Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.232.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c54e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.232.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 3
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int3 = 16                                                                # STEP 8
ACTION: int3 = 16 
int3 = 16 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 9
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 14                                                               # STEP 14
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 15
ACTION: int0 = 13 
int0 = 2 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 16
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 9                                                                # STEP 18
ACTION: int0 = 9 
int0 = 13 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 21
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 22
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 18, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 18]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 18 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 17                                                               # STEP 29
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 18, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17, 18, 14]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 33
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104e23170> : <type 'instance'>
avl_REF1 = set([16, 17, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025fbcf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:1]
---- < 14 [0:0] L
set([2, 3, 5, 10, 14, 17])
  10 [3:-1]
-- < 3 [1:-1]
---- > 5 [0:0] L
-- > 17 [2:1]
---- < 12 [1:1]
------ < 11 [0:0] L
---- > 20 [0:0] L
set([3, 5, 10, 11, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 10, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 10, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 10, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 10, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 5, 10, 12, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 3, 5, 10, 17, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([2, 3, 5, 10, 17, 20])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([2, 3, 6, 9, 11, 13, 18])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([2, 3, 6, 9, 11, 13, 18])
  7 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:1]
---- < 11 [0:0] L
set([1, 5, 6, 7, 11, 16])
  7 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:1]
---- < 11 [0:0] L
set([1, 5, 6, 7, 11, 16])
TEST #4 STEP #88 (0:00:30.033789) Fri Apr 28 05:49:56 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048a5e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.232.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 10                                                                # STEP 2
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 4
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 7
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 18
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 9                                                                # STEP 19
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 20
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 9                                                                # STEP 21
ACTION: int1 = 9 
int1 = 10 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 22
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 19]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 25
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int1)                                                # STEP 27
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 28
ACTION: int1 = 20 
int1 = 9 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 19]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 32
ACTION: int0 = 11 
int0 = 19 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 10                                                               # STEP 35
ACTION: int2 = 10 
int2 = 9 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 36
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 19, 20]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 39
ACTION: int1 = 6 
int1 = 20 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 9, 19, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11, 9, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 9, 10, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 43
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11, 9, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 4                                                                # STEP 45
ACTION: int1 = 4 
int1 = 6 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11, 9, 10, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 9, 19, 20]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 47
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 48
ACTION: int2 = 11 
int2 = 10 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([11, 9, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 9, 11, 19, 20]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 50
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 51
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([4, 9, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 9, 11, 13, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([4, 9, 11, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9, 11, 13, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 53
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 11, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([9, 11, 19, 20]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 54
ACTION: int3 = 15 
int3 = 13 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 55
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 56
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 57
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl1.find(int1)                                                # STEP 58
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1048b8cb0> : <type 'instance'>
avl_REF1 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 11, 15, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 60
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 11, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 9                                                                # STEP 61
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e82878> : <type 'instance'>
avl_REF0 = set([9, 11, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 15, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10488e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 14 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([5, 10, 14, 15, 16, 17])
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
set([5, 9, 10, 14, 15, 16, 18])
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
set([5, 9, 10, 14, 15, 16, 18])
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
set([5, 9, 10, 14, 15, 16, 18])
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
set([5, 9, 10, 14, 15, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1048997a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.232.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 17                                                                # STEP 1
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 3
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int1 = 5                                                                 # STEP 8
ACTION: int1 = 5 
int1 = 12 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 11
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 12
ACTION: int3 = 10 
int3 = 15 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5, 15]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 17
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 5, 15]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 19
ACTION: int0 = 12 
int0 = 10 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 15                                                               # STEP 21
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 3                                                                # STEP 23
ACTION: int0 = 3 
int0 = 12 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([10, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 10, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([3, 5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 10, 15]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 26
ACTION: int0 = 9 
int0 = 3 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 28
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 10, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([5, 10, 15]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 30
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 31
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 33
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 34
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 10, 15, 16]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 4                                                                # STEP 40
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 41
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 42
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 8                                                                # STEP 43
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 10, 15, 16, 17]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 45
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 46
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 47
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1 == avl1                                                            # STEP 49
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 18                                                               # STEP 50
ACTION: int1 = 18 
int1 = 8 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 52
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
  15 [2:0]
-- < 10 [1:0]
---- < 5 [0:0] L
---- > 14 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 10, 14, 15, 16, 17])
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 10, 14, 15, 16]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 54
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 55
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 9, 10, 14, 15, 16]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 56
ACTION: int2 = 13 
int2 = 17 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 58
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 9, 10, 14, 15, 16, 18])
==================================================
avl1.display()                                                          # STEP 59
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 9, 10, 14, 15, 16, 18])
==================================================
avl1.display()                                                          # STEP 60
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 9, 10, 14, 15, 16, 18])
==================================================
avl1.insert(int1)                                                       # STEP 61
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 62
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 63
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 64
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 66
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 67
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.display()                                                          # STEP 68
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 15 [2:-1]
---- < 14 [0:0] L
---- > 16 [1:-1]
------ > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 9, 10, 14, 15, 16, 18])
==================================================
avl1.delete(int0)                                                       # STEP 69
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104899c68> : <type 'instance'>
avl_REF1 = set([5, 9, 10, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 10, 14, 15, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e8e248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
61.3203070164 TOTAL RUNTIME
8 EXECUTED
568 TOTAL TEST OPERATIONS
23.5439579487 TIME SPENT EXECUTING TEST OPERATIONS
0.0639758110046 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.6561841965 TIME SPENT CHECKING PROPERTIES
47.2001421452 TOTAL TIME SPENT RUNNING SUT
0.00485181808472 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int2 = 12                                                                # STEP 1
int0 = 2                                                                 # STEP 2
int3 = 16                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.insert(int1)                                                        # STEP 7
int3 = 16                                                                # STEP 8
avl1.delete(int0)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.delete(int1)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
int3 = 14                                                               # STEP 14
int0 = 13                                                               # STEP 15
int1 = 18                                                               # STEP 16
avl1.delete(int0)                                                       # STEP 17
int0 = 9                                                                # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl1.delete(int1)                                                       # STEP 21
avl1.insert(int1)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
int1 = 7                                                                # STEP 27
avl1.delete(int0)                                                       # STEP 28
int2 = 17                                                               # STEP 29
avl1.delete(int1)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
int3 = 14                                                               # STEP 33
avl1.delete(int3)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1025fbcf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 11                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int1 = 10                                                                # STEP 2
avl0.insert(int2)                                                        # STEP 3
result = avl0.inorder()                                                  # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.delete(int1)                                                        # STEP 6
avl0.delete(int1)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.insert(int2)                                                       # STEP 12
result = avl0.find(int2)                                                # STEP 13
avl0.delete(int1)                                                       # STEP 14
result = avl0.find(int2)                                                # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int1)                                                       # STEP 18
int2 = 9                                                                # STEP 19
avl0.delete(int2)                                                       # STEP 20
int1 = 9                                                                # STEP 21
int0 = 19                                                               # STEP 22
avl0.insert(int1)                                                       # STEP 23
avl0.insert(int0)                                                       # STEP 24
avl1 = avl.AVLTree()                                                    # STEP 25
result = avl1.inorder()                                                 # STEP 26
result = avl1.find(int1)                                                # STEP 27
int1 = 20                                                               # STEP 28
avl1.delete(int0)                                                       # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl0.insert(int2)                                                       # STEP 31
int0 = 11                                                               # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
int2 = 10                                                               # STEP 35
result = avl1.find(int1)                                                # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl0.insert(int1)                                                       # STEP 38
int1 = 6                                                                # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
avl1.delete(int1)                                                       # STEP 42
avl1.insert(int2)                                                       # STEP 43
result = avl0.inorder()                                                 # STEP 44
int1 = 4                                                                # STEP 45
avl0.delete(int2)                                                       # STEP 46
int0 = 1                                                                # STEP 47
int2 = 11                                                               # STEP 48
avl0.insert(int1)                                                       # STEP 49
int3 = 13                                                               # STEP 50
avl0.insert(int3)                                                       # STEP 51
avl0.delete(int1)                                                       # STEP 52
avl0.delete(int3)                                                       # STEP 53
int3 = 15                                                               # STEP 54
int1 = 12                                                               # STEP 55
result = avl1.find(int1)                                                # STEP 56
result = avl0.find(int3)                                                # STEP 57
result = avl1.find(int1)                                                # STEP 58
avl0.insert(int3)                                                       # STEP 59
avl0.delete(int0)                                                       # STEP 60
int1 = 9                                                                # STEP 61
avl0.delete(int1)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10488e170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int0 = 10                                                                # STEP 0
int2 = 17                                                                # STEP 1
int1 = 12                                                                # STEP 2
int3 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int1)                                                        # STEP 7
int1 = 5                                                                 # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
int2 = 17                                                               # STEP 11
int3 = 10                                                               # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int1)                                                       # STEP 16
int3 = 14                                                               # STEP 17
avl1.insert(int0)                                                       # STEP 18
int0 = 12                                                               # STEP 19
result = avl1.inorder()                                                 # STEP 20
int1 = 15                                                               # STEP 21
avl1.delete(int0)                                                       # STEP 22
int0 = 3                                                                # STEP 23
avl1.insert(int0)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
int0 = 9                                                                # STEP 26
avl1.insert(int1)                                                       # STEP 27
avl1.insert(int3)                                                       # STEP 28
avl1.delete(int3)                                                       # STEP 29
int3 = 16                                                               # STEP 30
avl1.insert(int1)                                                       # STEP 31
avl1 == avl1                                                            # STEP 32
result = avl1.find(int2)                                                # STEP 33
avl1 == avl1                                                            # STEP 34
avl1.delete(int3)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
avl1.insert(int3)                                                       # STEP 38
avl1.delete(int2)                                                       # STEP 39
int1 = 4                                                                # STEP 40
int3 = 14                                                               # STEP 41
avl1.delete(int1)                                                       # STEP 42
int1 = 8                                                                # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.delete(int1)                                                       # STEP 45
avl1.insert(int3)                                                       # STEP 46
int3 = 6                                                                # STEP 47
avl1.insert(int2)                                                       # STEP 48
avl1 == avl1                                                            # STEP 49
int1 = 18                                                               # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl1.display()                                                          # STEP 52
avl1.delete(int2)                                                       # STEP 53
result = avl1.find(int1)                                                # STEP 54
avl1.insert(int0)                                                       # STEP 55
int2 = 13                                                               # STEP 56
avl1.insert(int1)                                                       # STEP 57
avl1.display()                                                          # STEP 58
avl1.display()                                                          # STEP 59
avl1.display()                                                          # STEP 60
avl1.insert(int1)                                                       # STEP 61
result = avl1.find(int0)                                                # STEP 62
avl1.insert(int0)                                                       # STEP 63
avl1.delete(int3)                                                       # STEP 64
avl1.insert(int0)                                                       # STEP 65
avl1.insert(int0)                                                       # STEP 66
avl1.insert(int1)                                                       # STEP 67
avl1.display()                                                          # STEP 68
avl1.delete(int0)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e8e248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

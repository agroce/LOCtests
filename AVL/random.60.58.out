Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.352.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103963830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.352.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 4
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 6
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                        # STEP 7
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 9
ACTION: int1 = 18 
int1 = 18 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 10
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 15
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 16
ACTION: int3 = 15 
int3 = 9 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 17
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 18
ACTION: result = avl1.find(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 3                                                                # STEP 20
ACTION: int1 = 3 
int1 = 10 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 15                                                               # STEP 22
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 24
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 10                                                               # STEP 25
ACTION: int3 = 10 
int3 = 15 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 26
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 2                                                                # STEP 27
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 11                                                               # STEP 30
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 == avl2                                                            # STEP 32
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 34
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 6                                                                # STEP 35
ACTION: int0 = 6 
int0 = 2 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 2                                                                # STEP 37
ACTION: int3 = 2 
int3 = 10 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 6]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 39
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 6]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 41
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 42
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 15                                                               # STEP 43
ACTION: int1 = 15 
int1 = 3 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 44
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 45
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 4, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 19                                                               # STEP 47
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 48
ACTION: int3 = 15 
int3 = 2 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 49
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 51
ACTION: int0 = 4 
int0 = 19 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 53
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 54
ACTION: int0 = 1 
int0 = 4 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 55
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a23f38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 56
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 14                                                               # STEP 57
ACTION: int2 = 14 
int2 = 15 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 58
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 59
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a23f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 61
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103a23f38> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 9                                                                # STEP 62
ACTION: int1 = 9 
int1 = 15 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 63
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 14                                                               # STEP 64
ACTION: int0 = 14 
int0 = 1 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 65
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103d2f3f8> : <type 'instance'>
avl_REF1 = set([10, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 66
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 19, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 19, 4, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 67
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a23f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 68
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a23f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 4                                                                # STEP 69
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 70
ACTION: int3 = 20 
int3 = 15 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 71
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10588b560> : <type 'instance'>
avl_REF2 = set([9, 19, 4, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 19, 6, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105893950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  14 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([2, 7, 13, 14, 18, 20])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 11 [1:-1]
---- > 13 [0:0] L
set([1, 2, 3, 10, 11, 13])
TEST #4 STEP #22 (0:00:30.007460) Fri Apr 28 06:09:18 2017 [ 149 stmts 201 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058b56c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 75 steps

SAVING TEST AS failure.352.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 19                                                                # STEP 0
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 1                                                                 # STEP 1
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int3)                                                 # STEP 7
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 9
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 10
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 12
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 13
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 1                                                                # STEP 15
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 12]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 18
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 19
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 20
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 7                                                                # STEP 22
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 23
ACTION: int2 = 15 
int2 = 12 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 24
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 19]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 27
ACTION: int1 = 11 
int1 = 1 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 15                                                               # STEP 30
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 11, 19]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 32
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 33
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 35
ACTION: int1 = 20 
int1 = 4 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 36
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 7]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 37
ACTION: int3 = 10 
int3 = 7 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 38
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
avl_REF0 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0 == avl0                                                            # STEP 39
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl1.inorder()                                                 # STEP 40
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 11, 10, 19]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 42
ACTION: int3 = 20 
int3 = 10 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20, 12]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20, 4, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([20, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 47
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF0 = set([4, 7]) : <type 'set'>
avl_REF2 = set([16, 11, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int2)                                                # STEP 48
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 49
ACTION: result = avl1.find(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 16                                                               # STEP 50
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15, 4, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 20, 12]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 54
ACTION: int1 = 4 
int1 = 16 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 55
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 7                                                                # STEP 56
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 57
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([15, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 59
ACTION: int2 = 13 
int2 = 15 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 60
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 == avl1                                                            # STEP 61
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19]) : <type 'set'>
avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int0)                                                       # STEP 62
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 11, 10, 19, 7]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 63
ACTION: int1 = 16 
int1 = 4 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 64
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 66
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int0)                                                       # STEP 67
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([15, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 15, 4, 7]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 68
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19, 7]) : <type 'set'>
avl_REF0 = set([16, 15, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 69
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF0 = set([16, 15, 4, 7]) : <type 'set'>
avl_REF2 = set([16, 11, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int0 = 7                                                                # STEP 70
ACTION: int0 = 7 
int0 = 16 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 71
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f54170> : <type 'instance'>
avl_REF0 = set([16, 15, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 20, 15, 4, 7]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 72
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.delete(int3)                                                       # STEP 73
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105982200> : <type 'instance'>
avl_REF2 = set([16, 11, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 74
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b5830> : <type 'instance'>
avl_REF1 = set([16, 20, 12, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([20, 12, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ae44d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  12 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 18 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([3, 4, 12, 13, 18, 20])
  12 [2:0]
-- < 3 [1:-1]
---- > 4 [0:0] L
-- > 18 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([3, 4, 12, 13, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 33
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.182226181 TOTAL RUNTIME
7 EXECUTED
580 TOTAL TEST OPERATIONS
23.7555215359 TIME SPENT EXECUTING TEST OPERATIONS
0.0206758975983 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.9146072865 TIME SPENT CHECKING PROPERTIES
47.6701288223 TOTAL TIME SPENT RUNNING SUT
0.00394582748413 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 9                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int2 = 12                                                                # STEP 2
int1 = 18                                                                # STEP 3
int0 = 6                                                                 # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
result = avl2.find(int1)                                                 # STEP 6
avl2.delete(int2)                                                        # STEP 7
int2 = 10                                                                # STEP 8
int1 = 18                                                                # STEP 9
avl2 == avl1                                                            # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
result = avl2.find(int1)                                                # STEP 14
int1 = 10                                                               # STEP 15
int3 = 15                                                               # STEP 16
int0 = 16                                                               # STEP 17
result = avl1.find(int1)                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
int1 = 3                                                                # STEP 20
avl1.delete(int3)                                                       # STEP 21
int2 = 15                                                               # STEP 22
avl1.delete(int3)                                                       # STEP 23
avl2 == avl2                                                            # STEP 24
int3 = 10                                                               # STEP 25
result = avl1.find(int0)                                                # STEP 26
int0 = 2                                                                # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
int2 = 11                                                               # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2 == avl2                                                            # STEP 32
avl1.insert(int3)                                                       # STEP 33
result = avl2.find(int1)                                                # STEP 34
int0 = 6                                                                # STEP 35
avl1 == avl1                                                            # STEP 36
int3 = 2                                                                # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1 == avl1                                                            # STEP 39
avl2.insert(int0)                                                       # STEP 40
int2 = 4                                                                # STEP 41
result = avl1.find(int1)                                                # STEP 42
int1 = 15                                                               # STEP 43
result = avl2.find(int0)                                                # STEP 44
avl2.insert(int2)                                                       # STEP 45
avl1.delete(int3)                                                       # STEP 46
int0 = 19                                                               # STEP 47
int3 = 15                                                               # STEP 48
int2 = 15                                                               # STEP 49
avl2.insert(int0)                                                       # STEP 50
int0 = 4                                                                # STEP 51
avl1.delete(int0)                                                       # STEP 52
result = avl2.find(int0)                                                # STEP 53
int0 = 1                                                                # STEP 54
avl0 = avl.AVLTree()                                                    # STEP 55
avl2.delete(int2)                                                       # STEP 56
int2 = 14                                                               # STEP 57
result = avl1.find(int1)                                                # STEP 58
result = avl2.inorder()                                                 # STEP 59
avl0.delete(int1)                                                       # STEP 60
avl0 == avl2                                                            # STEP 61
int1 = 9                                                                # STEP 62
avl1.delete(int0)                                                       # STEP 63
int0 = 14                                                               # STEP 64
avl1 == avl1                                                            # STEP 65
avl2.insert(int3)                                                       # STEP 66
avl0.delete(int2)                                                       # STEP 67
avl0.delete(int3)                                                       # STEP 68
int2 = 4                                                                # STEP 69
int3 = 20                                                               # STEP 70
avl2.delete(int2)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105893950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 19                                                                # STEP 0
int3 = 1                                                                 # STEP 1
int0 = 19                                                                # STEP 2
int1 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
avl1.delete(int0)                                                        # STEP 6
result = avl2.find(int3)                                                 # STEP 7
avl1.insert(int3)                                                        # STEP 8
result = avl1.find(int3)                                                 # STEP 9
int3 = 1                                                                # STEP 10
avl2.insert(int2)                                                       # STEP 11
int2 = 12                                                               # STEP 12
int0 = 16                                                               # STEP 13
avl2.delete(int1)                                                       # STEP 14
int1 = 1                                                                # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
int3 = 13                                                               # STEP 18
avl1 == avl2                                                            # STEP 19
result = avl2.find(int3)                                                # STEP 20
result = avl1.inorder()                                                 # STEP 21
int3 = 7                                                                # STEP 22
int2 = 15                                                               # STEP 23
avl1 == avl1                                                            # STEP 24
avl1.delete(int1)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
int1 = 11                                                               # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl1 == avl1                                                            # STEP 29
int0 = 15                                                               # STEP 30
avl2.insert(int1)                                                       # STEP 31
avl0 = avl.AVLTree()                                                    # STEP 32
int1 = 4                                                                # STEP 33
avl0.insert(int1)                                                       # STEP 34
int1 = 20                                                               # STEP 35
avl0.insert(int3)                                                       # STEP 36
int3 = 10                                                               # STEP 37
avl1 == avl0                                                            # STEP 38
avl0 == avl0                                                            # STEP 39
result = avl1.inorder()                                                 # STEP 40
avl2.insert(int3)                                                       # STEP 41
int3 = 20                                                               # STEP 42
avl1.insert(int1)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
avl0.delete(int1)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl0 == avl2                                                            # STEP 47
result = avl0.find(int2)                                                # STEP 48
result = avl1.find(int1)                                                # STEP 49
int1 = 16                                                               # STEP 50
avl0.insert(int0)                                                       # STEP 51
avl1.delete(int1)                                                       # STEP 52
avl1.insert(int1)                                                       # STEP 53
int1 = 4                                                                # STEP 54
avl1.delete(int2)                                                       # STEP 55
int0 = 7                                                                # STEP 56
result = avl0.find(int1)                                                # STEP 57
avl1.insert(int2)                                                       # STEP 58
int2 = 13                                                               # STEP 59
avl1 == avl1                                                            # STEP 60
avl2 == avl1                                                            # STEP 61
avl2.insert(int0)                                                       # STEP 62
int1 = 16                                                               # STEP 63
int0 = 16                                                               # STEP 64
result = avl1.inorder()                                                 # STEP 65
result = avl2.inorder()                                                 # STEP 66
avl0.insert(int0)                                                       # STEP 67
avl2 == avl0                                                            # STEP 68
avl0 == avl2                                                            # STEP 69
int0 = 7                                                                # STEP 70
avl0.insert(int3)                                                       # STEP 71
avl1 == avl1                                                            # STEP 72
avl2.delete(int3)                                                       # STEP 73
avl1.delete(int1)                                                       # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ae44d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

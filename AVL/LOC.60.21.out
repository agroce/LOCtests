Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99536.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 6 [1:0]
---- < 4 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([4, 6, 7, 9, 13, 16, 19])
  13 [2:0]
-- < 11 [1:1]
---- < 7 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([7, 11, 13, 15, 17, 19])
  13 [2:0]
-- < 11 [1:1]
---- < 7 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([7, 11, 13, 15, 17, 19])
  15 [2:0]
-- < 7 [1:0]
---- < 3 [0:0] L
---- > 10 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 7, 10, 15, 17, 19, 20])
  15 [2:0]
-- < 7 [1:-1]
---- > 13 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([7, 13, 15, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057663f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99536.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 3
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 6]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 17
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 1                                                                # STEP 20
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 21
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 25
ACTION: int1 = 10 
int1 = 1 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 27
ACTION: result = avl1.find(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 28
ACTION: int1 = 1 
int1 = 10 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 29
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 12                                                               # STEP 31
ACTION: int1 = 12 
int1 = 1 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 32
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 3                                                                # STEP 33
ACTION: int0 = 3 
int0 = 10 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2 == avl2                                                            # STEP 35
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 37
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x10537ffc8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 42
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 43
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 44
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 18                                                               # STEP 47
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 6]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 49
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 12, 6]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 51
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF2 = set([3, 12, 6]) : <type 'set'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 52
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105745bd8> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 3, 12, 6]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 54
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([18, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 10                                                               # STEP 55
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 56
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([18, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105820098> : <type 'instance'>
avl_REF2 = set([18, 3, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18, 12, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105808dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:32.565583) Fri Apr 28 04:15:21 2017 [ 163 stmts 218 branches ]
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  16 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 5, 9, 16, 17, 20])
  10 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 20 [0:0] L
set([4, 5, 10, 13, 15, 17, 19, 20])
  10 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 20 [0:0] L
set([4, 5, 10, 13, 15, 17, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052b8b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.99536.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 6                                                                 # STEP 2
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 3
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 6
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 11                                                                # STEP 7
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 10                                                               # STEP 11
ACTION: int0 = 10 
int0 = 13 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 5                                                                # STEP 13
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 14
ACTION: int2 = 10 
int2 = 15 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 5]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 16
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 18
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 13, 5]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 20                                                               # STEP 26
ACTION: int0 = 20 
int0 = 10 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2 == avl1                                                            # STEP 28
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 30
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 33
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 34
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 35
ACTION: int3 = 18 
int3 = 19 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 36
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 19, 20, 13, 5]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 4                                                                # STEP 40
ACTION: int2 = 4 
int2 = 15 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([10, 19, 20, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 9, 10, 13, 19, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([5, 9, 10, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 5, 9, 10, 13, 19, 20]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 44
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 45
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 46
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 10]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 15                                                               # STEP 49
ACTION: int3 = 15 
int3 = 10 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 50
ACTION: int1 = 9 
int1 = 9 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 51
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 10, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 53
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([9, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10, 7]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 54
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 5, 9, 10, 13, 15, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 58
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 9, 10, 13, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([4, 5, 10, 13, 15, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 59
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 10                                                               # STEP 60
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 61
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 62
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 19, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 63
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 14                                                               # STEP 64
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 65
ACTION: int3 = 5 
int3 = 15 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 10, 19, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 67
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([17, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 10, 13, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 5, 10, 13, 15, 17, 19, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 69
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([17, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.display()                                                          # STEP 70
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 10, 13, 15, 17, 19, 20]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 10, 13, 15, 17, 19, 20])
==================================================
int2 = 12                                                               # STEP 71
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 72
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 10, 13, 15, 17, 19, 20]) : <type 'set'>
  10 [3:-1]
-- < 5 [1:1]
---- < 4 [0:0] L
-- > 19 [2:1]
---- < 15 [1:0]
------ < 13 [0:0] L
------ > 17 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([4, 5, 10, 13, 15, 17, 19, 20])
==================================================
avl1.insert(int3)                                                       # STEP 73
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([17, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([17, 10, 19, 5, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 74
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1052b8d88> : <type 'instance'>
avl_REF1 = set([17, 10, 19, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 75
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105297290> : <type 'instance'>
avl_REF2 = set([4, 5, 10, 13, 15, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([4, 10, 13, 15, 17, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10529f950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10528c5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.99536.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 17                                                                # STEP 3
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 10
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 17, 11]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 15
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 17
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 21
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 3                                                                # STEP 22
ACTION: int2 = 3 
int2 = 2 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 6                                                                # STEP 24
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17, 4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 12                                                               # STEP 29
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 1                                                                # STEP 32
ACTION: int1 = 1 
int1 = 11 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 33
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 17, 6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 3, 6]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 35
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 36
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 17, 3]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 37
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 38
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 3, 19]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 40
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 41
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 43
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 44
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 17, 3]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 45
ACTION: int2 = 18 
int2 = 19 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 46
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 49
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17, 3, 12]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 17, 12]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 52
ACTION: int1 = 20 
int1 = 1 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 53
ACTION: int2 = 12 
int2 = 18 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 54
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 17, 12, 20]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 56
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 58
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 16                                                               # STEP 59
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 60
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 61
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 62
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 63
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10528cc20> : <type 'instance'>
avl_REF2 = set([16, 17, 19, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 17, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052b6b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
61.6224811077 TOTAL RUNTIME
8 EXECUTED
599 TOTAL TEST OPERATIONS
23.1074104309 TIME SPENT EXECUTING TEST OPERATIONS
0.065274477005 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.1933891773 TIME SPENT CHECKING PROPERTIES
46.3007996082 TOTAL TIME SPENT RUNNING SUT
0.00448703765869 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 6                                                                 # STEP 0
int1 = 9                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
avl1.insert(int1)                                                        # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl2.delete(int3)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1 == avl1                                                            # STEP 16
result = avl2.find(int1)                                                # STEP 17
avl1.delete(int1)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
int1 = 1                                                                # STEP 20
int0 = 10                                                               # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
int1 = 10                                                               # STEP 25
avl2.delete(int1)                                                       # STEP 26
result = avl1.find(int1)                                                # STEP 27
int1 = 1                                                                # STEP 28
avl1.delete(int1)                                                       # STEP 29
avl1.delete(int0)                                                       # STEP 30
int1 = 12                                                               # STEP 31
result = avl1.find(int1)                                                # STEP 32
int0 = 3                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl2 == avl2                                                            # STEP 35
result = avl2.inorder()                                                 # STEP 36
avl2.insert(int0)                                                       # STEP 37
result = avl1.inorder()                                                 # STEP 38
result = avl2.inorder()                                                 # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
avl1.delete(int3)                                                       # STEP 42
avl2.insert(int1)                                                       # STEP 43
int2 = 19                                                               # STEP 44
avl1.insert(int1)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
int1 = 18                                                               # STEP 47
avl2.insert(int3)                                                       # STEP 48
result = avl2.inorder()                                                 # STEP 49
avl2.insert(int0)                                                       # STEP 50
avl2 == avl1                                                            # STEP 51
avl1.insert(int0)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
result = avl2.find(int3)                                                # STEP 54
int1 = 10                                                               # STEP 55
avl2.insert(int3)                                                       # STEP 56
avl2.delete(int0)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105808dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 15                                                                # STEP 0
int3 = 19                                                                # STEP 1
int1 = 6                                                                 # STEP 2
int0 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
result = avl2.find(int1)                                                 # STEP 6
int1 = 11                                                                # STEP 7
avl2.delete(int2)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
int0 = 10                                                               # STEP 11
avl2.delete(int2)                                                       # STEP 12
int1 = 5                                                                # STEP 13
int2 = 10                                                               # STEP 14
avl2.insert(int1)                                                       # STEP 15
int1 = 9                                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
result = avl2.find(int0)                                                # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl2.insert(int2)                                                       # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl1.delete(int3)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
avl2.insert(int0)                                                       # STEP 24
avl2.delete(int3)                                                       # STEP 25
int0 = 20                                                               # STEP 26
avl2.delete(int0)                                                       # STEP 27
avl2 == avl1                                                            # STEP 28
avl2.insert(int3)                                                       # STEP 29
int3 = 19                                                               # STEP 30
avl2.insert(int3)                                                       # STEP 31
avl2.insert(int2)                                                       # STEP 32
result = avl2.find(int2)                                                # STEP 33
int2 = 15                                                               # STEP 34
int3 = 18                                                               # STEP 35
result = avl2.find(int2)                                                # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl1.delete(int3)                                                       # STEP 39
int2 = 4                                                                # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl2.insert(int1)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
int0 = 19                                                               # STEP 44
int2 = 7                                                                # STEP 45
int3 = 10                                                               # STEP 46
avl1.insert(int3)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
int3 = 15                                                               # STEP 49
int1 = 9                                                                # STEP 50
avl1 == avl1                                                            # STEP 51
avl1.insert(int2)                                                       # STEP 52
avl1.delete(int1)                                                       # STEP 53
int2 = 14                                                               # STEP 54
avl1.delete(int0)                                                       # STEP 55
result = avl2.find(int1)                                                # STEP 56
avl2.insert(int3)                                                       # STEP 57
avl2.delete(int1)                                                       # STEP 58
avl1.delete(int2)                                                       # STEP 59
int1 = 10                                                               # STEP 60
int2 = 17                                                               # STEP 61
avl1.insert(int0)                                                       # STEP 62
avl1.delete(int3)                                                       # STEP 63
int0 = 14                                                               # STEP 64
int3 = 5                                                                # STEP 65
avl1.insert(int2)                                                       # STEP 66
avl1.insert(int2)                                                       # STEP 67
avl2.insert(int2)                                                       # STEP 68
result = avl1.inorder()                                                 # STEP 69
avl2.display()                                                          # STEP 70
int2 = 12                                                               # STEP 71
avl2.display()                                                          # STEP 72
avl1.insert(int3)                                                       # STEP 73
avl1.delete(int2)                                                       # STEP 74
avl2.delete(int3)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10529f950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int0 = 16                                                                # STEP 0
int1 = 11                                                                # STEP 1
int2 = 2                                                                 # STEP 2
int3 = 17                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
result = avl2.inorder()                                                  # STEP 6
result = avl2.inorder()                                                  # STEP 7
avl2.insert(int3)                                                        # STEP 8
avl2.insert(int0)                                                        # STEP 9
int0 = 16                                                               # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl2.delete(int1)                                                       # STEP 14
int0 = 4                                                                # STEP 15
avl2.insert(int3)                                                       # STEP 16
result = avl2.find(int1)                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
result = avl2.find(int1)                                                # STEP 21
int2 = 3                                                                # STEP 22
avl2.delete(int1)                                                       # STEP 23
int3 = 6                                                                # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.delete(int0)                                                       # STEP 27
avl2.delete(int1)                                                       # STEP 28
int0 = 12                                                               # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl2.delete(int1)                                                       # STEP 31
int1 = 1                                                                # STEP 32
avl2.insert(int3)                                                       # STEP 33
avl2.insert(int2)                                                       # STEP 34
int2 = 19                                                               # STEP 35
avl2.delete(int3)                                                       # STEP 36
result = avl2.find(int3)                                                # STEP 37
result = avl2.find(int3)                                                # STEP 38
avl2.insert(int2)                                                       # STEP 39
int3 = 13                                                               # STEP 40
avl2.delete(int3)                                                       # STEP 41
avl2.insert(int2)                                                       # STEP 42
result = avl2.inorder()                                                 # STEP 43
avl2.delete(int2)                                                       # STEP 44
int2 = 18                                                               # STEP 45
int3 = 3                                                                # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.delete(int0)                                                       # STEP 49
avl2.insert(int0)                                                       # STEP 50
avl2.delete(int3)                                                       # STEP 51
int1 = 20                                                               # STEP 52
int2 = 12                                                               # STEP 53
avl2.delete(int3)                                                       # STEP 54
avl2.insert(int1)                                                       # STEP 55
int0 = 19                                                               # STEP 56
avl2.insert(int0)                                                       # STEP 57
avl2.insert(int0)                                                       # STEP 58
int3 = 16                                                               # STEP 59
avl2.insert(int3)                                                       # STEP 60
result = avl2.inorder()                                                 # STEP 61
avl2.insert(int0)                                                       # STEP 62
result = avl2.find(int1)                                                # STEP 63
avl2.delete(int2)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052b6b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

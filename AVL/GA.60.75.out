Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14749.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #78 (0:00:30.010115) Sun Apr 30 04:54:26 2017 [ 147 stmts 196 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bb8cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.14749.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 6
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 7
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 19                                                               # STEP 10
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 14
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 15
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 18
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 19
ACTION: int2 = 9 
int2 = 14 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 20
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 23
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 12                                                               # STEP 24
ACTION: int1 = 12 
int1 = 11 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 25
ACTION: int0 = 11 
int0 = 19 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 26
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 20                                                               # STEP 27
ACTION: int2 = 20 
int2 = 9 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 31
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([12, 19, 20]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 35
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 4                                                                # STEP 36
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 37
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 38
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 6                                                                # STEP 39
ACTION: int3 = 6 
int3 = 5 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 14                                                               # STEP 41
ACTION: int0 = 14 
int0 = 17 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 42
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0 == avl0                                                            # STEP 43
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 17                                                               # STEP 45
ACTION: int3 = 17 
int3 = 6 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 46
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x101f893b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 12, 19, 20]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 49
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1 == avl2                                                            # STEP 50
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 19                                                               # STEP 51
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 52
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 54
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 11]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 55
ACTION: int2 = 5 
int2 = 19 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([3, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 12, 19, 20, 17]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 57
ACTION: int0 = 20 
int0 = 14 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 58
ACTION: result = avl1.find(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 9                                                                # STEP 59
ACTION: int3 = 9 
int3 = 17 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 60
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([3, 12, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl2                                                            # STEP 61
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF0 = set([3, 12, 19, 20, 17]) : <type 'set'>
avl_REF2 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl1.find(int0)                                                # STEP 62
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 63
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 64
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 65
ACTION: int0 = 18 
int0 = 20 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 66
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 11, 12]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 67
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([19, 11, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 68
ACTION: int0 = 16 
int0 = 18 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 69
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([19, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 9, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102dae710> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 71
ACTION: int2 = 10 
int2 = 5 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 72
ACTION: result = avl0.find(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([3, 12, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 73
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f896c8> : <type 'instance'>
avl_REF0 = set([3, 12, 19, 20, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 2                                                                # STEP 74
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 75
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101f899e0> : <type 'instance'>
avl_REF2 = set([19, 9, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([19, 9, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f84128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2946608067 TOTAL RUNTIME
6 EXECUTED
483 TOTAL TEST OPERATIONS
25.8582966328 TIME SPENT EXECUTING TEST OPERATIONS
0.0197625160217 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.9930188656 TIME SPENT CHECKING PROPERTIES
51.8513154984 TOTAL TIME SPENT RUNNING SUT
0.0047619342804 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 5                                                                 # STEP 0
int1 = 11                                                                # STEP 1
int2 = 5                                                                 # STEP 2
int0 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
avl2 = avl.AVLTree()                                                     # STEP 6
result = avl1.find(int0)                                                 # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
int0 = 19                                                               # STEP 10
result = avl1.find(int2)                                                # STEP 11
avl2.delete(int0)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
int0 = 16                                                               # STEP 14
int2 = 14                                                               # STEP 15
avl1.delete(int0)                                                       # STEP 16
int0 = 19                                                               # STEP 17
result = avl0.find(int2)                                                # STEP 18
int2 = 9                                                                # STEP 19
result = avl2.find(int0)                                                # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl2.insert(int1)                                                       # STEP 22
result = avl0.find(int2)                                                # STEP 23
int1 = 12                                                               # STEP 24
int0 = 11                                                               # STEP 25
avl1 == avl0                                                            # STEP 26
int2 = 20                                                               # STEP 27
avl0.insert(int2)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
avl1.delete(int2)                                                       # STEP 30
result = avl1.inorder()                                                 # STEP 31
int2 = 3                                                                # STEP 32
avl1.delete(int0)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
result = avl2.find(int3)                                                # STEP 35
int1 = 4                                                                # STEP 36
int0 = 17                                                               # STEP 37
result = avl1.find(int1)                                                # STEP 38
int3 = 6                                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
int0 = 14                                                               # STEP 41
result = avl0.find(int2)                                                # STEP 42
avl0 == avl0                                                            # STEP 43
avl1.delete(int3)                                                       # STEP 44
int3 = 17                                                               # STEP 45
avl1 == avl2                                                            # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl2 == avl2                                                            # STEP 49
avl1 == avl2                                                            # STEP 50
int2 = 19                                                               # STEP 51
int1 = 12                                                               # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl2.insert(int2)                                                       # STEP 54
int2 = 5                                                                # STEP 55
avl0.insert(int3)                                                       # STEP 56
int0 = 20                                                               # STEP 57
result = avl1.find(int3)                                                # STEP 58
int3 = 9                                                                # STEP 59
result = avl0.inorder()                                                 # STEP 60
avl0 == avl2                                                            # STEP 61
result = avl1.find(int0)                                                # STEP 62
avl1.insert(int2)                                                       # STEP 63
result = avl2.find(int0)                                                # STEP 64
int0 = 18                                                               # STEP 65
avl2.insert(int1)                                                       # STEP 66
result = avl2.find(int0)                                                # STEP 67
int0 = 16                                                               # STEP 68
avl2.insert(int3)                                                       # STEP 69
avl1.delete(int2)                                                       # STEP 70
int2 = 10                                                               # STEP 71
result = avl0.find(int1)                                                # STEP 72
avl0.insert(int1)                                                       # STEP 73
int3 = 2                                                                # STEP 74
avl2.delete(int1)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f84128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14271.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #88 (0:00:30.103687) Sun Apr 30 03:43:07 2017 [ 149 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1030bd3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 56 steps

SAVING TEST AS failure.14271.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 3
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 4
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int1)                                                 # STEP 5
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 4                                                                 # STEP 6
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 7
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 9                                                                 # STEP 9
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 11
ACTION: int1 = 9 
int1 = 4 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 12
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 7                                                                # STEP 14
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 15
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 16
ACTION: int0 = 4 
int0 = 17 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 17
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 7                                                                # STEP 20
ACTION: int0 = 7 
int0 = 4 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4, 7]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 22
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 23
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 24
ACTION: int3 = 15 
int3 = 6 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 25
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 1, 4, 7]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 27
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 28
ACTION: int2 = 9 
int2 = 16 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 1, 15, 4, 7]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 30
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 32
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 33
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 35
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 38
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 11                                                               # STEP 39
ACTION: int2 = 11 
int2 = 9 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 40
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 15]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 41
ACTION: int3 = 20 
int3 = 15 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 42
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 11, 15]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 43
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([9, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 16                                                               # STEP 46
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 47
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
avl_REF2 = set([9, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 1                                                                # STEP 48
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 49
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF2 = set([9, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 50
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1025dfbd8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
avl_REF2 = set([9, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int3)                                                # STEP 51
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([16, 1, 15, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 12, 15, 16]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 53
ACTION: int3 = 12 
int3 = 20 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 54
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 55
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1025b86c8> : <type 'instance'>
avl_REF0 = set([1, 4, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([4, 12, 15, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10353b830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 60
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2292149067 TOTAL RUNTIME
6 EXECUTED
516 TOTAL TEST OPERATIONS
26.9641888142 TIME SPENT EXECUTING TEST OPERATIONS
0.0211610794067 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1254591942 TIME SPENT CHECKING PROPERTIES
54.0896480083 TOTAL TIME SPENT RUNNING SUT
0.00516247749329 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 18                                                                # STEP 0
int2 = 1                                                                 # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int0 = 17                                                                # STEP 3
avl0 == avl0                                                             # STEP 4
result = avl0.find(int1)                                                 # STEP 5
int1 = 4                                                                 # STEP 6
int3 = 6                                                                 # STEP 7
avl0.insert(int2)                                                        # STEP 8
int2 = 9                                                                 # STEP 9
avl0.insert(int1)                                                       # STEP 10
int1 = 9                                                                # STEP 11
avl0 == avl0                                                            # STEP 12
avl0.delete(int1)                                                       # STEP 13
int1 = 7                                                                # STEP 14
result = avl0.find(int0)                                                # STEP 15
int0 = 4                                                                # STEP 16
result = avl0.inorder()                                                 # STEP 17
avl0.insert(int0)                                                       # STEP 18
avl0.delete(int2)                                                       # STEP 19
int0 = 7                                                                # STEP 20
avl0.insert(int0)                                                       # STEP 21
int2 = 16                                                               # STEP 22
result = avl0.find(int3)                                                # STEP 23
int3 = 15                                                               # STEP 24
int0 = 14                                                               # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl2 = avl.AVLTree()                                                    # STEP 27
int2 = 9                                                                # STEP 28
avl0.insert(int3)                                                       # STEP 29
int3 = 15                                                               # STEP 30
avl0.delete(int1)                                                       # STEP 31
int1 = 8                                                                # STEP 32
avl0 == avl0                                                            # STEP 33
avl2.delete(int1)                                                       # STEP 34
result = avl0.find(int0)                                                # STEP 35
result = avl0.find(int0)                                                # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl0 == avl2                                                            # STEP 38
int2 = 11                                                               # STEP 39
avl2.insert(int3)                                                       # STEP 40
int3 = 20                                                               # STEP 41
avl2.insert(int2)                                                       # STEP 42
int1 = 12                                                               # STEP 43
result = avl2.inorder()                                                 # STEP 44
result = avl0.inorder()                                                 # STEP 45
int0 = 16                                                               # STEP 46
avl0 == avl2                                                            # STEP 47
int2 = 1                                                                # STEP 48
result = avl2.find(int0)                                                # STEP 49
avl0 == avl2                                                            # STEP 50
result = avl0.find(int3)                                                # STEP 51
avl0.insert(int1)                                                       # STEP 52
int3 = 12                                                               # STEP 53
int1 = 4                                                                # STEP 54
avl0.delete(int2)                                                       # STEP 55
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10353b830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

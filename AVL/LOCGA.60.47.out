Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62258.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f6a710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.62258.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 17                                                                # STEP 0
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 3
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 4
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 5
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 11
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 13
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 14
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 16
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 10                                                               # STEP 19
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 20
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 10, 19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 24
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 25
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 8                                                                # STEP 28
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 29
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 30
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 33
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl2                                                            # STEP 34
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 36
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 37
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1028ebb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 6                                                                # STEP 39
ACTION: int0 = 6 
int0 = 10 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102bf0638> : <type 'instance'>
avl_REF2 = set([17, 10, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 10, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b770e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #10 (0:00:30.099840) Mon May  1 18:04:04 2017 [ 149 stmts 198 branches ]
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 11, 14, 16])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 11, 14, 16])
  11 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:1]
---- < 14 [0:0] L
set([3, 6, 7, 11, 14, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026e0e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.62258.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 2
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 6
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 4                                                                # STEP 11
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 8                                                                # STEP 13
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 4, 5]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 17
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 16, 4, 5]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 21
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 16, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 5                                                                # STEP 23
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 16, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 4, 5]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 25
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([16, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 16, 4, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1041e53b0> : <type 'instance'>
avl_REF2 = set([8, 16, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 16, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102847440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026e1368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 30 steps

SAVING TEST AS failure.62258.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 3
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 4
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int2)                                                 # STEP 9
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 11
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 16
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 17
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 9, 3]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 21
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 22
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 3, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 4                                                                # STEP 25
ACTION: int0 = 4 
int0 = 3 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 9, 3]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 27
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 28
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 3, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026d5320> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 3, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c85170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.38653511317 PERCENT COVERED
61.8104400635 TOTAL RUNTIME
8 EXECUTED
499 TOTAL TEST OPERATIONS
25.7015657425 TIME SPENT EXECUTING TEST OPERATIONS
0.0557408332825 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.6696479321 TIME SPENT CHECKING PROPERTIES
51.3712136745 TOTAL TIME SPENT RUNNING SUT
0.00541591644287 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 17                                                                # STEP 0
int1 = 19                                                                # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.delete(int3)                                                        # STEP 3
avl2.insert(int3)                                                        # STEP 4
int0 = 6                                                                 # STEP 5
avl2 == avl2                                                             # STEP 6
avl2.delete(int0)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.find(int3)                                                # STEP 10
avl2.delete(int3)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.delete(int1)                                                       # STEP 13
int0 = 7                                                                # STEP 14
avl2.insert(int3)                                                       # STEP 15
result = avl2.find(int3)                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.insert(int3)                                                       # STEP 18
int0 = 10                                                               # STEP 19
int3 = 17                                                               # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
result = avl2.find(int3)                                                # STEP 24
int3 = 4                                                                # STEP 25
avl2.insert(int3)                                                       # STEP 26
result = avl2.find(int1)                                                # STEP 27
int2 = 8                                                                # STEP 28
int3 = 11                                                               # STEP 29
avl0 = avl.AVLTree()                                                    # STEP 30
avl0.delete(int2)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
result = avl0.inorder()                                                 # STEP 33
avl0 == avl2                                                            # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl0.delete(int2)                                                       # STEP 36
avl0.insert(int0)                                                       # STEP 37
avl2.delete(int3)                                                       # STEP 38
int0 = 6                                                                # STEP 39
avl2.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b770e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 5                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int3 = 7                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int3)                                                        # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl2.insert(int1)                                                       # STEP 10
int0 = 4                                                                # STEP 11
avl2.delete(int2)                                                       # STEP 12
int1 = 8                                                                # STEP 13
avl2.insert(int0)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2 == avl2                                                            # STEP 17
result = avl2.inorder()                                                 # STEP 18
result = avl2.find(int2)                                                # STEP 19
avl2.insert(int2)                                                       # STEP 20
int3 = 4                                                                # STEP 21
avl2.insert(int1)                                                       # STEP 22
int0 = 5                                                                # STEP 23
avl2.delete(int1)                                                       # STEP 24
int2 = 19                                                               # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl2.delete(int3)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102847440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int0 = 3                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
int2 = 9                                                                 # STEP 2
result = avl1.inorder()                                                  # STEP 3
avl1.insert(int0)                                                        # STEP 4
avl1.insert(int2)                                                        # STEP 5
result = avl1.inorder()                                                  # STEP 6
avl1.delete(int2)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
result = avl1.find(int2)                                                 # STEP 9
avl1 == avl1                                                            # STEP 10
avl1.delete(int2)                                                       # STEP 11
avl1.insert(int2)                                                       # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl1.delete(int2)                                                       # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.insert(int2)                                                       # STEP 16
int1 = 16                                                               # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
avl1.insert(int1)                                                       # STEP 20
int3 = 6                                                                # STEP 21
avl1.insert(int0)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
int0 = 4                                                                # STEP 25
avl1.delete(int3)                                                       # STEP 26
int2 = 9                                                                # STEP 27
avl1.insert(int3)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c85170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

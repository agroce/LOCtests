Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.815.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #48 (0:00:30.051239) Fri Apr 28 07:22:39 2017 [ 151 stmts 201 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a1ff80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 46 steps

SAVING TEST AS failure.815.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103dceab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 2
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                 # STEP 3
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dceab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 1                                                                 # STEP 4
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103dceab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 5                                                                 # STEP 6
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 7
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 8
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x103dceab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 11
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 12
ACTION: int1 = 2 
int1 = 9 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 6]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 14
ACTION: int1 = 18 
int1 = 2 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 16
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 17                                                               # STEP 18
ACTION: int2 = 17 
int2 = 1 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 10, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 12                                                               # STEP 21
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 22
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 2, 10, 6]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 23
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 11                                                               # STEP 24
ACTION: int2 = 11 
int2 = 17 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 25
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 16                                                               # STEP 27
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 17, 2, 10, 6]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 29
ACTION: int2 = 16 
int2 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([16, 17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 31
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([16, 17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 32
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([16, 17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([16, 17, 2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 6, 10, 12, 16, 17]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 34
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 35
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 6, 10, 12, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 36
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 6, 10, 12, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 6, 10, 12, 16, 17]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 37
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 38
ACTION: int3 = 3 
int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 39
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 10, 12, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 40
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 10, 12, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 3, 6, 10, 12, 16, 17, 18]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 41
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 42
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 10, 12, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 43
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 10, 12, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 12                                                               # STEP 44
ACTION: int3 = 12 
int3 = 3 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 45
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dcd4d0> : <type 'instance'>
avl_REF0 = set([2, 3, 6, 10, 12, 16, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 3, 6, 10, 16, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dd18c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.2249789238 TOTAL RUNTIME
7 EXECUTED
645 TOTAL TEST OPERATIONS
27.9747111797 TIME SPENT EXECUTING TEST OPERATIONS
0.0225675106049 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.9558565617 TIME SPENT CHECKING PROPERTIES
55.9305677414 TOTAL TIME SPENT RUNNING SUT
0.00411081314087 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 9                                                                 # STEP 1
int2 = 11                                                                # STEP 2
result = avl0.find(int2)                                                 # STEP 3
int2 = 1                                                                 # STEP 4
result = avl0.inorder()                                                  # STEP 5
int0 = 5                                                                 # STEP 6
int3 = 6                                                                 # STEP 7
avl0 = avl.AVLTree()                                                     # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
int3 = 3                                                                # STEP 11
int1 = 2                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
int1 = 18                                                               # STEP 14
result = avl0.find(int1)                                                # STEP 15
int1 = 10                                                               # STEP 16
avl0.delete(int2)                                                       # STEP 17
int2 = 17                                                               # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl0.insert(int1)                                                       # STEP 20
int1 = 12                                                               # STEP 21
avl0.insert(int2)                                                       # STEP 22
avl0 == avl0                                                            # STEP 23
int2 = 11                                                               # STEP 24
result = avl0.find(int2)                                                # STEP 25
avl0.delete(int2)                                                       # STEP 26
int2 = 16                                                               # STEP 27
avl0.insert(int2)                                                       # STEP 28
int2 = 16                                                               # STEP 29
avl0.delete(int0)                                                       # STEP 30
result = avl0.find(int0)                                                # STEP 31
result = avl0.find(int0)                                                # STEP 32
avl0.insert(int1)                                                       # STEP 33
int1 = 18                                                               # STEP 34
avl0 == avl0                                                            # STEP 35
avl0.insert(int3)                                                       # STEP 36
int0 = 20                                                               # STEP 37
int3 = 3                                                                # STEP 38
result = avl0.find(int1)                                                # STEP 39
avl0.insert(int1)                                                       # STEP 40
int1 = 1                                                                # STEP 41
result = avl0.find(int3)                                                # STEP 42
result = avl0.find(int1)                                                # STEP 43
int3 = 12                                                               # STEP 44
avl0.delete(int3)                                                       # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dd18c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

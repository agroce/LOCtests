Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99731.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([3, 5, 9, 14, 15, 16])
  14 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([3, 5, 9, 14, 15, 16, 18])
  14 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([3, 5, 9, 14, 15, 16, 18])
  14 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([3, 5, 9, 14, 15, 16, 18])
  14 [3:1]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 9 [1:0]
------ < 7 [0:0] L
------ > 11 [0:0] L
-- > 19 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([2, 3, 4, 6, 7, 9, 11, 14, 16, 19, 20])
  14 [3:1]
-- < 6 [2:0]
---- < 3 [1:0]
------ < 2 [0:0] L
------ > 4 [0:0] L
---- > 11 [1:0]
------ < 9 [0:0] L
------ > 13 [0:0] L
-- > 19 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([2, 3, 4, 6, 9, 11, 13, 14, 16, 19, 20])
  7 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 12 [0:0] L
set([2, 3, 4, 7, 10, 11, 12])
TEST #4 STEP #87 (0:00:30.066864) Fri Apr 28 04:45:46 2017 [ 161 stmts 214 branches ]
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 4 [0:0] L
-- > 11 [1:-1]
---- > 12 [0:0] L
set([2, 3, 4, 10, 11, 12])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 12 [0:0] L
set([2, 3, 7, 10, 11, 12])
  12 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:0]
---- < 14 [0:0] L
---- > 19 [0:0] L
set([3, 4, 7, 12, 14, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10583f290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.99731.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 2
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 4
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 10                                                                # STEP 7
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 10
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 11
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 12
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 14
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 19
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 20
ACTION: int1 = 3 
int1 = 1 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10583a7a0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 23
ACTION: int0 = 20 
int0 = 10 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 24
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 28
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 11                                                               # STEP 32
ACTION: int3 = 11 
int3 = 20 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 3]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 1]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 38
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 11]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 3, 11]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0 == avl0                                                            # STEP 44
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 13                                                               # STEP 45
ACTION: int0 = 13 
int0 = 1 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 47
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 3]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 48
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 3, 11]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 49
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 51
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 53
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 3, 11, 13]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 55
ACTION: int0 = 15 
int0 = 13 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 56
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049830e0> : <type 'instance'>
avl_REF0 = set([8, 3, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dc3d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 66
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.230298996 TOTAL RUNTIME
8 EXECUTED
724 TOTAL TEST OPERATIONS
27.7387590408 TIME SPENT EXECUTING TEST OPERATIONS
0.0770206451416 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.9057455063 TIME SPENT CHECKING PROPERTIES
55.6445045471 TOTAL TIME SPENT RUNNING SUT
0.00466227531433 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl0 = avl.AVLTree()                                                     # STEP 0
int1 = 1                                                                 # STEP 1
result = avl0.inorder()                                                  # STEP 2
result = avl0.inorder()                                                  # STEP 3
avl0.delete(int1)                                                        # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.delete(int1)                                                        # STEP 6
int0 = 10                                                                # STEP 7
avl0.insert(int0)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
avl0 == avl0                                                            # STEP 10
avl0.delete(int0)                                                       # STEP 11
int2 = 8                                                                # STEP 12
avl0.insert(int1)                                                       # STEP 13
result = avl0.inorder()                                                 # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
avl0.delete(int0)                                                       # STEP 17
avl0.insert(int2)                                                       # STEP 18
int3 = 20                                                               # STEP 19
int1 = 3                                                                # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
int0 = 20                                                               # STEP 23
avl0.insert(int0)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl0.delete(int0)                                                       # STEP 27
int0 = 1                                                                # STEP 28
avl0.delete(int3)                                                       # STEP 29
avl0.delete(int3)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
int3 = 11                                                               # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl0.insert(int0)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
result = avl0.inorder()                                                 # STEP 37
avl0.delete(int0)                                                       # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int3)                                                       # STEP 40
avl0.insert(int3)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl0 == avl0                                                            # STEP 44
int0 = 13                                                               # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl0.delete(int3)                                                       # STEP 47
avl0.insert(int3)                                                       # STEP 48
int2 = 12                                                               # STEP 49
result = avl0.inorder()                                                 # STEP 50
avl0.insert(int3)                                                       # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl0.delete(int2)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
int0 = 15                                                               # STEP 55
int3 = 19                                                               # STEP 56
avl0.delete(int1)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dc3d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

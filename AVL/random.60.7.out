Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99270.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bf3e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 56 steps

SAVING TEST AS failure.99270.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 1
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 2
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 3
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 5
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.find(int2)                                                 # STEP 6
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 5                                                                 # STEP 7
ACTION: int2 = 5 
int2 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 5]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 10
ACTION: int0 = 17 
int0 = 5 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 1                                                                # STEP 12
ACTION: int3 = 1 
int3 = 16 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 16                                                               # STEP 14
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 15
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 16
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 17
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 18
ACTION: int1 = 11 
int1 = 16 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 12                                                               # STEP 20
ACTION: int2 = 12 
int2 = 5 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 21
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 22
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 23
ACTION: int3 = 15 
int3 = 7 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 24
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 6                                                                # STEP 26
ACTION: int3 = 6 
int3 = 15 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 4                                                                # STEP 29
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 30
ACTION: int0 = 3 
int0 = 17 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([12, 20, 5]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 33
ACTION: int2 = 5 
int2 = 12 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 34
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 35
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 37
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 38
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 39
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 18                                                               # STEP 40
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 41
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 3, 20, 5, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([12, 3, 20, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 5, 6, 12, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([1, 3, 5, 6, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 5, 6, 12, 20]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 45
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 46
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 6                                                                # STEP 47
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 48
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 17                                                               # STEP 49
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 50
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 12, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 5, 6, 12, 14, 20]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 51
ACTION: int3 = 8 
int3 = 14 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 52
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 12, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 5, 6, 8, 12, 14, 20]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 53
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 54
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 8, 12, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102a65758> : <type 'instance'>
avl_REF0 = set([3, 5, 6, 8, 12, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 6, 8, 12, 14, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fbb758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #74 (0:00:30.012055) Fri Apr 28 03:33:25 2017 [ 152 stmts 204 branches ]
  8 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 4, 6, 8, 10, 18, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 68
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2037808895 TOTAL RUNTIME
8 EXECUTED
724 TOTAL TEST OPERATIONS
27.6087772846 TIME SPENT EXECUTING TEST OPERATIONS
0.0264227390289 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7897443771 TIME SPENT CHECKING PROPERTIES
55.3985216618 TOTAL TIME SPENT RUNNING SUT
0.0047299861908 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 20                                                                # STEP 0
int0 = 5                                                                 # STEP 1
int3 = 16                                                                # STEP 2
int2 = 5                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0 == avl0                                                             # STEP 5
result = avl0.find(int2)                                                 # STEP 6
int2 = 5                                                                 # STEP 7
avl0.insert(int1)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
int0 = 17                                                               # STEP 10
result = avl0.find(int3)                                                # STEP 11
int3 = 1                                                                # STEP 12
avl0 == avl0                                                            # STEP 13
int1 = 16                                                               # STEP 14
result = avl0.find(int3)                                                # STEP 15
int3 = 7                                                                # STEP 16
result = avl0.find(int1)                                                # STEP 17
int1 = 11                                                               # STEP 18
avl0.insert(int2)                                                       # STEP 19
int2 = 12                                                               # STEP 20
result = avl0.find(int3)                                                # STEP 21
result = avl0.find(int3)                                                # STEP 22
int3 = 15                                                               # STEP 23
avl0 == avl0                                                            # STEP 24
avl0.delete(int3)                                                       # STEP 25
int3 = 6                                                                # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.delete(int0)                                                       # STEP 28
int1 = 4                                                                # STEP 29
int0 = 3                                                                # STEP 30
avl0.insert(int2)                                                       # STEP 31
result = avl0.find(int2)                                                # STEP 32
int2 = 5                                                                # STEP 33
avl0.insert(int3)                                                       # STEP 34
int3 = 3                                                                # STEP 35
avl0.delete(int1)                                                       # STEP 36
result = avl0.find(int2)                                                # STEP 37
avl0.delete(int1)                                                       # STEP 38
result = avl0.find(int1)                                                # STEP 39
int2 = 18                                                               # STEP 40
int1 = 1                                                                # STEP 41
avl0.insert(int3)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
int3 = 14                                                               # STEP 45
avl0.delete(int3)                                                       # STEP 46
int1 = 6                                                                # STEP 47
avl0.insert(int1)                                                       # STEP 48
int1 = 17                                                               # STEP 49
avl0.insert(int3)                                                       # STEP 50
int3 = 8                                                                # STEP 51
avl0.insert(int3)                                                       # STEP 52
int3 = 3                                                                # STEP 53
result = avl0.find(int2)                                                # STEP 54
avl0.delete(int3)                                                       # STEP 55
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fbb758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

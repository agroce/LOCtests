Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.373.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #67 (0:00:30.032037) Fri Apr 28 06:12:20 2017 [ 148 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042a32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.373.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 7
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 6                                                                 # STEP 8
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 9
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 11
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 12
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2 == avl1                                                            # STEP 14
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int2 = 10                                                               # STEP 15
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 16
ACTION: result = avl2.find(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 17
ACTION: int0 = 4 
int0 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 19
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 21
ACTION: int0 = 19 
int0 = 4 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 22
ACTION: int2 = 3 
int2 = 10 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 24
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.find(int0)                                                # STEP 25
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 3]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 29
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 30
ACTION: int2 = 17 
int2 = 3 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 32
ACTION: int0 = 8 
int0 = 19 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 33
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 35
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104246cf8> : <type 'instance'>
avl_REF1 = set([9, 3]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 37
ACTION: int0 = 20 
int0 = 8 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 10                                                               # STEP 39
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 41
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 19                                                               # STEP 42
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 12                                                               # STEP 44
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 45
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 46
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 4]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 48
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1 == avl1                                                            # STEP 49
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x1042ae098> : <type 'instance'>
avl_REF2 = set([19, 4]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 52
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int3)                                                # STEP 53
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 54
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 19, 12]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 55
ACTION: int3 = 11 
int3 = 19 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 56
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 57
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 58
ACTION: int1 = 3 
int1 = 4 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 59
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 60
ACTION: result = avl2.find(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 61
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 19                                                               # STEP 62
ACTION: int0 = 19 
int0 = 12 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 63
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 64
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 65
ACTION: int0 = 6 
int0 = 19 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 66
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 5                                                                # STEP 67
ACTION: int1 = 5 
int1 = 3 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 68
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2 == avl1                                                            # STEP 69
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int2)                                                # STEP 70
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 71
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 17                                                               # STEP 72
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 73
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 11                                                               # STEP 74
ACTION: int3 = 11 
int3 = 14 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 75
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 12, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 76
ACTION: result = avl2.find(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 77
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 78
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 5                                                                # STEP 79
ACTION: int0 = 5 
int0 = 6 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 80
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 81
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 82
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x10428f710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10475b950> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
==================================================
avl1.insert(int3)                                                       # STEP 83
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 11, 12, 6]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 84
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 85
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10475b950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 86
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 87
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10475b950> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 88
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104287050> : <type 'instance'>
avl_REF1 = set([8, 11, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 11, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046ffb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 46
STOPPING TESTING DUE TO TIMEOUT
7.90634543604 PERCENT COVERED
60.1870620251 TOTAL RUNTIME
7 EXECUTED
635 TOTAL TEST OPERATIONS
26.2718727589 TIME SPENT EXECUTING TEST OPERATIONS
0.0223846435547 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.2928626537 TIME SPENT CHECKING PROPERTIES
52.5647354126 TOTAL TIME SPENT RUNNING SUT
0.00418877601624 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int1 = 5                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.insert(int3)                                                        # STEP 6
result = avl1.find(int2)                                                 # STEP 7
int3 = 6                                                                 # STEP 8
int2 = 12                                                                # STEP 9
result = avl1.find(int1)                                                # STEP 10
avl2 = avl.AVLTree()                                                    # STEP 11
int1 = 8                                                                # STEP 12
avl1.delete(int2)                                                       # STEP 13
avl2 == avl1                                                            # STEP 14
int2 = 10                                                               # STEP 15
result = avl2.find(int0)                                                # STEP 16
int0 = 4                                                                # STEP 17
avl1 == avl1                                                            # STEP 18
result = avl1.find(int2)                                                # STEP 19
avl2.insert(int0)                                                       # STEP 20
int0 = 19                                                               # STEP 21
int2 = 3                                                                # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl2 == avl2                                                            # STEP 24
result = avl1.find(int0)                                                # STEP 25
avl2.delete(int1)                                                       # STEP 26
avl2.insert(int0)                                                       # STEP 27
avl1.insert(int2)                                                       # STEP 28
int1 = 4                                                                # STEP 29
int2 = 17                                                               # STEP 30
avl2.delete(int0)                                                       # STEP 31
int0 = 8                                                                # STEP 32
int3 = 14                                                               # STEP 33
result = avl2.inorder()                                                 # STEP 34
avl1 = avl.AVLTree()                                                    # STEP 35
avl1.insert(int0)                                                       # STEP 36
int0 = 20                                                               # STEP 37
avl2.delete(int3)                                                       # STEP 38
int3 = 10                                                               # STEP 39
avl2.delete(int3)                                                       # STEP 40
result = avl2.inorder()                                                 # STEP 41
int3 = 19                                                               # STEP 42
avl1.delete(int0)                                                       # STEP 43
int0 = 12                                                               # STEP 44
result = avl2.find(int0)                                                # STEP 45
result = avl2.find(int3)                                                # STEP 46
avl2.insert(int3)                                                       # STEP 47
result = avl1.find(int3)                                                # STEP 48
avl1 == avl1                                                            # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl2 == avl1                                                            # STEP 52
result = avl2.find(int3)                                                # STEP 53
avl1.insert(int3)                                                       # STEP 54
int3 = 11                                                               # STEP 55
avl1 == avl1                                                            # STEP 56
result = avl2.find(int1)                                                # STEP 57
int1 = 3                                                                # STEP 58
result = avl2.find(int0)                                                # STEP 59
result = avl2.find(int1)                                                # STEP 60
avl1.delete(int3)                                                       # STEP 61
int0 = 19                                                               # STEP 62
int3 = 14                                                               # STEP 63
avl1.delete(int0)                                                       # STEP 64
int0 = 6                                                                # STEP 65
result = avl2.find(int3)                                                # STEP 66
int1 = 5                                                                # STEP 67
result = avl2.find(int3)                                                # STEP 68
avl2 == avl1                                                            # STEP 69
result = avl2.find(int2)                                                # STEP 70
avl1 == avl1                                                            # STEP 71
int2 = 17                                                               # STEP 72
avl1 == avl1                                                            # STEP 73
int3 = 11                                                               # STEP 74
avl1.insert(int0)                                                       # STEP 75
result = avl2.find(int1)                                                # STEP 76
int1 = 1                                                                # STEP 77
result = avl2.inorder()                                                 # STEP 78
int0 = 5                                                                # STEP 79
result = avl2.inorder()                                                 # STEP 80
avl2 == avl2                                                            # STEP 81
avl2 = avl.AVLTree()                                                    # STEP 82
avl1.insert(int3)                                                       # STEP 83
int3 = 17                                                               # STEP 84
avl2.insert(int0)                                                       # STEP 85
int0 = 6                                                                # STEP 86
avl2.delete(int2)                                                       # STEP 87
avl1.delete(int0)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046ffb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
198 BRANCHES COVERED
148 STATEMENTS COVERED

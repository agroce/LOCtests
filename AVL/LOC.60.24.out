Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99603.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c48e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.99603.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 2
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 3
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 3                                                                 # STEP 6
ACTION: int0 = 3 
int0 = 9 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.find(int3)                                                 # STEP 7
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 12                                                               # STEP 11
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 19
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 21
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 22
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 3, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 3]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 3, 9]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 27
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([1, 3, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 9]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 28
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 3                                                                # STEP 30
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 31
ACTION: int1 = 10 
int1 = 1 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7, 3, 9]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([7, 3, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7, 3, 12, 9]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([7, 3, 12, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([7, 3, 12, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7, 9, 10, 12]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 36
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 40
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 41
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 16                                                               # STEP 43
ACTION: int2 = 16 
int2 = 12 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b153f8> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([7, 9, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b25f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  4 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [1:0]
---- < 8 [0:0] L
---- > 16 [0:0] L
set([1, 2, 4, 8, 12, 16])
  4 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([1, 2, 4, 8, 12, 16, 19])
  4 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [2:-1]
---- < 8 [0:0] L
---- > 16 [1:-1]
------ > 19 [0:0] L
set([1, 2, 4, 8, 12, 16, 19])
  8 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 16 [0:0] L
set([1, 2, 8, 12, 15, 16])
  8 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 16 [0:0] L
set([1, 2, 8, 12, 15, 16])
  8 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 12 [0:0] L
---- > 16 [0:0] L
set([1, 2, 8, 12, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e55a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 35 steps

SAVING TEST AS failure.99603.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 11                                                                # STEP 0
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 2
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                 # STEP 4
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 13                                                                # STEP 5
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 6
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 11
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 11]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 13
ACTION: int0 = 4 
int0 = 3 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 14
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 11, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 17
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 11]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 19
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 20
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 8                                                                # STEP 22
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 11]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 11, 13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 8, 11, 13]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 8, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 7                                                                # STEP 29
ACTION: int2 = 7 
int2 = 13 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 30
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 8, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 8, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 8, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 7, 8, 11, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104e04b90> : <type 'instance'>
avl_REF0 = set([3, 7, 8, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 7, 8, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dd4518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e6ec68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 17 steps

SAVING TEST AS failure.99603.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 1                                                                 # STEP 0
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 2
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                             # STEP 6
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                             # STEP 7
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 11                                                                # STEP 8
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 10, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 13
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 17                                                               # STEP 14
ACTION: int3 = 17 
int3 = 11 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 17, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10582e200> : <type 'instance'>
avl_REF1 = set([1, 10, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([10, 17, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a9e7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  12 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 17 [1:1]
---- < 13 [0:0] L
set([2, 3, 5, 12, 13, 17])
TEST #5 STEP #80 (0:00:30.029279) Fri Apr 28 04:24:27 2017 [ 160 stmts 211 branches ]
  15 [2:0]
-- < 10 [1:0]
---- < 6 [0:0] L
---- > 11 [0:0] L
-- > 16 [1:-1]
---- > 18 [0:0] L
set([6, 10, 11, 15, 16, 18])
  5 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 18 [0:0] L
set([2, 4, 5, 7, 9, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df5ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 54 steps

SAVING TEST AS failure.99603.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 1
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 4                                                                 # STEP 8
ACTION: int0 = 4 
int0 = 6 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 9
ACTION: int2 = 2 
int2 = 7 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 18                                                               # STEP 14
ACTION: int0 = 18 
int0 = 4 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 18, 4, 5, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 18, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 18
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 9                                                                # STEP 21
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 4, 5, 7, 9]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 24
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4, 5, 7, 9, 18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 26
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.display()                                                          # STEP 28
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7, 9, 18]) : <type 'set'>
  5 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 4, 5, 7, 9, 18])
==================================================
int2 = 6                                                                # STEP 29
ACTION: int2 = 6 
int2 = 3 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 5, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 4, 7, 9, 18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 18                                                               # STEP 32
ACTION: int3 = 18 
int3 = 8 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 33
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 34
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 35
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 4, 7, 9]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 37
ACTION: int3 = 18 
int3 = 18 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 38
ACTION: int2 = 16 
int2 = 6 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 39
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 15                                                               # STEP 44
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 46
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 6, 7, 9, 18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 48
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 49
ACTION: int3 = 7 
int3 = 18 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 50
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 20                                                               # STEP 52
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 53
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104a8d5a8> : <type 'instance'>
avl_REF2 = set([2, 4, 6, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 4, 6, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a918c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  3 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 14 [2:1]
---- < 13 [1:1]
------ < 9 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 9, 13, 14, 19])
  3 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 14 [2:1]
---- < 13 [1:1]
------ < 9 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 9, 13, 14, 19])
  3 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 14 [2:1]
---- < 13 [1:1]
------ < 9 [0:0] L
---- > 19 [0:0] L
set([1, 2, 3, 9, 13, 14, 19])
  9 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 2, 9, 13, 14, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aace18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 34 steps

SAVING TEST AS failure.99603.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 2                                                                 # STEP 4
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 7
ACTION: int2 = 16 
int2 = 2 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 11                                                               # STEP 10
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 11
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 11]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 17]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 21
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 17, 11]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 24
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 27
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104aa3320> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 28
ACTION: int3 = 1 
int3 = 5 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104aa3320> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 30
ACTION: int1 = 13 
int1 = 2 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 17, 11, 1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ab1290> : <type 'instance'>
avl_REF2 = set([16, 17, 11, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 11, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a94560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.44927044452 PERCENT COVERED
60.3446321487 TOTAL RUNTIME
10 EXECUTED
585 TOTAL TEST OPERATIONS
22.8072698116 TIME SPENT EXECUTING TEST OPERATIONS
0.0656416416168 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.8940854073 TIME SPENT CHECKING PROPERTIES
45.7013552189 TOTAL TIME SPENT RUNNING SUT
0.00562143325806 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int0 = 9                                                                 # STEP 1
int1 = 1                                                                 # STEP 2
int3 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
int0 = 3                                                                 # STEP 6
result = avl2.find(int3)                                                 # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
int2 = 12                                                               # STEP 11
avl2.delete(int3)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.delete(int0)                                                       # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
int0 = 7                                                                # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2.delete(int3)                                                       # STEP 21
avl2.insert(int0)                                                       # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.delete(int1)                                                       # STEP 27
avl2 == avl2                                                            # STEP 28
result = avl2.inorder()                                                 # STEP 29
int3 = 3                                                                # STEP 30
int1 = 10                                                               # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.insert(int2)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
avl2.insert(int1)                                                       # STEP 35
int0 = 16                                                               # STEP 36
avl2.insert(int1)                                                       # STEP 37
avl2.delete(int2)                                                       # STEP 38
avl2.insert(int1)                                                       # STEP 39
result = avl2.find(int0)                                                # STEP 40
avl2.insert(int1)                                                       # STEP 41
avl2.delete(int2)                                                       # STEP 42
int2 = 16                                                               # STEP 43
avl2.delete(int3)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b25f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 11                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.delete(int3)                                                        # STEP 2
result = avl0.inorder()                                                  # STEP 3
result = avl0.find(int3)                                                 # STEP 4
int2 = 13                                                                # STEP 5
int1 = 8                                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.insert(int2)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
int0 = 3                                                                # STEP 11
avl0.insert(int0)                                                       # STEP 12
int0 = 4                                                                # STEP 13
avl0 == avl0                                                            # STEP 14
avl0.insert(int3)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
avl0.insert(int3)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
result = avl0.find(int3)                                                # STEP 19
result = avl0.find(int1)                                                # STEP 20
avl0.delete(int0)                                                       # STEP 21
int1 = 8                                                                # STEP 22
avl0.delete(int3)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
int2 = 7                                                                # STEP 29
int0 = 9                                                                # STEP 30
avl0.delete(int0)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl0.delete(int3)                                                       # STEP 34
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dd4518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 1                                                                 # STEP 0
int2 = 7                                                                 # STEP 1
int0 = 10                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int1)                                                        # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1 == avl1                                                             # STEP 6
avl1 == avl1                                                             # STEP 7
int3 = 11                                                                # STEP 8
avl1.insert(int0)                                                        # STEP 9
avl1.insert(int2)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
avl1.delete(int3)                                                       # STEP 13
int3 = 17                                                               # STEP 14
avl1.insert(int3)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a9e7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 3
int1 = 5                                                                 # STEP 0
int0 = 6                                                                 # STEP 1
int3 = 8                                                                 # STEP 2
int2 = 7                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
result = avl2.inorder()                                                  # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 4                                                                 # STEP 8
int2 = 2                                                                 # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
int0 = 18                                                               # STEP 14
avl2.insert(int2)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
result = avl2.find(int3)                                                # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2.delete(int0)                                                       # STEP 20
int2 = 9                                                                # STEP 21
avl2.insert(int1)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
int2 = 3                                                                # STEP 24
avl2.insert(int0)                                                       # STEP 25
avl2.delete(int2)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.display()                                                          # STEP 28
int2 = 6                                                                # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
int3 = 18                                                               # STEP 32
int1 = 8                                                                # STEP 33
int0 = 8                                                                # STEP 34
avl2.delete(int3)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
int3 = 18                                                               # STEP 37
int2 = 16                                                               # STEP 38
avl2 == avl2                                                            # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.delete(int2)                                                       # STEP 42
avl2.delete(int0)                                                       # STEP 43
int0 = 15                                                               # STEP 44
avl2.delete(int2)                                                       # STEP 45
avl2.delete(int2)                                                       # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl2.delete(int3)                                                       # STEP 48
int3 = 7                                                                # STEP 49
int1 = 14                                                               # STEP 50
avl2.delete(int0)                                                       # STEP 51
int2 = 20                                                               # STEP 52
avl2.delete(int3)                                                       # STEP 53
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a918c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 4
int3 = 5                                                                 # STEP 0
int0 = 17                                                                # STEP 1
int1 = 2                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int2 = 2                                                                 # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
int2 = 16                                                                # STEP 7
avl2.insert(int2)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
int2 = 11                                                               # STEP 10
avl2.insert(int0)                                                       # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.delete(int3)                                                       # STEP 20
result = avl2.find(int3)                                                # STEP 21
avl2.delete(int1)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
int1 = 2                                                                # STEP 24
avl2.insert(int0)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl0 = avl.AVLTree()                                                    # STEP 27
int3 = 1                                                                # STEP 28
avl0.insert(int1)                                                       # STEP 29
int1 = 13                                                               # STEP 30
avl2.insert(int2)                                                       # STEP 31
avl2.insert(int3)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a94560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1056.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  18 [3:1]
-- < 7 [2:-1]
---- < 5 [0:0] L
---- > 9 [1:-1]
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([5, 7, 9, 15, 18, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105901998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.1056.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 1
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 5
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = 20 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 8
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 1                                                                 # STEP 9
ACTION: int0 = 1 
int0 = 18 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 10
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 11
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([18, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 9                                                                # STEP 12
ACTION: int3 = 9 
int3 = 14 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 13
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([18, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 18, 20, 7]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 15
ACTION: int3 = 19 
int3 = 9 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([9, 18, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18, 20, 5, 7]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 17
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([9, 18, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([9, 18, 20, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 7, 9, 18, 19, 20]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 19
ACTION: int1 = 2 
int1 = 5 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 20
ACTION: int3 = 15 
int3 = 19 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 22
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 18                                                               # STEP 23
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 25
ACTION: int3 = 12 
int3 = 15 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 28
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 29
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 30
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10472eab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 31
ACTION: int1 = 5 
int1 = 2 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10472eab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 5                                                                # STEP 36
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 37
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 38
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
  18 [3:1]
-- < 7 [2:-1]
---- < 5 [0:0] L
---- > 9 [1:-1]
------ > 15 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 7, 9, 15, 18, 19, 20])
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10472eab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 40
ACTION: int1 = 19 
int1 = 5 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 42
ACTION: int3 = 5 
int3 = 12 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 43
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105899488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10472eab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 45
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105899488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 46
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10472eab8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 48
ACTION: int1 = 4 
int1 = 7 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105899488> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 50
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 51
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059550e0> : <type 'instance'>
avl_REF0 = set([5, 7, 9, 15, 18, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([5, 7, 9, 15, 18, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10419d290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #45 (0:00:30.080762) Fri Apr 28 08:03:28 2017 [ 143 stmts 192 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 85
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1618368626 TOTAL RUNTIME
7 EXECUTED
637 TOTAL TEST OPERATIONS
27.6648752689 TIME SPENT EXECUTING TEST OPERATIONS
0.0242562294006 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.846716404 TIME SPENT CHECKING PROPERTIES
55.5115916729 TOTAL TIME SPENT RUNNING SUT
0.00450611114502 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 5                                                                 # STEP 0
int3 = 14                                                                # STEP 1
int0 = 20                                                                # STEP 2
int2 = 7                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int0)                                                        # STEP 5
int0 = 18                                                                # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0 == avl0                                                             # STEP 8
int0 = 1                                                                 # STEP 9
avl0.insert(int2)                                                       # STEP 10
avl0.delete(int3)                                                       # STEP 11
int3 = 9                                                                # STEP 12
int2 = 11                                                               # STEP 13
avl0.insert(int3)                                                       # STEP 14
int3 = 19                                                               # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0 == avl0                                                            # STEP 17
avl0.insert(int3)                                                       # STEP 18
int1 = 2                                                                # STEP 19
int3 = 15                                                               # STEP 20
avl0.delete(int2)                                                       # STEP 21
avl0 == avl0                                                            # STEP 22
int2 = 18                                                               # STEP 23
avl0.insert(int3)                                                       # STEP 24
int3 = 12                                                               # STEP 25
avl0.insert(int1)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.delete(int1)                                                       # STEP 28
avl0 == avl0                                                            # STEP 29
avl2 = avl.AVLTree()                                                    # STEP 30
int1 = 5                                                                # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.insert(int1)                                                       # STEP 35
int0 = 5                                                                # STEP 36
int2 = 19                                                               # STEP 37
avl0.display()                                                          # STEP 38
avl2.insert(int1)                                                       # STEP 39
int1 = 19                                                               # STEP 40
avl0.delete(int3)                                                       # STEP 41
int3 = 5                                                                # STEP 42
avl1 = avl.AVLTree()                                                    # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl1.insert(int1)                                                       # STEP 45
int1 = 7                                                                # STEP 46
avl2.insert(int1)                                                       # STEP 47
int1 = 4                                                                # STEP 48
avl1.insert(int1)                                                       # STEP 49
int1 = 11                                                               # STEP 50
avl0.delete(int2)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10419d290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

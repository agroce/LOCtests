Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.98865.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #5 STEP #22 (0:00:30.055378) Fri Apr 28 03:15:10 2017 [ 133 stmts 178 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058c6680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 79 steps

SAVING TEST AS failure.98865.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 1
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 2
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 20                                                                # STEP 5
ACTION: int0 = 20 
int0 = 3 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 10                                                                # STEP 7
ACTION: int2 = 10 
int2 = 7 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 8
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                             # STEP 9
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int0)                                                # STEP 10
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 11
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 4                                                                # STEP 13
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 14
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 15
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 16
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 12                                                               # STEP 17
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 20
ACTION: int0 = 17 
int0 = 8 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl2                                                            # STEP 22
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 15                                                               # STEP 23
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 25
ACTION: int1 = 7 
int1 = 4 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 26
ACTION: int3 = 4 
int3 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 15                                                               # STEP 28
ACTION: int0 = 15 
int0 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 29
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 17                                                               # STEP 31
ACTION: int1 = 17 
int1 = 7 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 32
ACTION: int2 = 18 
int2 = 12 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 33
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 20                                                               # STEP 36
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 38
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 4, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 39
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 15                                                               # STEP 41
ACTION: int3 = 15 
int3 = 4 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 42
ACTION: int1 = 12 
int1 = 17 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 9                                                                # STEP 45
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 46
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 10                                                               # STEP 47
ACTION: int2 = 10 
int2 = 16 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int2)                                                # STEP 49
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 50
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int3)                                                # STEP 51
ACTION: result = avl2.find(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 52
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x103f99bd8> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 53
ACTION: int2 = 15 
int2 = 10 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 54
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103dd6518> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 55
ACTION: int3 = 18 
int3 = 15 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 56
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103dd6518> : <type 'instance'>
avl_REF2 = set([17, 4, 15]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 58
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 10                                                               # STEP 59
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 60
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 62
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 15                                                               # STEP 63
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 64
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 65
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 66
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 67
ACTION: int3 = 10 
int3 = 15 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 68
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103dd6518> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 69
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 15                                                               # STEP 70
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 71
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 12                                                               # STEP 72
ACTION: int3 = 12 
int3 = 10 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 73
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 74
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 16                                                               # STEP 75
ACTION: int1 = 16 
int1 = 10 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 76
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103dd6170> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int2)                                                       # STEP 78
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103abb200> : <type 'instance'>
avl_REF2 = set([17, 4, 9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([17, 4, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103db6638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
8.04480651731 PERCENT COVERED
60.2139699459 TOTAL RUNTIME
8 EXECUTED
738 TOTAL TEST OPERATIONS
26.9048399925 TIME SPENT EXECUTING TEST OPERATIONS
0.025096654892 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1087286472 TIME SPENT CHECKING PROPERTIES
54.0135686398 TOTAL TIME SPENT RUNNING SUT
0.00457453727722 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 4                                                                 # STEP 0
int0 = 3                                                                 # STEP 1
int2 = 7                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl2.delete(int0)                                                        # STEP 4
int0 = 20                                                                # STEP 5
avl2.delete(int2)                                                        # STEP 6
int2 = 10                                                                # STEP 7
avl1 = avl.AVLTree()                                                     # STEP 8
avl2 == avl1                                                             # STEP 9
result = avl2.find(int0)                                                # STEP 10
int0 = 7                                                                # STEP 11
result = avl1.inorder()                                                 # STEP 12
int1 = 4                                                                # STEP 13
result = avl1.find(int0)                                                # STEP 14
int0 = 8                                                                # STEP 15
avl1.delete(int2)                                                       # STEP 16
int2 = 12                                                               # STEP 17
result = avl2.find(int1)                                                # STEP 18
avl1.insert(int0)                                                       # STEP 19
int0 = 17                                                               # STEP 20
avl1.delete(int0)                                                       # STEP 21
avl1 == avl2                                                            # STEP 22
int0 = 15                                                               # STEP 23
avl2.insert(int3)                                                       # STEP 24
int1 = 7                                                                # STEP 25
int3 = 4                                                                # STEP 26
avl1.delete(int0)                                                       # STEP 27
int0 = 15                                                               # STEP 28
avl1.insert(int1)                                                       # STEP 29
avl1.delete(int2)                                                       # STEP 30
int1 = 17                                                               # STEP 31
int2 = 18                                                               # STEP 32
avl2 == avl2                                                            # STEP 33
avl2.insert(int0)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
int0 = 20                                                               # STEP 36
avl2.delete(int2)                                                       # STEP 37
avl2.insert(int1)                                                       # STEP 38
int2 = 16                                                               # STEP 39
avl1.delete(int3)                                                       # STEP 40
int3 = 15                                                               # STEP 41
int1 = 12                                                               # STEP 42
avl1.delete(int1)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
int1 = 9                                                                # STEP 45
avl2.delete(int2)                                                       # STEP 46
int2 = 10                                                               # STEP 47
avl1 == avl1                                                            # STEP 48
result = avl1.find(int2)                                                # STEP 49
avl1 == avl1                                                            # STEP 50
result = avl2.find(int3)                                                # STEP 51
avl1 = avl.AVLTree()                                                    # STEP 52
int2 = 15                                                               # STEP 53
avl0 = avl.AVLTree()                                                    # STEP 54
int3 = 18                                                               # STEP 55
avl2 == avl0                                                            # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl1.delete(int3)                                                       # STEP 58
int1 = 10                                                               # STEP 59
result = avl1.find(int3)                                                # STEP 60
avl2.delete(int3)                                                       # STEP 61
result = avl2.inorder()                                                 # STEP 62
int3 = 15                                                               # STEP 63
avl2.insert(int3)                                                       # STEP 64
avl2.delete(int0)                                                       # STEP 65
int0 = 7                                                                # STEP 66
int3 = 10                                                               # STEP 67
result = avl0.find(int0)                                                # STEP 68
result = avl1.inorder()                                                 # STEP 69
int0 = 15                                                               # STEP 70
avl1.delete(int3)                                                       # STEP 71
int3 = 12                                                               # STEP 72
avl1.insert(int1)                                                       # STEP 73
avl1.delete(int2)                                                       # STEP 74
int1 = 16                                                               # STEP 75
avl1.delete(int1)                                                       # STEP 76
result = avl1.inorder()                                                 # STEP 77
avl2.delete(int2)                                                       # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103db6638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

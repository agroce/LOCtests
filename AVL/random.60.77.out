Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.728.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([3, 6, 8, 12, 14, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034fb830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 97 steps

SAVING TEST AS failure.728.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 9                                                                 # STEP 6
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int0)                                                 # STEP 8
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 5                                                                 # STEP 9
ACTION: int0 = 5 
int0 = 9 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 11
ACTION: int2 = 16 
int2 = 2 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 13
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 14
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 16
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 8                                                                # STEP 18
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 11                                                               # STEP 20
ACTION: int2 = 11 
int2 = 8 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 21
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 14                                                               # STEP 23
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 24
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 26
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2 == avl1                                                            # STEP 27
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int1)                                                       # STEP 28
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 14                                                               # STEP 29
ACTION: int1 = 14 
int1 = 5 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 30
ACTION: int2 = 6 
int2 = 11 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 32
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 33
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2 == avl0                                                            # STEP 34
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 2, 5]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2 == avl0                                                            # STEP 37
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 2                                                                # STEP 38
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 39
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int1 = 18                                                               # STEP 40
ACTION: int1 = 18 
int1 = 14 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 41
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 15                                                               # STEP 44
ACTION: int0 = 15 
int0 = 2 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 46
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 48
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 49
ACTION: int0 = 18 
int0 = 15 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 50
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.find(int0)                                                # STEP 51
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 52
ACTION: int0 = 18 
int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 53
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 54
ACTION: int2 = 18 
int2 = 6 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 55
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl1.find(int0)                                                # STEP 56
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 8                                                                # STEP 57
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 58
ACTION: int3 = 3 
int3 = 14 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 59
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 11                                                               # STEP 60
ACTION: int0 = 11 
int0 = 18 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 61
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 62
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 63
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 19                                                               # STEP 64
ACTION: int1 = 19 
int1 = 16 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 65
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 66
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1058600e0> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104271fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 67
ACTION: int2 = 2 
int2 = 18 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 68
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 2                                                                # STEP 69
ACTION: int0 = 2 
int0 = 11 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 70
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104271fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 71
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 72
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl0.inorder()                                                 # STEP 73
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 5                                                                # STEP 74
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 75
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 13                                                               # STEP 76
ACTION: int2 = 13 
int2 = 2 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 77
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 78
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104271fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 79
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 80
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104271fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 12                                                               # STEP 81
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 82
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 83
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 84
ACTION: int1 = 3 
int1 = 19 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 85
ACTION: result = avl0.find(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 86
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 87
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 88
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 16                                                               # STEP 89
ACTION: int2 = 16 
int2 = 8 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 90
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 91
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 2, 12, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 92
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104271fc8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 93
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int3 = 9                                                                # STEP 94
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 95
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10586c5a8> : <type 'instance'>
avl_REF0 = set([3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 3, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 96
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427bab8> : <type 'instance'>
avl_REF2 = set([16, 2, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 12, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10427e5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:34.201184) Fri Apr 28 07:07:28 2017 [ 158 stmts 210 branches ]
  7 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 3, 7, 15, 19, 20])
  7 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 3, 7, 15, 19, 20])
  12 [3:1]
-- < 5 [2:1]
---- < 3 [1:0]
------ < 1 [0:0] L
------ > 4 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([1, 3, 4, 5, 6, 12, 14, 15, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 98
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1899759769 TOTAL RUNTIME
6 EXECUTED
595 TOTAL TEST OPERATIONS
25.6405522823 TIME SPENT EXECUTING TEST OPERATIONS
0.0213916301727 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.7703428268 TIME SPENT CHECKING PROPERTIES
51.4108951092 TOTAL TIME SPENT RUNNING SUT
0.00393009185791 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int0 = 9                                                                 # STEP 1
int2 = 2                                                                 # STEP 2
int3 = 11                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
int3 = 9                                                                 # STEP 6
avl2.delete(int1)                                                        # STEP 7
result = avl2.find(int0)                                                 # STEP 8
int0 = 5                                                                 # STEP 9
avl2.insert(int2)                                                       # STEP 10
int2 = 16                                                               # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
result = avl2.find(int2)                                                # STEP 13
int1 = 19                                                               # STEP 14
avl2.insert(int2)                                                       # STEP 15
int2 = 19                                                               # STEP 16
avl1.delete(int2)                                                       # STEP 17
int2 = 8                                                                # STEP 18
result = avl2.find(int2)                                                # STEP 19
int2 = 11                                                               # STEP 20
result = avl2.find(int3)                                                # STEP 21
avl2.delete(int1)                                                       # STEP 22
int3 = 14                                                               # STEP 23
int1 = 5                                                                # STEP 24
avl1.delete(int1)                                                       # STEP 25
result = avl1.find(int2)                                                # STEP 26
avl2 == avl1                                                            # STEP 27
avl2.delete(int1)                                                       # STEP 28
int1 = 14                                                               # STEP 29
int2 = 6                                                                # STEP 30
avl1.delete(int0)                                                       # STEP 31
avl0 = avl.AVLTree()                                                    # STEP 32
avl2 == avl0                                                            # STEP 33
avl2 == avl0                                                            # STEP 34
avl2.insert(int0)                                                       # STEP 35
avl1.delete(int1)                                                       # STEP 36
avl2 == avl0                                                            # STEP 37
int0 = 2                                                                # STEP 38
avl2 == avl0                                                            # STEP 39
int1 = 18                                                               # STEP 40
avl0 == avl1                                                            # STEP 41
avl1.delete(int0)                                                       # STEP 42
avl2.delete(int1)                                                       # STEP 43
int0 = 15                                                               # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.insert(int2)                                                       # STEP 46
avl1.insert(int3)                                                       # STEP 47
result = avl1.find(int0)                                                # STEP 48
int0 = 18                                                               # STEP 49
avl0 == avl1                                                            # STEP 50
result = avl0.find(int0)                                                # STEP 51
int0 = 18                                                               # STEP 52
result = avl0.find(int2)                                                # STEP 53
int2 = 18                                                               # STEP 54
avl1 == avl2                                                            # STEP 55
result = avl1.find(int0)                                                # STEP 56
int1 = 8                                                                # STEP 57
int3 = 3                                                                # STEP 58
result = avl1.find(int1)                                                # STEP 59
int0 = 11                                                               # STEP 60
int1 = 16                                                               # STEP 61
avl2.insert(int1)                                                       # STEP 62
result = avl1.inorder()                                                 # STEP 63
int1 = 19                                                               # STEP 64
avl1.delete(int2)                                                       # STEP 65
avl1 = avl.AVLTree()                                                    # STEP 66
int2 = 2                                                                # STEP 67
avl2.delete(int0)                                                       # STEP 68
int0 = 2                                                                # STEP 69
result = avl1.find(int2)                                                # STEP 70
avl0.delete(int3)                                                       # STEP 71
avl2 == avl2                                                            # STEP 72
result = avl0.inorder()                                                 # STEP 73
int3 = 5                                                                # STEP 74
avl2.insert(int2)                                                       # STEP 75
int2 = 13                                                               # STEP 76
result = avl2.find(int2)                                                # STEP 77
avl1.delete(int2)                                                       # STEP 78
result = avl0.find(int3)                                                # STEP 79
avl1.delete(int3)                                                       # STEP 80
int3 = 12                                                               # STEP 81
int2 = 8                                                                # STEP 82
result = avl2.find(int1)                                                # STEP 83
int1 = 3                                                                # STEP 84
result = avl0.find(int2)                                                # STEP 85
avl0.insert(int1)                                                       # STEP 86
avl0.insert(int1)                                                       # STEP 87
result = avl2.find(int2)                                                # STEP 88
int2 = 16                                                               # STEP 89
int1 = 6                                                                # STEP 90
avl2.insert(int3)                                                       # STEP 91
avl1 == avl1                                                            # STEP 92
result = avl2.find(int1)                                                # STEP 93
int3 = 9                                                                # STEP 94
avl0.insert(int2)                                                       # STEP 95
avl2.delete(int0)                                                       # STEP 96
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10427e5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

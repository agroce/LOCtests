Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62141.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 16 [1:1]
---- < 11 [0:0] L
set([1, 3, 5, 7, 11, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ac8d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.62141.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 17                                                                # STEP 0
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 3
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 13                                                                # STEP 7
ACTION: int0 = 13 
int0 = 7 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 9
ACTION: int2 = 15 
int2 = 7 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 14                                                               # STEP 12
ACTION: int2 = 14 
int2 = 15 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 13
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 14
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 14 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 13, 7]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 21
ACTION: int1 = 1 
int1 = 7 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 22
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([4, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([4, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 4, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 4, 12, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 15                                                               # STEP 28
ACTION: int2 = 15 
int2 = 4 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 4, 13, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 13, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 4, 7, 12, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7, 12, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 4, 7, 12, 13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 34
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1048a7cb0> : <type 'instance'>
avl_REF2 = set([1, 4, 7, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 4, 7, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e85fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  15 [3:1]
-- < 7 [2:0]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 13 [1:1]
------ < 11 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([1, 3, 7, 11, 13, 15, 16, 18])
  15 [3:1]
-- < 7 [2:0]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([1, 3, 7, 11, 13, 15, 16, 18])
  15 [3:1]
-- < 7 [2:0]
---- < 1 [1:-1]
------ > 3 [0:0] L
---- > 11 [1:-1]
------ > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([1, 3, 7, 11, 13, 15, 16, 18])
TEST #4 STEP #2 (0:00:30.061700) Mon May  1 17:49:33 2017 [ 159 stmts 210 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 79
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.3201420307 TOTAL RUNTIME
6 EXECUTED
515 TOTAL TEST OPERATIONS
27.939054966 TIME SPENT EXECUTING TEST OPERATIONS
0.0649831295013 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.119720459 TIME SPENT CHECKING PROPERTIES
56.058775425 TOTAL TIME SPENT RUNNING SUT
0.00449395179749 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 17                                                                # STEP 0
int3 = 12                                                                # STEP 1
int0 = 7                                                                 # STEP 2
int2 = 7                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.insert(int0)                                                        # STEP 6
int0 = 13                                                                # STEP 7
avl2.delete(int2)                                                        # STEP 8
int2 = 15                                                                # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2.delete(int1)                                                       # STEP 11
int2 = 14                                                               # STEP 12
int1 = 7                                                                # STEP 13
result = avl2.inorder()                                                 # STEP 14
avl2.delete(int2)                                                       # STEP 15
int2 = 4                                                                # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.insert(int2)                                                       # STEP 19
avl2.insert(int1)                                                       # STEP 20
int1 = 1                                                                # STEP 21
avl2 == avl2                                                            # STEP 22
avl2.delete(int0)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.delete(int0)                                                       # STEP 26
avl2.delete(int0)                                                       # STEP 27
int2 = 15                                                               # STEP 28
avl2.insert(int0)                                                       # STEP 29
avl2.insert(int2)                                                       # STEP 30
avl2.delete(int2)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
result = avl2.inorder()                                                 # STEP 34
avl2.delete(int0)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e85fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99473.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104407050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 83 steps

SAVING TEST AS failure.99473.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 2
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 4
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 18                                                                # STEP 5
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int2 = 4                                                                 # STEP 7
ACTION: int2 = 4 
int2 = 17 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
int2 = 1                                                                 # STEP 9
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 10
ACTION: int3 = 7 
int3 = 4 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 11                                                               # STEP 12
ACTION: int2 = 11 
int2 = 1 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 13
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 11, 4]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 14
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 15
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int0)                                                # STEP 17
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 18
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 19
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 20
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 22
ACTION: int1 = 2 
int1 = 16 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 24
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 25
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 3                                                                # STEP 26
ACTION: int1 = 3 
int1 = 2 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 27
ACTION: result = avl0.find(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 28
ACTION: int1 = 11 
int1 = 3 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 17                                                               # STEP 30
ACTION: int2 = 17 
int2 = 16 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 31
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 == avl0                                                            # STEP 34
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 20                                                               # STEP 39
ACTION: int2 = 20 
int2 = 17 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 40
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 41
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 42
ACTION: result = avl0.find(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 2                                                                # STEP 43
ACTION: int1 = 2 
int1 = 19 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 44
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 45
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 46
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104451320> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 47
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 17                                                               # STEP 48
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 49
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 2, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([17, 11, 4]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 51
ACTION: int1 = 18 
int1 = 2 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 52
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 53
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 54
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 55
ACTION: int0 = 5 
int0 = 2 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 56
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 57
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 58
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 59
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 60
ACTION: int0 = 4 
int0 = 5 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 61
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 62
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 64
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 65
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 66
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 67
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 10                                                               # STEP 68
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 69
ACTION: int0 = 13 
int0 = 4 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 70
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 17, 10, 11, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 71
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 14                                                               # STEP 73
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 74
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 75
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 76
ACTION: result = avl0.find(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 77
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 78
ACTION: int0 = 2 
int0 = 8 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 79
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10444fab8> : <type 'instance'>
avl_REF1 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 10]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 80
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 19                                                               # STEP 81
ACTION: int2 = 19 
int2 = 10 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 82
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10592f6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 11, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105937a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:35.075808) Fri Apr 28 04:04:14 2017 [ 149 stmts 198 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 21
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.1580548286 TOTAL RUNTIME
8 EXECUTED
704 TOTAL TEST OPERATIONS
26.7721180916 TIME SPENT EXECUTING TEST OPERATIONS
0.024311542511 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8718566895 TIME SPENT CHECKING PROPERTIES
53.643974781 TOTAL TIME SPENT RUNNING SUT
0.0044116973877 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int3 = 4                                                                 # STEP 1
int1 = 16                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
result = avl0.find(int3)                                                 # STEP 4
int0 = 18                                                                # STEP 5
avl0.insert(int2)                                                        # STEP 6
int2 = 4                                                                 # STEP 7
avl0.insert(int2)                                                        # STEP 8
int2 = 1                                                                 # STEP 9
int3 = 7                                                                # STEP 10
avl0.delete(int2)                                                       # STEP 11
int2 = 11                                                               # STEP 12
avl0.insert(int2)                                                       # STEP 13
int2 = 16                                                               # STEP 14
avl0 == avl0                                                            # STEP 15
result = avl0.inorder()                                                 # STEP 16
result = avl0.find(int0)                                                # STEP 17
result = avl0.inorder()                                                 # STEP 18
avl1 = avl.AVLTree()                                                    # STEP 19
avl1 == avl1                                                            # STEP 20
avl1.insert(int1)                                                       # STEP 21
int1 = 2                                                                # STEP 22
avl0.insert(int1)                                                       # STEP 23
int0 = 2                                                                # STEP 24
result = avl1.inorder()                                                 # STEP 25
int1 = 3                                                                # STEP 26
result = avl0.find(int1)                                                # STEP 27
int1 = 11                                                               # STEP 28
avl1.insert(int2)                                                       # STEP 29
int2 = 17                                                               # STEP 30
result = avl0.find(int1)                                                # STEP 31
avl1 == avl1                                                            # STEP 32
result = avl0.find(int1)                                                # STEP 33
avl1 == avl0                                                            # STEP 34
avl1.delete(int1)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl1.delete(int1)                                                       # STEP 37
result = avl1.inorder()                                                 # STEP 38
int2 = 20                                                               # STEP 39
int1 = 19                                                               # STEP 40
result = avl1.find(int1)                                                # STEP 41
result = avl0.find(int3)                                                # STEP 42
int1 = 2                                                                # STEP 43
int3 = 1                                                                # STEP 44
result = avl0.find(int2)                                                # STEP 45
avl1 = avl.AVLTree()                                                    # STEP 46
avl0.delete(int3)                                                       # STEP 47
int3 = 17                                                               # STEP 48
avl1.delete(int2)                                                       # STEP 49
avl0.delete(int1)                                                       # STEP 50
int1 = 18                                                               # STEP 51
int2 = 8                                                                # STEP 52
result = avl1.find(int0)                                                # STEP 53
avl1.insert(int2)                                                       # STEP 54
int0 = 5                                                                # STEP 55
avl0.delete(int2)                                                       # STEP 56
result = avl0.find(int1)                                                # STEP 57
int1 = 1                                                                # STEP 58
result = avl0.find(int0)                                                # STEP 59
int0 = 4                                                                # STEP 60
int2 = 8                                                                # STEP 61
avl0 == avl1                                                            # STEP 62
avl1.insert(int3)                                                       # STEP 63
avl1.insert(int3)                                                       # STEP 64
avl0.insert(int2)                                                       # STEP 65
int2 = 10                                                               # STEP 66
avl1.delete(int0)                                                       # STEP 67
int3 = 10                                                               # STEP 68
int0 = 13                                                               # STEP 69
avl0.insert(int3)                                                       # STEP 70
avl0.delete(int3)                                                       # STEP 71
result = avl0.find(int0)                                                # STEP 72
int3 = 14                                                               # STEP 73
int0 = 8                                                                # STEP 74
avl0.insert(int0)                                                       # STEP 75
result = avl0.find(int1)                                                # STEP 76
int1 = 17                                                               # STEP 77
int0 = 2                                                                # STEP 78
avl1.insert(int2)                                                       # STEP 79
result = avl0.find(int3)                                                # STEP 80
int2 = 19                                                               # STEP 81
avl0.delete(int1)                                                       # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105937a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

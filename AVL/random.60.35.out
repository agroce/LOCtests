Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99804.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 18 [1:1]
---- < 13 [0:0] L
set([1, 5, 6, 9, 13, 18])
TEST #4 STEP #85 (0:00:30.018962) Fri Apr 28 04:58:56 2017 [ 151 stmts 204 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058e3d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.99804.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 10                                                                # STEP 0
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 1
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 2
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 3
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 6
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 3                                                                 # STEP 8
ACTION: int2 = 3 
int2 = 12 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 13                                                               # STEP 12
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 13
ACTION: int1 = 3 
int1 = 13 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 14
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 16                                                               # STEP 16
ACTION: int0 = 16 
int0 = 10 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 14                                                               # STEP 18
ACTION: int1 = 14 
int1 = 3 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2 == avl0                                                            # STEP 20
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 23
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 24
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10417bb00> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 26
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 27
ACTION: int3 = 10 
int3 = 5 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 28
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 29
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10417bb00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 30
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 31
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 32
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 33
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([10, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([14, 15]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 36
ACTION: int2 = 12 
int2 = 15 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 1                                                                # STEP 38
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 14, 15]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 40
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([9, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([9, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 10, 14, 15]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 42
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 43
ACTION: int1 = 17 
int1 = 9 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 10, 15]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 46
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 47
ACTION: int3 = 15 
int3 = 9 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 48
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 1                                                                # STEP 50
ACTION: int3 = 1 
int3 = 15 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 51
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 19                                                               # STEP 52
ACTION: int2 = 19 
int2 = 1 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 53
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 10, 19, 15]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 54
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF0 = set([9, 10, 19, 15]) : <type 'set'>
avl_REF2 = set([9, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([9, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 15                                                               # STEP 57
ACTION: int2 = 15 
int2 = 19 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 58
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 19, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 60
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10478d4d0> : <type 'instance'>
avl_REF0 = set([9, 10, 19, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int2)                                                       # STEP 61
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10478d7e8> : <type 'instance'>
avl_REF2 = set([9, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104157098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046053b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 81 steps

SAVING TEST AS failure.99804.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 1
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 2
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 6
ACTION: int0 = 16 
int0 = 9 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int1)                                                 # STEP 7
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                  # STEP 9
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 4                                                                # STEP 10
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 11
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 4                                                                # STEP 13
ACTION: int2 = 4 
int2 = 6 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 14                                                               # STEP 15
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104605830> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 18
ACTION: int3 = 8 
int3 = 14 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 19
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 6                                                                # STEP 20
ACTION: int2 = 6 
int2 = 4 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 21
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 24
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 25
ACTION: int1 = 20 
int1 = 4 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 3]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 27
ACTION: int0 = 16 
int0 = 3 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 3, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 29
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 30
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 2                                                                # STEP 31
ACTION: int1 = 2 
int1 = 20 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 9                                                                # STEP 33
ACTION: int2 = 9 
int2 = 6 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 35
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 36
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 8                                                                # STEP 40
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 41
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104616ab8> : <type 'instance'>
avl_REF1 = set([16, 8, 3, 20]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 2                                                                # STEP 43
ACTION: int2 = 2 
int2 = 8 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 2]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 45
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 47
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 48
ACTION: int1 = 20 
int1 = 2 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 49
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 2]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 50
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 51
ACTION: int3 = 10 
int3 = 13 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 52
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 53
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
avl_REF2 = set([16, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 19                                                               # STEP 54
ACTION: int2 = 19 
int2 = 2 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 55
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 56
ACTION: avl2.delete(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 20                                                               # STEP 57
ACTION: int1 = 20 
int1 = 20 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 58
ACTION: int0 = 18 
int0 = 3 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 9, 2, 19]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 60
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 19                                                               # STEP 61
ACTION: int3 = 19 
int3 = 10 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 62
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 63
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 65
ACTION: int1 = 19 
int1 = 20 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 66
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.find(int0)                                                # STEP 67
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 68
ACTION: int0 = 19 
int0 = 18 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 69
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 70
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 9, 2, 18]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 71
ACTION: int1 = 3 
int1 = 19 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 72
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 73
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1041fccb0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 75
ACTION: int0 = 2 
int0 = 19 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 76
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 77
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 16                                                               # STEP 78
ACTION: int2 = 16 
int2 = 16 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 79
ACTION: int3 = 7 
int3 = 19 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 80
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1047beb90> : <type 'instance'>
avl_REF2 = set([16, 9, 2, 19, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 9, 19, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10460b320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
62.5000071526 TOTAL RUNTIME
8 EXECUTED
643 TOTAL TEST OPERATIONS
25.1999621391 TIME SPENT EXECUTING TEST OPERATIONS
0.0220386981964 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4404399395 TIME SPENT CHECKING PROPERTIES
50.6404020786 TOTAL TIME SPENT RUNNING SUT
0.00460886955261 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 10                                                                # STEP 0
int2 = 12                                                                # STEP 1
int1 = 13                                                                # STEP 2
int3 = 5                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
result = avl0.find(int1)                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
int2 = 3                                                                 # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl0.insert(int0)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
int2 = 13                                                               # STEP 12
int1 = 3                                                                # STEP 13
avl2 == avl0                                                            # STEP 14
result = avl2.inorder()                                                 # STEP 15
int0 = 16                                                               # STEP 16
avl0.delete(int1)                                                       # STEP 17
int1 = 14                                                               # STEP 18
result = avl0.find(int1)                                                # STEP 19
avl2 == avl0                                                            # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl0 == avl2                                                            # STEP 23
avl1 = avl.AVLTree()                                                    # STEP 24
avl2.delete(int3)                                                       # STEP 25
result = avl2.find(int3)                                                # STEP 26
int3 = 10                                                               # STEP 27
int1 = 7                                                                # STEP 28
result = avl1.find(int2)                                                # STEP 29
int2 = 15                                                               # STEP 30
result = avl0.find(int1)                                                # STEP 31
int1 = 9                                                                # STEP 32
result = avl2.find(int3)                                                # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl2.insert(int2)                                                       # STEP 35
int2 = 12                                                               # STEP 36
avl0.delete(int2)                                                       # STEP 37
int2 = 1                                                                # STEP 38
avl2.insert(int1)                                                       # STEP 39
result = avl2.find(int1)                                                # STEP 40
avl2.insert(int3)                                                       # STEP 41
int3 = 9                                                                # STEP 42
int1 = 17                                                               # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl0.insert(int3)                                                       # STEP 45
int1 = 18                                                               # STEP 46
int3 = 15                                                               # STEP 47
avl0.insert(int3)                                                       # STEP 48
avl0.insert(int3)                                                       # STEP 49
int3 = 1                                                                # STEP 50
avl0.delete(int2)                                                       # STEP 51
int2 = 19                                                               # STEP 52
avl0.insert(int2)                                                       # STEP 53
avl0 == avl2                                                            # STEP 54
avl0.delete(int1)                                                       # STEP 55
result = avl2.find(int1)                                                # STEP 56
int2 = 15                                                               # STEP 57
int1 = 3                                                                # STEP 58
avl0.delete(int0)                                                       # STEP 59
result = avl0.inorder()                                                 # STEP 60
avl2.delete(int2)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104157098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 6                                                                 # STEP 0
int1 = 4                                                                 # STEP 1
int0 = 9                                                                 # STEP 2
int3 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
int0 = 16                                                                # STEP 6
result = avl1.find(int1)                                                 # STEP 7
result = avl1.find(int3)                                                 # STEP 8
result = avl1.inorder()                                                  # STEP 9
int1 = 4                                                                # STEP 10
int3 = 4                                                                # STEP 11
avl1.delete(int2)                                                       # STEP 12
int2 = 4                                                                # STEP 13
result = avl1.find(int3)                                                # STEP 14
int3 = 14                                                               # STEP 15
avl1.delete(int3)                                                       # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
int3 = 8                                                                # STEP 18
result = avl1.find(int2)                                                # STEP 19
int2 = 6                                                                # STEP 20
result = avl1.find(int1)                                                # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1.insert(int0)                                                       # STEP 23
int0 = 3                                                                # STEP 24
int1 = 20                                                               # STEP 25
avl1.insert(int0)                                                       # STEP 26
int0 = 16                                                               # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl2 = avl.AVLTree()                                                    # STEP 29
avl2.delete(int2)                                                       # STEP 30
int1 = 2                                                                # STEP 31
avl2.delete(int2)                                                       # STEP 32
int2 = 9                                                                # STEP 33
avl1.insert(int3)                                                       # STEP 34
int3 = 13                                                               # STEP 35
result = avl2.inorder()                                                 # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl2.insert(int2)                                                       # STEP 38
result = avl1.inorder()                                                 # STEP 39
int2 = 8                                                                # STEP 40
avl1 = avl.AVLTree()                                                    # STEP 41
avl1.delete(int2)                                                       # STEP 42
int2 = 2                                                                # STEP 43
avl2.insert(int2)                                                       # STEP 44
result = avl2.find(int0)                                                # STEP 45
avl1.delete(int0)                                                       # STEP 46
result = avl2.find(int1)                                                # STEP 47
int1 = 20                                                               # STEP 48
avl2.insert(int0)                                                       # STEP 49
avl1.insert(int3)                                                       # STEP 50
int3 = 10                                                               # STEP 51
int0 = 3                                                                # STEP 52
avl1 == avl2                                                            # STEP 53
int2 = 19                                                               # STEP 54
result = avl2.find(int0)                                                # STEP 55
avl2.delete(int1)                                                       # STEP 56
int1 = 20                                                               # STEP 57
int0 = 18                                                               # STEP 58
avl2.insert(int2)                                                       # STEP 59
result = avl2.find(int3)                                                # STEP 60
int3 = 19                                                               # STEP 61
int2 = 16                                                               # STEP 62
result = avl2.find(int1)                                                # STEP 63
avl2.insert(int0)                                                       # STEP 64
int1 = 19                                                               # STEP 65
avl2 == avl2                                                            # STEP 66
result = avl1.find(int0)                                                # STEP 67
int0 = 19                                                               # STEP 68
avl1.delete(int2)                                                       # STEP 69
avl2.delete(int1)                                                       # STEP 70
int1 = 3                                                                # STEP 71
avl2.delete(int3)                                                       # STEP 72
result = avl1.find(int3)                                                # STEP 73
avl1.insert(int0)                                                       # STEP 74
int0 = 2                                                                # STEP 75
avl2.insert(int3)                                                       # STEP 76
avl2 == avl2                                                            # STEP 77
int2 = 16                                                               # STEP 78
int3 = 7                                                                # STEP 79
avl2.delete(int0)                                                       # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10460b320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

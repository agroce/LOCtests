Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.518.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 16 [0:0] L
set([3, 4, 7, 10, 11, 14, 16])
  10 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 16 [0:0] L
set([3, 4, 7, 10, 11, 14, 16])
  7 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 10 [1:0]
---- < 8 [0:0] L
---- > 13 [0:0] L
set([3, 6, 7, 8, 10, 13])
TEST #4 STEP #67 (0:00:30.066417) Fri Apr 28 06:32:44 2017 [ 160 stmts 214 branches ]
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 12 [0:0] L
set([2, 3, 7, 9, 12, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058f2d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.518.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 3
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                 # STEP 5
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int0)                                                 # STEP 6
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                  # STEP 8
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 11
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 6                                                                # STEP 14
ACTION: int2 = 6 
int2 = 7 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 6]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 16
ACTION: int3 = 7 
int3 = 3 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 18
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 20
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 22
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 6]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 25
ACTION: int0 = 15 
int0 = 4 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 4, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 29
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 4, 6]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 30
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int2 = 20                                                               # STEP 37
ACTION: int2 = 20 
int2 = 6 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 39
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([3, 4, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 3                                                                # STEP 42
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 43
ACTION: int1 = 16 
int1 = 3 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 44
ACTION: int0 = 5 
int0 = 15 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 3                                                                # STEP 47
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 50
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046d58c0> : <type 'instance'>
avl_REF0 = set([3, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 6, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058038c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046f8290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.518.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 15                                                                # STEP 0
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 1
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 3
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 3                                                                 # STEP 7
ACTION: int2 = 3 
int2 = 9 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 12                                                               # STEP 11
ACTION: int0 = 12 
int0 = 15 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 3, 15]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 14
ACTION: int2 = 16 
int2 = 3 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 15
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 16, 3, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 16, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 16, 3, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 16, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11, 16, 3, 8, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 16, 3, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([11, 16, 3, 8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 8, 9, 11, 15, 16]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 11, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([3, 9, 11, 15, 16]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 9, 11, 12, 15, 16]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 25
ACTION: int2 = 12 
int2 = 16 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 26
ACTION: int1 = 19 
int1 = 8 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 27
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 7                                                                # STEP 28
ACTION: int3 = 7 
int3 = 9 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 7, 9, 11, 12, 15, 16]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 11, 12, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 7, 9, 11, 12, 15, 16, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f8680> : <type 'instance'>
avl_REF2 = set([3, 7, 9, 11, 12, 15, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 7, 9, 11, 15, 16, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d0908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 78
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2295842171 TOTAL RUNTIME
8 EXECUTED
663 TOTAL TEST OPERATIONS
26.6549115181 TIME SPENT EXECUTING TEST OPERATIONS
0.0690331459045 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7542672157 TIME SPENT CHECKING PROPERTIES
53.4091787338 TOTAL TIME SPENT RUNNING SUT
0.00482058525085 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 18                                                                # STEP 0
int0 = 4                                                                 # STEP 1
int3 = 3                                                                 # STEP 2
int1 = 3                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int3)                                                 # STEP 5
result = avl0.find(int0)                                                 # STEP 6
avl0.delete(int2)                                                        # STEP 7
result = avl0.inorder()                                                  # STEP 8
avl0.insert(int0)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
int2 = 7                                                                # STEP 11
avl0.insert(int0)                                                       # STEP 12
avl0.delete(int2)                                                       # STEP 13
int2 = 6                                                                # STEP 14
avl0.insert(int2)                                                       # STEP 15
int3 = 7                                                                # STEP 16
avl0.delete(int3)                                                       # STEP 17
avl0 == avl0                                                            # STEP 18
avl0.delete(int2)                                                       # STEP 19
avl0.delete(int3)                                                       # STEP 20
avl0.delete(int3)                                                       # STEP 21
result = avl0.inorder()                                                 # STEP 22
avl0.insert(int2)                                                       # STEP 23
result = avl0.find(int0)                                                # STEP 24
int0 = 15                                                               # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.delete(int0)                                                       # STEP 29
result = avl0.find(int0)                                                # STEP 30
avl0.insert(int2)                                                       # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl0.insert(int2)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
result = avl0.find(int0)                                                # STEP 36
int2 = 20                                                               # STEP 37
avl0.delete(int2)                                                       # STEP 38
avl0.delete(int3)                                                       # STEP 39
avl0.delete(int0)                                                       # STEP 40
result = avl0.inorder()                                                 # STEP 41
int2 = 3                                                                # STEP 42
int1 = 16                                                               # STEP 43
int0 = 5                                                                # STEP 44
avl0.insert(int3)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
int3 = 3                                                                # STEP 47
avl0.delete(int1)                                                       # STEP 48
avl0.insert(int3)                                                       # STEP 49
avl0.insert(int3)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl0.delete(int3)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058038c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 15                                                                # STEP 0
int3 = 9                                                                 # STEP 1
int2 = 9                                                                 # STEP 2
int1 = 11                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
int2 = 3                                                                 # STEP 7
avl2 == avl2                                                             # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 12                                                               # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
int2 = 16                                                               # STEP 14
int1 = 8                                                                # STEP 15
avl2.delete(int1)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
result = avl2.find(int2)                                                # STEP 19
avl2.insert(int1)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.insert(int0)                                                       # STEP 24
int2 = 12                                                               # STEP 25
int1 = 19                                                               # STEP 26
avl2.insert(int0)                                                       # STEP 27
int3 = 7                                                                # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl2.insert(int1)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d0908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

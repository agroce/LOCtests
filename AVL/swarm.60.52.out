Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.242.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c90488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.242.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 1
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 3
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                                # STEP 9
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 10
ACTION: int1 = 15 
int1 = 17 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 11
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 12
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 9]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 15
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 17
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 2, 9]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 18
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 19
ACTION: int1 = 5 
int1 = 15 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([17, 2, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 17, 2, 9]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 21
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([8, 17, 2, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 7                                                                # STEP 23
ACTION: int0 = 7 
int0 = 12 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([8, 17, 2, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([8, 17, 2, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 17, 2, 14, 9]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 26
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 27
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([8, 17, 2, 14, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 7, 8, 9, 14, 17]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 29
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([2, 7, 8, 9, 14, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 7, 8, 9, 14, 17, 20]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 31
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103e3c5f0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([2, 7, 8, 9, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 5, 7, 8, 9, 14, 17, 20]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 33
ACTION: int2 = 1 
int2 = 5 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103e3c5f0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 35
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 36
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103d2d710> : <type 'instance'>
avl_REF0 = set([2, 5, 7, 8, 9, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 5, 8, 9, 14, 17, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e2e680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10397f200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 39 steps

SAVING TEST AS failure.242.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 2
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 3
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
int1 = 13                                                                # STEP 6
ACTION: int1 = 13 
int1 = 14 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                        # STEP 8
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 14]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 3                                                                # STEP 10
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 11
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int3)                                                # STEP 13
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 14
ACTION: int3 = 18 
int3 = 14 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 20, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 16
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 17
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 18
ACTION: int2 = 8 
int2 = 3 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 19
ACTION: result = avl0.find(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 18                                                               # STEP 20
ACTION: int1 = 18 
int1 = 13 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 5                                                                # STEP 23
ACTION: int2 = 5 
int2 = 8 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 24
ACTION: int3 = 2 
int3 = 18 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 25
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 20, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 20, 14]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 29
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 5]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 31
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 20, 14]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 33
ACTION: int3 = 17 
int3 = 2 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 34
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103985ab8> : <type 'instance'>
avl_REF1 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 4, 5]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 37
ACTION: int0 = 10 
int0 = 5 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10397f680> : <type 'instance'>
avl_REF0 = set([2, 3, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 3, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10394c560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #19 (0:00:30.004292) Fri Apr 28 05:51:59 2017 [ 134 stmts 176 branches ]
  7 [2:0]
-- < 6 [1:1]
---- < 3 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([3, 6, 7, 9, 16, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 98
STOPPING TESTING DUE TO TIMEOUT
8.48320325755 PERCENT COVERED
60.2066719532 TOTAL RUNTIME
8 EXECUTED
675 TOTAL TEST OPERATIONS
26.9512777328 TIME SPENT EXECUTING TEST OPERATIONS
0.0235311985016 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.041877985 TIME SPENT CHECKING PROPERTIES
53.9931557178 TOTAL TIME SPENT RUNNING SUT
0.00435662269592 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 4                                                                 # STEP 0
int0 = 8                                                                 # STEP 1
int1 = 17                                                                # STEP 2
int3 = 4                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
int2 = 14                                                                # STEP 9
int1 = 15                                                               # STEP 10
int3 = 20                                                               # STEP 11
avl0.delete(int3)                                                       # STEP 12
int3 = 9                                                                # STEP 13
avl0.insert(int3)                                                       # STEP 14
int3 = 2                                                                # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.insert(int3)                                                       # STEP 17
int3 = 6                                                                # STEP 18
int1 = 5                                                                # STEP 19
avl0.insert(int0)                                                       # STEP 20
int0 = 12                                                               # STEP 21
avl0.delete(int0)                                                       # STEP 22
int0 = 7                                                                # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
int1 = 7                                                                # STEP 26
int2 = 5                                                                # STEP 27
avl0.insert(int0)                                                       # STEP 28
int0 = 20                                                               # STEP 29
avl0.insert(int0)                                                       # STEP 30
avl1 = avl.AVLTree()                                                    # STEP 31
avl0.insert(int2)                                                       # STEP 32
int2 = 1                                                                # STEP 33
avl1.insert(int2)                                                       # STEP 34
int2 = 6                                                                # STEP 35
int0 = 6                                                                # STEP 36
avl0.delete(int1)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e2e680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 5                                                                 # STEP 0
int2 = 20                                                                # STEP 1
int1 = 14                                                                # STEP 2
int3 = 14                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
int1 = 13                                                                # STEP 6
result = avl0.find(int3)                                                 # STEP 7
avl0.insert(int2)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
int2 = 3                                                                # STEP 10
int3 = 14                                                               # STEP 11
result = avl0.inorder()                                                 # STEP 12
result = avl0.find(int3)                                                # STEP 13
int3 = 18                                                               # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.insert(int2)                                                       # STEP 16
avl1 = avl.AVLTree()                                                    # STEP 17
int2 = 8                                                                # STEP 18
result = avl0.find(int1)                                                # STEP 19
int1 = 18                                                               # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
int2 = 5                                                                # STEP 23
int3 = 2                                                                # STEP 24
result = avl0.find(int0)                                                # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
avl0.delete(int2)                                                       # STEP 28
int2 = 20                                                               # STEP 29
avl1.insert(int1)                                                       # STEP 30
int1 = 4                                                                # STEP 31
avl0.insert(int3)                                                       # STEP 32
int3 = 17                                                               # STEP 33
result = avl1.find(int1)                                                # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl1.insert(int1)                                                       # STEP 36
int0 = 10                                                               # STEP 37
avl0.delete(int2)                                                       # STEP 38
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10394c560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
213 BRANCHES COVERED
161 STATEMENTS COVERED

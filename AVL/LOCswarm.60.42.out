Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40646.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([2, 3, 4, 11, 15, 18])
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([2, 3, 4, 11, 15, 18])
  4 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([2, 3, 4, 11, 15, 18])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 18 [1:0]
------ < 16 [0:0] L
------ > 20 [0:0] L
set([2, 3, 4, 10, 11, 15, 16, 18, 20])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 18 [1:0]
------ < 16 [0:0] L
------ > 20 [0:0] L
set([2, 3, 4, 10, 11, 15, 16, 18, 20])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [2:0]
---- < 11 [1:1]
------ < 10 [0:0] L
---- > 18 [1:0]
------ < 16 [0:0] L
------ > 20 [0:0] L
set([2, 3, 4, 10, 11, 15, 16, 18, 20])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([2, 3, 7, 10, 12, 14, 15])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [2:0]
---- < 11 [1:0]
------ < 10 [0:0] L
------ > 13 [0:0] L
---- > 18 [1:0]
------ < 16 [0:0] L
------ > 20 [0:0] L
set([2, 3, 4, 10, 11, 13, 15, 16, 18, 20])
  4 [3:-1]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 15 [2:0]
---- < 11 [1:0]
------ < 10 [0:0] L
------ > 13 [0:0] L
---- > 18 [1:0]
------ < 16 [0:0] L
------ > 20 [0:0] L
set([2, 3, 4, 10, 11, 13, 15, 16, 18, 20])
  10 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 15 [1:-1]
------ > 20 [0:0] L
set([2, 3, 7, 10, 12, 14, 15, 20])
  10 [3:-1]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 14 [2:-1]
---- < 12 [0:0] L
---- > 16 [1:0]
------ < 15 [0:0] L
------ > 20 [0:0] L
set([2, 3, 7, 10, 12, 14, 15, 16, 20])
TEST #4 STEP #28 (0:00:30.020033) Mon May  1 02:31:14 2017 [ 125 stmts 167 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10147e488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 37 steps

SAVING TEST AS failure.40646.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 16                                                                # STEP 0
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 2
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 5
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 10]) : <type 'set'>
==================================================
int3 = 8                                                                 # STEP 7
ACTION: int3 = 8 
int3 = 8 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 16, 10]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 13                                                               # STEP 10
ACTION: int0 = 13 
int0 = 10 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 4                                                                # STEP 16
ACTION: int0 = 4 
int0 = 13 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 17
ACTION: int1 = 15 
int1 = 16 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 14                                                               # STEP 19
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 20
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 16, 10, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 8, 10, 13, 15, 16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([4, 8, 10, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 10, 13, 15, 16]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 29
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 10, 13, 14, 15, 16]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 11, 13, 14, 15, 16]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([8, 10, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 8, 10, 11, 13, 14, 15, 16]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([4, 8, 10, 11, 13, 14, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 8, 10, 11, 13, 15, 16]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a8cea8> : <type 'instance'>
avl_REF1 = set([4, 8, 10, 11, 13, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 8, 10, 11, 13, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d57c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 64
STOPPING TESTING DUE TO TIMEOUT
7.95712893797 PERCENT COVERED
60.2401990891 TOTAL RUNTIME
7 EXECUTED
601 TOTAL TEST OPERATIONS
28.1995112896 TIME SPENT EXECUTING TEST OPERATIONS
0.0952994823456 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.322953701 TIME SPENT CHECKING PROPERTIES
56.5224649906 TOTAL TIME SPENT RUNNING SUT
0.00391697883606 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 16                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int2 = 11                                                                # STEP 2
int0 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int0)                                                        # STEP 5
avl1.insert(int3)                                                        # STEP 6
int3 = 8                                                                 # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
int0 = 13                                                               # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1.insert(int1)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
int0 = 4                                                                # STEP 16
int1 = 15                                                               # STEP 17
avl1.delete(int1)                                                       # STEP 18
int3 = 14                                                               # STEP 19
avl1.insert(int1)                                                       # STEP 20
avl1.delete(int0)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
avl1 == avl1                                                            # STEP 29
avl1.insert(int1)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl1.delete(int3)                                                       # STEP 35
avl1.delete(int1)                                                       # STEP 36
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d57c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
192 BRANCHES COVERED
145 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14505.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #85 (0:00:30.042888) Sun Apr 30 04:17:48 2017 [ 150 stmts 200 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103112290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.14505.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 2
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 3
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 5
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 6
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 18                                                                # STEP 7
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 == avl1                                                             # STEP 8
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 10
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 12
ACTION: int3 = 1 
int3 = 18 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 13
ACTION: int0 = 15 
int0 = 15 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 14
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 16
ACTION: result = avl2.find(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 17
ACTION: int0 = 4 
int0 = 15 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 15]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 19
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 20
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 21
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 23
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 24
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 25
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 9]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 27
ACTION: int3 = 18 
int3 = 1 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 18]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 30
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 31
ACTION: int0 = 1 
int0 = 9 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 33
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 3                                                                # STEP 37
ACTION: int3 = 3 
int3 = 18 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 38
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 39
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 19                                                               # STEP 40
ACTION: int2 = 19 
int2 = 14 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 41
ACTION: int0 = 16 
int0 = 1 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 42
ACTION: int3 = 20 
int3 = 3 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 43
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 == avl0                                                            # STEP 44
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF1 = set([18, 4, 15]) : <type 'set'>
avl_REF0 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 46
ACTION: int2 = 17 
int2 = 19 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 47
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 1                                                                # STEP 48
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 49
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 9, 18]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 50
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 51
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 52
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 4                                                                # STEP 53
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 54
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl0.inorder()                                                 # STEP 55
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10352a290> : <type 'instance'>
avl_REF0 = set([16, 9, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103529908> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 57
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 12                                                               # STEP 58
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103529c20> : <type 'instance'>
avl_REF1 = set([18, 19, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 19, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10352c050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 46
STOPPING TESTING DUE TO TIMEOUT
8.04369414101 PERCENT COVERED
60.2273521423 TOTAL RUNTIME
6 EXECUTED
506 TOTAL TEST OPERATIONS
26.712736845 TIME SPENT EXECUTING TEST OPERATIONS
0.0208477973938 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.8727200031 TIME SPENT CHECKING PROPERTIES
53.5854568481 TOTAL TIME SPENT RUNNING SUT
0.00475168228149 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 1                                                                 # STEP 0
int0 = 15                                                                # STEP 1
int2 = 14                                                                # STEP 2
int1 = 8                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl1 = avl.AVLTree()                                                     # STEP 5
result = avl2.find(int3)                                                 # STEP 6
int3 = 18                                                                # STEP 7
avl2 == avl1                                                             # STEP 8
avl2.delete(int0)                                                        # STEP 9
result = avl1.find(int3)                                                # STEP 10
avl1.insert(int0)                                                       # STEP 11
int3 = 1                                                                # STEP 12
int0 = 15                                                               # STEP 13
avl1 == avl2                                                            # STEP 14
avl1.delete(int3)                                                       # STEP 15
result = avl2.find(int0)                                                # STEP 16
int0 = 4                                                                # STEP 17
avl1.insert(int0)                                                       # STEP 18
int0 = 9                                                                # STEP 19
result = avl1.find(int1)                                                # STEP 20
result = avl1.find(int3)                                                # STEP 21
avl2.insert(int3)                                                       # STEP 22
int1 = 4                                                                # STEP 23
avl1 == avl1                                                            # STEP 24
avl0 = avl.AVLTree()                                                    # STEP 25
avl2.insert(int0)                                                       # STEP 26
int3 = 18                                                               # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
result = avl2.find(int0)                                                # STEP 30
int0 = 1                                                                # STEP 31
avl1 == avl1                                                            # STEP 32
avl1 == avl1                                                            # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl2.delete(int2)                                                       # STEP 36
int3 = 3                                                                # STEP 37
result = avl0.find(int0)                                                # STEP 38
result = avl1.find(int3)                                                # STEP 39
int2 = 19                                                               # STEP 40
int0 = 16                                                               # STEP 41
int3 = 20                                                               # STEP 42
result = avl2.inorder()                                                 # STEP 43
avl1 == avl0                                                            # STEP 44
avl1.insert(int2)                                                       # STEP 45
int2 = 17                                                               # STEP 46
result = avl1.find(int1)                                                # STEP 47
int1 = 1                                                                # STEP 48
avl0.insert(int0)                                                       # STEP 49
avl1 == avl2                                                            # STEP 50
result = avl2.find(int0)                                                # STEP 51
result = avl1.inorder()                                                 # STEP 52
int0 = 4                                                                # STEP 53
avl1 == avl2                                                            # STEP 54
result = avl0.inorder()                                                 # STEP 55
result = avl2.find(int1)                                                # STEP 56
avl1.delete(int2)                                                       # STEP 57
int2 = 12                                                               # STEP 58
avl1.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10352c050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

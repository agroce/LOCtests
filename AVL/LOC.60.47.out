Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.127.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ce9bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.127.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 1
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 14                                                                # STEP 3
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
int1 = 3                                                                 # STEP 7
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13, 14]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 11
ACTION: int3 = 16 
int3 = 7 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 13, 14]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 14
ACTION: result = avl2.find(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 16
ACTION: int2 = 2 
int2 = 8 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 19
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 2]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int2 = 17                                                               # STEP 23
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 24
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 17]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 25
ACTION: int1 = 2 
int1 = 3 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 26
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 5                                                                # STEP 27
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 28
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 17, 16]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 16                                                               # STEP 33
ACTION: int0 = 16 
int0 = 5 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 16 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 35
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 17, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 16]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 39
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 3                                                                # STEP 41
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 45
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 46
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 16]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 48
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 50
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 2, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 2, 16, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 51
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b6da28> : <type 'instance'>
avl_REF2 = set([8, 2, 16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b6d710> : <type 'instance'>
avl_REF1 = set([16, 3, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b79710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f3b290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 88 steps

SAVING TEST AS failure.127.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 7                                                                 # STEP 0
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 2
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 10
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 2                                                                # STEP 14
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 2]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 17
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 18
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 2]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 21
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 14                                                               # STEP 22
ACTION: int3 = 14 
int3 = 11 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 23
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int0 = 7                                                                # STEP 24
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 25
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 27
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 29
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 30
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 14                                                               # STEP 31
ACTION: int2 = 14 
int2 = 10 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 5                                                                # STEP 35
ACTION: int1 = 5 
int1 = 18 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 11, 2]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 38
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 11, 2]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 7                                                                # STEP 40
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 41
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 42
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 43
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 44
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 46
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 6                                                                # STEP 47
ACTION: int1 = 6 
int1 = 5 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 48
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 49
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 50
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 51
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 11, 2]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 54
ACTION: int0 = 17 
int0 = 7 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 16                                                               # STEP 57
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 58
ACTION: int1 = 18 
int1 = 6 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 59
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11, 2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 2, 11]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 61
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 10                                                               # STEP 62
ACTION: int1 = 10 
int1 = 18 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 63
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 2, 10, 11]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 13                                                               # STEP 65
ACTION: int2 = 13 
int2 = 16 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 66
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 67
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 9                                                                # STEP 68
ACTION: int1 = 9 
int1 = 10 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 69
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 2, 9, 10, 11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 70
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 2, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 2, 9, 10, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 71
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 17, 2, 4, 9, 10, 11]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 72
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 73
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17, 2, 4, 9, 10, 11, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 74
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 75
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 76
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 77
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 4, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([16, 17, 2, 9, 10, 11, 13]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 78
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 80
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 81
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 17, 2, 6, 9, 10, 11]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 82
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 20                                                               # STEP 83
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 84
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 85
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 86
ACTION: avl1.delete(int3) 
int3 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 87
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b796c8> : <type 'instance'>
avl_REF1 = set([16, 17, 2, 6, 9, 10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 17, 2, 6, 10, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f401b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #18 (0:00:30.008952) Fri Apr 28 05:34:42 2017 [ 149 stmts 198 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f36b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 37 steps

SAVING TEST AS failure.127.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 2
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 12                                                                # STEP 3
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 4
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                        # STEP 8
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 18                                                               # STEP 11
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 18]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 15
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 17
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 16                                                               # STEP 20
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 22
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 1                                                                # STEP 24
ACTION: int3 = 1 
int3 = 18 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 25
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f36248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 27
ACTION: int0 = 4 
int0 = 3 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 28
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 29
ACTION: int2 = 19 
int2 = 17 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 30
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 19, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([16, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([16, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 8, 19, 4]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 36
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x102bb3758> : <type 'instance'>
avl_REF0 = set([16, 8, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 8, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105948b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10596a6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 18 steps

SAVING TEST AS failure.127.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 3
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int2 = 2                                                                 # STEP 4
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 5
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 8                                                                 # STEP 7
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 8
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 10
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 13
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 14
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 13, 5]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 15
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([2, 13, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([2, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 13, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102f25d88> : <type 'instance'>
avl_REF2 = set([8, 2, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 13, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bb9680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b935a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.127.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 2
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int1)                                                        # STEP 4
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 8                                                                 # STEP 6
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 7
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int2 = 18                                                               # STEP 13
ACTION: int2 = 18 
int2 = 20 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 2                                                                # STEP 19
ACTION: int1 = 2 
int1 = 1 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 20
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 10                                                               # STEP 24
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 8                                                                # STEP 26
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 10 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 32
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 18, 20]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 34
ACTION: int1 = 15 
int1 = 2 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 1, 18, 20]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 36
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 37
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 1, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([8, 1, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 41
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2 == avl2                                                            # STEP 43
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 12                                                               # STEP 44
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 14 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 47
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 8, 18, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 50
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102ba4f38> : <type 'instance'>
avl_REF2 = set([1, 8, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 8, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b909e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105955440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.127.test.5
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 16                                                                # STEP 1
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 2
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 3
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 4
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 16                                                                # STEP 5
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 4                                                                 # STEP 7
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 10
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 11
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 14
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 17
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 18
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 19
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 6]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 21
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 22
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 23
ACTION: int2 = 4 
int2 = 3 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 24
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 16 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 8, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 8, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int0)                                                # STEP 31
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 8, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 8, 10, 6]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 33
ACTION: int0 = 2 
int0 = 6 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 34
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 8, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 10, 6]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 35
ACTION: int3 = 17 
int3 = 8 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 36
ACTION: int1 = 20 
int1 = 10 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 38
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 39
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 40
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 17, 10, 4, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 17, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 43
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 17, 10, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 17, 4, 6]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059572d8> : <type 'instance'>
avl_REF0 = set([16, 17, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105940908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 6 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
61.4518671036 TOTAL RUNTIME
9 EXECUTED
492 TOTAL TEST OPERATIONS
19.1262462139 TIME SPENT EXECUTING TEST OPERATIONS
0.0531165599823 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
19.2186536789 TIME SPENT CHECKING PROPERTIES
38.3448998928 TOTAL TIME SPENT RUNNING SUT
0.00482130050659 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
6 FAILED
0 REPEATS OF FAILURES
6 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 7                                                                 # STEP 0
int2 = 8                                                                 # STEP 1
int0 = 13                                                                # STEP 2
int1 = 14                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int1)                                                        # STEP 6
int1 = 3                                                                 # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
avl1.insert(int0)                                                       # STEP 10
int3 = 16                                                               # STEP 11
result = avl2.inorder()                                                 # STEP 12
avl1.insert(int1)                                                       # STEP 13
result = avl2.find(int2)                                                # STEP 14
avl2.insert(int2)                                                       # STEP 15
int2 = 2                                                                # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.delete(int2)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.delete(int2)                                                       # STEP 22
int2 = 17                                                               # STEP 23
avl2.insert(int2)                                                       # STEP 24
int1 = 2                                                                # STEP 25
avl2.delete(int0)                                                       # STEP 26
int0 = 5                                                                # STEP 27
int2 = 17                                                               # STEP 28
avl2.insert(int3)                                                       # STEP 29
result = avl2.inorder()                                                 # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl1.insert(int3)                                                       # STEP 32
int0 = 16                                                               # STEP 33
int3 = 13                                                               # STEP 34
result = avl2.find(int3)                                                # STEP 35
avl2.insert(int0)                                                       # STEP 36
result = avl2.find(int1)                                                # STEP 37
avl2.delete(int2)                                                       # STEP 38
int3 = 7                                                                # STEP 39
avl1.delete(int3)                                                       # STEP 40
int2 = 3                                                                # STEP 41
avl1.insert(int2)                                                       # STEP 42
avl1.delete(int0)                                                       # STEP 43
avl2.delete(int1)                                                       # STEP 44
avl1.insert(int0)                                                       # STEP 45
int0 = 4                                                                # STEP 46
avl2.insert(int1)                                                       # STEP 47
avl1.insert(int2)                                                       # STEP 48
result = avl1.inorder()                                                 # STEP 49
avl2.insert(int3)                                                       # STEP 50
avl2.insert(int1)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b79710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 7                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.insert(int3)                                                        # STEP 2
avl1.insert(int3)                                                        # STEP 3
avl1.insert(int3)                                                        # STEP 4
result = avl1.inorder()                                                  # STEP 5
int0 = 18                                                                # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
int1 = 18                                                               # STEP 10
avl1.delete(int0)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1 == avl1                                                            # STEP 13
int0 = 2                                                                # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.insert(int0)                                                       # STEP 16
int3 = 11                                                               # STEP 17
result = avl1.find(int3)                                                # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1.insert(int3)                                                       # STEP 20
result = avl1.inorder()                                                 # STEP 21
int3 = 14                                                               # STEP 22
result = avl1.find(int3)                                                # STEP 23
int0 = 7                                                                # STEP 24
int2 = 10                                                               # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.delete(int2)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.insert(int3)                                                       # STEP 29
avl1.delete(int2)                                                       # STEP 30
int2 = 14                                                               # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
int1 = 5                                                                # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.insert(int0)                                                       # STEP 37
avl1.delete(int0)                                                       # STEP 38
avl1.delete(int0)                                                       # STEP 39
int3 = 7                                                                # STEP 40
avl1.insert(int2)                                                       # STEP 41
result = avl1.find(int1)                                                # STEP 42
avl1.delete(int3)                                                       # STEP 43
avl1 == avl1                                                            # STEP 44
avl1.insert(int2)                                                       # STEP 45
avl1.delete(int1)                                                       # STEP 46
int1 = 6                                                                # STEP 47
int3 = 4                                                                # STEP 48
avl1.insert(int0)                                                       # STEP 49
avl1.delete(int3)                                                       # STEP 50
avl1.insert(int2)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
int0 = 17                                                               # STEP 54
avl1.delete(int1)                                                       # STEP 55
avl1.delete(int2)                                                       # STEP 56
int2 = 16                                                               # STEP 57
int1 = 18                                                               # STEP 58
avl1.delete(int1)                                                       # STEP 59
avl1.insert(int2)                                                       # STEP 60
result = avl1.inorder()                                                 # STEP 61
int1 = 10                                                               # STEP 62
avl1.insert(int1)                                                       # STEP 63
avl1.insert(int1)                                                       # STEP 64
int2 = 13                                                               # STEP 65
avl1.delete(int3)                                                       # STEP 66
avl1.delete(int3)                                                       # STEP 67
int1 = 9                                                                # STEP 68
avl1.insert(int1)                                                       # STEP 69
avl1.insert(int0)                                                       # STEP 70
avl1.insert(int3)                                                       # STEP 71
avl1.insert(int0)                                                       # STEP 72
avl1.insert(int2)                                                       # STEP 73
avl1.insert(int2)                                                       # STEP 74
avl1.insert(int3)                                                       # STEP 75
avl1.insert(int0)                                                       # STEP 76
avl1.delete(int3)                                                       # STEP 77
int0 = 6                                                                # STEP 78
avl1.insert(int0)                                                       # STEP 79
result = avl1.inorder()                                                 # STEP 80
avl1.delete(int2)                                                       # STEP 81
result = avl1.inorder()                                                 # STEP 82
int3 = 20                                                               # STEP 83
avl1.insert(int2)                                                       # STEP 84
avl1.insert(int2)                                                       # STEP 85
avl1.delete(int3)                                                       # STEP 86
avl1.delete(int1)                                                       # STEP 87
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102f401b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int2 = 17                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int2)                                                        # STEP 2
int3 = 12                                                                # STEP 3
avl2.delete(int3)                                                        # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.insert(int2)                                                        # STEP 7
avl2.delete(int3)                                                        # STEP 8
avl2 == avl2                                                             # STEP 9
result = avl2.inorder()                                                 # STEP 10
int3 = 18                                                               # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2.insert(int3)                                                       # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.insert(int3)                                                       # STEP 15
avl2.delete(int3)                                                       # STEP 16
int0 = 3                                                                # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.insert(int2)                                                       # STEP 19
int1 = 16                                                               # STEP 20
avl2.delete(int2)                                                       # STEP 21
result = avl2.inorder()                                                 # STEP 22
avl2.delete(int0)                                                       # STEP 23
int3 = 1                                                                # STEP 24
result = avl2.find(int0)                                                # STEP 25
avl2.insert(int3)                                                       # STEP 26
int0 = 4                                                                # STEP 27
int3 = 8                                                                # STEP 28
int2 = 19                                                               # STEP 29
avl0 = avl.AVLTree()                                                    # STEP 30
avl0.insert(int0)                                                       # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl0.delete(int3)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0.delete(int2)                                                       # STEP 36
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105948b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
int3 = 13                                                                # STEP 2
avl2.insert(int3)                                                        # STEP 3
int2 = 2                                                                 # STEP 4
int0 = 13                                                                # STEP 5
avl2.insert(int0)                                                        # STEP 6
int1 = 8                                                                 # STEP 7
result = avl2.find(int1)                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
int0 = 5                                                                # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int3)                                                       # STEP 12
avl2.delete(int0)                                                       # STEP 13
avl2.insert(int0)                                                       # STEP 14
result = avl2.find(int0)                                                # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bb9680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 4
avl2 = avl.AVLTree()                                                     # STEP 0
int1 = 1                                                                 # STEP 1
avl2.insert(int1)                                                        # STEP 2
avl2.insert(int1)                                                        # STEP 3
avl2.insert(int1)                                                        # STEP 4
avl2.delete(int1)                                                        # STEP 5
int0 = 8                                                                 # STEP 6
int2 = 20                                                                # STEP 7
result = avl2.inorder()                                                  # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2.insert(int0)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
int2 = 18                                                               # STEP 13
avl2.delete(int1)                                                       # STEP 14
result = avl2.inorder()                                                 # STEP 15
avl2.delete(int0)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.delete(int0)                                                       # STEP 18
int1 = 2                                                                # STEP 19
int3 = 2                                                                # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int0)                                                       # STEP 23
int2 = 10                                                               # STEP 24
avl2.delete(int2)                                                       # STEP 25
int0 = 8                                                                # STEP 26
avl2.delete(int2)                                                       # STEP 27
int2 = 10                                                               # STEP 28
avl2.delete(int2)                                                       # STEP 29
result = avl2.find(int3)                                                # STEP 30
avl2.insert(int3)                                                       # STEP 31
result = avl2.inorder()                                                 # STEP 32
avl2.delete(int1)                                                       # STEP 33
int1 = 15                                                               # STEP 34
avl2.insert(int0)                                                       # STEP 35
int3 = 14                                                               # STEP 36
int2 = 16                                                               # STEP 37
avl2.delete(int2)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.delete(int1)                                                       # STEP 40
avl2.delete(int1)                                                       # STEP 41
avl2.delete(int3)                                                       # STEP 42
avl2 == avl2                                                            # STEP 43
int1 = 12                                                               # STEP 44
int3 = 18                                                               # STEP 45
avl2.insert(int2)                                                       # STEP 46
result = avl2.find(int3)                                                # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.delete(int2)                                                       # STEP 49
avl2.delete(int3)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b909e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 5
avl0 = avl.AVLTree()                                                     # STEP 0
int0 = 16                                                                # STEP 1
avl0.insert(int0)                                                        # STEP 2
avl0.insert(int0)                                                        # STEP 3
avl0.insert(int0)                                                        # STEP 4
int3 = 16                                                                # STEP 5
avl0.insert(int0)                                                        # STEP 6
int0 = 4                                                                 # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
result = avl0.find(int3)                                                # STEP 10
avl0.delete(int0)                                                       # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
int0 = 6                                                                # STEP 14
avl0.insert(int0)                                                       # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.delete(int3)                                                       # STEP 17
int1 = 10                                                               # STEP 18
result = avl0.find(int3)                                                # STEP 19
avl0.insert(int3)                                                       # STEP 20
int2 = 3                                                                # STEP 21
result = avl0.find(int2)                                                # STEP 22
int2 = 4                                                                # STEP 23
result = avl0.find(int2)                                                # STEP 24
avl0.delete(int2)                                                       # STEP 25
int3 = 8                                                                # STEP 26
avl0.delete(int2)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.delete(int1)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
result = avl0.find(int0)                                                # STEP 31
avl0.insert(int1)                                                       # STEP 32
int0 = 2                                                                # STEP 33
avl0.delete(int3)                                                       # STEP 34
int3 = 17                                                               # STEP 35
int1 = 20                                                               # STEP 36
avl0.insert(int2)                                                       # STEP 37
int2 = 10                                                               # STEP 38
result = avl0.find(int3)                                                # STEP 39
int3 = 17                                                               # STEP 40
avl0.insert(int3)                                                       # STEP 41
avl0.insert(int2)                                                       # STEP 42
avl0.delete(int2)                                                       # STEP 43
avl0.delete(int3)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105940908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

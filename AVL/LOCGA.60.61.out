Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62351.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [2:0]
-- < 10 [1:0]
---- < 4 [0:0] L
---- > 13 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([16, 17, 19, 4, 20, 10, 13])
  16 [2:0]
-- < 10 [1:0]
---- < 4 [0:0] L
---- > 13 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([16, 17, 19, 4, 20, 10, 13])
  8 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([1, 2, 5, 8, 15, 20])
  8 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 15, 20])
  8 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 15, 20])
  8 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 15, 20])
  8 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 6 [0:0] L
-- > 20 [1:1]
---- < 15 [0:0] L
set([1, 2, 6, 8, 15, 20])
TEST #3 STEP #87 (0:00:30.029783) Mon May  1 18:18:31 2017 [ 160 stmts 212 branches ]
  8 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 7, 8, 15, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10487f9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 24 steps

SAVING TEST AS failure.62351.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 17                                                                # STEP 1
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 3
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int3 = 15                                                                # STEP 4
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 7
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 10
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 17                                                               # STEP 12
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 3]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 15
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 3, 14]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 17
ACTION: int3 = 4 
int3 = 14 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 19
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 18, 3, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x105b70f38> : <type 'instance'>
avl_REF2 = set([17, 18, 3, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 3, 4, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059d6320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  11 [2:0]
-- < 3 [1:-1]
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([3, 5, 11, 12, 17, 19])
  12 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([3, 10, 11, 12, 13, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b33998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 23 steps

SAVING TEST AS failure.62351.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 9                                                                 # STEP 0
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 1
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl1                                                             # STEP 5
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 4                                                                 # STEP 7
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 8
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 10
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 9, 1]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 13
ACTION: int0 = 12 
int0 = 1 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 14
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 1]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 15
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 16
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 17
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 1]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 9, 4, 1]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 7                                                                # STEP 21
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 22
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x104b33ef0> : <type 'instance'>
avl_REF1 = set([8, 9, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 4, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b0f488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 81
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2122819424 TOTAL RUNTIME
7 EXECUTED
528 TOTAL TEST OPERATIONS
27.4370627403 TIME SPENT EXECUTING TEST OPERATIONS
0.0580208301544 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.641515255 TIME SPENT CHECKING PROPERTIES
55.0785779953 TOTAL TIME SPENT RUNNING SUT
0.00447583198547 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 17                                                                # STEP 1
int0 = 16                                                                # STEP 2
avl2.insert(int2)                                                        # STEP 3
int3 = 15                                                                # STEP 4
avl2.delete(int3)                                                        # STEP 5
int1 = 18                                                                # STEP 6
int3 = 3                                                                 # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.insert(int1)                                                        # STEP 9
result = avl2.find(int1)                                                # STEP 10
avl2.insert(int1)                                                       # STEP 11
int1 = 17                                                               # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl2.insert(int3)                                                       # STEP 14
int3 = 14                                                               # STEP 15
avl2.insert(int3)                                                       # STEP 16
int3 = 4                                                                # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.insert(int2)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.delete(int0)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int2)                                                       # STEP 23
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059d6320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int2 = 9                                                                 # STEP 0
int0 = 1                                                                 # STEP 1
int3 = 8                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.delete(int2)                                                        # STEP 4
avl1 == avl1                                                             # STEP 5
avl1.delete(int3)                                                        # STEP 6
int1 = 4                                                                 # STEP 7
avl1.insert(int2)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
int2 = 8                                                                # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1.insert(int0)                                                       # STEP 12
int0 = 12                                                               # STEP 13
avl1.delete(int3)                                                       # STEP 14
result = avl1.find(int2)                                                # STEP 15
avl1 == avl1                                                            # STEP 16
avl1.insert(int3)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.insert(int2)                                                       # STEP 20
int2 = 7                                                                # STEP 21
avl1.delete(int3)                                                       # STEP 22
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b0f488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

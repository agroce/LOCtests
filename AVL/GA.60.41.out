Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14286.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [2:0]
-- < 11 [1:0]
---- < 7 [0:0] L
---- > 12 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([7, 11, 12, 16, 17, 20])
  15 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([2, 7, 8, 15, 18, 19])
TEST #3 STEP #87 (0:00:30.002313) Sun Apr 30 03:45:09 2017 [ 146 stmts 196 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102963ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 21 steps

SAVING TEST AS failure.14286.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 1
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 17                                                                # STEP 4
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 5
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 13                                                                # STEP 7
ACTION: int2 = 13 
int2 = 17 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 20                                                                # STEP 9
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 11
ACTION: int0 = 7 
int0 = 9 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 13, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 13
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([9, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102a71680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 15
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a71680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 16
ACTION: int0 = 4 
int0 = 7 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 17
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([9, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 20, 13, 7]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 18
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a71680> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1026a6710> : <type 'instance'>
avl_REF2 = set([9, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9, 20, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a798c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1051dd908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.14286.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 19                                                                # STEP 0
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 3
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 5
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl1.inorder()                                                  # STEP 7
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 8
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 9
ACTION: result = avl0.find(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 10
ACTION: int0 = 17 
int0 = 12 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 12
ACTION: avl1.delete(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 13
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 7                                                                # STEP 16
ACTION: int3 = 7 
int3 = 9 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 17
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 19
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 5                                                                # STEP 20
ACTION: int2 = 5 
int2 = 11 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 2                                                                # STEP 22
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 19]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 24
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 3                                                                # STEP 26
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 28
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 16                                                               # STEP 31
ACTION: int1 = 16 
int1 = 3 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 11]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 34
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 17                                                               # STEP 37
ACTION: int2 = 17 
int2 = 5 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 38
ACTION: int0 = 14 
int0 = 2 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 39
ACTION: result = avl2.find(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 5, 14]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 42
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 17                                                               # STEP 44
ACTION: int1 = 17 
int1 = 16 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 46
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 47
ACTION: result = avl0.find(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 48
ACTION: result = avl1.find(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 49
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 3                                                                # STEP 50
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 51
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 52
ACTION: int2 = 4 
int2 = 17 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 53
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 54
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 55
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x102623098> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 56
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 9, 19]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 58
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int3)                                                # STEP 59
ACTION: result = avl0.find(int3) 
int3 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 8                                                                # STEP 60
ACTION: int0 = 8 
int0 = 3 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 61
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 62
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 16                                                               # STEP 63
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2 == avl1                                                            # STEP 65
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl2.find(int1)                                                # STEP 66
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0 == avl2                                                            # STEP 67
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int1 = 1                                                                # STEP 68
ACTION: int1 = 1 
int1 = 7 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 69
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 71
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 6                                                                # STEP 72
ACTION: int2 = 6 
int2 = 4 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 73
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 1, 3, 5, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 74
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 1, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 75
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 76
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 12                                                               # STEP 77
ACTION: int1 = 12 
int1 = 1 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 78
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl2.insert(int3)                                                       # STEP 79
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 80
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 81
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 82
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 83
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([3, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 9, 19, 15]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 84
ACTION: int0 = 3 
int0 = 15 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 85
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 86
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1026f6c20> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1026fdcf8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 87
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 88
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 89
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 90
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1026233b0> : <type 'instance'>
avl_REF0 = set([3, 9, 19, 15]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x1026e66c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 91
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102623bd8> : <type 'instance'>
avl_REF2 = set([16, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([16, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026e65f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.81198278716 PERCENT COVERED
65.9039258957 TOTAL RUNTIME
7 EXECUTED
513 TOTAL TEST OPERATIONS
26.754431963 TIME SPENT EXECUTING TEST OPERATIONS
0.0196690559387 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.9666349888 TIME SPENT CHECKING PROPERTIES
53.7210669518 TOTAL TIME SPENT RUNNING SUT
0.00519299507141 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 9                                                                 # STEP 0
int1 = 7                                                                 # STEP 1
int3 = 13                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int2 = 17                                                                # STEP 4
avl2.insert(int3)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
int2 = 13                                                                # STEP 7
avl2.insert(int3)                                                        # STEP 8
int3 = 20                                                                # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 7                                                                # STEP 11
avl2.insert(int0)                                                       # STEP 12
result = avl2.inorder()                                                 # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl0.insert(int3)                                                       # STEP 15
int0 = 4                                                                # STEP 16
avl2.insert(int3)                                                       # STEP 17
int3 = 4                                                                # STEP 18
avl0.delete(int2)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a798c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 19                                                                # STEP 0
int2 = 7                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl0 = avl.AVLTree()                                                     # STEP 5
result = avl0.inorder()                                                  # STEP 6
result = avl1.inorder()                                                  # STEP 7
avl2 = avl.AVLTree()                                                     # STEP 8
result = avl0.find(int0)                                                 # STEP 9
int0 = 17                                                               # STEP 10
result = avl0.find(int3)                                                # STEP 11
avl1.delete(int0)                                                       # STEP 12
int0 = 5                                                                # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
int3 = 7                                                                # STEP 16
int2 = 11                                                               # STEP 17
avl1.insert(int2)                                                       # STEP 18
result = avl0.inorder()                                                 # STEP 19
int2 = 5                                                                # STEP 20
avl0.delete(int0)                                                       # STEP 21
int0 = 2                                                                # STEP 22
avl0.insert(int1)                                                       # STEP 23
int1 = 14                                                               # STEP 24
result = avl1.find(int1)                                                # STEP 25
int1 = 3                                                                # STEP 26
avl2.insert(int1)                                                       # STEP 27
avl2.insert(int2)                                                       # STEP 28
avl0.delete(int1)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
int1 = 16                                                               # STEP 31
result = avl1.inorder()                                                 # STEP 32
avl1.insert(int0)                                                       # STEP 33
result = avl2.find(int2)                                                # STEP 34
avl1.insert(int0)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
int2 = 17                                                               # STEP 37
int0 = 14                                                               # STEP 38
result = avl2.find(int1)                                                # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl2.insert(int0)                                                       # STEP 41
int0 = 16                                                               # STEP 42
result = avl1.inorder()                                                 # STEP 43
int1 = 17                                                               # STEP 44
avl2.insert(int0)                                                       # STEP 45
result = avl1.find(int3)                                                # STEP 46
result = avl0.find(int2)                                                # STEP 47
result = avl1.find(int1)                                                # STEP 48
result = avl0.find(int1)                                                # STEP 49
int3 = 3                                                                # STEP 50
int0 = 3                                                                # STEP 51
int2 = 4                                                                # STEP 52
result = avl1.find(int0)                                                # STEP 53
avl0 == avl0                                                            # STEP 54
avl1 = avl.AVLTree()                                                    # STEP 55
int1 = 7                                                                # STEP 56
avl0.insert(int0)                                                       # STEP 57
result = avl0.find(int3)                                                # STEP 58
result = avl0.find(int3)                                                # STEP 59
int0 = 8                                                                # STEP 60
avl1.insert(int3)                                                       # STEP 61
avl0 == avl0                                                            # STEP 62
int3 = 16                                                               # STEP 63
avl1 == avl1                                                            # STEP 64
avl2 == avl1                                                            # STEP 65
result = avl2.find(int1)                                                # STEP 66
avl0 == avl2                                                            # STEP 67
int1 = 1                                                                # STEP 68
avl0 == avl2                                                            # STEP 69
avl1.delete(int2)                                                       # STEP 70
result = avl2.find(int2)                                                # STEP 71
int2 = 6                                                                # STEP 72
avl2.insert(int1)                                                       # STEP 73
avl2.delete(int1)                                                       # STEP 74
result = avl2.find(int0)                                                # STEP 75
result = avl1.inorder()                                                 # STEP 76
int1 = 12                                                               # STEP 77
avl0 == avl1                                                            # STEP 78
avl2.insert(int3)                                                       # STEP 79
result = avl2.find(int0)                                                # STEP 80
int0 = 15                                                               # STEP 81
avl2.insert(int3)                                                       # STEP 82
avl0.insert(int0)                                                       # STEP 83
int0 = 3                                                                # STEP 84
result = avl1.find(int1)                                                # STEP 85
avl1 = avl.AVLTree()                                                    # STEP 86
int3 = 14                                                               # STEP 87
int1 = 7                                                                # STEP 88
avl2.delete(int1)                                                       # STEP 89
avl0 = avl.AVLTree()                                                    # STEP 90
avl2.delete(int0)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1026e65f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
196 BRANCHES COVERED
146 STATEMENTS COVERED

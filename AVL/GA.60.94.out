Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.15027.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031a65a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.15027.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 1
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 2
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 3
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 5
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1 == avl1                                                             # STEP 6
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 19                                                                # STEP 7
ACTION: int1 = 19 
int1 = 18 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 10
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 14                                                               # STEP 12
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x10397a830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 15
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 16
ACTION: avl1.insert(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([14, 6]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 17
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 18
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 19
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 21
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 22
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 23
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 26
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 27
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 14, 6]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 28
ACTION: result = avl1.find(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([10, 14, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 6                                                                # STEP 29
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 30
ACTION: int2 = 11 
int2 = 12 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 31
ACTION: result = avl0.find(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 32
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 13                                                               # STEP 33
ACTION: int1 = 13 
int1 = 8 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([10, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 14, 6]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 36
ACTION: int2 = 19 
int2 = 11 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 37
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([10, 11, 14, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 11, 14, 6, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 39
ACTION: avl0.delete(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 16                                                               # STEP 40
ACTION: int0 = 16 
int0 = 3 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 41
ACTION: int2 = 13 
int2 = 19 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 42
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 43
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 44
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 3                                                                # STEP 47
ACTION: int0 = 3 
int0 = 16 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 48
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13, 7]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 49
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10394a1b8> : <type 'instance'>
avl_REF0 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 6                                                                # STEP 50
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1039e2e60> : <type 'instance'>
avl_REF1 = set([10, 11, 14, 6, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 11, 14, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103240638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103189878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 84 steps

SAVING TEST AS failure.15027.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 17                                                                # STEP 0
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 15                                                                # STEP 6
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int0 = 19                                                                # STEP 8
ACTION: int0 = 19 
int0 = 16 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 15]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 10
ACTION: int2 = 15 
int2 = 15 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 13, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 13
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 13]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 14
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 19, 13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 19 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 18
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 6                                                                # STEP 19
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 20
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 11                                                               # STEP 21
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 22
ACTION: int0 = 9 
int0 = 2 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 23
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 10                                                               # STEP 25
ACTION: int3 = 10 
int3 = 17 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 29
ACTION: int1 = 13 
int1 = 6 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 10 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 11]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 37
ACTION: int2 = 20 
int2 = 11 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 39
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 40
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 41
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 42
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 2                                                                # STEP 43
ACTION: int1 = 2 
int1 = 13 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 44
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.delete(int0)                                                       # STEP 45
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 46
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 47
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 49
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 50
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 51
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 11, 13, 16, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 54
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 55
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 2]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 57
ACTION: int0 = 8 
int0 = 1 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 58
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 59
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 19                                                               # STEP 60
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 61
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 2, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int0)                                                # STEP 63
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 64
ACTION: result = avl0.find(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 65
ACTION: int2 = 7 
int2 = 19 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 66
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 1, 2]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 67
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 68
ACTION: int0 = 13 
int0 = 8 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 69
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 10                                                               # STEP 70
ACTION: int1 = 10 
int1 = 2 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 71
ACTION: int3 = 6 
int3 = 19 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 72
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl1.find(int2)                                                # STEP 73
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 74
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 75
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 2, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 76
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 11, 13]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 77
ACTION: int0 = 15 
int0 = 13 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 78
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([10, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([11, 13]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 79
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 80
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1033ab5a8> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 13, 15]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 81
ACTION: result = avl0.find(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103391368> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 12                                                               # STEP 82
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 83
ACTION: avl1.delete(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103930638> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 16, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([2, 11, 13, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1033a28c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #2 (0:00:30.113118) Sun Apr 30 05:33:15 2017 [ 146 stmts 192 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 76
STOPPING TESTING DUE TO TIMEOUT
7.9112876531 PERCENT COVERED
60.241560936 TOTAL RUNTIME
5 EXECUTED
412 TOTAL TEST OPERATIONS
22.4725928307 TIME SPENT EXECUTING TEST OPERATIONS
0.0163724422455 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.5855307579 TIME SPENT CHECKING PROPERTIES
45.0581235886 TOTAL TIME SPENT RUNNING SUT
0.0040123462677 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 6                                                                 # STEP 0
int1 = 18                                                                # STEP 1
int3 = 10                                                                # STEP 2
int2 = 12                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int1)                                                 # STEP 5
avl1 == avl1                                                             # STEP 6
int1 = 19                                                                # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1 == avl1                                                             # STEP 9
result = avl1.find(int1)                                                # STEP 10
avl1.delete(int1)                                                       # STEP 11
int1 = 14                                                               # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.insert(int0)                                                       # STEP 14
int0 = 20                                                               # STEP 15
avl1.insert(int1)                                                       # STEP 16
int1 = 4                                                                # STEP 17
avl0 = avl.AVLTree()                                                    # STEP 18
avl0.delete(int1)                                                       # STEP 19
avl0.delete(int1)                                                       # STEP 20
result = avl0.find(int0)                                                # STEP 21
int0 = 3                                                                # STEP 22
int1 = 8                                                                # STEP 23
result = avl1.find(int1)                                                # STEP 24
result = avl1.find(int1)                                                # STEP 25
result = avl1.find(int0)                                                # STEP 26
avl1.insert(int3)                                                       # STEP 27
result = avl1.find(int2)                                                # STEP 28
int3 = 6                                                                # STEP 29
int2 = 11                                                               # STEP 30
result = avl0.find(int2)                                                # STEP 31
result = avl0.find(int3)                                                # STEP 32
int1 = 13                                                               # STEP 33
avl0.delete(int2)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
int2 = 19                                                               # STEP 36
int3 = 7                                                                # STEP 37
avl1.insert(int1)                                                       # STEP 38
avl0.delete(int2)                                                       # STEP 39
int0 = 16                                                               # STEP 40
int2 = 13                                                               # STEP 41
avl0.insert(int2)                                                       # STEP 42
int1 = 5                                                                # STEP 43
int2 = 8                                                                # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.delete(int0)                                                       # STEP 46
int0 = 3                                                                # STEP 47
avl0.insert(int3)                                                       # STEP 48
result = avl0.find(int0)                                                # STEP 49
int3 = 6                                                                # STEP 50
avl1.delete(int3)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103240638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 17                                                                # STEP 0
int2 = 11                                                                # STEP 1
int0 = 16                                                                # STEP 2
int1 = 13                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
int2 = 15                                                                # STEP 6
avl1.insert(int0)                                                        # STEP 7
int0 = 19                                                                # STEP 8
avl1.insert(int2)                                                        # STEP 9
int2 = 15                                                               # STEP 10
avl1 == avl1                                                            # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.delete(int2)                                                       # STEP 13
int1 = 12                                                               # STEP 14
avl1.insert(int0)                                                       # STEP 15
int0 = 2                                                                # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
result = avl1.find(int1)                                                # STEP 18
int1 = 6                                                                # STEP 19
result = avl1.find(int0)                                                # STEP 20
int2 = 11                                                               # STEP 21
int0 = 9                                                                # STEP 22
result = avl1.find(int2)                                                # STEP 23
avl1.delete(int3)                                                       # STEP 24
int3 = 10                                                               # STEP 25
result = avl2.find(int1)                                                # STEP 26
avl1.insert(int2)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
int1 = 13                                                               # STEP 29
int3 = 8                                                                # STEP 30
avl2.delete(int0)                                                       # STEP 31
avl2.delete(int0)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl2.delete(int1)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
int2 = 20                                                               # STEP 37
result = avl2.find(int0)                                                # STEP 38
result = avl2.find(int0)                                                # STEP 39
int0 = 20                                                               # STEP 40
avl2 == avl1                                                            # STEP 41
result = avl1.inorder()                                                 # STEP 42
int1 = 2                                                                # STEP 43
avl1 == avl2                                                            # STEP 44
avl1.delete(int0)                                                       # STEP 45
result = avl2.find(int0)                                                # STEP 46
int0 = 1                                                                # STEP 47
avl1.delete(int2)                                                       # STEP 48
avl0 = avl.AVLTree()                                                    # STEP 49
avl0.insert(int1)                                                       # STEP 50
int2 = 4                                                                # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl0.insert(int0)                                                       # STEP 54
result = avl1.find(int1)                                                # STEP 55
avl0.insert(int3)                                                       # STEP 56
int0 = 8                                                                # STEP 57
int3 = 19                                                               # STEP 58
avl2.delete(int1)                                                       # STEP 59
int2 = 19                                                               # STEP 60
avl0.insert(int3)                                                       # STEP 61
avl2.delete(int3)                                                       # STEP 62
result = avl2.find(int0)                                                # STEP 63
result = avl0.find(int2)                                                # STEP 64
int2 = 7                                                                # STEP 65
avl0.delete(int3)                                                       # STEP 66
int1 = 2                                                                # STEP 67
int0 = 13                                                               # STEP 68
avl0.insert(int1)                                                       # STEP 69
int1 = 10                                                               # STEP 70
int3 = 6                                                                # STEP 71
avl0 == avl0                                                            # STEP 72
result = avl1.find(int2)                                                # STEP 73
int2 = 19                                                               # STEP 74
avl0.insert(int3)                                                       # STEP 75
avl2.insert(int0)                                                       # STEP 76
int0 = 15                                                               # STEP 77
avl2.delete(int1)                                                       # STEP 78
int3 = 7                                                                # STEP 79
avl2.insert(int0)                                                       # STEP 80
result = avl0.find(int2)                                                # STEP 81
int1 = 12                                                               # STEP 82
avl1.delete(int2)                                                       # STEP 83
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1033a28c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
196 BRANCHES COVERED
148 STATEMENTS COVERED

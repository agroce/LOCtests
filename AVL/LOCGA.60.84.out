Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62513.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([1, 4, 5, 11, 15, 16])
  11 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([1, 4, 5, 11, 15, 16])
  10 [3:-1]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [2:1]
---- < 11 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([2, 7, 8, 10, 11, 18, 19, 20])
  10 [3:-1]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [2:1]
---- < 11 [1:-1]
------ > 18 [0:0] L
---- > 20 [0:0] L
set([2, 7, 8, 10, 11, 18, 19, 20])
TEST #3 STEP #84 (0:00:30.069184) Mon May  1 18:42:22 2017 [ 159 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fa0b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.62513.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 1
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 3
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 1                                                                 # STEP 4
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 8                                                                 # STEP 7
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 9
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 15                                                               # STEP 10
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 11
ACTION: int2 = 1 
int2 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int1 = 7                                                                # STEP 13
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 14
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 17
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 15, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 20
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 15, 7]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 21
ACTION: int1 = 13 
int1 = 7 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 22
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 24
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 25
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 15, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 1, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102fe73b0> : <type 'instance'>
avl_REF2 = set([8, 1, 15, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 1, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102869830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10418db00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.62513.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 1
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                  # STEP 2
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 3                                                                 # STEP 3
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 7
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 12                                                                # STEP 8
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1041aaab8> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 16                                                               # STEP 16
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int1)                                                       # STEP 19
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 21
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 12]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 22
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 3, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 3, 12, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 12                                                               # STEP 28
ACTION: int3 = 12 
int3 = 16 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int0 = 1                                                                # STEP 30
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 32
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10418bd40> : <type 'instance'>
avl_REF1 = set([16, 3, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([16, 3, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041a61b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 44
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2311630249 TOTAL RUNTIME
7 EXECUTED
505 TOTAL TEST OPERATIONS
26.68059659 TIME SPENT EXECUTING TEST OPERATIONS
0.0564901828766 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.7821145058 TIME SPENT CHECKING PROPERTIES
53.4627110958 TOTAL TIME SPENT RUNNING SUT
0.00432872772217 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int0 = 6                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.delete(int2)                                                        # STEP 3
int2 = 1                                                                 # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
int1 = 8                                                                 # STEP 7
avl2.insert(int1)                                                        # STEP 8
avl2.delete(int2)                                                        # STEP 9
int0 = 15                                                               # STEP 10
int2 = 1                                                                # STEP 11
avl2.delete(int0)                                                       # STEP 12
int1 = 7                                                                # STEP 13
avl2.delete(int2)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.insert(int0)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.insert(int1)                                                       # STEP 20
int1 = 13                                                               # STEP 21
avl2 == avl2                                                            # STEP 22
result = avl2.inorder()                                                 # STEP 23
avl2.insert(int0)                                                       # STEP 24
avl2.insert(int2)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.delete(int0)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102869830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl1 = avl.AVLTree()                                                     # STEP 0
avl1 == avl1                                                             # STEP 1
result = avl1.inorder()                                                  # STEP 2
int3 = 3                                                                 # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.insert(int3)                                                        # STEP 7
int1 = 12                                                                # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.delete(int3)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.insert(int3)                                                       # STEP 14
result = avl1.inorder()                                                 # STEP 15
int3 = 16                                                               # STEP 16
avl1 == avl1                                                            # STEP 17
avl1 == avl1                                                            # STEP 18
avl1.delete(int1)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
avl1.insert(int1)                                                       # STEP 21
int2 = 5                                                                # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
avl1.insert(int2)                                                       # STEP 26
result = avl1.inorder()                                                 # STEP 27
int3 = 12                                                               # STEP 28
avl1.insert(int2)                                                       # STEP 29
int0 = 1                                                                # STEP 30
avl1.insert(int2)                                                       # STEP 31
avl1.delete(int1)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041a61b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

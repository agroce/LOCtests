Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61986.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103952758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.61986.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 1
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 2
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                 # STEP 5
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.insert(int0)                                                        # STEP 7
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 9]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 8
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 11
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 2                                                                # STEP 12
ACTION: int3 = 2 
int3 = 1 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 9 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 18
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 20
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 21
ACTION: result = avl1.find(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 25
ACTION: result = avl1.find(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 27
ACTION: int2 = 12 
int2 = 14 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 28
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 30
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 32
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 6, 14]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 36
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 37
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 38
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 12, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 39
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 2, 12, 13]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 40
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 41
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
avl_REF2 = set([16, 2, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 2, 13]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 43
ACTION: int1 = 11 
int1 = 13 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 45
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 46
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 47
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 48
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 49
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 6, 14, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 50
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 51
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 54
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 56
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 57
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 1                                                                # STEP 58
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 59
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 60
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 61
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 63
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 2, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 6, 14, 13]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 64
ACTION: int2 = 7 
int2 = 12 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 65
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 6, 7, 13, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 67
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 68
ACTION: avl1.insert(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 69
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 7, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 6, 13, 14]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 71
ACTION: int0 = 3 
int0 = 2 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 72
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x105107638> : <type 'instance'>
avl_REF1 = set([1, 6, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 3, 6, 13, 14]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 73
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103b470e0> : <type 'instance'>
avl_REF2 = set([16, 2, 11, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 2, 11, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a86518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([5, 6, 8, 13, 15, 20])
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([5, 6, 8, 13, 15, 20])
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
set([5, 6, 8, 13, 15, 20])
  8 [3:-1]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 20 [0:0] L
set([5, 6, 8, 12, 13, 15, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1052cad40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.61986.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 1
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 5
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 5                                                                # STEP 10
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 11
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 6]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 13
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 15                                                               # STEP 14
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 15
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 5, 6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 21
ACTION: result = avl0.find(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl0                                                            # STEP 22
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 5, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 5, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 5, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 6, 15]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 29
ACTION: int2 = 13 
int2 = 15 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 30
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 10                                                               # STEP 31
ACTION: int0 = 10 
int0 = 6 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 32
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 34
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int3 = 15                                                               # STEP 35
ACTION: int3 = 15 
int3 = 5 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 39
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 40
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 41
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 7, 13, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 13, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 46
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 47
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 == avl0                                                            # STEP 48
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 49
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 9                                                                # STEP 51
ACTION: int3 = 9 
int3 = 15 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 52
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 53
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int2 = 20                                                               # STEP 54
ACTION: int2 = 20 
int2 = 13 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 55
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([8, 7, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6, 7, 8, 13, 15, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 56
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 5                                                                # STEP 57
ACTION: int0 = 5 
int0 = 10 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 60
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([6, 7, 8, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([6, 7, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 6, 7, 8, 13, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 62
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 63
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 66
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 12                                                               # STEP 67
ACTION: int3 = 12 
int3 = 9 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 68
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 11                                                               # STEP 69
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 70
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 71
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.display()                                                          # STEP 72
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 6, 8, 13, 15, 20])
==================================================
int2 = 2                                                                # STEP 73
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 74
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 6, 8, 13, 15, 20])
==================================================
avl0.display()                                                          # STEP 75
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
  8 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 6, 8, 13, 15, 20])
==================================================
result = avl0.find(int0)                                                # STEP 76
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 77
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 6, 8, 12, 13, 15, 20]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 78
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 12, 13, 15, 20]) : <type 'set'>
  8 [3:-1]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 15 [2:1]
---- < 13 [1:1]
------ < 12 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 6, 8, 12, 13, 15, 20])
==================================================
avl0.delete(int0)                                                       # STEP 79
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1052ca4d0> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 12, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([6, 8, 12, 13, 15, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e6b560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:31.432478) Mon May  1 17:28:04 2017 [ 157 stmts 208 branches ]
  7 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 11 [1:0]
---- < 8 [0:0] L
---- > 18 [0:0] L
set([3, 5, 7, 8, 11, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f7ea28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.61986.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 15                                                                # STEP 0
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 3
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 18                                                                # STEP 4
ACTION: int3 = 18 
int3 = 15 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 10
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 4]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 12
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 14                                                               # STEP 14
ACTION: int0 = 14 
int0 = 4 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 15
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 4, 2]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 17
ACTION: int1 = 9 
int1 = 2 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 3, 4, 2]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 20
ACTION: int2 = 2 
int2 = 3 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 22
ACTION: int1 = 8 
int1 = 9 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 24
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 12                                                               # STEP 27
ACTION: int0 = 12 
int0 = 14 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 28
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 29
ACTION: int2 = 6 
int2 = 2 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([9, 18, 3, 4, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl0                                                            # STEP 32
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 34
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0 == avl0                                                            # STEP 36
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 9                                                                # STEP 37
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 3, 4, 9, 11, 17, 18]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 39
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103f7e248> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 9, 11, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 4, 9, 11, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039a04d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
  13 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([9, 10, 11, 13, 15, 20])
  13 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([9, 10, 11, 13, 15, 20])
  13 [3:1]
-- < 9 [2:-1]
---- < 7 [0:0] L
---- > 10 [1:-1]
------ > 11 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([7, 9, 10, 11, 13, 15, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027f0b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.61986.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 3
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 4
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 4, 15]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([20, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([20, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int2 = 18                                                               # STEP 11
ACTION: int2 = 18 
int2 = 15 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([20, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 13
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 4, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 15
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([18, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([4, 15]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 21
ACTION: int3 = 20 
int3 = 13 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 25
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 4, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 32
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([5, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 34
ACTION: int0 = 7 
int0 = 5 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 13, 15]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 36
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 9                                                                # STEP 40
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 10, 20, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 44
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 20, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 45
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
  13 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([9, 10, 11, 13, 15, 20])
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 47
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.display()                                                          # STEP 49
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
  13 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 11 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([9, 10, 11, 13, 15, 20])
==================================================
avl2.delete(int1)                                                       # STEP 50
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 11, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9, 10, 13, 15, 20]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 51
ACTION: int3 = 16 
int3 = 20 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 52
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([7, 9, 10, 13, 15, 20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 53
ACTION: result = avl2.find(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 54
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 55
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7, 9, 10, 11, 13, 15, 20]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 56
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 57
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 11, 13, 15, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7, 9, 10, 11, 13, 15, 19, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 58
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 11, 13, 15, 19, 20]) : <type 'set'>
  13 [3:1]
-- < 9 [2:-1]
---- < 7 [0:0] L
---- > 10 [1:-1]
------ > 11 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 10, 11, 13, 15, 19, 20])
==================================================
avl2.delete(int0)                                                       # STEP 59
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103f7e830> : <type 'instance'>
avl_REF2 = set([7, 9, 10, 11, 13, 15, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9, 10, 11, 13, 15, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f742d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
62.7401988506 TOTAL RUNTIME
6 EXECUTED
355 TOTAL TEST OPERATIONS
18.145950079 TIME SPENT EXECUTING TEST OPERATIONS
0.0398309230804 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
18.2866234779 TIME SPENT CHECKING PROPERTIES
36.4325735569 TOTAL TIME SPENT RUNNING SUT
0.00414276123047 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 1                                                                 # STEP 0
int2 = 14                                                                # STEP 1
int1 = 13                                                                # STEP 2
int0 = 9                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int0)                                                 # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.insert(int0)                                                        # STEP 7
avl1.delete(int0)                                                        # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.delete(int0)                                                       # STEP 11
int3 = 2                                                                # STEP 12
int0 = 6                                                                # STEP 13
avl1.insert(int3)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.delete(int3)                                                       # STEP 16
avl1.delete(int2)                                                       # STEP 17
avl1.delete(int2)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl1.delete(int3)                                                       # STEP 20
result = avl1.find(int0)                                                # STEP 21
avl1.delete(int0)                                                       # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
result = avl1.find(int1)                                                # STEP 25
avl1.insert(int2)                                                       # STEP 26
int2 = 12                                                               # STEP 27
avl2 = avl.AVLTree()                                                    # STEP 28
avl1.delete(int0)                                                       # STEP 29
avl2.insert(int2)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl2.delete(int1)                                                       # STEP 32
avl1.delete(int1)                                                       # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.insert(int1)                                                       # STEP 35
int0 = 16                                                               # STEP 36
avl2.insert(int1)                                                       # STEP 37
avl2.insert(int0)                                                       # STEP 38
avl2.insert(int3)                                                       # STEP 39
int0 = 2                                                                # STEP 40
avl1 == avl2                                                            # STEP 41
avl2.delete(int2)                                                       # STEP 42
int1 = 11                                                               # STEP 43
avl2.insert(int0)                                                       # STEP 44
avl2.insert(int1)                                                       # STEP 45
int1 = 4                                                                # STEP 46
result = avl1.find(int0)                                                # STEP 47
avl1.delete(int2)                                                       # STEP 48
avl1.delete(int3)                                                       # STEP 49
avl2.delete(int2)                                                       # STEP 50
result = avl2.find(int3)                                                # STEP 51
avl2.delete(int1)                                                       # STEP 52
avl1.insert(int0)                                                       # STEP 53
avl2.insert(int2)                                                       # STEP 54
avl1.delete(int1)                                                       # STEP 55
result = avl1.find(int3)                                                # STEP 56
avl2.insert(int2)                                                       # STEP 57
int1 = 1                                                                # STEP 58
avl2.insert(int3)                                                       # STEP 59
avl2.delete(int2)                                                       # STEP 60
result = avl1.find(int0)                                                # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl1.delete(int3)                                                       # STEP 63
int2 = 7                                                                # STEP 64
int3 = 13                                                               # STEP 65
avl1.insert(int2)                                                       # STEP 66
avl2.insert(int3)                                                       # STEP 67
avl1.insert(int1)                                                       # STEP 68
avl2.insert(int0)                                                       # STEP 69
avl1.delete(int2)                                                       # STEP 70
int0 = 3                                                                # STEP 71
avl1.insert(int0)                                                       # STEP 72
avl2.delete(int3)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a86518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int0 = 6                                                                 # STEP 0
int2 = 9                                                                 # STEP 1
int3 = 13                                                                # STEP 2
int1 = 5                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.find(int0)                                                 # STEP 5
avl0.insert(int0)                                                        # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
int3 = 5                                                                # STEP 10
avl0.delete(int1)                                                       # STEP 11
avl0.insert(int3)                                                       # STEP 12
result = avl0.find(int1)                                                # STEP 13
int2 = 15                                                               # STEP 14
int1 = 8                                                                # STEP 15
avl0.insert(int1)                                                       # STEP 16
avl0.insert(int0)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl0.insert(int3)                                                       # STEP 19
result = avl0.inorder()                                                 # STEP 20
result = avl0.find(int1)                                                # STEP 21
avl0 == avl0                                                            # STEP 22
avl0.insert(int3)                                                       # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
avl0.insert(int0)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
int2 = 13                                                               # STEP 29
avl0.insert(int1)                                                       # STEP 30
int0 = 10                                                               # STEP 31
int1 = 7                                                                # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl0.insert(int2)                                                       # STEP 34
int3 = 15                                                               # STEP 35
avl0.delete(int0)                                                       # STEP 36
result = avl0.inorder()                                                 # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0.delete(int1)                                                       # STEP 39
avl0.insert(int3)                                                       # STEP 40
result = avl0.find(int2)                                                # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
avl0.insert(int3)                                                       # STEP 45
avl0.insert(int1)                                                       # STEP 46
avl0.insert(int2)                                                       # STEP 47
avl0 == avl0                                                            # STEP 48
avl0.insert(int2)                                                       # STEP 49
result = avl0.find(int0)                                                # STEP 50
int3 = 9                                                                # STEP 51
result = avl0.find(int1)                                                # STEP 52
result = avl0.find(int0)                                                # STEP 53
int2 = 20                                                               # STEP 54
avl0.insert(int2)                                                       # STEP 55
result = avl0.inorder()                                                 # STEP 56
int0 = 5                                                                # STEP 57
avl0.delete(int3)                                                       # STEP 58
result = avl0.inorder()                                                 # STEP 59
avl0.delete(int2)                                                       # STEP 60
avl0.insert(int0)                                                       # STEP 61
avl0.insert(int1)                                                       # STEP 62
avl0.delete(int1)                                                       # STEP 63
avl0.delete(int1)                                                       # STEP 64
avl0.delete(int3)                                                       # STEP 65
result = avl0.find(int1)                                                # STEP 66
int3 = 12                                                               # STEP 67
avl0.insert(int0)                                                       # STEP 68
int1 = 11                                                               # STEP 69
avl0.insert(int2)                                                       # STEP 70
avl0 == avl0                                                            # STEP 71
avl0.display()                                                          # STEP 72
int2 = 2                                                                # STEP 73
avl0.display()                                                          # STEP 74
avl0.display()                                                          # STEP 75
result = avl0.find(int0)                                                # STEP 76
avl0.insert(int3)                                                       # STEP 77
avl0.display()                                                          # STEP 78
avl0.delete(int0)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e6b560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int3 = 15                                                                # STEP 0
int0 = 4                                                                 # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int3)                                                        # STEP 3
int3 = 18                                                                # STEP 4
avl0.insert(int3)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
int3 = 17                                                               # STEP 10
avl0.insert(int0)                                                       # STEP 11
int2 = 3                                                                # STEP 12
result = avl0.inorder()                                                 # STEP 13
int0 = 14                                                               # STEP 14
int1 = 2                                                                # STEP 15
avl0.insert(int1)                                                       # STEP 16
int1 = 9                                                                # STEP 17
avl0.delete(int2)                                                       # STEP 18
avl0.insert(int2)                                                       # STEP 19
int2 = 2                                                                # STEP 20
avl0.insert(int1)                                                       # STEP 21
int1 = 8                                                                # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.delete(int0)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
int0 = 12                                                               # STEP 27
int1 = 11                                                               # STEP 28
int2 = 6                                                                # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.delete(int0)                                                       # STEP 31
avl0 == avl0                                                            # STEP 32
avl0.delete(int0)                                                       # STEP 33
avl0.delete(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl0 == avl0                                                            # STEP 36
int0 = 9                                                                # STEP 37
avl0.insert(int1)                                                       # STEP 38
int1 = 2                                                                # STEP 39
avl0.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039a04d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int2 = 15                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
int1 = 4                                                                 # STEP 2
int3 = 13                                                                # STEP 3
int0 = 20                                                                # STEP 4
avl2.insert(int2)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
avl2.insert(int0)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
avl2.insert(int0)                                                       # STEP 10
int2 = 18                                                               # STEP 11
avl2.delete(int0)                                                       # STEP 12
int0 = 5                                                                # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.delete(int2)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int1)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
int3 = 20                                                               # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.insert(int0)                                                       # STEP 25
result = avl2.inorder()                                                 # STEP 26
avl2 == avl2                                                            # STEP 27
int2 = 10                                                               # STEP 28
avl2.delete(int1)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.delete(int3)                                                       # STEP 31
avl2.insert(int0)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
int0 = 7                                                                # STEP 34
avl2.insert(int3)                                                       # STEP 35
int1 = 11                                                               # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl2.delete(int0)                                                       # STEP 39
int2 = 9                                                                # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.delete(int2)                                                       # STEP 42
avl2.insert(int2)                                                       # STEP 43
avl2.insert(int1)                                                       # STEP 44
avl2.display()                                                          # STEP 45
avl2.insert(int3)                                                       # STEP 46
avl2.delete(int0)                                                       # STEP 47
avl2.insert(int2)                                                       # STEP 48
avl2.display()                                                          # STEP 49
avl2.delete(int1)                                                       # STEP 50
int3 = 16                                                               # STEP 51
avl2.insert(int0)                                                       # STEP 52
result = avl2.find(int1)                                                # STEP 53
avl2.delete(int3)                                                       # STEP 54
avl2.insert(int1)                                                       # STEP 55
int1 = 19                                                               # STEP 56
avl2.insert(int1)                                                       # STEP 57
avl2.display()                                                          # STEP 58
avl2.delete(int0)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f742d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

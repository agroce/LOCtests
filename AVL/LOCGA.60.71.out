Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62419.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 17 [2:1]
---- < 8 [1:-1]
------ > 10 [0:0] L
---- > 19 [0:0] L
set([17, 2, 19, 6, 1, 8, 10])
  6 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 17 [2:1]
---- < 10 [1:0]
------ < 7 [0:0] L
------ > 14 [0:0] L
---- > 19 [0:0] L
set([17, 2, 19, 6, 1, 10, 7, 14])
  8 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 15 [2:-1]
---- < 10 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 3, 8, 10, 15, 16, 20])
  8 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 15 [2:-1]
---- < 10 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 3, 8, 10, 15, 16, 20])
  8 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 15 [2:-1]
---- < 10 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 3, 8, 10, 15, 16, 20])
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([5, 11, 13, 14, 19, 20])
  11 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 20 [1:1]
------ < 17 [0:0] L
set([5, 9, 11, 13, 14, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038a4320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.62419.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 3
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                 # STEP 6
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = 14 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.inorder()                                                  # STEP 9
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 19                                                               # STEP 10
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 5, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 12
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 13
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 11, 5, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([19, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 20                                                               # STEP 15
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 19                                                               # STEP 16
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([19, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([11, 5, 14]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 18
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 19
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 20, 5, 14]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 21
ACTION: int3 = 12 
int3 = 20 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 23
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([11, 20, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 25
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int3)                                                # STEP 26
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 17                                                               # STEP 28
ACTION: int2 = 17 
int2 = 13 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 29
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 11, 13, 14, 19, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 31
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 32
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 19, 20]) : <type 'set'>
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 13 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 11, 13, 14, 19, 20])
==================================================
int3 = 11                                                               # STEP 33
ACTION: int3 = 11 
int3 = 12 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 9                                                                # STEP 36
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 37
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 38
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 9, 11, 13, 14, 20]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 40
ACTION: int2 = 2 
int2 = 17 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 41
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 42
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5, 9, 11, 13, 14, 17, 19, 20]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.display()                                                          # STEP 47
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
  11 [3:-1]
-- < 5 [1:-1]
---- > 9 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 20 [1:1]
------ < 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 9, 11, 13, 14, 17, 20])
==================================================
avl0.delete(int2)                                                       # STEP 48
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 49
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 9, 11, 13, 14, 17, 19, 20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 51
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102498ef0> : <type 'instance'>
avl_REF0 = set([5, 9, 11, 13, 14, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 11, 13, 14, 17, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038d24d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:32.230812) Mon May  1 18:28:45 2017 [ 149 stmts 199 branches ]
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 7 [1:0]
---- < 6 [0:0] L
---- > 16 [0:0] L
set([1, 2, 3, 6, 7, 16])
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 7 [1:0]
---- < 6 [0:0] L
---- > 16 [0:0] L
set([1, 2, 3, 6, 7, 16])
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 7 [1:0]
---- < 6 [0:0] L
---- > 16 [0:0] L
set([1, 2, 3, 6, 7, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a0cd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 52 steps

SAVING TEST AS failure.62419.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 3
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                 # STEP 6
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 11]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 1                                                                # STEP 10
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 11
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 12
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 13
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 16
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x103a19128> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 18
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 19
ACTION: int1 = 11 
int1 = 14 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 6                                                                # STEP 22
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 23
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 25
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 6, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 28
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 29
ACTION: int3 = 5 
int3 = 6 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 30
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 11, 6, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([1, 11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 6, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 33
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([11, 6, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 38
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 39
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 15                                                               # STEP 40
ACTION: int2 = 15 
int2 = 1 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int0)                                                # STEP 42
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 13                                                               # STEP 43
ACTION: int3 = 13 
int3 = 5 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 44
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([11, 6, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 6, 11, 13, 14]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 47
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 6, 13, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 48
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 49
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 51
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103a1f7a0> : <type 'instance'>
avl_REF0 = set([5, 6, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([5, 6, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fefb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
8.21242019733 PERCENT COVERED
60.2192320824 TOTAL RUNTIME
6 EXECUTED
466 TOTAL TEST OPERATIONS
24.4138352871 TIME SPENT EXECUTING TEST OPERATIONS
0.0498571395874 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.5793349743 TIME SPENT CHECKING PROPERTIES
48.9931702614 TOTAL TIME SPENT RUNNING SUT
0.00377535820007 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int3 = 11                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int3)                                                        # STEP 3
int2 = 5                                                                 # STEP 4
avl0.insert(int1)                                                        # STEP 5
result = avl0.find(int2)                                                 # STEP 6
int1 = 12                                                                # STEP 7
avl0.insert(int3)                                                        # STEP 8
result = avl0.inorder()                                                  # STEP 9
int0 = 19                                                               # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.delete(int1)                                                       # STEP 12
avl0.insert(int0)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
int3 = 20                                                               # STEP 15
int1 = 19                                                               # STEP 16
avl0.delete(int0)                                                       # STEP 17
int2 = 13                                                               # STEP 18
int0 = 19                                                               # STEP 19
avl0.insert(int3)                                                       # STEP 20
int3 = 12                                                               # STEP 21
avl0.delete(int2)                                                       # STEP 22
avl0.insert(int2)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.delete(int1)                                                       # STEP 25
result = avl0.find(int3)                                                # STEP 26
avl0.insert(int2)                                                       # STEP 27
int2 = 17                                                               # STEP 28
avl0.delete(int2)                                                       # STEP 29
avl0.insert(int0)                                                       # STEP 30
result = avl0.inorder()                                                 # STEP 31
avl0.display()                                                          # STEP 32
int3 = 11                                                               # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
int3 = 9                                                                # STEP 36
result = avl0.inorder()                                                 # STEP 37
avl0.insert(int3)                                                       # STEP 38
avl0.insert(int2)                                                       # STEP 39
int2 = 2                                                                # STEP 40
result = avl0.find(int2)                                                # STEP 41
avl0.delete(int1)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.delete(int0)                                                       # STEP 46
avl0.display()                                                          # STEP 47
avl0.delete(int2)                                                       # STEP 48
result = avl0.inorder()                                                 # STEP 49
avl0.insert(int0)                                                       # STEP 50
result = avl0.find(int1)                                                # STEP 51
avl0.delete(int3)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038d24d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 3                                                                 # STEP 0
int2 = 11                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.delete(int2)                                                        # STEP 3
avl0.insert(int2)                                                        # STEP 4
avl0.delete(int0)                                                        # STEP 5
result = avl0.find(int0)                                                 # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.insert(int0)                                                        # STEP 9
int2 = 1                                                                # STEP 10
int0 = 13                                                               # STEP 11
int1 = 14                                                               # STEP 12
avl0.insert(int1)                                                       # STEP 13
avl0.delete(int1)                                                       # STEP 14
avl0.delete(int1)                                                       # STEP 15
result = avl0.inorder()                                                 # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
avl0.insert(int1)                                                       # STEP 18
int1 = 11                                                               # STEP 19
avl0 == avl0                                                            # STEP 20
avl0.delete(int2)                                                       # STEP 21
int3 = 6                                                                # STEP 22
avl0.insert(int1)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.insert(int3)                                                       # STEP 25
avl0.insert(int3)                                                       # STEP 26
avl0.delete(int2)                                                       # STEP 27
result = avl0.find(int3)                                                # STEP 28
int3 = 5                                                                # STEP 29
avl0.insert(int2)                                                       # STEP 30
avl0.delete(int2)                                                       # STEP 31
avl0.insert(int3)                                                       # STEP 32
avl0.delete(int2)                                                       # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl0.insert(int1)                                                       # STEP 35
avl0.delete(int3)                                                       # STEP 36
avl0.insert(int3)                                                       # STEP 37
result = avl0.inorder()                                                 # STEP 38
avl0.delete(int2)                                                       # STEP 39
int2 = 15                                                               # STEP 40
avl0.insert(int3)                                                       # STEP 41
result = avl0.find(int0)                                                # STEP 42
int3 = 13                                                               # STEP 43
result = avl0.find(int1)                                                # STEP 44
avl0.insert(int3)                                                       # STEP 45
avl0.delete(int2)                                                       # STEP 46
avl0.delete(int1)                                                       # STEP 47
result = avl0.find(int1)                                                # STEP 48
avl0.delete(int2)                                                       # STEP 49
avl0.insert(int0)                                                       # STEP 50
avl0.delete(int3)                                                       # STEP 51
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103fefb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

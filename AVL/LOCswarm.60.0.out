Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.39773.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 13 [2:0]
---- < 12 [1:1]
------ < 9 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([1, 3, 4, 9, 12, 13, 18, 19])
  8 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 7, 8, 13, 15, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 13 [2:0]
---- < 9 [1:0]
------ < 7 [0:0] L
------ > 12 [0:0] L
---- > 18 [1:0]
------ < 14 [0:0] L
------ > 19 [0:0] L
set([1, 3, 4, 7, 9, 12, 13, 14, 18, 19])
  8 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 7, 8, 13, 15, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 13 [2:0]
---- < 9 [1:0]
------ < 7 [0:0] L
------ > 12 [0:0] L
---- > 18 [1:0]
------ < 14 [0:0] L
------ > 19 [0:0] L
set([1, 3, 4, 7, 9, 12, 13, 14, 18, 19])
  4 [3:-1]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 13 [2:0]
---- < 9 [1:0]
------ < 7 [0:0] L
------ > 12 [0:0] L
---- > 18 [1:0]
------ < 14 [0:0] L
------ > 19 [0:0] L
set([1, 3, 4, 7, 9, 12, 13, 14, 18, 19])
  8 [3:1]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 7 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([1, 4, 5, 7, 8, 13, 15, 19])
  8 [3:0]
-- < 4 [2:-1]
---- < 1 [0:0] L
---- > 5 [1:-1]
------ > 7 [0:0] L
-- > 15 [2:-1]
---- < 13 [0:0] L
---- > 19 [1:1]
------ < 17 [0:0] L
set([1, 4, 5, 7, 8, 13, 15, 17, 19])
  9 [3:0]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 7 [1:1]
------ < 5 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 18 [1:0]
------ < 14 [0:0] L
------ > 19 [0:0] L
set([1, 3, 4, 5, 7, 9, 12, 13, 14, 18, 19])
TEST #4 STEP #38 (0:00:30.032594) Mon May  1 01:48:24 2017 [ 134 stmts 179 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103194368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.39773.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 12                                                                # STEP 0
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 3
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                        # STEP 6
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 20                                                                # STEP 8
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 12]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 11
ACTION: int1 = 11 
int1 = 8 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 12
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 12]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 16
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([19, 13]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 19
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 20
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                            # STEP 22
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 20, 13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([11, 19, 20]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 28
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 29
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 31
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 4, 19, 20, 13]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 4, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 34
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 4, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 35
ACTION: int2 = 20 
int2 = 4 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 36
ACTION: int3 = 6 
int3 = 12 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 37
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 39
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 40
ACTION: avl0.delete(int1) 
int1 = 20 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10351ffc8> : <type 'instance'>
avl_REF0 = set([11, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([11, 19, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10329ae60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 77
STOPPING TESTING DUE TO TIMEOUT
8.13272608979 PERCENT COVERED
60.2793781757 TOTAL RUNTIME
7 EXECUTED
618 TOTAL TEST OPERATIONS
27.862486124 TIME SPENT EXECUTING TEST OPERATIONS
0.0852336883545 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.0311024189 TIME SPENT CHECKING PROPERTIES
55.8935885429 TOTAL TIME SPENT RUNNING SUT
0.00439071655273 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 12                                                                # STEP 0
int2 = 19                                                                # STEP 1
int0 = 13                                                                # STEP 2
int1 = 8                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int0)                                                        # STEP 5
avl0.insert(int2)                                                        # STEP 6
avl0.insert(int2)                                                        # STEP 7
int2 = 20                                                                # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
int1 = 11                                                               # STEP 11
avl0.insert(int3)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
avl0.delete(int3)                                                       # STEP 16
avl0.delete(int0)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
avl0 == avl0                                                            # STEP 19
avl0.delete(int1)                                                       # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0 == avl0                                                            # STEP 22
avl0.delete(int3)                                                       # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0.insert(int1)                                                       # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl0.delete(int0)                                                       # STEP 27
int1 = 20                                                               # STEP 28
avl0.insert(int2)                                                       # STEP 29
avl0.insert(int0)                                                       # STEP 30
int2 = 4                                                                # STEP 31
avl0.insert(int2)                                                       # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0.delete(int2)                                                       # STEP 34
int2 = 20                                                               # STEP 35
int3 = 6                                                                # STEP 36
avl0.insert(int1)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0.delete(int3)                                                       # STEP 39
avl0.delete(int1)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10329ae60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
196 BRANCHES COVERED
147 STATEMENTS COVERED

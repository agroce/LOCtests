Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.776.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d8248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 58 steps

SAVING TEST AS failure.776.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 12                                                                # STEP 0
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 2
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 3
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 5
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 8
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 9
ACTION: int1 = 12 
int1 = 20 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 11
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 18                                                               # STEP 12
ACTION: int3 = 18 
int3 = 11 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 12]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 15
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 20, 12]) : <type 'set'>
==================================================
int1 = 7                                                                # STEP 18
ACTION: int1 = 7 
int1 = 12 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([10, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 6                                                                # STEP 21
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 18, 20, 12]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 18, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 27
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 20]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 29
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 30
ACTION: result = avl2.find(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 31
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 32
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 33
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 34
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 20, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 39
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 40
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 42
ACTION: int3 = 18 
int3 = 13 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 43
ACTION: result = avl2.find(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 45
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 46
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 12                                                               # STEP 47
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 48
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int1 = 6                                                                # STEP 49
ACTION: int1 = 6 
int1 = 6 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 50
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 51
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 52
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 12                                                               # STEP 54
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 55
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 56
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10592edd0> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058d6dd0> : <type 'instance'>
avl_REF1 = set([1, 20, 6, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 20, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046828c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041a8518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.776.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 1
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 14]) : <type 'set'>
==================================================
int0 = 10                                                                # STEP 8
ACTION: int0 = 10 
int0 = 10 : <type 'int'>
==================================================
result = avl2.find(int3)                                                 # STEP 9
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 10
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 14                                                               # STEP 12
ACTION: int3 = 14 
int3 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int1 = 8                                                                # STEP 14
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 15
ACTION: int2 = 1 
int2 = 5 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 2                                                                # STEP 17
ACTION: int0 = 2 
int0 = 10 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 18
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 19
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 20
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 4, 14]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10419acf8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10419acf8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 2, 4, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1041a8fc8> : <type 'instance'>
avl_REF2 = set([8, 2, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 4, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10417a4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105912bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 25 steps

SAVING TEST AS failure.776.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 2
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int0 = 11                                                                # STEP 7
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 6]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 9
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 10
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int3 = 8                                                                # STEP 11
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 12
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 19                                                               # STEP 13
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 11, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([19, 11]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 17, 11]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 17, 11, 8]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 17, 11, 6, 8]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 23
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11, 6, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105918098> : <type 'instance'>
avl_REF2 = set([19, 17, 11, 6, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 11, 6, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105901bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #48 (0:00:30.052412) Fri Apr 28 07:15:30 2017 [ 151 stmts 202 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042513b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.776.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 2
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 13                                                                # STEP 3
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int3 = 13                                                                # STEP 6
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 7
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int2)                                                 # STEP 9
ACTION: result = avl2.find(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 11
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 14
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 16
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int0 = 13                                                               # STEP 18
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 19
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 21
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 22
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 25
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 18]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 29
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 15                                                               # STEP 31
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 32
ACTION: int0 = 14 
int0 = 13 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 13                                                               # STEP 35
ACTION: int0 = 13 
int0 = 14 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 38
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 18, 15]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 39
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 14                                                               # STEP 42
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 43
ACTION: int0 = 16 
int0 = 13 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 44
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 45
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 47
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 49
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 51
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 52
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 13, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 53
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 54
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 55
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 56
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 58
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 59
ACTION: int1 = 3 
int1 = 15 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 60
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 61
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 63
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 65
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([16, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([16, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 67
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 13, 15]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 69
ACTION: int1 = 6 
int1 = 3 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 70
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 71
ACTION: avl0.insert(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 72
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 13, 6, 15]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 73
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 74
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([3, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 3, 13, 6, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 76
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([16, 3, 13, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([16, 3, 13, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 77
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 3, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 18, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 78
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1059014d0> : <type 'instance'>
avl_REF0 = set([8, 18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 15, 16, 18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 79
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046f0830> : <type 'instance'>
avl_REF2 = set([16, 3, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 13, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042643b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  7 [2:0]
-- < 4 [1:-1]
---- > 5 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([4, 5, 7, 15, 17, 19])
  7 [2:0]
-- < 1 [1:-1]
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 5, 7, 11, 15, 18])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 15 [0:0] L
set([1, 2, 4, 9, 10, 15])
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 15 [0:0] L
set([1, 2, 4, 9, 10, 15])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058227a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 95 steps

SAVING TEST AS failure.776.test.4
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 4
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 10                                                                # STEP 5
ACTION: int2 = 10 
int2 = 7 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 4                                                                # STEP 10
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 11
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 4]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 17
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 2                                                                # STEP 19
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 20
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 22
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 24
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 25
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 12]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 29
ACTION: int0 = 12 
int0 = 2 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 30
ACTION: int3 = 1 
int3 = 19 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 2, 12]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 32
ACTION: int1 = 12 
int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 35
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 1                                                                # STEP 36
ACTION: int3 = 1 
int3 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 9                                                                # STEP 39
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 2, 12]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 41
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x10583d3b0> : <type 'instance'>
avl_REF1 = set([4, 2, 12]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 42
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 4                                                                # STEP 43
ACTION: int2 = 4 
int2 = 4 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 44
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 46
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 48
ACTION: int0 = 7 
int0 = 9 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 49
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 50
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 52
ACTION: int1 = 10 
int1 = 12 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 53
ACTION: int3 = 9 
int3 = 1 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 54
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 56
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 57
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 10]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 58
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 59
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 9]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 60
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 61
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 12                                                               # STEP 63
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 10, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 10, 4, 9]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 65
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 10, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 10, 4, 2, 9]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 67
ACTION: int3 = 3 
int3 = 2 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([9, 12]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 69
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 70
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 10, 4, 2, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 71
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 10, 4, 2, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 72
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 4                                                                # STEP 73
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 74
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 9, 12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 75
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 76
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 9, 3, 12]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 77
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 4, 9, 10, 15])
==================================================
avl2 = avl.AVLTree()                                                    # STEP 78
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 79
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 80
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 81
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.display()                                                          # STEP 82
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
  9 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 10 [1:-1]
---- > 15 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 2, 4, 9, 10, 15])
==================================================
avl0.insert(int2)                                                       # STEP 83
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 84
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 85
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 86
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 87
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 88
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 9, 3, 12, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 89
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 3, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 9, 12, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 90
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 91
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 92
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10427b050> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 93
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104258a70> : <type 'instance'>
avl_REF1 = set([1, 2, 4, 9, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 3, 4, 9, 10, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 94
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104249f38> : <type 'instance'>
avl_REF0 = set([8, 9, 12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 12, 4]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104270b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 5 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
63.7260401249 TOTAL RUNTIME
8 EXECUTED
484 TOTAL TEST OPERATIONS
19.7562325001 TIME SPENT EXECUTING TEST OPERATIONS
0.0534498691559 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
19.8824901581 TIME SPENT CHECKING PROPERTIES
39.6387226582 TOTAL TIME SPENT RUNNING SUT
0.00457692146301 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
5 FAILED
0 REPEATS OF FAILURES
5 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 12                                                                # STEP 0
int3 = 11                                                                # STEP 1
int1 = 20                                                                # STEP 2
int2 = 1                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.insert(int1)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
int2 = 10                                                                # STEP 8
int1 = 12                                                                # STEP 9
avl1.delete(int3)                                                       # STEP 10
avl1 == avl1                                                            # STEP 11
int3 = 18                                                               # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl2.insert(int2)                                                       # STEP 14
result = avl1.find(int2)                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
avl1.insert(int1)                                                       # STEP 17
int1 = 7                                                                # STEP 18
avl2.delete(int2)                                                       # STEP 19
avl2.delete(int1)                                                       # STEP 20
int1 = 6                                                                # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl1.delete(int0)                                                       # STEP 25
avl2.insert(int0)                                                       # STEP 26
result = avl2.find(int0)                                                # STEP 27
avl1.delete(int3)                                                       # STEP 28
int3 = 13                                                               # STEP 29
result = avl2.find(int3)                                                # STEP 30
avl1.delete(int0)                                                       # STEP 31
avl2.delete(int1)                                                       # STEP 32
avl2.delete(int1)                                                       # STEP 33
avl2.insert(int1)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
avl1.insert(int0)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl1 == avl2                                                            # STEP 39
avl2.delete(int2)                                                       # STEP 40
avl1.insert(int1)                                                       # STEP 41
int3 = 18                                                               # STEP 42
result = avl2.find(int0)                                                # STEP 43
avl2.delete(int3)                                                       # STEP 44
result = avl1.find(int3)                                                # STEP 45
avl1.insert(int1)                                                       # STEP 46
int2 = 12                                                               # STEP 47
result = avl1.find(int0)                                                # STEP 48
int1 = 6                                                                # STEP 49
avl1 == avl2                                                            # STEP 50
avl2.delete(int3)                                                       # STEP 51
result = avl2.find(int2)                                                # STEP 52
avl2.delete(int2)                                                       # STEP 53
int3 = 12                                                               # STEP 54
int2 = 9                                                                # STEP 55
avl2 == avl1                                                            # STEP 56
avl1.delete(int0)                                                       # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046828c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 5                                                                 # STEP 0
int3 = 14                                                                # STEP 1
int1 = 4                                                                 # STEP 2
int0 = 10                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
avl2.delete(int0)                                                        # STEP 6
avl2.insert(int3)                                                        # STEP 7
int0 = 10                                                                # STEP 8
result = avl2.find(int3)                                                 # STEP 9
result = avl2.find(int2)                                                # STEP 10
avl2.delete(int0)                                                       # STEP 11
int3 = 14                                                               # STEP 12
avl2.insert(int3)                                                       # STEP 13
int1 = 8                                                                # STEP 14
int2 = 1                                                                # STEP 15
avl2.insert(int3)                                                       # STEP 16
int0 = 2                                                                # STEP 17
int3 = 2                                                                # STEP 18
result = avl2.inorder()                                                 # STEP 19
avl2 == avl2                                                            # STEP 20
avl2.insert(int0)                                                       # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
avl0.insert(int3)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.delete(int0)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10417a4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int1 = 11                                                                # STEP 0
int2 = 6                                                                 # STEP 1
int3 = 4                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
int0 = 11                                                                # STEP 7
avl2.insert(int0)                                                        # STEP 8
int0 = 17                                                                # STEP 9
avl2.insert(int1)                                                       # STEP 10
int3 = 8                                                                # STEP 11
result = avl2.inorder()                                                 # STEP 12
int1 = 19                                                               # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int1)                                                       # STEP 22
result = avl2.inorder()                                                 # STEP 23
avl2.delete(int0)                                                       # STEP 24
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105901bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 3
avl2 = avl.AVLTree()                                                     # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
result = avl0.inorder()                                                  # STEP 2
int2 = 13                                                                # STEP 3
avl0.delete(int2)                                                        # STEP 4
avl2.insert(int2)                                                        # STEP 5
int3 = 13                                                                # STEP 6
avl0.delete(int2)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
result = avl2.find(int2)                                                 # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl2.insert(int3)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
int1 = 18                                                               # STEP 14
avl0.insert(int2)                                                       # STEP 15
avl0.insert(int2)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
int0 = 13                                                               # STEP 18
avl0.insert(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
int3 = 8                                                                # STEP 21
result = avl2.find(int1)                                                # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl0.delete(int2)                                                       # STEP 25
avl2.insert(int2)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
int2 = 3                                                                # STEP 29
avl0.delete(int0)                                                       # STEP 30
int1 = 15                                                               # STEP 31
int0 = 14                                                               # STEP 32
avl2.delete(int0)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
int0 = 13                                                               # STEP 35
avl0.delete(int3)                                                       # STEP 36
avl0.insert(int3)                                                       # STEP 37
avl0.insert(int1)                                                       # STEP 38
avl0 == avl2                                                            # STEP 39
avl0.delete(int0)                                                       # STEP 40
avl0.insert(int3)                                                       # STEP 41
int3 = 14                                                               # STEP 42
int0 = 16                                                               # STEP 43
result = avl2.find(int0)                                                # STEP 44
int0 = 16                                                               # STEP 45
avl0.delete(int0)                                                       # STEP 46
result = avl0.find(int2)                                                # STEP 47
avl2.delete(int2)                                                       # STEP 48
avl2.delete(int0)                                                       # STEP 49
avl0.delete(int2)                                                       # STEP 50
avl2.insert(int1)                                                       # STEP 51
avl2.insert(int2)                                                       # STEP 52
avl2.insert(int1)                                                       # STEP 53
avl0.delete(int2)                                                       # STEP 54
avl0 == avl0                                                            # STEP 55
avl0.insert(int1)                                                       # STEP 56
avl2.delete(int0)                                                       # STEP 57
avl0.insert(int2)                                                       # STEP 58
int1 = 3                                                                # STEP 59
result = avl2.inorder()                                                 # STEP 60
avl0.insert(int2)                                                       # STEP 61
avl2.delete(int1)                                                       # STEP 62
avl0.insert(int1)                                                       # STEP 63
avl2.insert(int0)                                                       # STEP 64
avl2.delete(int2)                                                       # STEP 65
avl2.delete(int0)                                                       # STEP 66
avl0.insert(int1)                                                       # STEP 67
avl2.insert(int2)                                                       # STEP 68
int1 = 6                                                                # STEP 69
avl0.delete(int1)                                                       # STEP 70
avl0.insert(int2)                                                       # STEP 71
avl2.insert(int1)                                                       # STEP 72
result = avl2.find(int2)                                                # STEP 73
avl2.delete(int3)                                                       # STEP 74
avl2.insert(int0)                                                       # STEP 75
avl2.delete(int1)                                                       # STEP 76
avl0.delete(int2)                                                       # STEP 77
avl0.insert(int0)                                                       # STEP 78
avl2.delete(int2)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042643b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 4
int3 = 19                                                                # STEP 0
int2 = 7                                                                 # STEP 1
int1 = 4                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.delete(int2)                                                        # STEP 4
int2 = 10                                                                # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.insert(int1)                                                        # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1 == avl1                                                             # STEP 9
int0 = 4                                                                # STEP 10
int1 = 4                                                                # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.delete(int0)                                                       # STEP 16
int1 = 12                                                               # STEP 17
avl1.delete(int1)                                                       # STEP 18
int0 = 2                                                                # STEP 19
avl1.insert(int0)                                                       # STEP 20
avl1.delete(int0)                                                       # STEP 21
avl1.delete(int0)                                                       # STEP 22
avl1.delete(int3)                                                       # STEP 23
result = avl1.find(int2)                                                # STEP 24
int2 = 4                                                                # STEP 25
avl1.insert(int0)                                                       # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl1.insert(int1)                                                       # STEP 28
int0 = 12                                                               # STEP 29
int3 = 1                                                                # STEP 30
avl1.insert(int2)                                                       # STEP 31
int1 = 12                                                               # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1.insert(int3)                                                       # STEP 34
result = avl1.inorder()                                                 # STEP 35
int3 = 1                                                                # STEP 36
result = avl1.find(int0)                                                # STEP 37
avl1.insert(int1)                                                       # STEP 38
int0 = 9                                                                # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl1 = avl.AVLTree()                                                    # STEP 41
result = avl1.find(int3)                                                # STEP 42
int2 = 4                                                                # STEP 43
avl1.insert(int0)                                                       # STEP 44
avl1.delete(int3)                                                       # STEP 45
result = avl1.inorder()                                                 # STEP 46
avl1.delete(int0)                                                       # STEP 47
int0 = 7                                                                # STEP 48
avl1.delete(int0)                                                       # STEP 49
result = avl1.find(int3)                                                # STEP 50
avl1.insert(int3)                                                       # STEP 51
int1 = 10                                                               # STEP 52
int3 = 9                                                                # STEP 53
int0 = 8                                                                # STEP 54
avl1.delete(int1)                                                       # STEP 55
avl0 = avl.AVLTree()                                                    # STEP 56
avl1.insert(int1)                                                       # STEP 57
avl0.delete(int3)                                                       # STEP 58
avl1.insert(int3)                                                       # STEP 59
avl0.insert(int3)                                                       # STEP 60
int3 = 2                                                                # STEP 61
result = avl0.inorder()                                                 # STEP 62
int1 = 12                                                               # STEP 63
avl1.insert(int2)                                                       # STEP 64
int2 = 9                                                                # STEP 65
avl1.insert(int3)                                                       # STEP 66
int3 = 3                                                                # STEP 67
avl0.insert(int1)                                                       # STEP 68
int1 = 15                                                               # STEP 69
result = avl1.inorder()                                                 # STEP 70
avl1.insert(int1)                                                       # STEP 71
result = avl0.inorder()                                                 # STEP 72
int1 = 4                                                                # STEP 73
avl0.insert(int0)                                                       # STEP 74
avl1.insert(int1)                                                       # STEP 75
avl0.insert(int3)                                                       # STEP 76
avl1.display()                                                          # STEP 77
avl2 = avl.AVLTree()                                                    # STEP 78
result = avl2.find(int1)                                                # STEP 79
result = avl1.find(int1)                                                # STEP 80
avl2.delete(int1)                                                       # STEP 81
avl1.display()                                                          # STEP 82
avl0.insert(int2)                                                       # STEP 83
avl0.insert(int3)                                                       # STEP 84
avl1.delete(int0)                                                       # STEP 85
avl1.insert(int1)                                                       # STEP 86
avl2.delete(int1)                                                       # STEP 87
avl0.insert(int1)                                                       # STEP 88
avl0.delete(int3)                                                       # STEP 89
avl2.delete(int2)                                                       # STEP 90
result = avl1.find(int1)                                                # STEP 91
avl2.delete(int3)                                                       # STEP 92
avl1.insert(int3)                                                       # STEP 93
avl0.delete(int2)                                                       # STEP 94
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104270b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13952.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101bc2170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.13952.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 9                                                                 # STEP 0
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 1
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 2
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int2 = 18                                                                # STEP 7
ACTION: int2 = 18 
int2 = 8 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 9]) : <type 'set'>
==================================================
int3 = 4                                                                 # STEP 9
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 9, 18]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 11
ACTION: int2 = 19 
int2 = 18 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 12
ACTION: int0 = 7 
int0 = 9 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 13
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 14
ACTION: int0 = 20 
int0 = 7 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 18, 4]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 16
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 18, 4, 5]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 19
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 20
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 1                                                                # STEP 22
ACTION: int3 = 1 
int3 = 18 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 23
ACTION: int0 = 3 
int0 = 20 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 24
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 25
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 5, 8, 9, 17, 18]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 27
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 2                                                                # STEP 28
ACTION: int0 = 2 
int0 = 3 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 29
ACTION: int1 = 2 
int1 = 17 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 30
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 8                                                                # STEP 33
ACTION: int1 = 8 
int1 = 2 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 34
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 36
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 16                                                               # STEP 37
ACTION: int0 = 16 
int0 = 2 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 38
ACTION: result = avl1.find(int2) 
int2 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 39
ACTION: int2 = 8 
int2 = 19 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 40
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 41
ACTION: result = avl1.find(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 42
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 43
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int0)                                                # STEP 44
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 45
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 46
ACTION: int2 = 5 
int2 = 8 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 47
ACTION: int0 = 11 
int0 = 16 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 18                                                               # STEP 49
ACTION: int0 = 18 
int0 = 11 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 50
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1029f2c20> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 9, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 4, 8, 9, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1028eeb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [3:1]
-- < 6 [2:1]
---- < 1 [1:-1]
------ > 5 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([1, 5, 6, 12, 13, 14, 16, 20])
TEST #3 STEP #90 (0:00:30.036221) Sun Apr 30 02:57:58 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f61908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 31 steps

SAVING TEST AS failure.13952.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 1                                                                 # STEP 0
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 3
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 4
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int3)                                                 # STEP 6
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 1                                                                 # STEP 8
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 9
ACTION: int1 = 8 
int1 = 12 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 10
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 11
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 12
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 13
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 6]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 15
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 5, 6]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 17
ACTION: int3 = 6 
int3 = 5 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([16, 1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 5, 6]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 20
ACTION: int0 = 16 
int0 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 10, 5, 6]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 22
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 23
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102a6a518> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 24
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102a6a518> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 26
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 27
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 28
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 1                                                                # STEP 29
ACTION: int0 = 1 
int0 = 2 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f61b48> : <type 'instance'>
avl_REF1 = set([1, 10, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([10, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a40908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.2043380737 TOTAL RUNTIME
7 EXECUTED
511 TOTAL TEST OPERATIONS
25.6478672028 TIME SPENT EXECUTING TEST OPERATIONS
0.0202991962433 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8459005356 TIME SPENT CHECKING PROPERTIES
51.4937677383 TOTAL TIME SPENT RUNNING SUT
0.00526595115662 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 9                                                                 # STEP 0
int1 = 15                                                                # STEP 1
int2 = 8                                                                 # STEP 2
int3 = 10                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
int2 = 18                                                                # STEP 7
avl1.insert(int0)                                                        # STEP 8
int3 = 4                                                                 # STEP 9
avl1.insert(int2)                                                       # STEP 10
int2 = 19                                                               # STEP 11
int0 = 7                                                                # STEP 12
result = avl1.find(int0)                                                # STEP 13
int0 = 20                                                               # STEP 14
avl1.insert(int3)                                                       # STEP 15
int3 = 5                                                                # STEP 16
result = avl1.find(int3)                                                # STEP 17
avl1.insert(int3)                                                       # STEP 18
int3 = 18                                                               # STEP 19
result = avl1.find(int3)                                                # STEP 20
avl1.delete(int0)                                                       # STEP 21
int3 = 1                                                                # STEP 22
int0 = 3                                                                # STEP 23
result = avl1.find(int1)                                                # STEP 24
int1 = 17                                                               # STEP 25
avl1.insert(int1)                                                       # STEP 26
result = avl1.find(int0)                                                # STEP 27
int0 = 2                                                                # STEP 28
int1 = 2                                                                # STEP 29
result = avl1.find(int1)                                                # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int3)                                                       # STEP 32
int1 = 8                                                                # STEP 33
int3 = 8                                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
avl1.insert(int3)                                                       # STEP 36
int0 = 16                                                               # STEP 37
result = avl1.find(int2)                                                # STEP 38
int2 = 8                                                                # STEP 39
int3 = 13                                                               # STEP 40
result = avl1.find(int1)                                                # STEP 41
int1 = 14                                                               # STEP 42
avl1 == avl1                                                            # STEP 43
result = avl1.find(int0)                                                # STEP 44
result = avl1.find(int2)                                                # STEP 45
int2 = 5                                                                # STEP 46
int0 = 11                                                               # STEP 47
avl1.delete(int0)                                                       # STEP 48
int0 = 18                                                               # STEP 49
avl1.delete(int2)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1028eeb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 1                                                                 # STEP 0
int1 = 12                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int2 = 10                                                                # STEP 3
int3 = 6                                                                 # STEP 4
avl1.delete(int1)                                                        # STEP 5
result = avl1.find(int3)                                                 # STEP 6
avl1.delete(int1)                                                        # STEP 7
int3 = 1                                                                 # STEP 8
int1 = 8                                                                 # STEP 9
avl1.insert(int0)                                                       # STEP 10
int0 = 6                                                                # STEP 11
result = avl1.find(int3)                                                # STEP 12
int3 = 5                                                                # STEP 13
avl1.insert(int0)                                                       # STEP 14
int0 = 16                                                               # STEP 15
avl1.insert(int3)                                                       # STEP 16
int3 = 6                                                                # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.delete(int0)                                                       # STEP 19
int0 = 16                                                               # STEP 20
avl1.insert(int2)                                                       # STEP 21
result = avl1.find(int3)                                                # STEP 22
avl0 = avl.AVLTree()                                                    # STEP 23
int2 = 6                                                                # STEP 24
avl0.insert(int0)                                                       # STEP 25
int3 = 8                                                                # STEP 26
int0 = 2                                                                # STEP 27
result = avl1.find(int0)                                                # STEP 28
int0 = 1                                                                # STEP 29
avl1.delete(int0)                                                       # STEP 30
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a40908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

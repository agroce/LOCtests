Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14409.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 11 [1:-1]
---- > 15 [0:0] L
set([2, 3, 7, 9, 11, 15])
TEST #3 STEP #85 (0:00:30.064000) Sun Apr 30 04:03:33 2017 [ 161 stmts 214 branches ]
  11 [3:1]
-- < 6 [2:-1]
---- < 5 [0:0] L
---- > 8 [1:1]
------ < 7 [0:0] L
-- > 15 [1:-1]
---- > 18 [0:0] L
set([5, 6, 7, 8, 11, 15, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102c877e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.14409.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 6                                                                 # STEP 0
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 1
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 3
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 6
ACTION: int2 = 6 
int2 = 5 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 6]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 8                                                                 # STEP 9
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 10
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 11
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 12
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 13
ACTION: int0 = 12 
int0 = 5 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 14
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0 == avl2                                                            # STEP 15
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 17
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 7                                                                # STEP 18
ACTION: int0 = 7 
int0 = 12 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 11                                                               # STEP 20
ACTION: int2 = 11 
int2 = 6 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 22
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 6                                                                # STEP 23
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 26
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 27
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 29
ACTION: result = avl2.find(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 6                                                                # STEP 30
ACTION: int3 = 6 
int3 = 8 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 31
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.find(int0)                                                # STEP 32
ACTION: result = avl2.find(int0) 
int0 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 33
ACTION: int0 = 15 
int0 = 20 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 34
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 15                                                               # STEP 35
ACTION: int2 = 15 
int2 = 11 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 36
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 18                                                               # STEP 37
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 38
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl0.find(int1)                                                # STEP 39
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl0                                                            # STEP 40
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 11                                                               # STEP 42
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 43
ACTION: int0 = 11 
int0 = 15 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 44
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 5, 6]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 46
ACTION: int2 = 13 
int2 = 11 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 47
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 49
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 9                                                                # STEP 50
ACTION: int3 = 9 
int3 = 18 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 51
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 8                                                                # STEP 52
ACTION: int1 = 8 
int1 = 14 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 11, 5, 6]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 55
ACTION: int0 = 15 
int0 = 11 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([8, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 11, 5, 6, 15]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 58
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 59
ACTION: int2 = 12 
int2 = 13 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 60
ACTION: int1 = 9 
int1 = 8 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 61
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 62
ACTION: int2 = 5 
int2 = 12 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 63
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 64
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 65
ACTION: int0 = 8 
int0 = 16 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 66
ACTION: result = avl0.find(int1) 
int1 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([8, 11, 5, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 7                                                                # STEP 67
ACTION: int3 = 7 
int3 = 9 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 68
ACTION: int1 = 18 
int1 = 9 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 5]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 70
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([8, 11, 5, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5, 6, 8, 11, 15, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 71
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6, 8, 11, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 72
ACTION: int1 = 15 
int1 = 18 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 73
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 74
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 11                                                               # STEP 75
ACTION: int3 = 11 
int3 = 7 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.display()                                                          # STEP 76
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
  11 [3:1]
-- < 6 [2:-1]
---- < 5 [0:0] L
---- > 8 [1:1]
------ < 7 [0:0] L
-- > 15 [1:-1]
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([5, 6, 7, 8, 11, 15, 18])
==================================================
int0 = 3                                                                # STEP 77
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 78
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([16, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 3, 5]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 79
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 80
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF2 = set([16, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 7                                                                # STEP 81
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 82
ACTION: int3 = 10 
int3 = 11 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 83
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102849fc8> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
avl_REF2 = set([16, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 11                                                               # STEP 84
ACTION: int2 = 11 
int2 = 5 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 85
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 86
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f3fd40> : <type 'instance'>
avl_REF0 = set([5, 6, 7, 8, 11, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([5, 6, 7, 8, 11, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f57758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 93
STOPPING TESTING DUE TO TIMEOUT
8.7057265806 PERCENT COVERED
60.2761008739 TOTAL RUNTIME
5 EXECUTED
480 TOTAL TEST OPERATIONS
25.2916331291 TIME SPENT EXECUTING TEST OPERATIONS
0.0194296836853 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4570803642 TIME SPENT CHECKING PROPERTIES
50.7487134933 TOTAL TIME SPENT RUNNING SUT
0.00411105155945 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 6                                                                 # STEP 0
int2 = 5                                                                 # STEP 1
int0 = 4                                                                 # STEP 2
int1 = 19                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int2)                                                        # STEP 5
int2 = 6                                                                 # STEP 6
avl0.insert(int3)                                                        # STEP 7
result = avl0.find(int0)                                                 # STEP 8
int3 = 8                                                                 # STEP 9
avl2 = avl.AVLTree()                                                    # STEP 10
int0 = 5                                                                # STEP 11
result = avl2.find(int0)                                                # STEP 12
int0 = 12                                                               # STEP 13
avl2 == avl0                                                            # STEP 14
avl0 == avl2                                                            # STEP 15
avl0.delete(int0)                                                       # STEP 16
result = avl2.find(int2)                                                # STEP 17
int0 = 7                                                                # STEP 18
avl2.delete(int0)                                                       # STEP 19
int2 = 11                                                               # STEP 20
avl2.delete(int0)                                                       # STEP 21
result = avl2.inorder()                                                 # STEP 22
int0 = 6                                                                # STEP 23
result = avl2.inorder()                                                 # STEP 24
avl2.delete(int0)                                                       # STEP 25
result = avl2.find(int0)                                                # STEP 26
int0 = 20                                                               # STEP 27
avl0.delete(int2)                                                       # STEP 28
result = avl2.find(int3)                                                # STEP 29
int3 = 6                                                                # STEP 30
avl0 == avl2                                                            # STEP 31
result = avl2.find(int0)                                                # STEP 32
int0 = 15                                                               # STEP 33
result = avl2.find(int3)                                                # STEP 34
int2 = 15                                                               # STEP 35
result = avl2.find(int2)                                                # STEP 36
int3 = 18                                                               # STEP 37
avl2.delete(int2)                                                       # STEP 38
result = avl0.find(int1)                                                # STEP 39
avl0 == avl0                                                            # STEP 40
avl2.delete(int0)                                                       # STEP 41
int2 = 11                                                               # STEP 42
int0 = 11                                                               # STEP 43
avl0 == avl0                                                            # STEP 44
avl0.insert(int2)                                                       # STEP 45
int2 = 13                                                               # STEP 46
int1 = 14                                                               # STEP 47
avl0.delete(int1)                                                       # STEP 48
result = avl2.find(int3)                                                # STEP 49
int3 = 9                                                                # STEP 50
result = avl0.find(int0)                                                # STEP 51
int1 = 8                                                                # STEP 52
avl2.delete(int2)                                                       # STEP 53
avl0.insert(int1)                                                       # STEP 54
int0 = 15                                                               # STEP 55
result = avl2.find(int1)                                                # STEP 56
avl0.insert(int0)                                                       # STEP 57
int0 = 16                                                               # STEP 58
int2 = 12                                                               # STEP 59
int1 = 9                                                                # STEP 60
result = avl2.find(int2)                                                # STEP 61
int2 = 5                                                                # STEP 62
avl2.delete(int3)                                                       # STEP 63
avl2.insert(int0)                                                       # STEP 64
int0 = 8                                                                # STEP 65
result = avl0.find(int1)                                                # STEP 66
int3 = 7                                                                # STEP 67
int1 = 18                                                               # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl0.insert(int1)                                                       # STEP 70
avl0.insert(int3)                                                       # STEP 71
int1 = 15                                                               # STEP 72
avl2.delete(int0)                                                       # STEP 73
result = avl2.inorder()                                                 # STEP 74
int3 = 11                                                               # STEP 75
avl0.display()                                                          # STEP 76
int0 = 3                                                                # STEP 77
avl2.insert(int0)                                                       # STEP 78
result = avl0.find(int2)                                                # STEP 79
result = avl2.find(int3)                                                # STEP 80
int0 = 7                                                                # STEP 81
int3 = 10                                                               # STEP 82
avl0 == avl2                                                            # STEP 83
int2 = 11                                                               # STEP 84
avl0.delete(int3)                                                       # STEP 85
avl0.delete(int1)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f57758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

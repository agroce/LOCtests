Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99322.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 12 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 9, 12, 19])
  15 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 5, 7, 15, 18, 19])
  15 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 5, 7, 15, 18, 19])
  15 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 5, 7, 15, 18, 19])
  15 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([1, 5, 7, 15, 18, 19])
  17 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([5, 11, 12, 17, 18, 19])
  15 [2:0]
-- < 12 [1:1]
---- < 8 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([8, 12, 15, 17, 18, 19])
  15 [2:0]
-- < 10 [1:0]
---- < 8 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 19 [0:0] L
set([8, 10, 12, 15, 17, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b15098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.99322.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 1
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 4
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 8
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 19]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 10
ACTION: int3 = 18 
int3 = 10 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 11
ACTION: int1 = 5 
int1 = 19 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 12
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 19, 13]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 13
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([9, 19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([9, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([19, 13]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 16
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 17
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 5                                                                # STEP 18
ACTION: int0 = 5 
int0 = 9 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 19
ACTION: int2 = 20 
int2 = 13 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 23
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 19, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 27
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 20, 5]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 28
ACTION: result = avl1.find(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 19, 5]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 30
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([18, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 19, 10]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 36
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 19, 20, 10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 10                                                               # STEP 40
ACTION: int1 = 10 
int1 = 5 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 41
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1 == avl1                                                            # STEP 42
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 15                                                               # STEP 43
ACTION: int2 = 15 
int2 = 20 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 44
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102a797e8> : <type 'instance'>
avl_REF1 = set([18, 19, 20, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b55878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #7 (0:00:30.029377) Fri Apr 28 03:38:28 2017 [ 162 stmts 216 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b4f638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.99322.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 12                                                                # STEP 0
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 1
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 2
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 3
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 5
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 20                                                                # STEP 6
ACTION: int2 = 20 
int2 = 1 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 8
ACTION: int1 = 7 
int1 = 2 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 9
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 10
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 2, 12]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 12, 6]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 13
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 12, 7]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 18
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 2, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 4                                                                # STEP 23
ACTION: int1 = 4 
int1 = 7 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 24
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 26
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 == avl0                                                            # STEP 27
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([20, 7]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 11, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 34
ACTION: int0 = 2 
int0 = 6 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([1, 12]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 36
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 37
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 38
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 3                                                                # STEP 40
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1.delete(int3)                                                       # STEP 45
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 11]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl1                                                            # STEP 48
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0.delete(int1)                                                       # STEP 49
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 50
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 10                                                               # STEP 51
ACTION: int3 = 10 
int3 = 12 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 52
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 54
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 10, 11, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049035a8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 11                                                               # STEP 56
ACTION: int0 = 11 
int0 = 2 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 6                                                                # STEP 58
ACTION: int2 = 6 
int2 = 3 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 59
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x102b4fa70> : <type 'instance'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 14                                                               # STEP 61
ACTION: int3 = 14 
int3 = 10 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 62
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x102b385a8> : <type 'instance'>
avl_REF2 = set([20, 10, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([20, 10, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fbb7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  12 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([2, 9, 12, 14, 15, 17])
  12 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([2, 9, 12, 14, 15, 17])
  14 [2:0]
-- < 9 [1:0]
---- < 2 [0:0] L
---- > 12 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 9, 12, 14, 15, 17])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 15 [2:-1]
---- < 12 [0:0] L
---- > 17 [1:-1]
------ > 19 [0:0] L
set([2, 5, 9, 12, 15, 17, 19])
  9 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 19 [1:1]
---- < 17 [0:0] L
set([3, 4, 6, 9, 17, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 97
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.218900919 TOTAL RUNTIME
8 EXECUTED
705 TOTAL TEST OPERATIONS
25.8889687061 TIME SPENT EXECUTING TEST OPERATIONS
0.0768277645111 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.0640285015 TIME SPENT CHECKING PROPERTIES
51.9529972076 TOTAL TIME SPENT RUNNING SUT
0.00471997261047 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 10                                                                # STEP 0
int2 = 13                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int0 = 9                                                                 # STEP 3
int1 = 19                                                                # STEP 4
avl1.delete(int3)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int3)                                                        # STEP 8
avl1.insert(int0)                                                        # STEP 9
int3 = 18                                                               # STEP 10
int1 = 5                                                                # STEP 11
avl1.insert(int2)                                                       # STEP 12
result = avl1.find(int2)                                                # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.delete(int3)                                                       # STEP 16
avl1.delete(int2)                                                       # STEP 17
int0 = 5                                                                # STEP 18
int2 = 20                                                               # STEP 19
avl1.delete(int0)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl1.delete(int2)                                                       # STEP 22
avl1.insert(int3)                                                       # STEP 23
avl1.delete(int0)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.insert(int2)                                                       # STEP 27
result = avl1.find(int3)                                                # STEP 28
avl1.delete(int2)                                                       # STEP 29
int3 = 10                                                               # STEP 30
avl1.delete(int3)                                                       # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl1.insert(int3)                                                       # STEP 34
result = avl1.find(int2)                                                # STEP 35
avl1.delete(int1)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1.insert(int2)                                                       # STEP 39
int1 = 10                                                               # STEP 40
avl1.delete(int0)                                                       # STEP 41
avl1 == avl1                                                            # STEP 42
int2 = 15                                                               # STEP 43
avl1.delete(int1)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b55878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 12                                                                # STEP 0
int1 = 2                                                                 # STEP 1
int0 = 1                                                                 # STEP 2
int2 = 1                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.find(int2)                                                 # STEP 5
int2 = 20                                                                # STEP 6
avl1.insert(int1)                                                        # STEP 7
int1 = 7                                                                 # STEP 8
avl1.insert(int0)                                                        # STEP 9
int0 = 6                                                                # STEP 10
avl1.insert(int3)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl2 = avl.AVLTree()                                                    # STEP 13
avl2.insert(int1)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
avl0 = avl.AVLTree()                                                    # STEP 18
avl1.delete(int0)                                                       # STEP 19
avl1.delete(int2)                                                       # STEP 20
avl0.insert(int0)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
int1 = 4                                                                # STEP 23
int2 = 11                                                               # STEP 24
avl2.delete(int1)                                                       # STEP 25
avl0.delete(int2)                                                       # STEP 26
avl1 == avl0                                                            # STEP 27
avl2.delete(int3)                                                       # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl0.delete(int0)                                                       # STEP 32
avl0.insert(int2)                                                       # STEP 33
int0 = 2                                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
int1 = 5                                                                # STEP 36
avl1.insert(int2)                                                       # STEP 37
avl1.delete(int1)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
int2 = 3                                                                # STEP 40
avl2.delete(int0)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
avl1.delete(int1)                                                       # STEP 43
result = avl2.inorder()                                                 # STEP 44
avl1.delete(int3)                                                       # STEP 45
avl0.delete(int0)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
avl2 == avl1                                                            # STEP 48
avl0.delete(int1)                                                       # STEP 49
result = avl2.find(int2)                                                # STEP 50
int3 = 10                                                               # STEP 51
avl2.delete(int0)                                                       # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl2.insert(int3)                                                       # STEP 54
avl0.delete(int1)                                                       # STEP 55
int0 = 11                                                               # STEP 56
avl2.delete(int2)                                                       # STEP 57
int2 = 6                                                                # STEP 58
int1 = 15                                                               # STEP 59
result = avl1.inorder()                                                 # STEP 60
int3 = 14                                                               # STEP 61
avl2.delete(int0)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102fbb7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

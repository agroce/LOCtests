Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62378.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 9, 16, 17])
  7 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 9, 16, 17])
  7 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 9, 16, 17])
  7 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 9, 16, 17])
  10 [2:0]
-- < 2 [1:-1]
---- > 7 [0:0] L
-- > 13 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
set([2, 7, 10, 11, 13, 15])
TEST #3 STEP #88 (0:00:30.075133) Mon May  1 18:22:36 2017 [ 160 stmts 212 branches ]
  10 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 9 [0:0] L
-- > 11 [1:-1]
---- > 13 [0:0] L
set([3, 6, 9, 10, 11, 13])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102de8248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 18 steps

SAVING TEST AS failure.62378.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 2
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                        # STEP 6
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 7
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
result = avl0.find(int0)                                                 # STEP 8
ACTION: result = avl0.find(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 10
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 20                                                               # STEP 11
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 4]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 4, 15]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 15
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 4, 10, 15]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102ca2ea8> : <type 'instance'>
avl_REF0 = set([18, 4, 10, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18, 4, 10]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ca94d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [2:0]
-- < 9 [1:0]
---- < 8 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
set([8, 9, 10, 13, 16, 20])
  13 [3:1]
-- < 9 [2:1]
---- < 8 [1:1]
------ < 6 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 13, 14, 16, 20])
  13 [3:1]
-- < 9 [2:0]
---- < 8 [1:1]
------ < 6 [0:0] L
---- > 10 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
set([6, 8, 9, 10, 12, 13, 14, 16, 20])
  9 [3:0]
-- < 6 [2:-1]
---- < 4 [0:0] L
---- > 8 [1:1]
------ < 7 [0:0] L
-- > 13 [2:0]
---- < 10 [1:-1]
------ > 12 [0:0] L
---- > 20 [1:1]
------ < 14 [0:0] L
set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dc0560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 76 steps

SAVING TEST AS failure.62378.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 1
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int2 = 4                                                                 # STEP 7
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 10                                                               # STEP 10
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x102ddddd0> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10, 13]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 16
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 17
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 18
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 19                                                               # STEP 20
ACTION: int0 = 19 
int0 = 13 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 21
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 22
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 23
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 25
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 29
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 20                                                               # STEP 30
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 31
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int1 = 8                                                                # STEP 32
ACTION: int1 = 8 
int1 = 9 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 34
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 9, 13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 9, 10, 13]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 9, 10, 13, 8]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 10, 13, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 10, 13, 8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 15                                                               # STEP 40
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 10, 13, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 9                                                                # STEP 42
ACTION: int1 = 9 
int1 = 15 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([16, 9, 10, 13, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 9, 10, 13, 16, 20]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 44
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([8, 9, 10, 13, 16, 20]) : <type 'set'>
  13 [2:0]
-- < 9 [1:0]
---- < 8 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([8, 9, 10, 13, 16, 20])
==================================================
int0 = 12                                                               # STEP 45
ACTION: int0 = 12 
int0 = 20 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 46
ACTION: int3 = 6 
int3 = 16 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 47
ACTION: int2 = 14 
int2 = 10 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([8, 9, 10, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([6, 8, 9, 10, 13, 16, 20]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 49
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 50
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 13, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([6, 8, 9, 10, 13, 14, 16, 20]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 51
ACTION: int2 = 8 
int2 = 14 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 52
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 13, 14, 16, 20]) : <type 'set'>
  13 [3:1]
-- < 9 [2:1]
---- < 8 [1:1]
------ < 6 [0:0] L
---- > 10 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([6, 8, 9, 10, 13, 14, 16, 20])
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 54
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 55
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 56
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int1 = 4                                                                # STEP 57
ACTION: int1 = 4 
int1 = 9 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 58
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int3 = 15                                                               # STEP 59
ACTION: int3 = 15 
int3 = 6 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 60
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.display()                                                          # STEP 61
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
  13 [3:1]
-- < 9 [2:0]
---- < 8 [1:1]
------ < 6 [0:0] L
---- > 10 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([6, 8, 9, 10, 12, 13, 14, 16, 20])
==================================================
int2 = 7                                                                # STEP 62
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 63
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4, 6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 16                                                               # STEP 66
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 67
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int2 = 4                                                                # STEP 69
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 70
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 71
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.display()                                                          # STEP 73
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
  9 [3:0]
-- < 6 [2:-1]
---- < 4 [0:0] L
---- > 8 [1:1]
------ < 7 [0:0] L
-- > 13 [2:0]
---- < 10 [1:-1]
------ > 12 [0:0] L
---- > 20 [1:1]
------ < 14 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20])
==================================================
int0 = 8                                                                # STEP 74
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 75
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102de9a70> : <type 'instance'>
avl_REF1 = set([4, 6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6, 7, 8, 9, 10, 12, 13, 14, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10290cc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
61.7697310448 TOTAL RUNTIME
7 EXECUTED
494 TOTAL TEST OPERATIONS
25.6953063011 TIME SPENT EXECUTING TEST OPERATIONS
0.0562374591827 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8910887241 TIME SPENT CHECKING PROPERTIES
51.5863950253 TOTAL TIME SPENT RUNNING SUT
0.00467920303345 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 10                                                                # STEP 0
int2 = 16                                                                # STEP 1
int1 = 4                                                                 # STEP 2
int0 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
avl0.insert(int0)                                                        # STEP 6
int2 = 15                                                                # STEP 7
result = avl0.find(int0)                                                 # STEP 8
avl0.insert(int0)                                                        # STEP 9
avl0.delete(int2)                                                       # STEP 10
int0 = 20                                                               # STEP 11
avl0.insert(int1)                                                       # STEP 12
avl0.delete(int3)                                                       # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0 == avl0                                                            # STEP 15
avl0.insert(int3)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ca94d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int1 = 12                                                                # STEP 0
int3 = 16                                                                # STEP 1
int0 = 13                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.delete(int0)                                                        # STEP 4
result = avl1.inorder()                                                  # STEP 5
avl1.insert(int0)                                                        # STEP 6
int2 = 4                                                                 # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.delete(int3)                                                        # STEP 9
int2 = 10                                                               # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
result = avl1.find(int1)                                                # STEP 16
avl1.insert(int0)                                                       # STEP 17
avl1.insert(int2)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
int0 = 19                                                               # STEP 20
avl1.delete(int2)                                                       # STEP 21
int1 = 9                                                                # STEP 22
result = avl1.inorder()                                                 # STEP 23
avl1.insert(int3)                                                       # STEP 24
avl1.delete(int3)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.delete(int0)                                                       # STEP 29
int0 = 20                                                               # STEP 30
avl1.delete(int2)                                                       # STEP 31
int1 = 8                                                                # STEP 32
avl1.delete(int1)                                                       # STEP 33
avl1.delete(int3)                                                       # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
avl1.insert(int1)                                                       # STEP 37
avl1.insert(int2)                                                       # STEP 38
result = avl1.inorder()                                                 # STEP 39
int1 = 15                                                               # STEP 40
avl1.delete(int1)                                                       # STEP 41
int1 = 9                                                                # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.display()                                                          # STEP 44
int0 = 12                                                               # STEP 45
int3 = 6                                                                # STEP 46
int2 = 14                                                               # STEP 47
avl1.insert(int3)                                                       # STEP 48
result = avl1.find(int2)                                                # STEP 49
avl1.insert(int2)                                                       # STEP 50
int2 = 8                                                                # STEP 51
avl1.display()                                                          # STEP 52
avl1.insert(int0)                                                       # STEP 53
int0 = 4                                                                # STEP 54
avl1.insert(int1)                                                       # STEP 55
avl1.insert(int1)                                                       # STEP 56
int1 = 4                                                                # STEP 57
avl1.insert(int2)                                                       # STEP 58
int3 = 15                                                               # STEP 59
avl1.delete(int0)                                                       # STEP 60
avl1.display()                                                          # STEP 61
int2 = 7                                                                # STEP 62
avl1.delete(int3)                                                       # STEP 63
avl1.insert(int1)                                                       # STEP 64
result = avl1.inorder()                                                 # STEP 65
int3 = 16                                                               # STEP 66
avl1.insert(int2)                                                       # STEP 67
avl1.insert(int0)                                                       # STEP 68
int2 = 4                                                                # STEP 69
avl1.delete(int3)                                                       # STEP 70
result = avl1.inorder()                                                 # STEP 71
avl1.delete(int3)                                                       # STEP 72
avl1.display()                                                          # STEP 73
int0 = 8                                                                # STEP 74
avl1.delete(int1)                                                       # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10290cc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

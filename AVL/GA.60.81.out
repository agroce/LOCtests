Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14829.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #79 (0:00:30.057229) Sun Apr 30 05:06:48 2017 [ 145 stmts 192 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1021dc7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.14829.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 3
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 4
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 10                                                                # STEP 7
ACTION: int3 = 10 
int3 = 19 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
avl1 == avl0                                                             # STEP 9
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int3 = 16                                                               # STEP 10
ACTION: int3 = 16 
int3 = 10 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1 == avl1                                                            # STEP 12
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 1                                                                # STEP 13
ACTION: int2 = 1 
int2 = 7 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 14
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 16
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 17
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl1                                                            # STEP 18
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 19
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 19, 14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 21
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl1.find(int1)                                                # STEP 22
ACTION: result = avl1.find(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 23
ACTION: int1 = 19 
int1 = 6 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 26
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 27
ACTION: int2 = 14 
int2 = 14 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 28
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 19, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 2                                                                # STEP 31
ACTION: int1 = 2 
int1 = 14 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 14 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 33
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 17                                                               # STEP 34
ACTION: int1 = 17 
int1 = 2 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 35
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 6                                                                # STEP 37
ACTION: int1 = 6 
int1 = 17 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 5                                                                # STEP 39
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 40
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 41
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 15                                                               # STEP 42
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 43
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 13                                                               # STEP 44
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 45
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 46
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 47
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 15                                                               # STEP 48
ACTION: int0 = 15 
int0 = 14 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 49
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 50
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 51
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF2 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 15]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 52
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl1.find(int2)                                                # STEP 53
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 54
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 6]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 55
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 56
ACTION: int3 = 8 
int3 = 15 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 15                                                               # STEP 58
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 6                                                                # STEP 59
ACTION: int2 = 6 
int2 = 9 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 60
ACTION: result = avl0.find(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 62
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF2 = set([13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 63
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 64
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 8                                                                # STEP 65
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 66
ACTION: avl0 = avl.AVLTree() 
avl0 = <avlbug2.AVLTree instance at 0x1016421b8> : <type 'instance'>
avl_REF0 = set([19, 6]) : <type 'set'>
=> avl0 = <avlbug2.AVLTree instance at 0x101700758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 67
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 68
ACTION: int1 = 4 
int1 = 15 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 69
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101700758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 70
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 71
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1016fb248> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 19                                                               # STEP 72
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 73
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101792c68> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101703a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 12
STOPPING TESTING DUE TO TIMEOUT
8.10989738497 PERCENT COVERED
60.2883379459 TOTAL RUNTIME
6 EXECUTED
486 TOTAL TEST OPERATIONS
25.998134613 TIME SPENT EXECUTING TEST OPERATIONS
0.0194647312164 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.0710842609 TIME SPENT CHECKING PROPERTIES
52.069218874 TOTAL TIME SPENT RUNNING SUT
0.00463676452637 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
int3 = 19                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int1 = 6                                                                 # STEP 3
int2 = 7                                                                 # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
int3 = 10                                                                # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1 == avl0                                                             # STEP 9
int3 = 16                                                               # STEP 10
result = avl1.find(int2)                                                # STEP 11
avl1 == avl1                                                            # STEP 12
int2 = 1                                                                # STEP 13
avl0 == avl1                                                            # STEP 14
avl0.delete(int2)                                                       # STEP 15
int2 = 14                                                               # STEP 16
avl1 == avl0                                                            # STEP 17
avl1 == avl1                                                            # STEP 18
avl0 == avl0                                                            # STEP 19
avl1.insert(int2)                                                       # STEP 20
result = avl0.find(int2)                                                # STEP 21
result = avl1.find(int1)                                                # STEP 22
int1 = 19                                                               # STEP 23
avl1.delete(int2)                                                       # STEP 24
avl0.insert(int1)                                                       # STEP 25
int1 = 14                                                               # STEP 26
int2 = 14                                                               # STEP 27
result = avl0.find(int2)                                                # STEP 28
avl1.insert(int2)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
int1 = 2                                                                # STEP 31
int2 = 3                                                                # STEP 32
result = avl1.find(int1)                                                # STEP 33
int1 = 17                                                               # STEP 34
result = avl0.inorder()                                                 # STEP 35
avl0.delete(int1)                                                       # STEP 36
int1 = 6                                                                # STEP 37
avl0.delete(int2)                                                       # STEP 38
int2 = 5                                                                # STEP 39
avl2 = avl.AVLTree()                                                    # STEP 40
avl0.delete(int3)                                                       # STEP 41
int3 = 15                                                               # STEP 42
avl1.delete(int2)                                                       # STEP 43
int2 = 13                                                               # STEP 44
result = avl0.find(int0)                                                # STEP 45
avl2.insert(int3)                                                       # STEP 46
result = avl0.find(int0)                                                # STEP 47
int0 = 15                                                               # STEP 48
result = avl1.find(int3)                                                # STEP 49
result = avl1.find(int3)                                                # STEP 50
avl2.insert(int2)                                                       # STEP 51
avl0 == avl2                                                            # STEP 52
result = avl1.find(int2)                                                # STEP 53
avl0.insert(int1)                                                       # STEP 54
int2 = 9                                                                # STEP 55
int3 = 8                                                                # STEP 56
avl2.delete(int2)                                                       # STEP 57
int1 = 15                                                               # STEP 58
int2 = 6                                                                # STEP 59
result = avl0.find(int0)                                                # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl2.delete(int1)                                                       # STEP 62
int3 = 4                                                                # STEP 63
avl0.delete(int3)                                                       # STEP 64
int0 = 8                                                                # STEP 65
avl0 = avl.AVLTree()                                                    # STEP 66
avl2.delete(int1)                                                       # STEP 67
int1 = 4                                                                # STEP 68
avl0.insert(int1)                                                       # STEP 69
avl1.insert(int0)                                                       # STEP 70
avl1 == avl2                                                            # STEP 71
int0 = 19                                                               # STEP 72
avl1.delete(int0)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101703a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

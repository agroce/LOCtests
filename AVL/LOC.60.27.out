Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99658.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  10 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([2, 5, 8, 10, 13, 15, 16])
  10 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([2, 5, 8, 10, 13, 15, 16])
  10 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([2, 5, 8, 10, 13, 15, 16])
  10 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 16 [0:0] L
set([2, 5, 8, 10, 13, 15, 16])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1057bd2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.99658.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 3                                                                 # STEP 0
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 2
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                        # STEP 3
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 4
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int3 = 7                                                                 # STEP 5
ACTION: int3 = 7 
int3 = 3 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 19                                                                # STEP 7
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 8
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 3                                                                # STEP 11
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 16                                                               # STEP 12
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 18                                                               # STEP 14
ACTION: int3 = 18 
int3 = 7 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 3, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([16, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 18, 3, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([16, 18, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 3, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([16, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int3 = 19                                                               # STEP 21
ACTION: int3 = 19 
int3 = 18 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 7                                                                # STEP 23
ACTION: int2 = 7 
int2 = 3 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 24
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x105323830> : <type 'instance'>
avl_REF2 = set([3, 7]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 25
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 26
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([19, 13]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 34
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int0 = 13                                                               # STEP 36
ACTION: int0 = 13 
int0 = 13 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 37
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 38
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 13, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 39
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2 == avl2                                                            # STEP 40
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 41
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 42
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 43
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                # STEP 44
ACTION: int0 = 8 
int0 = 13 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 45
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 47
ACTION: int2 = 3 
int2 = 7 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 49
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 19, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([19, 7]) : <type 'set'>
==================================================
int0 = 8                                                                # STEP 51
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 52
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 55
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 19]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 56
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 5                                                                # STEP 57
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 3, 19]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 59
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 3, 19, 5]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 60
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 3, 19, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 61
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1050c55a8> : <type 'instance'>
avl_REF2 = set([8, 3, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 19, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050ec758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([5, 11, 12, 14, 15, 16, 18])
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([5, 11, 12, 14, 15, 16, 18])
  14 [3:1]
-- < 11 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([4, 5, 11, 12, 14, 15, 16, 18])
  14 [3:1]
-- < 11 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
set([4, 5, 11, 12, 14, 15, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1055e9248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.99658.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 12                                                                # STEP 0
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 2
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 15                                                                # STEP 5
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 5                                                                 # STEP 8
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 9
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12, 14]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 10
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 11
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int1 = 11                                                               # STEP 13
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 14
ACTION: int0 = 14 
int0 = 12 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 15
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([12, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 12, 5, 14, 15]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 24
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 25
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([18, 12, 5, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 12                                                               # STEP 27
ACTION: int0 = 12 
int0 = 18 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 4                                                                # STEP 29
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 31
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.display()                                                          # STEP 34
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 11, 12, 14, 15, 16, 18])
==================================================
int1 = 7                                                                # STEP 35
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 36
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 37
ACTION: int0 = 20 
int0 = 12 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 40
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
  14 [2:0]
-- < 11 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([5, 11, 12, 14, 15, 16, 18])
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 42
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 43
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 45
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
  14 [3:1]
-- < 11 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 5, 11, 12, 14, 15, 16, 18])
==================================================
avl1.insert(int0)                                                       # STEP 46
ACTION: avl1.insert(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18, 20]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 50
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 51
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
  14 [3:1]
-- < 11 [2:1]
---- < 5 [1:1]
------ < 4 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 18 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([4, 5, 11, 12, 14, 15, 16, 18])
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 53
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 54
ACTION: avl1.delete(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([4, 5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 55
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 56
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 8                                                                # STEP 58
ACTION: int0 = 8 
int0 = 20 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 59
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 9, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 61
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 9, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 62
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 11, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 63
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 64
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5, 9, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 9, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 8, 9, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 66
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1055e9170> : <type 'instance'>
avl_REF1 = set([5, 8, 9, 12, 14, 15, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([5, 8, 12, 14, 15, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1055f9950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #4 STEP #18 (0:00:30.003166) Fri Apr 28 04:33:34 2017 [ 159 stmts 210 branches ]
  16 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 15 [0:0] L
-- > 20 [1:1]
---- < 18 [0:0] L
set([3, 10, 15, 16, 18, 20])
  13 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 6, 9, 13, 19, 20])
  13 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 6, 9, 13, 19, 20])
  13 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 6, 9, 13, 19, 20])
  13 [2:0]
-- < 6 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:-1]
---- > 20 [0:0] L
set([1, 6, 9, 13, 19, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 21
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2408881187 TOTAL RUNTIME
8 EXECUTED
650 TOTAL TEST OPERATIONS
24.8752958775 TIME SPENT EXECUTING TEST OPERATIONS
0.072461605072 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9697437286 TIME SPENT CHECKING PROPERTIES
49.8450396061 TOTAL TIME SPENT RUNNING SUT
0.00484085083008 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 3                                                                 # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2 == avl2                                                             # STEP 2
avl2.delete(int3)                                                        # STEP 3
avl2.insert(int3)                                                        # STEP 4
int3 = 7                                                                 # STEP 5
result = avl2.inorder()                                                  # STEP 6
int1 = 19                                                                # STEP 7
avl2.insert(int3)                                                        # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.find(int3)                                                # STEP 10
int2 = 3                                                                # STEP 11
int0 = 16                                                               # STEP 12
avl2.insert(int3)                                                       # STEP 13
int3 = 18                                                               # STEP 14
avl2.insert(int0)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
avl2.delete(int0)                                                       # STEP 18
result = avl2.find(int2)                                                # STEP 19
avl2.insert(int2)                                                       # STEP 20
int3 = 19                                                               # STEP 21
avl2.delete(int0)                                                       # STEP 22
int2 = 7                                                                # STEP 23
avl2 = avl.AVLTree()                                                    # STEP 24
int0 = 13                                                               # STEP 25
avl2.insert(int0)                                                       # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.delete(int2)                                                       # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.insert(int2)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
result = avl2.find(int1)                                                # STEP 34
avl2.insert(int3)                                                       # STEP 35
int0 = 13                                                               # STEP 36
int1 = 7                                                                # STEP 37
avl2.insert(int2)                                                       # STEP 38
result = avl2.find(int2)                                                # STEP 39
avl2 == avl2                                                            # STEP 40
avl2.insert(int0)                                                       # STEP 41
avl2.delete(int0)                                                       # STEP 42
avl2.delete(int0)                                                       # STEP 43
int0 = 8                                                                # STEP 44
result = avl2.find(int1)                                                # STEP 45
avl2.delete(int3)                                                       # STEP 46
int2 = 3                                                                # STEP 47
avl2.insert(int0)                                                       # STEP 48
avl2.insert(int3)                                                       # STEP 49
avl2.delete(int0)                                                       # STEP 50
int0 = 8                                                                # STEP 51
avl2.delete(int1)                                                       # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl2.delete(int2)                                                       # STEP 54
avl2.insert(int0)                                                       # STEP 55
result = avl2.find(int2)                                                # STEP 56
int3 = 5                                                                # STEP 57
avl2.insert(int2)                                                       # STEP 58
avl2.insert(int3)                                                       # STEP 59
result = avl2.find(int3)                                                # STEP 60
avl2.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050ec758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 12                                                                # STEP 0
int0 = 12                                                                # STEP 1
int2 = 14                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.delete(int0)                                                        # STEP 4
int3 = 15                                                                # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int0)                                                        # STEP 7
int2 = 5                                                                 # STEP 8
avl1.insert(int1)                                                        # STEP 9
avl1.delete(int2)                                                       # STEP 10
avl1.insert(int1)                                                       # STEP 11
avl1.insert(int0)                                                       # STEP 12
int1 = 11                                                               # STEP 13
int0 = 14                                                               # STEP 14
result = avl1.inorder()                                                 # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
int0 = 18                                                               # STEP 20
avl1.insert(int2)                                                       # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
int3 = 16                                                               # STEP 24
avl1.insert(int1)                                                       # STEP 25
result = avl1.inorder()                                                 # STEP 26
int0 = 12                                                               # STEP 27
result = avl1.inorder()                                                 # STEP 28
int2 = 4                                                                # STEP 29
result = avl1.inorder()                                                 # STEP 30
avl1.insert(int3)                                                       # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.display()                                                          # STEP 34
int1 = 7                                                                # STEP 35
avl1.delete(int3)                                                       # STEP 36
int0 = 20                                                               # STEP 37
avl1.insert(int3)                                                       # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl1.display()                                                          # STEP 40
avl1.delete(int1)                                                       # STEP 41
avl1.delete(int2)                                                       # STEP 42
result = avl1.inorder()                                                 # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.display()                                                          # STEP 45
avl1.insert(int0)                                                       # STEP 46
avl1.delete(int2)                                                       # STEP 47
avl1.delete(int0)                                                       # STEP 48
avl1.insert(int2)                                                       # STEP 49
int3 = 19                                                               # STEP 50
avl1.display()                                                          # STEP 51
avl1.delete(int1)                                                       # STEP 52
result = avl1.inorder()                                                 # STEP 53
avl1.delete(int2)                                                       # STEP 54
int1 = 11                                                               # STEP 55
int2 = 9                                                                # STEP 56
avl1.delete(int0)                                                       # STEP 57
int0 = 8                                                                # STEP 58
avl1.delete(int2)                                                       # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl1.delete(int2)                                                       # STEP 61
avl1.delete(int1)                                                       # STEP 62
result = avl1.inorder()                                                 # STEP 63
avl1.insert(int2)                                                       # STEP 64
avl1.insert(int0)                                                       # STEP 65
avl1.delete(int2)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1055f9950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

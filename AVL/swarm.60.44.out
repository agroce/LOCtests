Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99970.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #5 STEP #12 (0:00:30.012335) Fri Apr 28 05:27:30 2017 [ 149 stmts 197 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10434bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 84 steps

SAVING TEST AS failure.99970.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 15                                                                # STEP 0
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 4
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int1 = 15                                                                # STEP 6
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 15]) : <type 'set'>
==================================================
int2 = 15                                                                # STEP 8
ACTION: int2 = 15 
int2 = 15 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 20                                                               # STEP 10
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 12
ACTION: int1 = 18 
int1 = 15 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int2)                                                # STEP 14
ACTION: result = avl2.find(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 17                                                               # STEP 15
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 16
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 17
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 18
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 20
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 21
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 5                                                                # STEP 23
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 24
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 25
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 26
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 28
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 29
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 30
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 31
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 33
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 34
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 5]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 35
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0 == avl0                                                            # STEP 37
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl2.find(int0)                                                # STEP 38
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int2 = 14                                                               # STEP 39
ACTION: int2 = 14 
int2 = 3 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 40
ACTION: int0 = 4 
int0 = 5 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 41
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 11                                                               # STEP 42
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 43
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 13                                                               # STEP 44
ACTION: int1 = 13 
int1 = 11 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 45
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 46
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 19                                                               # STEP 47
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 4]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 49
ACTION: result = avl1.find(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 50
ACTION: result = avl2.find(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 51
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 52
ACTION: int1 = 16 
int1 = 19 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 53
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF2 = set([9, 4]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int1)                                                # STEP 54
ACTION: result = avl0.find(int1) 
int1 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 55
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 56
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 1                                                                # STEP 57
ACTION: int1 = 1 
int1 = 16 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 58
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 4                                                                # STEP 59
ACTION: int0 = 4 
int0 = 4 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 60
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 4, 5]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 61
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 1]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 62
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int1 = 6                                                                # STEP 63
ACTION: int1 = 6 
int1 = 1 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 64
ACTION: int2 = 1 
int2 = 10 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 66
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 67
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
avl_REF2 = set([9, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.insert(int1)                                                       # STEP 68
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 4, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 4, 6, 1]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 69
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 4, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int0 = 10                                                               # STEP 70
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 71
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 72
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 73
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 74
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 4, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 10, 4, 6, 1]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 76
ACTION: int0 = 10 
int0 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 77
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 16                                                               # STEP 78
ACTION: int1 = 16 
int1 = 20 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 79
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105871368> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 80
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 10, 4, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 == avl2                                                            # STEP 81
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10586b878> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF1 = set([10, 4, 5]) : <type 'set'>
avl_REF2 = set([9, 10, 4, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 19                                                               # STEP 82
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 83
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10436cb00> : <type 'instance'>
avl_REF2 = set([9, 10, 4, 6, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 10, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d8a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 55
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.1997668743 TOTAL RUNTIME
8 EXECUTED
739 TOTAL TEST OPERATIONS
26.8655605316 TIME SPENT EXECUTING TEST OPERATIONS
0.0247840881348 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.9696688652 TIME SPENT CHECKING PROPERTIES
53.8352293968 TOTAL TIME SPENT RUNNING SUT
0.00484442710876 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 15                                                                # STEP 0
int1 = 9                                                                 # STEP 1
int0 = 18                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int3 = 6                                                                 # STEP 4
avl2.insert(int1)                                                        # STEP 5
int1 = 15                                                                # STEP 6
avl2.insert(int2)                                                        # STEP 7
int2 = 15                                                                # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 20                                                               # STEP 10
avl2.delete(int1)                                                       # STEP 11
int1 = 18                                                               # STEP 12
avl2 == avl2                                                            # STEP 13
result = avl2.find(int2)                                                # STEP 14
int2 = 17                                                               # STEP 15
result = avl2.find(int1)                                                # STEP 16
int1 = 4                                                                # STEP 17
avl2 == avl2                                                            # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int0)                                                       # STEP 20
avl0 = avl.AVLTree()                                                    # STEP 21
avl2.delete(int0)                                                       # STEP 22
int0 = 5                                                                # STEP 23
avl0.insert(int2)                                                       # STEP 24
avl0 == avl2                                                            # STEP 25
result = avl2.find(int3)                                                # STEP 26
avl0.delete(int2)                                                       # STEP 27
int3 = 19                                                               # STEP 28
avl1 = avl.AVLTree()                                                    # STEP 29
avl1.insert(int1)                                                       # STEP 30
int2 = 3                                                                # STEP 31
avl1 == avl1                                                            # STEP 32
result = avl1.find(int1)                                                # STEP 33
avl1.insert(int0)                                                       # STEP 34
avl0 == avl0                                                            # STEP 35
avl2.delete(int2)                                                       # STEP 36
avl0 == avl0                                                            # STEP 37
result = avl2.find(int0)                                                # STEP 38
int2 = 14                                                               # STEP 39
int0 = 4                                                                # STEP 40
avl0.delete(int1)                                                       # STEP 41
int1 = 11                                                               # STEP 42
result = avl1.find(int1)                                                # STEP 43
int1 = 13                                                               # STEP 44
avl1 == avl2                                                            # STEP 45
result = avl2.find(int1)                                                # STEP 46
int1 = 19                                                               # STEP 47
avl2.insert(int0)                                                       # STEP 48
result = avl1.find(int1)                                                # STEP 49
result = avl2.find(int2)                                                # STEP 50
int2 = 10                                                               # STEP 51
int1 = 16                                                               # STEP 52
avl2 == avl0                                                            # STEP 53
result = avl0.find(int1)                                                # STEP 54
avl0.insert(int3)                                                       # STEP 55
avl1 == avl1                                                            # STEP 56
int1 = 1                                                                # STEP 57
avl1.delete(int2)                                                       # STEP 58
int0 = 4                                                                # STEP 59
avl1.insert(int2)                                                       # STEP 60
avl2.insert(int1)                                                       # STEP 61
result = avl1.find(int2)                                                # STEP 62
int1 = 6                                                                # STEP 63
int2 = 1                                                                # STEP 64
avl0.delete(int3)                                                       # STEP 65
avl0.insert(int0)                                                       # STEP 66
avl1 == avl2                                                            # STEP 67
avl2.insert(int1)                                                       # STEP 68
avl2.delete(int3)                                                       # STEP 69
int0 = 10                                                               # STEP 70
int1 = 20                                                               # STEP 71
result = avl1.find(int3)                                                # STEP 72
avl1.delete(int3)                                                       # STEP 73
avl1.delete(int1)                                                       # STEP 74
avl2.insert(int0)                                                       # STEP 75
int0 = 10                                                               # STEP 76
avl0.delete(int3)                                                       # STEP 77
int1 = 16                                                               # STEP 78
result = avl0.find(int0)                                                # STEP 79
avl2.delete(int3)                                                       # STEP 80
avl1 == avl2                                                            # STEP 81
int3 = 19                                                               # STEP 82
avl2.delete(int2)                                                       # STEP 83
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d8a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

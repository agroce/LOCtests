Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.537.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105a200e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 87 steps

SAVING TEST AS failure.537.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 5
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 6
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int1)                                                 # STEP 8
ACTION: result = avl1.find(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                 # STEP 9
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 12
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 14
ACTION: int1 = 17 
int1 = 11 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 19]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 16
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 18
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 19
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 21
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 19]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 22
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
avl_REF0 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 23
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 25
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl0 == avl1                                                            # STEP 27
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int3 = 18                                                               # STEP 28
ACTION: int3 = 18 
int3 = 19 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 30
ACTION: int1 = 2 
int1 = 17 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 31
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 17                                                               # STEP 32
ACTION: int3 = 17 
int3 = 18 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 33
ACTION: result = avl1.find(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 34
ACTION: int1 = 8 
int1 = 2 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 18]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 37
ACTION: avl1.insert(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 38
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 17, 19, 8]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 40
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 41
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19, 8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 17, 19, 8, 11]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 43
ACTION: int0 = 20 
int0 = 11 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 44
ACTION: int2 = 20 
int2 = 16 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 45
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19, 8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 46
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 20]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 47
ACTION: int0 = 10 
int0 = 20 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([16, 17, 19, 8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 11, 16, 17, 19, 20]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 50
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([8, 11, 16, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7, 8, 11, 16, 17, 19, 20]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([7, 8, 11, 16, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 53
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([7, 8, 11, 16, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 54
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1059a97e8> : <type 'instance'>
avl_REF1 = set([7, 8, 11, 16, 17, 19, 20]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 55
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 56
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 58
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 59
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4, 18, 20]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 61
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 64
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1 == avl0                                                            # STEP 65
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int1)                                                       # STEP 66
ACTION: avl1.delete(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 9                                                                # STEP 68
ACTION: int2 = 9 
int2 = 4 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 69
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 70
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.insert(int1)                                                       # STEP 71
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 73
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 74
ACTION: int1 = 18 
int1 = 12 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 75
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 6                                                                # STEP 76
ACTION: int3 = 6 
int3 = 5 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 77
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl1 == avl0                                                            # STEP 78
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 79
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 6, 18, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 80
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1059ad3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 81
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1059ad3b0> : <type 'instance'>
avl_REF0 = set([4, 6, 18, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.delete(int1)                                                       # STEP 82
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105944440> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 83
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 84
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 85
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1059ad3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 86
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105964e18> : <type 'instance'>
avl_REF0 = set([4, 6, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([4, 6, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059ba518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:31.096218) Fri Apr 28 06:35:47 2017 [ 147 stmts 196 branches ]
  9 [2:0]
-- < 7 [1:1]
---- < 3 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
set([3, 7, 9, 11, 14, 15])
  7 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([2, 4, 7, 12, 14, 15])
  7 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([2, 4, 7, 12, 14, 15])
  7 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 15 [0:0] L
set([2, 4, 7, 12, 14, 15])
  7 [3:-1]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 14 [2:0]
---- < 11 [1:0]
------ < 8 [0:0] L
------ > 12 [0:0] L
---- > 15 [1:-1]
------ > 17 [0:0] L
set([2, 4, 6, 7, 8, 11, 12, 14, 15, 17])
  13 [2:0]
-- < 8 [1:0]
---- < 5 [0:0] L
---- > 12 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([5, 8, 12, 13, 15, 17])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 58
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1866550446 TOTAL RUNTIME
7 EXECUTED
645 TOTAL TEST OPERATIONS
26.4350371361 TIME SPENT EXECUTING TEST OPERATIONS
0.0721213817596 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4991974831 TIME SPENT CHECKING PROPERTIES
52.9342346191 TOTAL TIME SPENT RUNNING SUT
0.0043728351593 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 19                                                                # STEP 0
int2 = 16                                                                # STEP 1
int1 = 11                                                                # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int1)                                                        # STEP 4
int0 = 4                                                                 # STEP 5
avl1.delete(int0)                                                        # STEP 6
avl1.insert(int1)                                                        # STEP 7
result = avl1.find(int1)                                                 # STEP 8
result = avl1.find(int0)                                                 # STEP 9
avl1.delete(int0)                                                       # STEP 10
avl1.delete(int1)                                                       # STEP 11
result = avl1.find(int2)                                                # STEP 12
avl1.insert(int3)                                                       # STEP 13
int1 = 17                                                               # STEP 14
avl1.insert(int1)                                                       # STEP 15
int0 = 11                                                               # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
avl0.insert(int3)                                                       # STEP 18
result = avl1.inorder()                                                 # STEP 19
avl1.insert(int2)                                                       # STEP 20
avl0.insert(int1)                                                       # STEP 21
avl1 == avl0                                                            # STEP 22
avl0.delete(int1)                                                       # STEP 23
avl0.insert(int3)                                                       # STEP 24
avl0.delete(int3)                                                       # STEP 25
avl1.insert(int2)                                                       # STEP 26
avl0 == avl1                                                            # STEP 27
int3 = 18                                                               # STEP 28
avl0.insert(int3)                                                       # STEP 29
int1 = 2                                                                # STEP 30
avl0 == avl0                                                            # STEP 31
int3 = 17                                                               # STEP 32
result = avl1.find(int1)                                                # STEP 33
int1 = 8                                                                # STEP 34
avl1 == avl1                                                            # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl1.insert(int3)                                                       # STEP 37
avl0.delete(int2)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
int3 = 5                                                                # STEP 40
int1 = 7                                                                # STEP 41
avl1.insert(int0)                                                       # STEP 42
int0 = 20                                                               # STEP 43
int2 = 20                                                               # STEP 44
result = avl1.inorder()                                                 # STEP 45
avl0.insert(int0)                                                       # STEP 46
int0 = 10                                                               # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl1.insert(int2)                                                       # STEP 49
int2 = 10                                                               # STEP 50
avl1.insert(int1)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl1.insert(int1)                                                       # STEP 53
avl1 = avl.AVLTree()                                                    # STEP 54
int1 = 12                                                               # STEP 55
int2 = 4                                                                # STEP 56
avl0.delete(int2)                                                       # STEP 57
avl0.delete(int1)                                                       # STEP 58
result = avl0.inorder()                                                 # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl0.delete(int3)                                                       # STEP 61
avl1.delete(int0)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
result = avl0.inorder()                                                 # STEP 64
avl1 == avl0                                                            # STEP 65
avl1.delete(int1)                                                       # STEP 66
avl0.delete(int1)                                                       # STEP 67
int2 = 9                                                                # STEP 68
avl1.delete(int3)                                                       # STEP 69
result = avl0.inorder()                                                 # STEP 70
avl1.insert(int1)                                                       # STEP 71
result = avl0.find(int0)                                                # STEP 72
int0 = 8                                                                # STEP 73
int1 = 18                                                               # STEP 74
avl0.delete(int3)                                                       # STEP 75
int3 = 6                                                                # STEP 76
result = avl0.find(int1)                                                # STEP 77
avl1 == avl0                                                            # STEP 78
avl0.insert(int3)                                                       # STEP 79
avl2 = avl.AVLTree()                                                    # STEP 80
avl0 == avl2                                                            # STEP 81
avl1.delete(int1)                                                       # STEP 82
avl0.delete(int0)                                                       # STEP 83
avl0.delete(int2)                                                       # STEP 84
avl2.insert(int0)                                                       # STEP 85
avl0.delete(int1)                                                       # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059ba518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

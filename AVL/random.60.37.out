Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99840.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c50950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 61 steps

SAVING TEST AS failure.99840.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 3                                                                 # STEP 0
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 1
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 2
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 3
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 11                                                                # STEP 7
ACTION: int0 = 11 
int0 = 6 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 9
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 10
ACTION: int3 = 8 
int3 = 16 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 14                                                               # STEP 12
ACTION: int2 = 14 
int2 = 13 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 13
ACTION: avl0.delete(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 9                                                                # STEP 14
ACTION: int3 = 9 
int3 = 8 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 15
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 14]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 16
ACTION: int2 = 7 
int2 = 14 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 17
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int0 = 13                                                               # STEP 18
ACTION: int0 = 13 
int0 = 11 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 20
ACTION: int0 = 18 
int0 = 13 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 21
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 14                                                               # STEP 22
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 23
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([3, 11, 14]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 25
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 26
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 28
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 30
ACTION: int1 = 3 
int1 = 3 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int1 = 4                                                                # STEP 33
ACTION: int1 = 4 
int1 = 3 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 34
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 16                                                               # STEP 35
ACTION: int2 = 16 
int2 = 14 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 36
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 17                                                               # STEP 37
ACTION: int0 = 17 
int0 = 18 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 39
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 40
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 41
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 42
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 43
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 45
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 46
ACTION: int0 = 18 
int0 = 6 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 47
ACTION: result = avl0.find(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 48
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 49
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 50
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 51
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 52
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 13                                                               # STEP 54
ACTION: int3 = 13 
int3 = 5 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 55
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 17, 11, 13, 14]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 56
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103c07200> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 6]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 58
ACTION: int2 = 4 
int2 = 16 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 59
ACTION: int0 = 13 
int0 = 18 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 60
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c077a0> : <type 'instance'>
avl_REF0 = set([3, 17, 11, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 11, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c25950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #53 (0:00:30.058229) Fri Apr 28 05:05:09 2017 [ 149 stmts 197 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 33
STOPPING TESTING DUE TO TIMEOUT
7.87241262301 PERCENT COVERED
60.2065389156 TOTAL RUNTIME
8 EXECUTED
694 TOTAL TEST OPERATIONS
27.4758188725 TIME SPENT EXECUTING TEST OPERATIONS
0.0245332717896 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.5706431866 TIME SPENT CHECKING PROPERTIES
55.046462059 TOTAL TIME SPENT RUNNING SUT
0.00470399856567 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 3                                                                 # STEP 0
int0 = 6                                                                 # STEP 1
int2 = 13                                                                # STEP 2
int3 = 16                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
int0 = 11                                                                # STEP 7
avl0.insert(int0)                                                        # STEP 8
result = avl2.find(int3)                                                 # STEP 9
int3 = 8                                                                # STEP 10
avl0.delete(int2)                                                       # STEP 11
int2 = 14                                                               # STEP 12
avl0.delete(int3)                                                       # STEP 13
int3 = 9                                                                # STEP 14
avl0.insert(int2)                                                       # STEP 15
int2 = 7                                                                # STEP 16
avl2 == avl2                                                            # STEP 17
int0 = 13                                                               # STEP 18
result = avl0.find(int0)                                                # STEP 19
int0 = 18                                                               # STEP 20
result = avl2.find(int2)                                                # STEP 21
int2 = 14                                                               # STEP 22
result = avl2.find(int3)                                                # STEP 23
avl0.insert(int1)                                                       # STEP 24
avl2 == avl0                                                            # STEP 25
result = avl0.find(int3)                                                # STEP 26
avl2.insert(int1)                                                       # STEP 27
int3 = 4                                                                # STEP 28
avl2.delete(int1)                                                       # STEP 29
int1 = 3                                                                # STEP 30
avl0.insert(int1)                                                       # STEP 31
result = avl0.find(int2)                                                # STEP 32
int1 = 4                                                                # STEP 33
avl0 == avl2                                                            # STEP 34
int2 = 16                                                               # STEP 35
result = avl2.find(int0)                                                # STEP 36
int0 = 17                                                               # STEP 37
avl0.insert(int0)                                                       # STEP 38
int0 = 6                                                                # STEP 39
result = avl0.find(int3)                                                # STEP 40
result = avl2.find(int3)                                                # STEP 41
int3 = 2                                                                # STEP 42
result = avl0.find(int3)                                                # STEP 43
avl2.insert(int0)                                                       # STEP 44
int3 = 1                                                                # STEP 45
int0 = 18                                                               # STEP 46
result = avl0.find(int1)                                                # STEP 47
avl0.delete(int1)                                                       # STEP 48
avl2.delete(int3)                                                       # STEP 49
int3 = 5                                                                # STEP 50
int1 = 15                                                               # STEP 51
avl0.delete(int3)                                                       # STEP 52
avl2.delete(int2)                                                       # STEP 53
int3 = 13                                                               # STEP 54
avl0.insert(int3)                                                       # STEP 55
int3 = 3                                                                # STEP 56
avl2.insert(int0)                                                       # STEP 57
int2 = 4                                                                # STEP 58
int0 = 13                                                               # STEP 59
avl0.delete(int3)                                                       # STEP 60
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c25950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
197 BRANCHES COVERED
149 STATEMENTS COVERED

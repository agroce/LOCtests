Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1108.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 20 [1:1]
---- < 19 [0:0] L
set([4, 5, 9, 11, 19, 20])
  11 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([4, 5, 9, 11, 16, 19, 20])
  11 [2:0]
-- < 5 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([4, 5, 9, 11, 16, 19, 20])
  9 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 15 [0:0] L
set([2, 6, 9, 11, 12, 15])
TEST #4 STEP #93 (0:00:30.038230) Fri Apr 28 08:13:40 2017 [ 161 stmts 214 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103db4dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 55 steps

SAVING TEST AS failure.1108.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 2
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                 # STEP 5
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2 == avl2                                                             # STEP 8
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 11                                                                # STEP 9
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 10
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 13
ACTION: int1 = 6 
int1 = 8 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 14
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 17
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 18
ACTION: int0 = 11 
int0 = 6 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 21
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 1]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 1, 11]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 24
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 1, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 10                                                               # STEP 26
ACTION: int2 = 10 
int2 = 11 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 27
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 28
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 11, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 29
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl2                                                            # STEP 30
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int2)                                                       # STEP 32
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 34
ACTION: int2 = 20 
int2 = 10 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 35
ACTION: int3 = 20 
int3 = 1 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 6]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 38
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103e28a70> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103e2fab8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e2fab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 41
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 20, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.find(int1)                                                # STEP 43
ACTION: result = avl0.find(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 45
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 46
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 47
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e2fab8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 48
ACTION: int2 = 1 
int2 = 20 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e2fab8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 11, 20]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 51
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 52
ACTION: avl0.insert(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 11, 20, 6]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e2fab8> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103967488> : <type 'instance'>
avl_REF0 = set([1, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 11, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e3b3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ca64d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.1108.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 1
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 2
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 7
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 10]) : <type 'set'>
==================================================
int1 = 15                                                                # STEP 9
ACTION: int1 = 15 
int1 = 8 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 10
ACTION: int2 = 14 
int2 = 10 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 11
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 9                                                                # STEP 16
ACTION: int1 = 9 
int1 = 15 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 17
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 18                                                               # STEP 18
ACTION: int1 = 18 
int1 = 9 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 19
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 20
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 21
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 1                                                                # STEP 22
ACTION: int3 = 1 
int3 = 19 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 23
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 5                                                                # STEP 24
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 25
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 26
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                       # STEP 28
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 19                                                               # STEP 30
ACTION: int1 = 19 
int1 = 18 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 31
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 32
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 34
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 35
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 36
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 37
ACTION: int3 = 13 
int3 = 17 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 39
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 41
ACTION: avl1.delete(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 19, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 42
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5, 8, 10, 14, 15]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([5, 8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 45
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 9                                                                # STEP 46
ACTION: int1 = 9 
int1 = 19 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 47
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 4                                                                # STEP 48
ACTION: int0 = 4 
int0 = 15 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.find(int2)                                                # STEP 50
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 51
ACTION: int2 = 8 
int2 = 5 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103ca6c20> : <type 'instance'>
avl_REF1 = set([8, 10, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([10, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d2bc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 61
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.2133929729 TOTAL RUNTIME
8 EXECUTED
669 TOTAL TEST OPERATIONS
25.7489469051 TIME SPENT EXECUTING TEST OPERATIONS
0.0662133693695 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.8334569931 TIME SPENT CHECKING PROPERTIES
51.5824038982 TOTAL TIME SPENT RUNNING SUT
0.00412583351135 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 6                                                                 # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.insert(int0)                                                        # STEP 2
avl2.insert(int0)                                                        # STEP 3
avl2.delete(int0)                                                        # STEP 4
result = avl2.find(int0)                                                 # STEP 5
avl2.insert(int0)                                                        # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2 == avl2                                                             # STEP 8
int2 = 11                                                                # STEP 9
int1 = 8                                                                # STEP 10
avl2.insert(int1)                                                       # STEP 11
avl2.delete(int0)                                                       # STEP 12
int1 = 6                                                                # STEP 13
int3 = 1                                                                # STEP 14
avl2.delete(int1)                                                       # STEP 15
result = avl2.inorder()                                                 # STEP 16
result = avl2.find(int0)                                                # STEP 17
int0 = 11                                                               # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
int0 = 11                                                               # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl0 = avl.AVLTree()                                                    # STEP 24
result = avl2.inorder()                                                 # STEP 25
int2 = 10                                                               # STEP 26
avl2.delete(int3)                                                       # STEP 27
avl2.insert(int1)                                                       # STEP 28
avl0.delete(int1)                                                       # STEP 29
avl0 == avl2                                                            # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl0.delete(int2)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
int2 = 20                                                               # STEP 34
int3 = 20                                                               # STEP 35
avl0.insert(int1)                                                       # STEP 36
avl2.delete(int2)                                                       # STEP 37
avl2 = avl.AVLTree()                                                    # STEP 38
avl2.delete(int0)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
avl0.insert(int2)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
result = avl0.find(int1)                                                # STEP 43
avl0.delete(int1)                                                       # STEP 44
result = avl0.inorder()                                                 # STEP 45
avl0.insert(int3)                                                       # STEP 46
avl2.insert(int1)                                                       # STEP 47
int2 = 1                                                                # STEP 48
avl2.insert(int1)                                                       # STEP 49
avl0.insert(int0)                                                       # STEP 50
result = avl0.inorder()                                                 # STEP 51
avl0.insert(int1)                                                       # STEP 52
avl2.delete(int1)                                                       # STEP 53
avl0.delete(int3)                                                       # STEP 54
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e3b3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 19                                                                # STEP 0
int2 = 10                                                                # STEP 1
int1 = 8                                                                 # STEP 2
int0 = 15                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.insert(int2)                                                        # STEP 7
avl1.insert(int1)                                                        # STEP 8
int1 = 15                                                                # STEP 9
int2 = 14                                                               # STEP 10
avl1.delete(int1)                                                       # STEP 11
avl1.delete(int3)                                                       # STEP 12
avl1.delete(int1)                                                       # STEP 13
result = avl1.find(int3)                                                # STEP 14
avl1.delete(int1)                                                       # STEP 15
int1 = 9                                                                # STEP 16
avl1.delete(int1)                                                       # STEP 17
int1 = 18                                                               # STEP 18
avl1.insert(int2)                                                       # STEP 19
avl1.delete(int1)                                                       # STEP 20
avl1.delete(int0)                                                       # STEP 21
int3 = 1                                                                # STEP 22
avl1.delete(int3)                                                       # STEP 23
int2 = 5                                                                # STEP 24
int3 = 17                                                               # STEP 25
avl1.delete(int0)                                                       # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl1.insert(int2)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
int1 = 19                                                               # STEP 30
avl1.insert(int1)                                                       # STEP 31
avl1.insert(int2)                                                       # STEP 32
avl1.delete(int3)                                                       # STEP 33
result = avl1.find(int0)                                                # STEP 34
avl1.delete(int0)                                                       # STEP 35
avl1.delete(int2)                                                       # STEP 36
int3 = 13                                                               # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl1.delete(int0)                                                       # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl1.delete(int1)                                                       # STEP 41
avl1.delete(int0)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
avl1.delete(int2)                                                       # STEP 44
avl1 == avl1                                                            # STEP 45
int1 = 9                                                                # STEP 46
avl1.delete(int2)                                                       # STEP 47
int0 = 4                                                                # STEP 48
avl1.delete(int1)                                                       # STEP 49
result = avl1.find(int2)                                                # STEP 50
int2 = 8                                                                # STEP 51
avl1.delete(int2)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d2bc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

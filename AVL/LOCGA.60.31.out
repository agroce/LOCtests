Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62121.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104867170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.62121.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 2
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 3
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 2                                                                 # STEP 4
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 5
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int2)                                                        # STEP 6
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                        # STEP 8
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 10
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 9                                                                # STEP 11
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 14
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 4]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 17                                                               # STEP 18
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 19
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 20
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 21
ACTION: int0 = 1 
int0 = 9 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 22
ACTION: int2 = 8 
int2 = 2 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 23
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 24
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 1, 4]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 26
ACTION: int1 = 10 
int1 = 17 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 28
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int1)                                                # STEP 29
ACTION: result = avl1.find(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 8                                                                # STEP 30
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 31
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 11                                                               # STEP 33
ACTION: int1 = 11 
int1 = 10 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 34
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 36
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 38
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 39
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 11, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 40
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 42
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 43
ACTION: result = avl1.find(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 46
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 47
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 48
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1 == avl1                                                            # STEP 50
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 5                                                                # STEP 51
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 54
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 55
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 9                                                                # STEP 56
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 57
ACTION: int2 = 3 
int2 = 8 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 58
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 9, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 59
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int0)                                                       # STEP 60
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 61
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 62
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([8, 9, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 5, 8, 9]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 63
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 64
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int0)                                                       # STEP 65
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 66
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1026f4290> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4, 5, 8]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10480d638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #3 STEP #42 (0:00:30.003038) Mon May  1 17:47:31 2017 [ 132 stmts 176 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039ea4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.62121.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 2
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 3
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int3 = 12                                                                # STEP 4
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 5
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                        # STEP 7
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                        # STEP 9
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 11
ACTION: int3 = 4 
int3 = 12 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 12
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 13
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11, 4]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 15
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 4, 15]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 18
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([11, 4]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 19
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 22
ACTION: int1 = 17 
int1 = 15 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 24
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 12                                                               # STEP 25
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 11                                                               # STEP 27
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 28
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 29
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 30
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 31
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 32
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 35
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 36
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 4]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 37
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 39
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 40
ACTION: int3 = 14 
int3 = 12 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 41
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 43
ACTION: int0 = 7 
int0 = 11 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 44
ACTION: avl1.delete(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 45
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 4]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 46
ACTION: int2 = 3 
int2 = 18 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 47
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 49
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 52
ACTION: avl1.delete(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int0)                                                # STEP 53
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 12                                                               # STEP 54
ACTION: int0 = 12 
int0 = 7 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 55
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 11                                                               # STEP 57
ACTION: int3 = 11 
int3 = 14 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 58
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 7                                                                # STEP 59
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 60
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 12, 7]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 61
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 11, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 65
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 66
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl1.inorder()                                                 # STEP 67
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 69
ACTION: avl2.delete(int0) 
int0 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 70
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int1)                                                # STEP 71
ACTION: result = avl2.find(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 72
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 7                                                                # STEP 73
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 74
ACTION: result = avl2.find(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 75
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 12                                                               # STEP 76
ACTION: int3 = 12 
int3 = 11 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 77
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 78
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 79
ACTION: avl1.insert(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([12, 18, 11, 4]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 80
ACTION: int0 = 4 
int0 = 12 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 81
ACTION: int2 = 18 
int2 = 3 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 82
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 9                                                                # STEP 83
ACTION: int1 = 9 
int1 = 7 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 84
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 85
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 86
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([12, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 87
ACTION: avl2.delete(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 88
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([12, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 89
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([12, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 90
ACTION: result = avl2.find(int3) 
int3 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 91
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1039da200> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 92
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1048f16c8> : <type 'instance'>
avl_REF1 = set([12, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12, 18, 11]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ee1cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
7.63203714452 PERCENT COVERED
60.2890920639 TOTAL RUNTIME
5 EXECUTED
389 TOTAL TEST OPERATIONS
21.0788891315 TIME SPENT EXECUTING TEST OPERATIONS
0.0461447238922 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.2233614922 TIME SPENT CHECKING PROPERTIES
42.3022506237 TOTAL TIME SPENT RUNNING SUT
0.00347399711609 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 4                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int3)                                                        # STEP 2
avl1.delete(int3)                                                        # STEP 3
int2 = 2                                                                 # STEP 4
avl1.insert(int2)                                                        # STEP 5
avl1.insert(int2)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
avl1.delete(int2)                                                        # STEP 8
avl1.insert(int3)                                                        # STEP 9
result = avl1.inorder()                                                 # STEP 10
int0 = 9                                                                # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1.insert(int0)                                                       # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1 == avl1                                                            # STEP 17
int1 = 17                                                               # STEP 18
avl1.insert(int3)                                                       # STEP 19
avl1.delete(int0)                                                       # STEP 20
int0 = 1                                                                # STEP 21
int2 = 8                                                                # STEP 22
avl1.insert(int2)                                                       # STEP 23
avl1.delete(int1)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
int1 = 10                                                               # STEP 26
avl1.insert(int0)                                                       # STEP 27
avl1 == avl1                                                            # STEP 28
result = avl1.find(int1)                                                # STEP 29
int2 = 8                                                                # STEP 30
avl1 == avl1                                                            # STEP 31
result = avl1.inorder()                                                 # STEP 32
int1 = 11                                                               # STEP 33
avl1.delete(int0)                                                       # STEP 34
avl1 == avl1                                                            # STEP 35
result = avl1.inorder()                                                 # STEP 36
avl1.delete(int1)                                                       # STEP 37
avl1.insert(int2)                                                       # STEP 38
avl1.insert(int1)                                                       # STEP 39
avl1 == avl1                                                            # STEP 40
avl1.insert(int1)                                                       # STEP 41
avl1.insert(int1)                                                       # STEP 42
result = avl1.find(int3)                                                # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.insert(int3)                                                       # STEP 45
result = avl1.inorder()                                                 # STEP 46
avl1.insert(int3)                                                       # STEP 47
result = avl1.inorder()                                                 # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl1 == avl1                                                            # STEP 50
int3 = 5                                                                # STEP 51
avl1.delete(int0)                                                       # STEP 52
avl1.delete(int0)                                                       # STEP 53
avl1.delete(int1)                                                       # STEP 54
result = avl1.inorder()                                                 # STEP 55
int1 = 9                                                                # STEP 56
int2 = 3                                                                # STEP 57
avl1.insert(int1)                                                       # STEP 58
avl1 == avl1                                                            # STEP 59
avl1.delete(int0)                                                       # STEP 60
avl1.delete(int0)                                                       # STEP 61
avl1.insert(int3)                                                       # STEP 62
avl1.insert(int1)                                                       # STEP 63
avl1.insert(int3)                                                       # STEP 64
avl1.delete(int0)                                                       # STEP 65
avl1.delete(int1)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10480d638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl1 = avl.AVLTree()                                                     # STEP 0
int3 = 11                                                                # STEP 1
avl1.insert(int3)                                                        # STEP 2
avl1.insert(int3)                                                        # STEP 3
int3 = 12                                                                # STEP 4
avl1.insert(int3)                                                        # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl1.delete(int3)                                                        # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int3)                                                        # STEP 9
avl1.delete(int3)                                                       # STEP 10
int3 = 4                                                                # STEP 11
int1 = 15                                                               # STEP 12
avl1.delete(int1)                                                       # STEP 13
avl1.insert(int3)                                                       # STEP 14
result = avl1.find(int1)                                                # STEP 15
avl1.insert(int3)                                                       # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl1.delete(int1)                                                       # STEP 18
int3 = 11                                                               # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl1.delete(int3)                                                       # STEP 21
int1 = 17                                                               # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl1.insert(int1)                                                       # STEP 24
int3 = 12                                                               # STEP 25
avl1.insert(int1)                                                       # STEP 26
int0 = 11                                                               # STEP 27
avl1.delete(int3)                                                       # STEP 28
avl2 = avl.AVLTree()                                                    # STEP 29
int2 = 18                                                               # STEP 30
avl1.delete(int1)                                                       # STEP 31
avl1 == avl2                                                            # STEP 32
avl2.delete(int2)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
avl2.insert(int0)                                                       # STEP 35
avl1.insert(int2)                                                       # STEP 36
result = avl1.inorder()                                                 # STEP 37
result = avl1.find(int3)                                                # STEP 38
avl2.delete(int0)                                                       # STEP 39
int3 = 14                                                               # STEP 40
avl1.delete(int0)                                                       # STEP 41
avl2.insert(int1)                                                       # STEP 42
int0 = 7                                                                # STEP 43
avl1.delete(int2)                                                       # STEP 44
avl1.insert(int2)                                                       # STEP 45
int2 = 3                                                                # STEP 46
result = avl1.find(int0)                                                # STEP 47
avl1 == avl1                                                            # STEP 48
result = avl1.inorder()                                                 # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl1.delete(int3)                                                       # STEP 52
result = avl1.find(int0)                                                # STEP 53
int0 = 12                                                               # STEP 54
int1 = 7                                                                # STEP 55
avl1.delete(int2)                                                       # STEP 56
int3 = 11                                                               # STEP 57
avl1.delete(int1)                                                       # STEP 58
int1 = 7                                                                # STEP 59
avl2.insert(int0)                                                       # STEP 60
avl1.delete(int2)                                                       # STEP 61
avl1.delete(int3)                                                       # STEP 62
avl1.insert(int3)                                                       # STEP 63
avl1 == avl1                                                            # STEP 64
result = avl1.find(int3)                                                # STEP 65
result = avl2.inorder()                                                 # STEP 66
result = avl1.inorder()                                                 # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl2.delete(int0)                                                       # STEP 69
avl2 == avl2                                                            # STEP 70
result = avl2.find(int1)                                                # STEP 71
result = avl2.inorder()                                                 # STEP 72
int1 = 7                                                                # STEP 73
result = avl2.find(int2)                                                # STEP 74
avl1.delete(int1)                                                       # STEP 75
int3 = 12                                                               # STEP 76
result = avl2.find(int3)                                                # STEP 77
avl2.insert(int3)                                                       # STEP 78
avl1.insert(int0)                                                       # STEP 79
int0 = 4                                                                # STEP 80
int2 = 18                                                               # STEP 81
avl2.insert(int1)                                                       # STEP 82
int1 = 9                                                                # STEP 83
avl2.delete(int2)                                                       # STEP 84
avl2.insert(int3)                                                       # STEP 85
avl1.insert(int3)                                                       # STEP 86
avl2.delete(int3)                                                       # STEP 87
avl1.insert(int3)                                                       # STEP 88
avl1.delete(int1)                                                       # STEP 89
result = avl2.find(int3)                                                # STEP 90
avl2.delete(int2)                                                       # STEP 91
avl1.delete(int0)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ee1cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
196 BRANCHES COVERED
148 STATEMENTS COVERED

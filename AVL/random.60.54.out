Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.274.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104255830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 29 steps

SAVING TEST AS failure.274.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 18                                                                # STEP 0
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 2
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 5
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                        # STEP 8
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 15]) : <type 'set'>
==================================================
int1 = 4                                                                 # STEP 9
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int2 = 9                                                                # STEP 11
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 13
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 4                                                                # STEP 14
ACTION: int3 = 4 
int3 = 18 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 15
ACTION: int2 = 18 
int2 = 9 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 16
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 6                                                                # STEP 18
ACTION: int3 = 6 
int3 = 4 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 5, 15]) : <type 'set'>
==================================================
int1 = 9                                                                # STEP 20
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 18, 5, 15]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 22
ACTION: int1 = 1 
int1 = 9 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 23
ACTION: avl2.delete(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([9, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 7                                                                # STEP 24
ACTION: int0 = 7 
int0 = 8 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 25
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([9, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([9, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 11                                                               # STEP 27
ACTION: int1 = 11 
int1 = 1 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048243b0> : <type 'instance'>
avl_REF2 = set([9, 18, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([9, 5, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041615f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #18 (0:00:30.068564) Fri Apr 28 05:57:06 2017 [ 150 stmts 200 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 96
STOPPING TESTING DUE TO TIMEOUT
8.04207668816 PERCENT COVERED
60.2182438374 TOTAL RUNTIME
8 EXECUTED
725 TOTAL TEST OPERATIONS
28.6706526279 TIME SPENT EXECUTING TEST OPERATIONS
0.0245282649994 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.9599211216 TIME SPENT CHECKING PROPERTIES
57.6305737495 TOTAL TIME SPENT RUNNING SUT
0.00477123260498 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 18                                                                # STEP 0
int2 = 15                                                                # STEP 1
int0 = 8                                                                 # STEP 2
int3 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2 == avl2                                                             # STEP 5
avl2.insert(int1)                                                        # STEP 6
avl2 == avl2                                                             # STEP 7
avl2.insert(int2)                                                        # STEP 8
int1 = 4                                                                 # STEP 9
avl2.insert(int3)                                                       # STEP 10
int2 = 9                                                                # STEP 11
result = avl2.find(int1)                                                # STEP 12
result = avl2.find(int2)                                                # STEP 13
int3 = 4                                                                # STEP 14
int2 = 18                                                               # STEP 15
int1 = 5                                                                # STEP 16
avl2.delete(int3)                                                       # STEP 17
int3 = 6                                                                # STEP 18
avl2.insert(int1)                                                       # STEP 19
int1 = 9                                                                # STEP 20
avl2.insert(int1)                                                       # STEP 21
int1 = 1                                                                # STEP 22
avl2.delete(int0)                                                       # STEP 23
int0 = 7                                                                # STEP 24
result = avl2.find(int1)                                                # STEP 25
avl2.insert(int2)                                                       # STEP 26
int1 = 11                                                               # STEP 27
avl2.delete(int2)                                                       # STEP 28
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041615f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
202 BRANCHES COVERED
151 STATEMENTS COVERED

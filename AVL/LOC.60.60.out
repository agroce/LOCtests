Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.388.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  6 [2:0]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 7 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 14, 17])
  6 [3:-1]
-- < 5 [1:1]
---- < 2 [0:0] L
-- > 14 [2:1]
---- < 7 [1:-1]
------ > 11 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 11, 14, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a3e440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.388.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 2
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                             # STEP 6
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                        # STEP 7
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
int2 = 2                                                                 # STEP 8
ACTION: int2 = 2 
int2 = 16 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 19                                                               # STEP 10
ACTION: int1 = 19 
int1 = 8 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 11
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 12
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int2 = 13                                                               # STEP 13
ACTION: int2 = 13 
int2 = 2 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 13]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 15
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 17
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 13, 14]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 18
ACTION: result = avl0.find(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 11                                                               # STEP 20
ACTION: int1 = 11 
int1 = 19 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 13]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 22
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 11, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([16, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 26
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 11, 13]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 27
ACTION: int3 = 19 
int3 = 11 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 7                                                                # STEP 31
ACTION: int1 = 7 
int1 = 11 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 11, 13, 7]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 34
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 13                                                               # STEP 36
ACTION: int2 = 13 
int2 = 13 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 37
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a62f80> : <type 'instance'>
avl_REF0 = set([16, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([16, 11, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ab98c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a77cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 40 steps

SAVING TEST AS failure.388.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 1
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 18                                                                # STEP 2
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                  # STEP 3
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int2)                                                        # STEP 6
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int0 = 17                                                                # STEP 7
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 6                                                                # STEP 10
ACTION: int0 = 6 
int0 = 17 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 12
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 15
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 17
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 18
ACTION: avl0.delete(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 19
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int0 = 10                                                               # STEP 20
ACTION: int0 = 10 
int0 = 6 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 21
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 23
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 24
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 25
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 26
ACTION: result = avl0.find(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 14                                                               # STEP 27
ACTION: int0 = 14 
int0 = 10 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 28
ACTION: avl0.insert(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 2                                                                # STEP 29
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 31
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 2]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 32
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 2, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 17                                                               # STEP 35
ACTION: int1 = 17 
int1 = 2 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 36
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 37
ACTION: int2 = 9 
int2 = 18 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 18, 2, 14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a98d40> : <type 'instance'>
avl_REF0 = set([9, 18, 2, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([9, 18, 2]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a81518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #5 STEP #10 (0:00:30.042718) Fri Apr 28 06:14:22 2017 [ 160 stmts 214 branches ]
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
  11 [2:0]
-- < 10 [1:1]
---- < 5 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 17 [0:0] L
set([5, 10, 11, 12, 14, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b20560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.388.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                        # STEP 5
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int2 = 20                                                                # STEP 6
ACTION: int2 = 20 
int2 = 11 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 7
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                 # STEP 8
ACTION: result = avl2.find(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 17                                                                # STEP 9
ACTION: int0 = 17 
int0 = 10 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 12
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 13
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 14
ACTION: int1 = 6 
int1 = 8 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 15
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 17, 11]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
int0 = 10                                                               # STEP 18
ACTION: int0 = 10 
int0 = 17 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 19
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int3)                                                # STEP 21
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 25
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 26
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10, 6]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 28
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 29
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 10, 6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 31
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 32
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 33
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 11, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 34
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 36
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 37
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl1                                                            # STEP 40
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 42
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 43
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 5                                                                # STEP 44
ACTION: int2 = 5 
int2 = 20 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 46
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 11, 5]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 47
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 48
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int3)                                                # STEP 50
ACTION: result = avl2.find(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 10, 6]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 52
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 53
ACTION: int0 = 2 
int0 = 10 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 54
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 55
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 12                                                               # STEP 56
ACTION: int1 = 12 
int1 = 15 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 57
ACTION: avl1.delete(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2 == avl1                                                            # STEP 58
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int1)                                                       # STEP 59
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 60
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 61
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 62
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 8, 11, 12]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 63
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([16, 8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 2, 8, 11, 12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([16, 2, 8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 65
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 10, 2, 6]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 66
ACTION: int0 = 5 
int0 = 2 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 67
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 68
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([16, 2, 8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 2, 5, 8, 11, 12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 69
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([16, 2, 5, 8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103b20830> : <type 'instance'>
avl_REF2 = set([16, 2, 5, 8, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 5, 8, 11, 12]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 71
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x105021098> : <type 'instance'>
avl_REF1 = set([16, 10, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([10, 2, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105011dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 36
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.1773161888 TOTAL RUNTIME
8 EXECUTED
586 TOTAL TEST OPERATIONS
23.9229235649 TIME SPENT EXECUTING TEST OPERATIONS
0.0638127326965 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.0438156128 TIME SPENT CHECKING PROPERTIES
47.9667391777 TOTAL TIME SPENT RUNNING SUT
0.00442433357239 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
int2 = 16                                                                # STEP 1
int1 = 8                                                                 # STEP 2
int3 = 11                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int1)                                                        # STEP 5
avl0 == avl0                                                             # STEP 6
avl0.insert(int2)                                                        # STEP 7
int2 = 2                                                                 # STEP 8
avl0.delete(int2)                                                        # STEP 9
int1 = 19                                                               # STEP 10
result = avl0.find(int2)                                                # STEP 11
avl0.delete(int3)                                                       # STEP 12
int2 = 13                                                               # STEP 13
avl0.insert(int2)                                                       # STEP 14
avl0.delete(int1)                                                       # STEP 15
avl0.delete(int1)                                                       # STEP 16
avl0.insert(int0)                                                       # STEP 17
result = avl0.find(int0)                                                # STEP 18
avl0.delete(int3)                                                       # STEP 19
int1 = 11                                                               # STEP 20
avl0.delete(int0)                                                       # STEP 21
int0 = 19                                                               # STEP 22
avl0.insert(int3)                                                       # STEP 23
avl0.delete(int3)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.insert(int1)                                                       # STEP 26
int3 = 19                                                               # STEP 27
avl0.delete(int3)                                                       # STEP 28
avl0.insert(int1)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
int1 = 7                                                                # STEP 31
avl0.insert(int1)                                                       # STEP 32
result = avl0.find(int1)                                                # STEP 33
result = avl0.inorder()                                                 # STEP 34
avl0.insert(int2)                                                       # STEP 35
int2 = 13                                                               # STEP 36
avl0.delete(int2)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ab98c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
result = avl0.inorder()                                                  # STEP 1
int2 = 18                                                                # STEP 2
result = avl0.inorder()                                                  # STEP 3
avl0.insert(int2)                                                        # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.delete(int2)                                                        # STEP 6
int0 = 17                                                                # STEP 7
avl0.delete(int2)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
int0 = 6                                                                # STEP 10
avl0.insert(int0)                                                       # STEP 11
avl0.delete(int2)                                                       # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.insert(int2)                                                       # STEP 14
int1 = 18                                                               # STEP 15
avl0.insert(int0)                                                       # STEP 16
avl0.delete(int0)                                                       # STEP 17
avl0.delete(int0)                                                       # STEP 18
avl0.insert(int2)                                                       # STEP 19
int0 = 10                                                               # STEP 20
avl0.insert(int2)                                                       # STEP 21
avl0.delete(int0)                                                       # STEP 22
result = avl0.find(int2)                                                # STEP 23
avl0.delete(int0)                                                       # STEP 24
avl0.insert(int1)                                                       # STEP 25
result = avl0.find(int0)                                                # STEP 26
int0 = 14                                                               # STEP 27
avl0.insert(int1)                                                       # STEP 28
int1 = 2                                                                # STEP 29
avl0.delete(int0)                                                       # STEP 30
avl0.insert(int1)                                                       # STEP 31
avl0.insert(int0)                                                       # STEP 32
result = avl0.find(int1)                                                # STEP 33
avl0.insert(int1)                                                       # STEP 34
int1 = 17                                                               # STEP 35
result = avl0.find(int2)                                                # STEP 36
int2 = 9                                                                # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl0.delete(int0)                                                       # STEP 39
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a81518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 11                                                                # STEP 0
int1 = 8                                                                 # STEP 1
int3 = 8                                                                 # STEP 2
int0 = 10                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int2)                                                        # STEP 5
int2 = 20                                                                # STEP 6
result = avl2.find(int1)                                                 # STEP 7
result = avl2.find(int0)                                                 # STEP 8
int0 = 17                                                                # STEP 9
result = avl2.inorder()                                                 # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2.delete(int3)                                                       # STEP 12
avl2.insert(int3)                                                       # STEP 13
int1 = 6                                                                # STEP 14
int3 = 14                                                               # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
int0 = 10                                                               # STEP 18
avl2.delete(int2)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
result = avl2.find(int3)                                                # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl2.delete(int2)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl1 = avl.AVLTree()                                                    # STEP 25
avl1.insert(int0)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
int3 = 16                                                               # STEP 28
result = avl1.inorder()                                                 # STEP 29
avl1.insert(int3)                                                       # STEP 30
avl1.insert(int0)                                                       # STEP 31
avl1.insert(int3)                                                       # STEP 32
avl2.insert(int1)                                                       # STEP 33
avl2.insert(int1)                                                       # STEP 34
avl1.delete(int3)                                                       # STEP 35
avl2.delete(int0)                                                       # STEP 36
avl1.insert(int0)                                                       # STEP 37
result = avl2.inorder()                                                 # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl2 == avl1                                                            # STEP 40
avl1.delete(int2)                                                       # STEP 41
avl2.insert(int1)                                                       # STEP 42
result = avl2.find(int3)                                                # STEP 43
int2 = 5                                                                # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.insert(int2)                                                       # STEP 46
avl2.delete(int2)                                                       # STEP 47
int1 = 15                                                               # STEP 48
avl2.delete(int2)                                                       # STEP 49
result = avl2.find(int3)                                                # STEP 50
avl1.insert(int3)                                                       # STEP 51
int2 = 14                                                               # STEP 52
int0 = 2                                                                # STEP 53
avl2.delete(int2)                                                       # STEP 54
avl1.delete(int1)                                                       # STEP 55
int1 = 12                                                               # STEP 56
avl1.delete(int0)                                                       # STEP 57
avl2 == avl1                                                            # STEP 58
avl2.insert(int1)                                                       # STEP 59
avl1.delete(int2)                                                       # STEP 60
avl2.insert(int1)                                                       # STEP 61
avl2.insert(int3)                                                       # STEP 62
avl2.insert(int0)                                                       # STEP 63
avl2.delete(int2)                                                       # STEP 64
avl1.insert(int0)                                                       # STEP 65
int0 = 5                                                                # STEP 66
result = avl1.find(int2)                                                # STEP 67
avl2.insert(int0)                                                       # STEP 68
avl2.delete(int2)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
avl1.delete(int3)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105011dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
161 STATEMENTS COVERED

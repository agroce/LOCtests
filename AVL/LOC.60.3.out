Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99065.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([7, 9, 11, 16, 17, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([7, 9, 11, 16, 17, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([7, 9, 11, 16, 17, 20])
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([7, 9, 11, 16, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c3b3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 62 steps

SAVING TEST AS failure.99065.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 1
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 3
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 20]) : <type 'set'>
==================================================
int3 = 16                                                                # STEP 8
ACTION: int3 = 16 
int3 = 9 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 10
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 20]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 11
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([16, 9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([16, 9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int0)                                                # STEP 13
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([16, 9, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 11                                                               # STEP 14
ACTION: int1 = 11 
int1 = 20 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([16, 9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([9, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 17                                                               # STEP 17
ACTION: int2 = 17 
int2 = 1 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 18
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 7                                                                # STEP 19
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 20
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 21
ACTION: avl0.delete(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 22
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 20, 7]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 24
ACTION: result = avl2.find(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 25
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 20, 17, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 29
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([9, 20, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([16, 9, 20, 17, 7]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 31
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([16, 9, 20, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 32
ACTION: int1 = 14 
int1 = 11 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 33
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 16, 17, 20])
==================================================
int0 = 15                                                               # STEP 34
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 35
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 16, 17, 20])
==================================================
avl2.display()                                                          # STEP 36
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 16, 17, 20])
==================================================
avl2.display()                                                          # STEP 37
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
  16 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([7, 9, 11, 16, 17, 20])
==================================================
int2 = 4                                                                # STEP 38
ACTION: int2 = 4 
int2 = 17 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 41
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 42
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 43
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 44
ACTION: int3 = 14 
int3 = 16 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 48
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([7, 9, 11, 16, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4, 7, 9, 11, 16, 17, 20]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 50
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x104f3ae18> : <type 'instance'>
avl_REF2 = set([4, 7, 9, 11, 16, 17, 20]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x104f395a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 51
ACTION: int3 = 6 
int3 = 14 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 52
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f395a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 53
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f395a8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 54
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f395a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 55
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 4, 14]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 4, 6, 14]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 57
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 58
ACTION: int0 = 14 
int0 = 15 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 59
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 61
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104c5eb00> : <type 'instance'>
avl_REF0 = set([17, 4, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([17, 4, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f346c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104aa14d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 94 steps

SAVING TEST AS failure.99065.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 1
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                             # STEP 2
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 4
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                             # STEP 6
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 2                                                                 # STEP 8
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 9
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 10
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int1)                                                # STEP 11
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 13
ACTION: int0 = 9 
int0 = 6 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 2]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 18
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9, 2]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 21
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 23
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int1 = 19                                                               # STEP 24
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 25
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 6                                                                # STEP 26
ACTION: int0 = 6 
int0 = 9 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 28
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 18                                                               # STEP 29
ACTION: int2 = 18 
int2 = 4 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 2, 6]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([1, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 35
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([1, 2, 18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 2, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 36
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([1, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 18]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 38
ACTION: avl2.delete(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 39
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 14                                                               # STEP 40
ACTION: int2 = 14 
int2 = 18 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 41
ACTION: int0 = 3 
int0 = 6 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 43
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int1)                                                       # STEP 44
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int3 = 16                                                               # STEP 45
ACTION: int3 = 16 
int3 = 1 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 46
ACTION: int1 = 10 
int1 = 19 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 48
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 49
ACTION: avl2.insert(int1) 
int1 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 10, 18]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 51
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 19                                                               # STEP 52
ACTION: int1 = 19 
int1 = 10 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 53
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 54
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 55
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 57
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 58
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 59
ACTION: avl2.insert(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 10, 16, 18]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 60
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 61
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 10, 14, 16, 18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 62
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 10, 16, 18]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 10, 18]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 65
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
result = avl0.inorder()                                                 # STEP 66
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 18, 14]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 68
ACTION: int3 = 6 
int3 = 16 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 69
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 70
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 71
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 18, 6, 14]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 72
ACTION: result = avl2.find(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 2                                                                # STEP 73
ACTION: int1 = 2 
int1 = 14 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 74
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 3, 6, 10, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 75
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 76
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int3)                                                # STEP 77
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 6, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 78
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 79
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 6, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 18, 14]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 80
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 81
ACTION: int3 = 13 
int3 = 6 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 82
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 83
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 84
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 3, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 85
ACTION: avl0.insert(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 18, 3, 14]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 86
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 87
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 88
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 14                                                               # STEP 89
ACTION: int2 = 14 
int2 = 10 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 90
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 18, 3, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 3, 4, 14, 18]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 91
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 92
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104f452d8> : <type 'instance'>
avl_REF2 = set([2, 6, 10, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 93
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ab2908> : <type 'instance'>
avl_REF0 = set([1, 3, 4, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 3, 4, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105836f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #74 (0:00:30.045667) Fri Apr 28 03:20:15 2017 [ 159 stmts 210 branches ]
  6 [2:0]
-- < 3 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 19 [0:0] L
set([1, 3, 6, 9, 15, 19])
  10 [2:0]
-- < 5 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 12 [1:-1]
---- > 18 [0:0] L
set([3, 5, 8, 10, 12, 18])
  8 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([1, 5, 8, 15, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a9d5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 77 steps

SAVING TEST AS failure.99065.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 1                                                                 # STEP 0
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 16                                                                # STEP 1
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int1 = 5                                                                 # STEP 3
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                                # STEP 6
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 8
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
avl1 == avl0                                                             # STEP 9
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 11
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 12
ACTION: avl0.insert(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 13
ACTION: avl1.insert(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int2 = 8                                                                # STEP 14
ACTION: int2 = 8 
int2 = 16 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 16
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 1]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 17
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 18
ACTION: int3 = 4 
int3 = 19 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 19
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 1, 4]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 20
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 5                                                                # STEP 21
ACTION: int3 = 5 
int3 = 4 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 22
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 1, 19]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 24
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int0)                                                       # STEP 25
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 12                                                               # STEP 26
ACTION: int2 = 12 
int2 = 8 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 1, 19, 5]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 29
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 5                                                                # STEP 31
ACTION: int1 = 5 
int1 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 32
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 1, 19, 4, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 33
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8, 1, 19, 5]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 35
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 1, 4, 5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 38
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl0.find(int1)                                                # STEP 39
ACTION: result = avl0.find(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 12                                                               # STEP 40
ACTION: int3 = 12 
int3 = 5 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 41
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int1 = 9                                                                # STEP 42
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 43
ACTION: int2 = 20 
int2 = 12 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([8, 1, 19, 12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 8, 12, 19, 20]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 45
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 46
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 12, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 5, 8, 19, 20]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 47
ACTION: int3 = 11 
int3 = 12 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 48
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 49
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 51
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 52
ACTION: avl1.delete(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 5, 8, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 54
ACTION: int0 = 15 
int0 = 4 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 55
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 56
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 57
ACTION: avl1.delete(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 58
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 59
ACTION: avl0.insert(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 1, 4, 5, 9]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 60
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                               # STEP 61
ACTION: int3 = 18 
int3 = 11 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 15                                                               # STEP 63
ACTION: int1 = 15 
int1 = 9 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 64
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 4, 5, 8, 15, 19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 65
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 66
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 4, 5, 8, 15, 18, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 67
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int3 = 4                                                                # STEP 68
ACTION: int3 = 4 
int3 = 18 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 69
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 4, 5, 8, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 5, 8, 15, 18, 19]) : <type 'set'>
==================================================
avl1.display()                                                          # STEP 70
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 15, 18, 19]) : <type 'set'>
  8 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([1, 5, 8, 15, 18, 19])
==================================================
avl0.delete(int0)                                                       # STEP 71
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 2                                                                # STEP 72
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 73
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104aae5a8> : <type 'instance'>
avl_REF1 = set([1, 5, 8, 15, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int0)                                                       # STEP 74
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([16, 1, 4, 5, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2, 4, 5, 9, 16]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 75
ACTION: avl0.insert(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([1, 2, 4, 5, 9, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2, 4, 5, 9, 15, 16]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 76
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a9dd88> : <type 'instance'>
avl_REF0 = set([1, 2, 4, 5, 9, 15, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 4, 5, 9, 15, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e29560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 9
STOPPING TESTING DUE TO TIMEOUT
8.45213849287 PERCENT COVERED
60.2051110268 TOTAL RUNTIME
7 EXECUTED
542 TOTAL TEST OPERATIONS
20.9069604874 TIME SPENT EXECUTING TEST OPERATIONS
0.0612871646881 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.1039812565 TIME SPENT CHECKING PROPERTIES
42.0109417439 TOTAL TIME SPENT RUNNING SUT
0.0045120716095 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 20                                                                # STEP 0
int2 = 1                                                                 # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 3                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.insert(int1)                                                        # STEP 7
int3 = 16                                                                # STEP 8
avl2.delete(int3)                                                        # STEP 9
avl2.insert(int3)                                                       # STEP 10
avl2.delete(int0)                                                       # STEP 11
avl2.delete(int0)                                                       # STEP 12
result = avl2.find(int0)                                                # STEP 13
int1 = 11                                                               # STEP 14
avl2.delete(int3)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
int2 = 17                                                               # STEP 17
avl2.delete(int1)                                                       # STEP 18
int0 = 7                                                                # STEP 19
avl0 = avl.AVLTree()                                                    # STEP 20
avl0.delete(int0)                                                       # STEP 21
avl2.delete(int0)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
result = avl2.find(int2)                                                # STEP 24
result = avl2.inorder()                                                 # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
avl2.insert(int3)                                                       # STEP 29
avl0.delete(int3)                                                       # STEP 30
avl2.insert(int1)                                                       # STEP 31
int1 = 14                                                               # STEP 32
avl2.display()                                                          # STEP 33
int0 = 15                                                               # STEP 34
avl2.display()                                                          # STEP 35
avl2.display()                                                          # STEP 36
avl2.display()                                                          # STEP 37
int2 = 4                                                                # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl0.delete(int0)                                                       # STEP 41
avl0.insert(int0)                                                       # STEP 42
avl0.delete(int0)                                                       # STEP 43
int3 = 14                                                               # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.delete(int2)                                                       # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl2.delete(int1)                                                       # STEP 48
avl2.insert(int2)                                                       # STEP 49
avl2 = avl.AVLTree()                                                    # STEP 50
int3 = 6                                                                # STEP 51
avl2.insert(int1)                                                       # STEP 52
avl2.delete(int1)                                                       # STEP 53
avl2.insert(int2)                                                       # STEP 54
avl0.insert(int2)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
int3 = 14                                                               # STEP 57
int0 = 14                                                               # STEP 58
result = avl0.find(int1)                                                # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl0.delete(int0)                                                       # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f346c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
result = avl2.inorder()                                                  # STEP 1
avl2 == avl2                                                             # STEP 2
int1 = 13                                                                # STEP 3
avl2.delete(int1)                                                        # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2 == avl2                                                             # STEP 6
avl2.delete(int1)                                                        # STEP 7
int2 = 2                                                                 # STEP 8
int0 = 6                                                                 # STEP 9
result = avl2.find(int0)                                                # STEP 10
result = avl2.find(int1)                                                # STEP 11
avl2.insert(int2)                                                       # STEP 12
int0 = 9                                                                # STEP 13
result = avl2.find(int1)                                                # STEP 14
avl2.insert(int0)                                                       # STEP 15
int2 = 4                                                                # STEP 16
avl2.delete(int0)                                                       # STEP 17
int3 = 1                                                                # STEP 18
avl2.insert(int0)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.delete(int0)                                                       # STEP 21
avl2.delete(int1)                                                       # STEP 22
result = avl2.find(int2)                                                # STEP 23
int1 = 19                                                               # STEP 24
result = avl2.find(int3)                                                # STEP 25
int0 = 6                                                                # STEP 26
avl2.delete(int0)                                                       # STEP 27
avl0 = avl.AVLTree()                                                    # STEP 28
int2 = 18                                                               # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl0.insert(int2)                                                       # STEP 33
avl2.insert(int2)                                                       # STEP 34
avl2.delete(int0)                                                       # STEP 35
avl0.insert(int3)                                                       # STEP 36
avl2.delete(int3)                                                       # STEP 37
avl2.delete(int0)                                                       # STEP 38
avl0.insert(int1)                                                       # STEP 39
int2 = 14                                                               # STEP 40
int0 = 3                                                                # STEP 41
avl0.insert(int3)                                                       # STEP 42
avl0.insert(int3)                                                       # STEP 43
avl0.insert(int1)                                                       # STEP 44
int3 = 16                                                               # STEP 45
int1 = 10                                                               # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl0.delete(int3)                                                       # STEP 48
avl2.insert(int1)                                                       # STEP 49
avl0.delete(int2)                                                       # STEP 50
result = avl2.inorder()                                                 # STEP 51
int1 = 19                                                               # STEP 52
avl2.delete(int0)                                                       # STEP 53
avl0.delete(int1)                                                       # STEP 54
avl2.delete(int3)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl0.delete(int1)                                                       # STEP 57
avl2.delete(int0)                                                       # STEP 58
avl2.insert(int3)                                                       # STEP 59
result = avl0.find(int1)                                                # STEP 60
avl2.insert(int2)                                                       # STEP 61
avl2.delete(int2)                                                       # STEP 62
avl0.delete(int0)                                                       # STEP 63
avl2.delete(int3)                                                       # STEP 64
result = avl0.inorder()                                                 # STEP 65
result = avl0.inorder()                                                 # STEP 66
avl0.insert(int2)                                                       # STEP 67
int3 = 6                                                                # STEP 68
int1 = 14                                                               # STEP 69
avl2.insert(int3)                                                       # STEP 70
avl0.insert(int3)                                                       # STEP 71
result = avl2.find(int1)                                                # STEP 72
int1 = 2                                                                # STEP 73
avl2.insert(int0)                                                       # STEP 74
avl2.insert(int1)                                                       # STEP 75
result = avl2.inorder()                                                 # STEP 76
result = avl0.find(int3)                                                # STEP 77
avl2.insert(int0)                                                       # STEP 78
avl0.delete(int3)                                                       # STEP 79
int1 = 4                                                                # STEP 80
int3 = 13                                                               # STEP 81
int2 = 10                                                               # STEP 82
avl0.delete(int3)                                                       # STEP 83
avl2.delete(int0)                                                       # STEP 84
avl0.insert(int0)                                                       # STEP 85
int3 = 8                                                                # STEP 86
int0 = 13                                                               # STEP 87
avl2.insert(int2)                                                       # STEP 88
int2 = 14                                                               # STEP 89
avl0.insert(int1)                                                       # STEP 90
int1 = 18                                                               # STEP 91
avl2.delete(int3)                                                       # STEP 92
avl0.delete(int2)                                                       # STEP 93
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105836f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int0 = 1                                                                 # STEP 0
int2 = 16                                                                # STEP 1
int3 = 8                                                                 # STEP 2
int1 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
int3 = 19                                                                # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
avl1.insert(int3)                                                        # STEP 8
avl1 == avl0                                                             # STEP 9
avl0.delete(int1)                                                       # STEP 10
result = avl0.inorder()                                                 # STEP 11
avl0.insert(int2)                                                       # STEP 12
avl1.insert(int3)                                                       # STEP 13
int2 = 8                                                                # STEP 14
avl1.insert(int0)                                                       # STEP 15
avl0.insert(int0)                                                       # STEP 16
int0 = 4                                                                # STEP 17
int3 = 4                                                                # STEP 18
avl0.insert(int3)                                                       # STEP 19
result = avl0.find(int3)                                                # STEP 20
int3 = 5                                                                # STEP 21
avl1.insert(int2)                                                       # STEP 22
avl0.delete(int3)                                                       # STEP 23
result = avl0.inorder()                                                 # STEP 24
avl1.delete(int0)                                                       # STEP 25
int2 = 12                                                               # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.delete(int2)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
int1 = 5                                                                # STEP 31
avl1.insert(int0)                                                       # STEP 32
avl1.delete(int0)                                                       # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl1 == avl1                                                            # STEP 35
avl1 == avl1                                                            # STEP 36
avl0.insert(int3)                                                       # STEP 37
avl1.delete(int0)                                                       # STEP 38
result = avl0.find(int1)                                                # STEP 39
int3 = 12                                                               # STEP 40
avl1.insert(int2)                                                       # STEP 41
int1 = 9                                                                # STEP 42
int2 = 20                                                               # STEP 43
avl1.insert(int2)                                                       # STEP 44
result = avl1.inorder()                                                 # STEP 45
avl1.delete(int3)                                                       # STEP 46
int3 = 11                                                               # STEP 47
avl1.delete(int0)                                                       # STEP 48
result = avl1.find(int0)                                                # STEP 49
avl0.insert(int0)                                                       # STEP 50
avl1.delete(int3)                                                       # STEP 51
avl1.delete(int2)                                                       # STEP 52
avl1.insert(int0)                                                       # STEP 53
int0 = 15                                                               # STEP 54
avl1.delete(int3)                                                       # STEP 55
avl1.delete(int1)                                                       # STEP 56
avl1.delete(int1)                                                       # STEP 57
result = avl1.inorder()                                                 # STEP 58
avl0.insert(int1)                                                       # STEP 59
avl1.delete(int3)                                                       # STEP 60
int3 = 18                                                               # STEP 61
result = avl0.inorder()                                                 # STEP 62
int1 = 15                                                               # STEP 63
avl1.insert(int1)                                                       # STEP 64
avl0.delete(int1)                                                       # STEP 65
avl1.insert(int3)                                                       # STEP 66
avl1.insert(int1)                                                       # STEP 67
int3 = 4                                                                # STEP 68
avl1.delete(int3)                                                       # STEP 69
avl1.display()                                                          # STEP 70
avl0.delete(int0)                                                       # STEP 71
int0 = 2                                                                # STEP 72
result = avl1.inorder()                                                 # STEP 73
avl0.insert(int0)                                                       # STEP 74
avl0.insert(int1)                                                       # STEP 75
avl0.delete(int0)                                                       # STEP 76
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e29560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

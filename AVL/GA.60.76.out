Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14762.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b919e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.14762.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 2
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 19 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int0 = 5                                                                # STEP 10
ACTION: int0 = 5 
int0 = 9 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 11
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 2]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 13
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 14
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 15
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 16
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 17
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 19
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 7                                                                # STEP 20
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 21
ACTION: int1 = 8 
int1 = 9 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 22
ACTION: result = avl2.find(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 23
ACTION: int3 = 7 
int3 = 9 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 25
ACTION: int3 = 17 
int3 = 7 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 26
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 29
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 30
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 9, 2]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 31
ACTION: int0 = 11 
int0 = 5 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 32
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 34
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 35
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 36
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 4                                                                # STEP 37
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 39
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 41
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 43
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 4                                                                # STEP 44
ACTION: int3 = 4 
int3 = 17 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 45
ACTION: avl1 == avl0 
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1 == avl1                                                            # STEP 46
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 6                                                                # STEP 47
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 48
ACTION: int1 = 15 
int1 = 16 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 50
ACTION: result = avl2.find(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 51
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 9, 2, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 53
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 54
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0 == avl2                                                            # STEP 55
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
avl_REF2 = set([8, 9, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
int2 = 13                                                               # STEP 56
ACTION: int2 = 13 
int2 = 1 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 57
ACTION: avl1.delete(int3) 
int3 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 6                                                                # STEP 58
ACTION: int0 = 6 
int0 = 6 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 59
ACTION: int3 = 11 
int3 = 4 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 60
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 4, 6]) : <type 'set'>
==================================================
avl0 == avl1                                                            # STEP 62
ACTION: avl0 == avl1 
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF0 = set([17, 4, 6]) : <type 'set'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int0 = 1                                                                # STEP 63
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 64
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([17, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 65
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([17, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 4, 13, 6]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 66
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 9, 2, 13, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101f15908> : <type 'instance'>
avl_REF0 = set([17, 4, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 68
ACTION: result = avl1.find(int0) 
int0 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int2 = 17                                                               # STEP 69
ACTION: int2 = 17 
int2 = 13 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 70
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 71
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([8, 9, 2, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 6, 8, 9, 13, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 72
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 9, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 73
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 9, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 8, 9, 11, 13, 15]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 74
ACTION: int3 = 2 
int3 = 11 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 75
ACTION: int2 = 11 
int2 = 17 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 76
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101f15c20> : <type 'instance'>
avl_REF1 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 11]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 77
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 78
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 9, 11, 13, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 79
ACTION: avl2.delete(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c7f830> : <type 'instance'>
avl_REF2 = set([2, 6, 8, 9, 11, 13, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 6, 8, 9, 11, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e39488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:38.517534) Sun Apr 30 04:56:36 2017 [ 147 stmts 194 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101c102d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 82 steps

SAVING TEST AS failure.14762.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 17                                                                # STEP 0
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 2
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101c10560> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 16                                                                # STEP 4
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c10560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c10560> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([7]) : <type 'set'>
==================================================
int1 = 11                                                                # STEP 7
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 8
ACTION: result = avl2.find(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c10560> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 = avl.AVLTree()                                                     # STEP 9
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 10
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101c10560> : <type 'instance'>
avl_REF2 = set([7]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 11
ACTION: int0 = 5 
int0 = 17 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 12
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl1.inorder()                                                 # STEP 13
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 == avl1                                                            # STEP 14
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 15
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 16
ACTION: result = avl1.find(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 18
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 19
ACTION: result = avl2.find(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 20
ACTION: int3 = 3 
int3 = 17 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 21
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 22
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 23
ACTION: int3 = 10 
int3 = 3 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 24
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 7                                                                # STEP 28
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 13                                                               # STEP 29
ACTION: int0 = 13 
int0 = 6 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 30
ACTION: int3 = 1 
int3 = 10 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 31
ACTION: int2 = 15 
int2 = 16 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 32
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 33
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 5                                                                # STEP 34
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 35
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 5, 6, 7]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 36
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 37
ACTION: result = avl1.find(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 38
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 39
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int3)                                                       # STEP 40
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 13, 5, 6, 7]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 43
ACTION: result = avl1.find(int0) 
int0 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 44
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 6                                                                # STEP 45
ACTION: int3 = 6 
int3 = 17 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 46
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 47
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 13]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 49
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 50
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 51
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int3)                                                # STEP 52
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 5                                                                # STEP 53
ACTION: int1 = 5 
int1 = 2 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 54
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 56
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([11, 13, 7]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2 == avl1                                                            # STEP 59
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF2 = set([11, 13, 7]) : <type 'set'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 19                                                               # STEP 61
ACTION: int0 = 19 
int0 = 7 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 62
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 19                                                               # STEP 63
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 64
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 65
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 3                                                                # STEP 66
ACTION: int1 = 3 
int1 = 5 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 67
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 68
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 5, 13, 7]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 69
ACTION: int3 = 16 
int3 = 5 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 70
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
avl_REF2 = set([11, 5, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2 == avl1                                                            # STEP 71
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF2 = set([11, 5, 13, 7]) : <type 'set'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 72
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([11, 5, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([15, 11, 5, 13, 7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 73
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 17                                                               # STEP 74
ACTION: int2 = 17 
int2 = 15 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 75
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x101e37950> : <type 'instance'>
avl_REF2 = set([15, 11, 5, 13, 7]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1029877a0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 76
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029877a0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 77
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1029877a0> : <type 'instance'>
avl_REF2 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 78
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 13, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 5, 6, 13, 19]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 79
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 80
ACTION: int0 = 1 
int0 = 19 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 81
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e37638> : <type 'instance'>
avl_REF1 = set([3, 5, 6, 13, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 6, 13, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10296d638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.84508440914 PERCENT COVERED
67.2289159298 TOTAL RUNTIME
6 EXECUTED
462 TOTAL TEST OPERATIONS
24.7632815838 TIME SPENT EXECUTING TEST OPERATIONS
0.0177774429321 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.9489040375 TIME SPENT CHECKING PROPERTIES
49.7121856213 TOTAL TIME SPENT RUNNING SUT
0.00470423698425 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 2                                                                 # STEP 0
int1 = 19                                                                # STEP 1
int3 = 9                                                                 # STEP 2
int0 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.insert(int0)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
avl2.insert(int0)                                                        # STEP 8
result = avl2.find(int1)                                                 # STEP 9
int0 = 5                                                                # STEP 10
int1 = 9                                                                # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2 == avl2                                                            # STEP 13
avl0 = avl.AVLTree()                                                    # STEP 14
avl1 = avl.AVLTree()                                                    # STEP 15
avl2 == avl1                                                            # STEP 16
avl1 == avl1                                                            # STEP 17
avl2.insert(int2)                                                       # STEP 18
result = avl2.find(int1)                                                # STEP 19
int2 = 7                                                                # STEP 20
int1 = 8                                                                # STEP 21
result = avl2.find(int3)                                                # STEP 22
int3 = 7                                                                # STEP 23
avl1.insert(int3)                                                       # STEP 24
int3 = 17                                                               # STEP 25
result = avl2.find(int1)                                                # STEP 26
result = avl2.find(int1)                                                # STEP 27
result = avl2.find(int1)                                                # STEP 28
result = avl2.find(int0)                                                # STEP 29
avl2.insert(int1)                                                       # STEP 30
int0 = 11                                                               # STEP 31
avl1 == avl0                                                            # STEP 32
avl1.delete(int2)                                                       # STEP 33
int1 = 16                                                               # STEP 34
avl0 == avl1                                                            # STEP 35
avl0.delete(int2)                                                       # STEP 36
int2 = 4                                                                # STEP 37
avl0.insert(int2)                                                       # STEP 38
int2 = 1                                                                # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl0.insert(int3)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
avl1.delete(int0)                                                       # STEP 43
int3 = 4                                                                # STEP 44
avl1 == avl0                                                            # STEP 45
avl1 == avl1                                                            # STEP 46
int0 = 6                                                                # STEP 47
int1 = 15                                                               # STEP 48
result = avl0.find(int3)                                                # STEP 49
result = avl2.find(int3)                                                # STEP 50
avl2.insert(int0)                                                       # STEP 51
avl1.insert(int2)                                                       # STEP 52
result = avl1.find(int2)                                                # STEP 53
result = avl2.find(int2)                                                # STEP 54
avl0 == avl2                                                            # STEP 55
int2 = 13                                                               # STEP 56
avl1.delete(int3)                                                       # STEP 57
int0 = 6                                                                # STEP 58
int3 = 11                                                               # STEP 59
avl2 == avl2                                                            # STEP 60
avl0.insert(int0)                                                       # STEP 61
avl0 == avl1                                                            # STEP 62
int0 = 1                                                                # STEP 63
result = avl0.find(int2)                                                # STEP 64
avl0.insert(int2)                                                       # STEP 65
avl2.insert(int2)                                                       # STEP 66
avl0.delete(int1)                                                       # STEP 67
result = avl1.find(int0)                                                # STEP 68
int2 = 17                                                               # STEP 69
avl1.delete(int2)                                                       # STEP 70
avl2.insert(int1)                                                       # STEP 71
avl2.delete(int0)                                                       # STEP 72
avl2.insert(int3)                                                       # STEP 73
int3 = 2                                                                # STEP 74
int2 = 11                                                               # STEP 75
avl1.insert(int2)                                                       # STEP 76
int0 = 2                                                                # STEP 77
result = avl2.find(int3)                                                # STEP 78
avl2.delete(int1)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e39488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int3 = 17                                                                # STEP 0
int0 = 17                                                                # STEP 1
int1 = 7                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int2 = 16                                                                # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl2.insert(int1)                                                        # STEP 6
int1 = 11                                                                # STEP 7
result = avl2.find(int0)                                                 # STEP 8
avl1 = avl.AVLTree()                                                     # STEP 9
avl2 = avl.AVLTree()                                                    # STEP 10
int0 = 5                                                                # STEP 11
avl2 == avl2                                                            # STEP 12
result = avl1.inorder()                                                 # STEP 13
avl2 == avl1                                                            # STEP 14
avl1.insert(int0)                                                       # STEP 15
result = avl1.find(int0)                                                # STEP 16
avl2.insert(int1)                                                       # STEP 17
int1 = 19                                                               # STEP 18
result = avl2.find(int3)                                                # STEP 19
int3 = 3                                                                # STEP 20
int0 = 6                                                                # STEP 21
avl1.insert(int3)                                                       # STEP 22
int3 = 10                                                               # STEP 23
result = avl2.find(int3)                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
result = avl2.find(int1)                                                # STEP 27
int1 = 7                                                                # STEP 28
int0 = 13                                                               # STEP 29
int3 = 1                                                                # STEP 30
int2 = 15                                                               # STEP 31
avl2.delete(int3)                                                       # STEP 32
result = avl1.inorder()                                                 # STEP 33
int3 = 5                                                                # STEP 34
avl1.insert(int1)                                                       # STEP 35
int1 = 2                                                                # STEP 36
result = avl1.find(int3)                                                # STEP 37
int3 = 17                                                               # STEP 38
result = avl1.inorder()                                                 # STEP 39
avl1.delete(int3)                                                       # STEP 40
avl2.delete(int0)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
result = avl1.find(int0)                                                # STEP 43
result = avl2.inorder()                                                 # STEP 44
int3 = 6                                                                # STEP 45
result = avl2.inorder()                                                 # STEP 46
result = avl2.find(int0)                                                # STEP 47
avl2.insert(int0)                                                       # STEP 48
int0 = 7                                                                # STEP 49
result = avl2.find(int3)                                                # STEP 50
result = avl2.find(int1)                                                # STEP 51
result = avl2.find(int3)                                                # STEP 52
int1 = 5                                                                # STEP 53
avl1.insert(int0)                                                       # STEP 54
avl1.delete(int0)                                                       # STEP 55
avl2.delete(int3)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
result = avl1.find(int0)                                                # STEP 58
avl2 == avl1                                                            # STEP 59
result = avl1.inorder()                                                 # STEP 60
int0 = 19                                                               # STEP 61
avl2 == avl2                                                            # STEP 62
int3 = 19                                                               # STEP 63
avl1.delete(int3)                                                       # STEP 64
avl2.delete(int1)                                                       # STEP 65
int1 = 3                                                                # STEP 66
int3 = 5                                                                # STEP 67
avl2.insert(int3)                                                       # STEP 68
int3 = 16                                                               # STEP 69
avl1 == avl2                                                            # STEP 70
avl2 == avl1                                                            # STEP 71
avl2.insert(int2)                                                       # STEP 72
avl1.delete(int0)                                                       # STEP 73
int2 = 17                                                               # STEP 74
avl2 = avl.AVLTree()                                                    # STEP 75
avl2.insert(int0)                                                       # STEP 76
avl2.insert(int2)                                                       # STEP 77
avl1.insert(int0)                                                       # STEP 78
int2 = 3                                                                # STEP 79
int0 = 1                                                                # STEP 80
avl1.delete(int1)                                                       # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10296d638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
194 BRANCHES COVERED
147 STATEMENTS COVERED

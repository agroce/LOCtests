Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.47641.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([2, 8, 13, 14, 15, 16])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 16 [1:1]
---- < 15 [0:0] L
set([2, 8, 13, 14, 15, 16])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([2, 8, 13, 14, 15, 16, 17])
  13 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 7, 13, 15, 16])
  14 [2:0]
-- < 8 [1:0]
---- < 2 [0:0] L
---- > 13 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([2, 8, 13, 14, 15, 16, 17])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 15 [1:-1]
---- > 16 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16, 17])
  13 [3:1]
-- < 3 [2:-1]
---- < 2 [0:0] L
---- > 7 [1:0]
------ < 5 [0:0] L
------ > 11 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 17 [0:0] L
set([2, 3, 5, 7, 11, 13, 15, 16, 17])
TEST #4 STEP #41 (0:00:30.059773) Mon May  1 03:26:14 2017 [ 125 stmts 168 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1022a4488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 25 steps

SAVING TEST AS failure.47641.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 4                                                                 # STEP 0
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 1
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 3
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = 13 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 8
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 10
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 11
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 18, 13]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 13
ACTION: int2 = 5 
int2 = 2 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 14
ACTION: int0 = 9 
int0 = 16 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 15
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 16
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 17
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int1 = 13                                                               # STEP 18
ACTION: int1 = 13 
int1 = 18 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 19
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 16                                                               # STEP 20
ACTION: int0 = 16 
int0 = 9 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 22
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 18, 13, 5]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c685a8> : <type 'instance'>
avl_REF2 = set([16, 18, 13, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18, 13, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101fbd4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 27
STOPPING TESTING DUE TO TIMEOUT
8.15199740175 PERCENT COVERED
60.2201330662 TOTAL RUNTIME
8 EXECUTED
652 TOTAL TEST OPERATIONS
28.7742528915 TIME SPENT EXECUTING TEST OPERATIONS
0.0727190971375 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.9819974899 TIME SPENT CHECKING PROPERTIES
57.7562503815 TOTAL TIME SPENT RUNNING SUT
0.00422883033752 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 4                                                                 # STEP 0
int1 = 13                                                                # STEP 1
int0 = 16                                                                # STEP 2
int2 = 2                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
int1 = 18                                                                # STEP 6
avl2.insert(int0)                                                        # STEP 7
avl2.delete(int0)                                                        # STEP 8
avl2.insert(int1)                                                        # STEP 9
avl2.delete(int0)                                                       # STEP 10
avl2.delete(int2)                                                       # STEP 11
avl2.insert(int0)                                                       # STEP 12
int2 = 5                                                                # STEP 13
int0 = 9                                                                # STEP 14
result = avl2.inorder()                                                 # STEP 15
avl2.delete(int3)                                                       # STEP 16
avl2.insert(int1)                                                       # STEP 17
int1 = 13                                                               # STEP 18
avl2.delete(int0)                                                       # STEP 19
int0 = 16                                                               # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl2.insert(int1)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101fbd4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
197 BRANCHES COVERED
149 STATEMENTS COVERED

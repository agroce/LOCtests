Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99683.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 11 [0:0] L
set([2, 3, 6, 7, 8, 11, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103b36680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 78 steps

SAVING TEST AS failure.99683.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 5                                                                 # STEP 0
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 3
ACTION: result = avl1.find(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 5
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 6
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 4                                                                 # STEP 7
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 8
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 10
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 11
ACTION: int2 = 2 
int2 = 4 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 12
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 8                                                                # STEP 14
ACTION: int0 = 8 
int0 = 4 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 15
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 16
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 6                                                                # STEP 17
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 18
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 20
ACTION: int0 = 9 
int0 = 8 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 21
ACTION: result = avl1.find(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 4                                                                # STEP 22
ACTION: int0 = 4 
int0 = 9 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 19                                                               # STEP 24
ACTION: int2 = 19 
int2 = 7 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 25
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 27
ACTION: int3 = 19 
int3 = 6 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 29
ACTION: int0 = 18 
int0 = 4 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 31
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 19]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 32
ACTION: int2 = 11 
int2 = 19 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 33
ACTION: int0 = 3 
int0 = 18 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 19, 6]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 11, 19, 6]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 36
ACTION: int1 = 2 
int1 = 6 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 37
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 38
ACTION: result = avl1.find(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.find(int2)                                                # STEP 39
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 4                                                                # STEP 40
ACTION: int2 = 4 
int2 = 18 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 41
ACTION: avl1.insert(int1) 
int1 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([8, 11, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 6, 8, 11, 19]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 42
ACTION: int3 = 15 
int3 = 19 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 43
ACTION: int1 = 7 
int1 = 2 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 44
ACTION: avl1.insert(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 6, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 6, 8, 11, 15, 19]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 45
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 46
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 6, 8, 11, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 47
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 6, 8, 11, 15, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 48
ACTION: int2 = 1 
int2 = 4 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 6, 8, 11, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 6, 7, 8, 11, 15, 19]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 6, 7, 8, 11, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 3, 6, 7, 8, 11, 15, 19]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 51
ACTION: int0 = 14 
int0 = 3 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 52
ACTION: int1 = 3 
int1 = 7 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 53
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 15, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 54
ACTION: int3 = 13 
int3 = 15 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 55
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 56
ACTION: int2 = 1 
int2 = 1 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 57
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 58
ACTION: int0 = 16 
int0 = 14 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 59
ACTION: result = avl1.find(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 8                                                                # STEP 60
ACTION: int1 = 8 
int1 = 3 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 61
ACTION: result = avl1.find(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 62
ACTION: int2 = 1 
int2 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 63
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.display()                                                          # STEP 64
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
  8 [3:1]
-- < 6 [2:1]
---- < 2 [1:-1]
------ > 3 [0:0] L
---- > 7 [0:0] L
-- > 19 [1:1]
---- < 11 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([2, 3, 6, 7, 8, 11, 19])
==================================================
avl1.delete(int2)                                                       # STEP 65
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 6                                                                # STEP 66
ACTION: int2 = 6 
int2 = 1 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 67
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e94f80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 68
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 69
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0 == avl1                                                            # STEP 70
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x103e94f80> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int1 = 10                                                               # STEP 71
ACTION: int1 = 10 
int1 = 8 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 72
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e94f80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 73
ACTION: int3 = 18 
int3 = 13 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 74
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 75
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103e94f80> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 6]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 76
ACTION: int3 = 8 
int3 = 18 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 77
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c20488> : <type 'instance'>
avl_REF1 = set([2, 3, 6, 7, 8, 11, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 3, 6, 7, 11, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #30 (0:00:30.017293) Fri Apr 28 04:37:38 2017 [ 155 stmts 205 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e9d2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 34 steps

SAVING TEST AS failure.99683.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 2                                                                 # STEP 0
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 2
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 3
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 5
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int1 = 6                                                                 # STEP 7
ACTION: int1 = 6 
int1 = 20 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 8
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 11
ACTION: int0 = 2 
int0 = 2 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 12
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 7                                                                # STEP 14
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 20, 7]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 17
ACTION: int1 = 12 
int1 = 11 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 18
ACTION: int3 = 4 
int3 = 7 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 20
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 19, 20, 7]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 21
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 22
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 23
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 25
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 26
ACTION: int1 = 17 
int1 = 12 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 27
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.find(int3)                                                # STEP 28
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 18                                                               # STEP 29
ACTION: int3 = 18 
int3 = 2 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 30
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 2                                                                # STEP 31
ACTION: int2 = 2 
int2 = 12 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 32
ACTION: result = avl2.find(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e9d950> : <type 'instance'>
avl_REF2 = set([12, 2, 19, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12, 19, 20, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ea2908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  12 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([3, 10, 11, 12, 13, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f5f368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 89 steps

SAVING TEST AS failure.99683.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 12                                                                # STEP 0
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 3
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 4
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int2 = 16                                                                # STEP 5
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 6
ACTION: int0 = 10 
int0 = 12 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 7
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                 # STEP 8
ACTION: result = avl1.find(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 11                                                                # STEP 9
ACTION: int3 = 11 
int3 = 9 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 10
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 11
ACTION: result = avl1.find(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int0 = 15                                                               # STEP 12
ACTION: int0 = 15 
int0 = 10 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 13
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 19                                                               # STEP 14
ACTION: int2 = 19 
int2 = 16 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 15
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19, 12]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 16
ACTION: int2 = 13 
int2 = 19 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 17
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 18
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 3                                                                # STEP 19
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 20
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 == avl0                                                            # STEP 21
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 8                                                                # STEP 23
ACTION: int0 = 8 
int0 = 15 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 24
ACTION: result = avl0.find(int2) 
int2 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 25
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 26
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 27
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 7]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 30
ACTION: int0 = 11 
int0 = 8 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 31
ACTION: int3 = 6 
int3 = 7 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 32
ACTION: result = avl0.find(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 5                                                                # STEP 33
ACTION: int1 = 5 
int1 = 15 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 34
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 35
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11, 19, 12]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 37
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 39
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 19, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 40
ACTION: avl1.insert(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([11, 10, 19, 12]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 41
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 17                                                               # STEP 42
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 43
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 17, 7]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 45
ACTION: int3 = 2 
int3 = 7 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 46
ACTION: result = avl0.find(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 47
ACTION: int2 = 13 
int2 = 13 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 48
ACTION: avl1.delete(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 13                                                               # STEP 49
ACTION: int1 = 13 
int1 = 5 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 50
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([11, 17, 10, 19, 12]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 51
ACTION: int0 = 3 
int0 = 17 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([11, 17, 10, 19, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([10, 11, 12, 13, 17, 19]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 53
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 3                                                                # STEP 54
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 13                                                               # STEP 56
ACTION: int1 = 13 
int1 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 57
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
==================================================
int2 = 12                                                               # STEP 58
ACTION: int2 = 12 
int2 = 3 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.find(int3)                                                # STEP 60
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 15                                                               # STEP 61
ACTION: int3 = 15 
int3 = 2 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 16                                                               # STEP 63
ACTION: int1 = 16 
int1 = 13 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 64
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 65
ACTION: int0 = 19 
int0 = 3 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 66
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 67
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 68
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 69
ACTION: avl0.delete(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 70
ACTION: result = avl0.find(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 10                                                               # STEP 71
ACTION: int0 = 10 
int0 = 14 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 72
ACTION: int3 = 16 
int3 = 15 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 73
ACTION: avl1.delete(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 10                                                               # STEP 74
ACTION: int3 = 10 
int3 = 16 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 75
ACTION: avl1.display() 
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
  12 [2:0]
-- < 10 [1:0]
---- < 3 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 10, 11, 12, 13, 17, 19])
==================================================
avl1 == avl1                                                            # STEP 76
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 77
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 78
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 17, 10, 19, 7]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 79
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl0.find(int2)                                                # STEP 80
ACTION: result = avl0.find(int2) 
int2 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 1                                                                # STEP 81
ACTION: int0 = 1 
int0 = 10 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 82
ACTION: int2 = 9 
int2 = 12 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 83
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 84
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103b1add0> : <type 'instance'>
avl_REF1 = set([3, 10, 11, 12, 13, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 85
ACTION: avl0.insert(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([8, 17, 10, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7, 8, 9, 10, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 86
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([7, 8, 9, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 7, 8, 9, 10, 17, 19]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 87
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 88
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103f6e6c8> : <type 'instance'>
avl_REF0 = set([1, 7, 8, 9, 10, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1, 7, 8, 10, 17, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10596fe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
61.6016337872 TOTAL RUNTIME
8 EXECUTED
601 TOTAL TEST OPERATIONS
22.9797623158 TIME SPENT EXECUTING TEST OPERATIONS
0.0208148956299 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.1684203148 TIME SPENT CHECKING PROPERTIES
46.1481826305 TOTAL TIME SPENT RUNNING SUT
0.00465893745422 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 5                                                                 # STEP 0
int0 = 4                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
result = avl1.find(int1)                                                 # STEP 3
int2 = 5                                                                 # STEP 4
int1 = 7                                                                 # STEP 5
avl1.delete(int2)                                                        # STEP 6
int2 = 4                                                                 # STEP 7
int3 = 6                                                                 # STEP 8
avl1 == avl1                                                             # STEP 9
avl1.insert(int2)                                                       # STEP 10
int2 = 2                                                                # STEP 11
avl1.insert(int0)                                                       # STEP 12
avl1 == avl1                                                            # STEP 13
int0 = 8                                                                # STEP 14
avl1.delete(int2)                                                       # STEP 15
avl1.delete(int1)                                                       # STEP 16
int1 = 6                                                                # STEP 17
int2 = 7                                                                # STEP 18
avl1.insert(int0)                                                       # STEP 19
int0 = 9                                                                # STEP 20
result = avl1.find(int0)                                                # STEP 21
int0 = 4                                                                # STEP 22
avl1.delete(int2)                                                       # STEP 23
int2 = 19                                                               # STEP 24
result = avl1.find(int3)                                                # STEP 25
avl1.delete(int3)                                                       # STEP 26
int3 = 19                                                               # STEP 27
avl1.delete(int0)                                                       # STEP 28
int0 = 18                                                               # STEP 29
avl1.delete(int0)                                                       # STEP 30
avl1.insert(int2)                                                       # STEP 31
int2 = 11                                                               # STEP 32
int0 = 3                                                                # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
int1 = 2                                                                # STEP 36
int2 = 18                                                               # STEP 37
result = avl1.find(int3)                                                # STEP 38
result = avl1.find(int2)                                                # STEP 39
int2 = 4                                                                # STEP 40
avl1.insert(int1)                                                       # STEP 41
int3 = 15                                                               # STEP 42
int1 = 7                                                                # STEP 43
avl1.insert(int3)                                                       # STEP 44
int3 = 15                                                               # STEP 45
result = avl1.find(int0)                                                # STEP 46
result = avl1.find(int2)                                                # STEP 47
int2 = 1                                                                # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl1.insert(int0)                                                       # STEP 50
int0 = 14                                                               # STEP 51
int1 = 3                                                                # STEP 52
avl1.delete(int3)                                                       # STEP 53
int3 = 13                                                               # STEP 54
result = avl1.find(int2)                                                # STEP 55
int2 = 1                                                                # STEP 56
result = avl1.find(int0)                                                # STEP 57
int0 = 16                                                               # STEP 58
result = avl1.find(int1)                                                # STEP 59
int1 = 8                                                                # STEP 60
result = avl1.find(int2)                                                # STEP 61
int2 = 1                                                                # STEP 62
result = avl1.inorder()                                                 # STEP 63
avl1.display()                                                          # STEP 64
avl1.delete(int2)                                                       # STEP 65
int2 = 6                                                                # STEP 66
avl0 = avl.AVLTree()                                                    # STEP 67
avl1.delete(int3)                                                       # STEP 68
avl1.insert(int1)                                                       # STEP 69
avl0 == avl1                                                            # STEP 70
int1 = 10                                                               # STEP 71
avl0.insert(int2)                                                       # STEP 72
int3 = 18                                                               # STEP 73
int2 = 13                                                               # STEP 74
avl0.insert(int3)                                                       # STEP 75
int3 = 8                                                                # STEP 76
avl1.delete(int3)                                                       # STEP 77
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eb32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 2                                                                 # STEP 0
int1 = 20                                                                # STEP 1
int2 = 19                                                                # STEP 2
int3 = 7                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int1)                                                 # STEP 5
avl2.insert(int1)                                                        # STEP 6
int1 = 6                                                                 # STEP 7
result = avl2.inorder()                                                  # STEP 8
result = avl2.find(int1)                                                 # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 2                                                                # STEP 11
int1 = 11                                                               # STEP 12
avl2.insert(int0)                                                       # STEP 13
int0 = 7                                                                # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.insert(int3)                                                       # STEP 16
int1 = 12                                                               # STEP 17
int3 = 4                                                                # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl2.insert(int2)                                                       # STEP 20
int2 = 12                                                               # STEP 21
int3 = 14                                                               # STEP 22
avl2.delete(int3)                                                       # STEP 23
avl2.insert(int1)                                                       # STEP 24
int3 = 2                                                                # STEP 25
int1 = 17                                                               # STEP 26
avl2 == avl2                                                            # STEP 27
result = avl2.find(int3)                                                # STEP 28
int3 = 18                                                               # STEP 29
result = avl2.find(int2)                                                # STEP 30
int2 = 2                                                                # STEP 31
result = avl2.find(int3)                                                # STEP 32
avl2.delete(int2)                                                       # STEP 33
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ea2908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE 2
int0 = 12                                                                # STEP 0
int1 = 12                                                                # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
int3 = 9                                                                 # STEP 3
avl1.delete(int0)                                                        # STEP 4
int2 = 16                                                                # STEP 5
int0 = 10                                                                # STEP 6
avl1.insert(int1)                                                        # STEP 7
result = avl1.find(int3)                                                 # STEP 8
int3 = 11                                                                # STEP 9
avl1.delete(int0)                                                       # STEP 10
result = avl1.find(int2)                                                # STEP 11
int0 = 15                                                               # STEP 12
int1 = 15                                                               # STEP 13
int2 = 19                                                               # STEP 14
avl1.insert(int2)                                                       # STEP 15
int2 = 13                                                               # STEP 16
avl0 = avl.AVLTree()                                                    # STEP 17
result = avl0.find(int2)                                                # STEP 18
int2 = 3                                                                # STEP 19
result = avl1.find(int3)                                                # STEP 20
avl0 == avl0                                                            # STEP 21
avl0.delete(int0)                                                       # STEP 22
int0 = 8                                                                # STEP 23
result = avl0.find(int2)                                                # STEP 24
int2 = 10                                                               # STEP 25
int3 = 7                                                                # STEP 26
avl0.delete(int0)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
int0 = 11                                                               # STEP 30
int3 = 6                                                                # STEP 31
result = avl0.find(int1)                                                # STEP 32
int1 = 5                                                                # STEP 33
result = avl0.find(int3)                                                # STEP 34
int3 = 7                                                                # STEP 35
avl1.insert(int0)                                                       # STEP 36
result = avl0.find(int0)                                                # STEP 37
avl1.insert(int0)                                                       # STEP 38
result = avl1.find(int3)                                                # STEP 39
avl1.insert(int2)                                                       # STEP 40
avl1 == avl1                                                            # STEP 41
int0 = 17                                                               # STEP 42
int2 = 13                                                               # STEP 43
avl0.insert(int0)                                                       # STEP 44
int3 = 2                                                                # STEP 45
result = avl0.find(int2)                                                # STEP 46
int2 = 13                                                               # STEP 47
avl1.delete(int1)                                                       # STEP 48
int1 = 13                                                               # STEP 49
avl1.insert(int0)                                                       # STEP 50
int0 = 3                                                                # STEP 51
avl1.insert(int2)                                                       # STEP 52
avl1.insert(int2)                                                       # STEP 53
int2 = 3                                                                # STEP 54
avl0.delete(int1)                                                       # STEP 55
int1 = 13                                                               # STEP 56
avl1.insert(int2)                                                       # STEP 57
int2 = 12                                                               # STEP 58
avl0.delete(int0)                                                       # STEP 59
result = avl1.find(int3)                                                # STEP 60
int3 = 15                                                               # STEP 61
avl0.delete(int1)                                                       # STEP 62
int1 = 16                                                               # STEP 63
result = avl0.find(int0)                                                # STEP 64
int0 = 19                                                               # STEP 65
avl0.insert(int0)                                                       # STEP 66
int0 = 14                                                               # STEP 67
avl1 == avl0                                                            # STEP 68
avl0.delete(int0)                                                       # STEP 69
result = avl0.find(int3)                                                # STEP 70
int0 = 10                                                               # STEP 71
int3 = 16                                                               # STEP 72
avl1.delete(int3)                                                       # STEP 73
int3 = 10                                                               # STEP 74
avl1.display()                                                          # STEP 75
avl1 == avl1                                                            # STEP 76
result = avl0.inorder()                                                 # STEP 77
avl0.insert(int0)                                                       # STEP 78
avl1 == avl1                                                            # STEP 79
result = avl0.find(int2)                                                # STEP 80
int0 = 1                                                                # STEP 81
int2 = 9                                                                # STEP 82
avl1.delete(int2)                                                       # STEP 83
avl1.delete(int2)                                                       # STEP 84
avl0.insert(int2)                                                       # STEP 85
avl0.insert(int0)                                                       # STEP 86
int0 = 6                                                                # STEP 87
avl0.delete(int2)                                                       # STEP 88
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10596fe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

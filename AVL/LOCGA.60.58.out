Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62333.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  4 [3:-1]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 7 [2:-1]
---- < 5 [0:0] L
---- > 18 [1:-1]
------ > 19 [0:0] L
set([1, 2, 4, 5, 7, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1022f3b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 37 steps

SAVING TEST AS failure.62333.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 14                                                                # STEP 0
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                 # STEP 2
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 14                                                                # STEP 5
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 6
ACTION: int0 = 9 
int0 = 14 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 7
ACTION: result = avl2.find(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.find(int3)                                                 # STEP 8
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.inorder()                                                  # STEP 9
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 11                                                               # STEP 11
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 12
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 13
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 11                                                               # STEP 14
ACTION: int0 = 11 
int0 = 11 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 15
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 8                                                                # STEP 16
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 20
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 14]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 22
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int3 = 10                                                               # STEP 23
ACTION: int3 = 10 
int3 = 10 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 24
ACTION: int2 = 10 
int2 = 8 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 25
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 26
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int1)                                                # STEP 27
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 11, 14]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 29
ACTION: avl2.insert(int0) 
int0 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 18                                                               # STEP 30
ACTION: int0 = 18 
int0 = 11 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 31
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 11, 18, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([10, 11, 18, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 18, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([10, 11, 14, 15]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 34
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 36
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101c1e7e8> : <type 'instance'>
avl_REF2 = set([10, 11, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11, 14, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10228b9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #16 (0:00:30.004393) Mon May  1 18:15:28 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e49440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.62333.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 13                                                                # STEP 0
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 2
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                        # STEP 3
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 4
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                        # STEP 5
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 7
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                        # STEP 9
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 11
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 13
ACTION: result = avl2.find(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 14
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 20
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 22
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 23
ACTION: int1 = 4 
int1 = 13 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 25
ACTION: avl2.delete(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 27
ACTION: int1 = 6 
int1 = 4 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 28
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 29
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int2 = 1                                                                # STEP 30
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 31
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 6]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 33
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 34
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 4, 6]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([1, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 36
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x10228b8c0> : <type 'instance'>
avl_REF2 = set([1, 4, 6]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 38
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 39
ACTION: int2 = 14 
int2 = 1 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 40
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 41
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13, 14]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 13]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 44
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 46
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 6                                                                # STEP 47
ACTION: int3 = 6 
int3 = 13 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 48
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 5                                                                # STEP 49
ACTION: int2 = 5 
int2 = 14 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 50
ACTION: result = avl2.find(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.inorder()                                                 # STEP 51
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 53
ACTION: avl1.delete(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 54
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([13, 14, 5]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 55
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 13, 14, 5]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 56
ACTION: int1 = 12 
int1 = 6 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 57
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 58
ACTION: result = avl2.find(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 10                                                               # STEP 59
ACTION: int0 = 10 
int0 = 16 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 60
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([16, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 12, 13, 14, 5]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 61
ACTION: int1 = 12 
int1 = 12 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 62
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 63
ACTION: int3 = 10 
int3 = 6 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 64
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([16, 12, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.delete(int3)                                                       # STEP 65
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 67
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([16, 12, 13, 14, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 10, 12, 13, 14, 16]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 68
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 13, 14]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 69
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int2 = 1                                                                # STEP 70
ACTION: int2 = 1 
int2 = 14 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 71
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 12, 13, 14]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 72
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 73
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 75
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 10, 12, 13, 14, 16]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 76
ACTION: result = avl1.find(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int3)                                                       # STEP 78
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101e62b90> : <type 'instance'>
avl_REF2 = set([1, 12, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 10, 12, 13, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 79
ACTION: avl1.delete(int1) 
int1 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e62f38> : <type 'instance'>
avl_REF1 = set([1, 5, 10, 12, 13, 14, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([1, 5, 10, 12, 13, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e51248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cdbfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 49 steps

SAVING TEST AS failure.62333.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 1                                                                 # STEP 0
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 1
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 2                                                                 # STEP 3
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl0 == avl0                                                             # STEP 4
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                        # STEP 8
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 9
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 11
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 12
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 2]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 14
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 15
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 16
ACTION: int1 = 13 
int1 = 2 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 17
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 17                                                               # STEP 18
ACTION: int2 = 17 
int2 = 2 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 13                                                               # STEP 20
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 14                                                               # STEP 22
ACTION: int3 = 14 
int3 = 1 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 23
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 14]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 24
ACTION: result = avl0.find(int2) 
int2 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 25
ACTION: result = avl0.find(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 17                                                               # STEP 26
ACTION: int1 = 17 
int1 = 13 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 27
ACTION: int2 = 10 
int2 = 17 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 28
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 13, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 30
ACTION: avl0.insert(int0) 
int0 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 1                                                                # STEP 31
ACTION: int3 = 1 
int3 = 14 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 32
ACTION: int0 = 15 
int0 = 13 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                               # STEP 34
ACTION: int1 = 17 
int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 35
ACTION: result = avl0.find(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([1, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([13, 14]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 37
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 38
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 39
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 13, 14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 40
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([17, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 10, 13, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([17, 10, 13, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 10, 13, 14, 15]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([17, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([17, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 44
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([17, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([10, 13, 14, 15]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 45
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 46
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 47
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5, 10, 13, 14, 15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101cf3290> : <type 'instance'>
avl_REF0 = set([5, 10, 13, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([5, 10, 13, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e48dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 47
STOPPING TESTING DUE TO TIMEOUT
8.15438189205 PERCENT COVERED
60.2255120277 TOTAL RUNTIME
6 EXECUTED
413 TOTAL TEST OPERATIONS
21.3931663036 TIME SPENT EXECUTING TEST OPERATIONS
0.0451331138611 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.4234113693 TIME SPENT CHECKING PROPERTIES
42.816577673 TOTAL TIME SPENT RUNNING SUT
0.0040111541748 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 14                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
result = avl2.find(int0)                                                 # STEP 2
avl2.insert(int0)                                                        # STEP 3
avl2.insert(int0)                                                        # STEP 4
int3 = 14                                                                # STEP 5
int0 = 9                                                                 # STEP 6
result = avl2.find(int0)                                                 # STEP 7
result = avl2.find(int3)                                                 # STEP 8
result = avl2.inorder()                                                  # STEP 9
result = avl2.inorder()                                                 # STEP 10
int0 = 11                                                               # STEP 11
int3 = 10                                                               # STEP 12
result = avl2.find(int0)                                                # STEP 13
int0 = 11                                                               # STEP 14
result = avl2.find(int3)                                                # STEP 15
int2 = 8                                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl2.insert(int3)                                                       # STEP 20
avl2.delete(int2)                                                       # STEP 21
result = avl2.inorder()                                                 # STEP 22
int3 = 10                                                               # STEP 23
int2 = 10                                                               # STEP 24
int1 = 15                                                               # STEP 25
result = avl2.inorder()                                                 # STEP 26
result = avl2.find(int1)                                                # STEP 27
avl2.insert(int0)                                                       # STEP 28
avl2.insert(int0)                                                       # STEP 29
int0 = 18                                                               # STEP 30
avl2.insert(int0)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl2.delete(int0)                                                       # STEP 33
avl2.delete(int0)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl2.delete(int2)                                                       # STEP 36
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10228b9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
int1 = 13                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int1)                                                        # STEP 2
avl2.insert(int1)                                                        # STEP 3
avl2.delete(int1)                                                        # STEP 4
avl2.delete(int1)                                                        # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.delete(int1)                                                        # STEP 7
avl2.delete(int1)                                                        # STEP 8
avl2.delete(int1)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
avl2.insert(int1)                                                       # STEP 11
result = avl2.find(int1)                                                # STEP 12
result = avl2.find(int1)                                                # STEP 13
avl2.delete(int1)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.delete(int1)                                                       # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
result = avl2.inorder()                                                 # STEP 20
avl2.delete(int1)                                                       # STEP 21
avl2.delete(int1)                                                       # STEP 22
int1 = 4                                                                # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl2.delete(int1)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
int1 = 6                                                                # STEP 27
int3 = 13                                                               # STEP 28
avl2.delete(int1)                                                       # STEP 29
int2 = 1                                                                # STEP 30
avl2.delete(int1)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
int0 = 16                                                               # STEP 33
avl2.insert(int2)                                                       # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2 = avl.AVLTree()                                                    # STEP 36
avl2.insert(int2)                                                       # STEP 37
avl1 = avl.AVLTree()                                                    # STEP 38
int2 = 14                                                               # STEP 39
result = avl1.find(int0)                                                # STEP 40
avl1.insert(int3)                                                       # STEP 41
avl1.insert(int2)                                                       # STEP 42
avl2.insert(int3)                                                       # STEP 43
avl2.delete(int0)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.delete(int0)                                                       # STEP 46
int3 = 6                                                                # STEP 47
avl2.delete(int0)                                                       # STEP 48
int2 = 5                                                                # STEP 49
result = avl2.find(int1)                                                # STEP 50
result = avl2.inorder()                                                 # STEP 51
avl2.delete(int2)                                                       # STEP 52
avl1.delete(int0)                                                       # STEP 53
avl1.insert(int2)                                                       # STEP 54
avl1.insert(int0)                                                       # STEP 55
int1 = 12                                                               # STEP 56
avl2.delete(int3)                                                       # STEP 57
result = avl2.find(int3)                                                # STEP 58
int0 = 10                                                               # STEP 59
avl1.insert(int1)                                                       # STEP 60
int1 = 12                                                               # STEP 61
int2 = 14                                                               # STEP 62
int3 = 10                                                               # STEP 63
result = avl1.inorder()                                                 # STEP 64
avl2.delete(int3)                                                       # STEP 65
avl2.delete(int0)                                                       # STEP 66
avl1.insert(int3)                                                       # STEP 67
avl2.insert(int2)                                                       # STEP 68
result = avl2.find(int3)                                                # STEP 69
int2 = 1                                                                # STEP 70
avl2.insert(int1)                                                       # STEP 71
int1 = 14                                                               # STEP 72
result = avl1.inorder()                                                 # STEP 73
avl1.insert(int0)                                                       # STEP 74
avl1.insert(int2)                                                       # STEP 75
result = avl1.find(int3)                                                # STEP 76
result = avl1.inorder()                                                 # STEP 77
avl2.insert(int3)                                                       # STEP 78
avl1.delete(int1)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e51248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE 2
int3 = 1                                                                 # STEP 0
int2 = 2                                                                 # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
int1 = 2                                                                 # STEP 3
avl0 == avl0                                                             # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
avl0.delete(int3)                                                        # STEP 8
avl0.insert(int3)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl0.delete(int2)                                                       # STEP 11
avl0.insert(int1)                                                       # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl0.insert(int1)                                                       # STEP 14
avl0.delete(int2)                                                       # STEP 15
int1 = 13                                                               # STEP 16
result = avl0.find(int3)                                                # STEP 17
int2 = 17                                                               # STEP 18
avl0.delete(int2)                                                       # STEP 19
int0 = 13                                                               # STEP 20
avl0.delete(int1)                                                       # STEP 21
int3 = 14                                                               # STEP 22
avl0.insert(int3)                                                       # STEP 23
result = avl0.find(int2)                                                # STEP 24
result = avl0.find(int0)                                                # STEP 25
int1 = 17                                                               # STEP 26
int2 = 10                                                               # STEP 27
avl0.delete(int0)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
avl0.insert(int0)                                                       # STEP 30
int3 = 1                                                                # STEP 31
int0 = 15                                                               # STEP 32
avl0.delete(int1)                                                       # STEP 33
int1 = 17                                                               # STEP 34
result = avl0.find(int3)                                                # STEP 35
avl0.delete(int3)                                                       # STEP 36
int3 = 5                                                                # STEP 37
result = avl0.find(int2)                                                # STEP 38
avl0.insert(int1)                                                       # STEP 39
avl0.insert(int2)                                                       # STEP 40
avl0.insert(int0)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl0.insert(int0)                                                       # STEP 43
avl0.delete(int1)                                                       # STEP 44
int2 = 13                                                               # STEP 45
avl0 == avl0                                                            # STEP 46
avl0.insert(int3)                                                       # STEP 47
avl0.delete(int0)                                                       # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e48dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
212 BRANCHES COVERED
160 STATEMENTS COVERED

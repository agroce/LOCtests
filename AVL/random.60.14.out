Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99423.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104255878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 85 steps

SAVING TEST AS failure.99423.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 1
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 2
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 3
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                        # STEP 5
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 2                                                                 # STEP 6
ACTION: int2 = 2 
int2 = 17 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 7
ACTION: result = avl0.find(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 9
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 10
ACTION: int3 = 1 
int3 = 16 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 13                                                               # STEP 13
ACTION: int3 = 13 
int3 = 1 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 15
ACTION: int2 = 10 
int2 = 2 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 16
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 17
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 18
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 19                                                               # STEP 20
ACTION: int2 = 19 
int2 = 10 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 21
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 22
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 17]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 23
ACTION: result = avl0.find(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 25
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 19]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 26
ACTION: int1 = 4 
int1 = 18 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 27
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 10                                                               # STEP 28
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 29
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 30
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int0)                                                       # STEP 31
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 20                                                               # STEP 32
ACTION: int2 = 20 
int2 = 10 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 33
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 19, 13]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 36
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 18                                                               # STEP 37
ACTION: int0 = 18 
int0 = 19 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 38
ACTION: int3 = 3 
int3 = 13 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 40
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 41
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([16, 17, 4]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 44
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 45
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 11                                                               # STEP 46
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 47
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 48
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x1041562d8> : <type 'instance'>
avl_REF0 = set([16, 17, 4]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 49
ACTION: int3 = 18 
int3 = 3 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 50
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 51
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 11]) : <type 'set'>
==================================================
int1 = 10                                                               # STEP 52
ACTION: int1 = 10 
int1 = 11 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 53
ACTION: int3 = 4 
int3 = 18 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
result = avl1.find(int1)                                                # STEP 54
ACTION: result = avl1.find(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 20                                                               # STEP 55
ACTION: int1 = 20 
int1 = 10 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 56
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 57
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
==================================================
int0 = 13                                                               # STEP 58
ACTION: int0 = 13 
int0 = 18 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 59
ACTION: int3 = 8 
int3 = 4 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 60
ACTION: avl1.insert(int0) 
int0 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 61
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 2                                                                # STEP 62
ACTION: int0 = 2 
int0 = 13 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 63
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 65
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 2                                                                # STEP 66
ACTION: int2 = 2 
int2 = 11 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 2]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 68
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 15                                                               # STEP 69
ACTION: int0 = 15 
int0 = 2 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 70
ACTION: int2 = 5 
int2 = 2 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 71
ACTION: result = avl0.find(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 72
ACTION: result = avl0.find(int3) 
int3 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int2 = 18                                                               # STEP 73
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 74
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([18, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 75
ACTION: int3 = 3 
int3 = 8 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 76
ACTION: int2 = 2 
int2 = 18 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 77
ACTION: avl1.delete(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18, 2, 19, 13]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 78
ACTION: int1 = 20 
int1 = 20 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 79
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 80
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 81
ACTION: avl1.delete(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 11                                                               # STEP 82
ACTION: int0 = 11 
int0 = 15 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 83
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104231200> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 84
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104251560> : <type 'instance'>
avl_REF1 = set([18, 2, 19, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([18, 19, 20, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046b5248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #24 (0:00:30.022971) Fri Apr 28 03:54:53 2017 [ 138 stmts 186 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10481cb00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.99423.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 6                                                                 # STEP 0
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 2
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 3                                                                 # STEP 3
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int2)                                                 # STEP 6
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 19                                                                # STEP 7
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 8
ACTION: int0 = 4 
int0 = 6 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 9
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int2 = 18                                                               # STEP 13
ACTION: int2 = 18 
int2 = 19 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 14
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 15
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 7]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 16
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 17
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 18
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 20
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 21
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 23
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 13                                                               # STEP 24
ACTION: int1 = 13 
int1 = 12 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 25
ACTION: result = avl2.find(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 13                                                               # STEP 26
ACTION: int2 = 13 
int2 = 18 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 13]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 28
ACTION: int3 = 9 
int3 = 19 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 29
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl0.find(int3)                                                # STEP 31
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 32
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 33
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([13, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 35
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
avl1 == avl2                                                            # STEP 36
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 37
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int1 = 7                                                                # STEP 38
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 39
ACTION: avl2.delete(int2) 
int2 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 41
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x10487a248> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 42
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int2 = 1                                                                # STEP 43
ACTION: int2 = 1 
int2 = 13 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 44
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 13, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 46
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 3]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 48
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 7                                                                # STEP 49
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 50
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 5                                                                # STEP 51
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 52
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 9                                                                # STEP 53
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 8                                                                # STEP 54
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 55
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl_REF1 = set([3, 13, 7]) : <type 'set'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 2                                                                # STEP 56
ACTION: int0 = 2 
int0 = 4 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 == avl0                                                            # STEP 57
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl0.insert(int0)                                                       # STEP 58
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 2, 3]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 59
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([3, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0 == avl2                                                            # STEP 60
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl_REF0 = set([1, 2, 3]) : <type 'set'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2 == avl1                                                            # STEP 61
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10486e2d8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
avl_REF1 = set([3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 62
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x10487af80> : <type 'instance'>
avl_REF0 = set([1, 2, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1.insert(int3)                                                       # STEP 63
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([3, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 13, 7]) : <type 'set'>
==================================================
int0 = 7                                                                # STEP 64
ACTION: int0 = 7 
int0 = 2 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([3, 5, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 66
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10481ce60> : <type 'instance'>
avl_REF1 = set([3, 5, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 5, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104188710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 75
STOPPING TESTING DUE TO TIMEOUT
7.9742110621 PERCENT COVERED
60.2180309296 TOTAL RUNTIME
7 EXECUTED
627 TOTAL TEST OPERATIONS
24.0907897949 TIME SPENT EXECUTING TEST OPERATIONS
0.0215599536896 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.2687237263 TIME SPENT CHECKING PROPERTIES
48.3595135212 TOTAL TIME SPENT RUNNING SUT
0.00445342063904 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 17                                                                # STEP 0
int1 = 17                                                                # STEP 1
int3 = 16                                                                # STEP 2
int0 = 16                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.delete(int2)                                                        # STEP 5
int2 = 2                                                                 # STEP 6
result = avl0.find(int3)                                                 # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0.delete(int3)                                                        # STEP 9
int3 = 1                                                                # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl1.delete(int3)                                                       # STEP 12
int3 = 13                                                               # STEP 13
avl1.insert(int2)                                                       # STEP 14
int2 = 10                                                               # STEP 15
avl0.insert(int1)                                                       # STEP 16
int1 = 18                                                               # STEP 17
result = avl1.find(int0)                                                # STEP 18
avl0.delete(int2)                                                       # STEP 19
int2 = 19                                                               # STEP 20
result = avl0.find(int0)                                                # STEP 21
avl0.insert(int0)                                                       # STEP 22
result = avl0.find(int1)                                                # STEP 23
result = avl0.find(int0)                                                # STEP 24
avl1.insert(int2)                                                       # STEP 25
int1 = 4                                                                # STEP 26
avl0.insert(int0)                                                       # STEP 27
int2 = 10                                                               # STEP 28
int0 = 2                                                                # STEP 29
result = avl0.find(int2)                                                # STEP 30
avl0.delete(int0)                                                       # STEP 31
int2 = 20                                                               # STEP 32
int0 = 19                                                               # STEP 33
avl0.delete(int0)                                                       # STEP 34
avl1.insert(int3)                                                       # STEP 35
result = avl0.find(int0)                                                # STEP 36
int0 = 18                                                               # STEP 37
int3 = 3                                                                # STEP 38
avl1.insert(int2)                                                       # STEP 39
int2 = 11                                                               # STEP 40
avl0 == avl1                                                            # STEP 41
result = avl0.inorder()                                                 # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl1 == avl1                                                            # STEP 44
result = avl1.inorder()                                                 # STEP 45
int1 = 11                                                               # STEP 46
result = avl1.find(int3)                                                # STEP 47
avl0 = avl.AVLTree()                                                    # STEP 48
int3 = 18                                                               # STEP 49
avl0.insert(int3)                                                       # STEP 50
avl0.insert(int1)                                                       # STEP 51
int1 = 10                                                               # STEP 52
int3 = 4                                                                # STEP 53
result = avl1.find(int1)                                                # STEP 54
int1 = 20                                                               # STEP 55
avl0.delete(int3)                                                       # STEP 56
avl1.insert(int0)                                                       # STEP 57
int0 = 13                                                               # STEP 58
int3 = 8                                                                # STEP 59
avl1.insert(int0)                                                       # STEP 60
result = avl0.inorder()                                                 # STEP 61
int0 = 2                                                                # STEP 62
avl0.delete(int2)                                                       # STEP 63
avl1 == avl1                                                            # STEP 64
result = avl1.inorder()                                                 # STEP 65
int2 = 2                                                                # STEP 66
avl0.insert(int2)                                                       # STEP 67
avl1.insert(int0)                                                       # STEP 68
int0 = 15                                                               # STEP 69
int2 = 5                                                                # STEP 70
result = avl0.find(int2)                                                # STEP 71
result = avl0.find(int3)                                                # STEP 72
int2 = 18                                                               # STEP 73
avl0.delete(int2)                                                       # STEP 74
int3 = 3                                                                # STEP 75
int2 = 2                                                                # STEP 76
avl1.delete(int1)                                                       # STEP 77
int1 = 20                                                               # STEP 78
avl1.insert(int1)                                                       # STEP 79
avl0.insert(int2)                                                       # STEP 80
avl1.delete(int0)                                                       # STEP 81
int0 = 11                                                               # STEP 82
avl0.delete(int2)                                                       # STEP 83
avl1.delete(int2)                                                       # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046b5248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int0 = 6                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int3 = 7                                                                 # STEP 2
int2 = 3                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
result = avl1.find(int2)                                                 # STEP 6
int2 = 19                                                                # STEP 7
int0 = 4                                                                 # STEP 8
avl1 == avl1                                                             # STEP 9
avl1 == avl1                                                            # STEP 10
avl1.insert(int2)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
int2 = 18                                                               # STEP 13
result = avl1.inorder()                                                 # STEP 14
avl1.insert(int3)                                                       # STEP 15
int3 = 3                                                                # STEP 16
avl2 = avl.AVLTree()                                                    # STEP 17
result = avl2.find(int3)                                                # STEP 18
avl2.insert(int1)                                                       # STEP 19
int3 = 19                                                               # STEP 20
avl1.delete(int3)                                                       # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
avl2.delete(int2)                                                       # STEP 23
int1 = 13                                                               # STEP 24
result = avl2.find(int2)                                                # STEP 25
int2 = 13                                                               # STEP 26
avl2.insert(int1)                                                       # STEP 27
int3 = 9                                                                # STEP 28
avl2 == avl2                                                            # STEP 29
result = avl2.inorder()                                                 # STEP 30
result = avl0.find(int3)                                                # STEP 31
int3 = 3                                                                # STEP 32
avl1.delete(int3)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl0.insert(int3)                                                       # STEP 35
avl1 == avl2                                                            # STEP 36
avl2.delete(int3)                                                       # STEP 37
int1 = 7                                                                # STEP 38
avl2.delete(int2)                                                       # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl2 = avl.AVLTree()                                                    # STEP 41
result = avl0.find(int1)                                                # STEP 42
int2 = 1                                                                # STEP 43
avl1 == avl0                                                            # STEP 44
avl1.insert(int3)                                                       # STEP 45
avl0.insert(int2)                                                       # STEP 46
avl2.insert(int2)                                                       # STEP 47
avl0.delete(int0)                                                       # STEP 48
int1 = 7                                                                # STEP 49
avl0.delete(int1)                                                       # STEP 50
int3 = 5                                                                # STEP 51
avl2.delete(int0)                                                       # STEP 52
int2 = 9                                                                # STEP 53
int1 = 8                                                                # STEP 54
avl1 == avl2                                                            # STEP 55
int0 = 2                                                                # STEP 56
avl2 == avl0                                                            # STEP 57
avl0.insert(int0)                                                       # STEP 58
result = avl1.find(int0)                                                # STEP 59
avl0 == avl2                                                            # STEP 60
avl2 == avl1                                                            # STEP 61
avl0 == avl0                                                            # STEP 62
avl1.insert(int3)                                                       # STEP 63
int0 = 7                                                                # STEP 64
avl1.delete(int1)                                                       # STEP 65
avl1.delete(int0)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104188710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
200 BRANCHES COVERED
150 STATEMENTS COVERED

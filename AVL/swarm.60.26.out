Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99654.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  7 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 12 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 7, 9, 12, 15, 18, 20])
  7 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 12 [0:0] L
---- > 20 [1:1]
------ < 18 [0:0] L
set([1, 2, 4, 7, 9, 12, 15, 18, 20])
TEST #5 STEP #20 (0:00:30.040688) Fri Apr 28 04:32:33 2017 [ 125 stmts 168 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104b4ad40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 50 steps

SAVING TEST AS failure.99654.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 5                                                                 # STEP 0
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 19                                                                # STEP 2
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0 = avl.AVLTree()                                                     # STEP 6
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 5                                                                 # STEP 7
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                        # STEP 8
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 9
ACTION: int0 = 7 
int0 = 19 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 10
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 11
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 12
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int1)                                                       # STEP 14
ACTION: avl2.insert(int1) 
int1 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 14                                                               # STEP 16
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 17
ACTION: int1 = 12 
int1 = 5 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([19, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 19
ACTION: avl1.insert(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 19, 14]) : <type 'set'>
==================================================
int0 = 9                                                                # STEP 20
ACTION: int0 = 9 
int0 = 16 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 21
ACTION: int3 = 12 
int3 = 14 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 22
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([12, 7]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 19, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([16, 9, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([16, 19, 14]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([16, 19, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16, 19, 12, 14]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 26
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 27
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([16, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 11, 19, 12, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 28
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 18                                                               # STEP 29
ACTION: int0 = 18 
int0 = 11 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 30
ACTION: int3 = 18 
int3 = 12 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 31
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([15, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([12, 5]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 15, 12, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 34
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 35
ACTION: int3 = 5 
int3 = 18 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 36
ACTION: int1 = 17 
int1 = 12 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 37
ACTION: avl1.insert(int1) 
int1 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([16, 11, 19, 12, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 12, 14, 16, 17, 19]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 38
ACTION: int2 = 16 
int2 = 15 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 39
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 41
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104add680> : <type 'instance'>
avl_REF0 = set([18, 15, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 8                                                                # STEP 42
ACTION: int0 = 8 
int0 = 18 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 43
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([11, 12, 14, 16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 19                                                               # STEP 45
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 46
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b50bd8> : <type 'instance'>
avl_REF2 = set([12, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([19, 12, 5]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 47
ACTION: int0 = 1 
int0 = 19 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 48
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([11, 12, 14, 16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 11, 12, 14, 16, 17, 19]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 49
ACTION: avl1.delete(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104b76488> : <type 'instance'>
avl_REF1 = set([1, 11, 12, 14, 16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([1, 11, 12, 14, 17, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e67b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
7.90634543604 PERCENT COVERED
60.2133178711 TOTAL RUNTIME
9 EXECUTED
763 TOTAL TEST OPERATIONS
27.926823616 TIME SPENT EXECUTING TEST OPERATIONS
0.0267610549927 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.1135811806 TIME SPENT CHECKING PROPERTIES
56.0404047966 TOTAL TIME SPENT RUNNING SUT
0.00488710403442 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 5                                                                 # STEP 0
int2 = 15                                                                # STEP 1
int0 = 19                                                                # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl2.inorder()                                                  # STEP 5
avl0 = avl.AVLTree()                                                     # STEP 6
int1 = 5                                                                 # STEP 7
avl1.insert(int0)                                                        # STEP 8
int0 = 7                                                                 # STEP 9
avl0.insert(int0)                                                       # STEP 10
int0 = 16                                                               # STEP 11
avl2.insert(int3)                                                       # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl2.insert(int1)                                                       # STEP 14
result = avl0.inorder()                                                 # STEP 15
int3 = 14                                                               # STEP 16
int1 = 12                                                               # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl1.insert(int0)                                                       # STEP 19
int0 = 9                                                                # STEP 20
int3 = 12                                                               # STEP 21
avl0.insert(int3)                                                       # STEP 22
avl1.insert(int0)                                                       # STEP 23
avl1.delete(int0)                                                       # STEP 24
avl1.insert(int3)                                                       # STEP 25
int0 = 11                                                               # STEP 26
avl1.insert(int0)                                                       # STEP 27
result = avl2.inorder()                                                 # STEP 28
int0 = 18                                                               # STEP 29
int3 = 18                                                               # STEP 30
avl0.insert(int2)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
avl2.delete(int3)                                                       # STEP 34
int3 = 5                                                                # STEP 35
int1 = 17                                                               # STEP 36
avl1.insert(int1)                                                       # STEP 37
int2 = 16                                                               # STEP 38
int1 = 14                                                               # STEP 39
avl2.delete(int0)                                                       # STEP 40
avl0.delete(int1)                                                       # STEP 41
int0 = 8                                                                # STEP 42
int1 = 7                                                                # STEP 43
avl1.delete(int0)                                                       # STEP 44
int0 = 19                                                               # STEP 45
avl2.insert(int0)                                                       # STEP 46
int0 = 1                                                                # STEP 47
avl1.insert(int0)                                                       # STEP 48
avl1.delete(int2)                                                       # STEP 49
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e67b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
199 BRANCHES COVERED
150 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62040.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  13 [2:0]
-- < 2 [1:-1]
---- > 6 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([2, 6, 13, 15, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1017646c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 93 steps

SAVING TEST AS failure.62040.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 4                                                                 # STEP 0
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 1
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 3
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 20                                                                # STEP 4
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 5
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                        # STEP 6
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                        # STEP 7
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int2 = 18                                                                # STEP 8
ACTION: int2 = 18 
int2 = 2 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 == avl2                                                             # STEP 9
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 12
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 14
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([4, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([18, 20]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 18
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 20
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 21
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 4]) : <type 'set'>
==================================================
int2 = 16                                                               # STEP 22
ACTION: int2 = 16 
int2 = 18 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 18, 4]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 24
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x1017604d0> : <type 'instance'>
avl_REF2 = set([16, 18, 4]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 25
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 27
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 29
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 17                                                               # STEP 30
ACTION: int0 = 17 
int0 = 4 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                       # STEP 34
ACTION: avl2.insert(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 35
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int2)                                                # STEP 36
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 7                                                                # STEP 37
ACTION: int0 = 7 
int0 = 17 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 39
ACTION: result = avl2.find(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 40
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 42
ACTION: avl2.delete(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 18                                                               # STEP 43
ACTION: int2 = 18 
int2 = 16 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 44
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 45
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 20, 7]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([17, 7]) : <type 'set'>
==================================================
int2 = 15                                                               # STEP 47
ACTION: int2 = 15 
int2 = 18 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([17, 20, 7]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 49
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 51
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([17, 20, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 53
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 56
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 15, 20, 13, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 57
ACTION: avl2.insert(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 58
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int0)                                                       # STEP 59
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 60
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int2 = 5                                                                # STEP 61
ACTION: int2 = 5 
int2 = 15 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 62
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 63
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 64
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int1 = 2                                                                # STEP 65
ACTION: int1 = 2 
int1 = 13 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 66
ACTION: int0 = 18 
int0 = 7 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 67
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 68
ACTION: avl2.delete(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 6                                                                # STEP 69
ACTION: int3 = 6 
int3 = 20 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 70
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 71
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([17, 15, 20, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 72
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 73
ACTION: int2 = 18 
int2 = 5 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 74
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 75
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 13, 15, 17, 18, 20]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 76
ACTION: int0 = 19 
int0 = 18 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 77
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 78
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 79
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 80
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 81
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 82
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                 # STEP 83
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 84
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2 == avl2                                                            # STEP 85
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 86
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 87
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 88
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
  13 [2:0]
-- < 2 [1:-1]
---- > 6 [0:0] L
-- > 17 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 6, 13, 15, 17, 20])
==================================================
avl2.insert(int0)                                                       # STEP 89
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 6, 13, 15, 17, 19, 20]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 90
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 91
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 92
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102c24a28> : <type 'instance'>
avl_REF2 = set([2, 6, 13, 15, 17, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 13, 15, 17, 19, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a20638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10177b710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 80 steps

SAVING TEST AS failure.62040.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl0                                                             # STEP 1
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                        # STEP 3
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 4
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int1)                                                        # STEP 5
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 6
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 7
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 8
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 10
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 11
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 12
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int2 = 13                                                               # STEP 15
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 16
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 18
ACTION: int2 = 4 
int2 = 13 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 19
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 20
ACTION: int1 = 6 
int1 = 17 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 21
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 1                                                                # STEP 22
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 23
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 25
ACTION: int1 = 17 
int1 = 6 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 26
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 27
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 28
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 29
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 15 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 6, 15]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 31
ACTION: int3 = 14 
int3 = 15 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 32
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 34
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int2 = 11                                                               # STEP 35
ACTION: int2 = 11 
int2 = 4 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 36
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 37
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 4, 14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 38
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([17, 4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 44
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl0                                                            # STEP 45
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl2.find(int3)                                                # STEP 46
ACTION: result = avl2.find(int3) 
int3 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 47
ACTION: avl2.delete(int1) 
int1 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 48
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 49
ACTION: result = avl0.find(int3) 
int3 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int3 = 18                                                               # STEP 51
ACTION: int3 = 18 
int3 = 14 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 52
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 18, 14, 6, 15]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 54
ACTION: result = avl0.find(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 18, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 56
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 17                                                               # STEP 58
ACTION: int0 = 17 
int0 = 1 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 59
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 60
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 18, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 62
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 6                                                                # STEP 63
ACTION: int3 = 6 
int3 = 18 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 64
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 14, 15]) : <type 'set'>
==================================================
int1 = 14                                                               # STEP 65
ACTION: int1 = 14 
int1 = 17 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 66
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 4, 14]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 67
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 68
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 69
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int2 = 17                                                               # STEP 70
ACTION: int2 = 17 
int2 = 4 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 71
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 72
ACTION: avl2.delete(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([1, 14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([14, 15]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 73
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int3)                                                       # STEP 74
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 4, 14, 1]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 75
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 76
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 77
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 78
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b2f3b0> : <type 'instance'>
avl_REF2 = set([14, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([15]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 79
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102dbbfc8> : <type 'instance'>
avl_REF0 = set([17, 4, 14, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([4, 14, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b32128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #0 (0:00:35.089506) Mon May  1 17:35:19 2017 [ 161 stmts 214 branches ]
  9 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:-1]
---- > 20 [0:0] L
set([1, 4, 5, 9, 14, 20])
  9 [2:0]
-- < 6 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 7, 9, 15, 16, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102845ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 28 steps

SAVING TEST AS failure.62040.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 12                                                                # STEP 0
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 3
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 5
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([13]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 6
ACTION: int1 = 18 
int1 = 13 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 7
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 13]) : <type 'set'>
==================================================
int1 = 7                                                                 # STEP 8
ACTION: int1 = 7 
int1 = 18 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 10
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 8                                                                # STEP 11
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 12, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 13]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 15
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 12, 13]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 16
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 1                                                                # STEP 17
ACTION: int3 = 1 
int3 = 8 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 18
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([8, 18, 12, 13]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([8, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 1, 18, 12, 13]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([8, 1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 24
ACTION: int1 = 2 
int1 = 8 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 25
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 26
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 27
ACTION: avl2.delete(int0) 
int0 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102b95638> : <type 'instance'>
avl_REF2 = set([1, 18, 12, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([1, 18, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bb25f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.38653511317 PERCENT COVERED
61.4296030998 TOTAL RUNTIME
6 EXECUTED
401 TOTAL TEST OPERATIONS
20.3895742893 TIME SPENT EXECUTING TEST OPERATIONS
0.0465505123138 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
20.4839642048 TIME SPENT CHECKING PROPERTIES
40.8735384941 TOTAL TIME SPENT RUNNING SUT
0.00419926643372 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 4                                                                 # STEP 0
int2 = 2                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
avl2.delete(int2)                                                        # STEP 3
int3 = 20                                                                # STEP 4
avl2.delete(int0)                                                        # STEP 5
avl2.delete(int2)                                                        # STEP 6
avl2.insert(int3)                                                        # STEP 7
int2 = 18                                                                # STEP 8
avl2 == avl2                                                             # STEP 9
avl2.insert(int2)                                                       # STEP 10
result = avl2.inorder()                                                 # STEP 11
avl2.insert(int0)                                                       # STEP 12
avl2.insert(int0)                                                       # STEP 13
avl2.insert(int3)                                                       # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.insert(int2)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
result = avl2.inorder()                                                 # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.delete(int3)                                                       # STEP 20
avl2.insert(int0)                                                       # STEP 21
int2 = 16                                                               # STEP 22
avl2.insert(int2)                                                       # STEP 23
avl2 = avl.AVLTree()                                                    # STEP 24
avl2.delete(int0)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
result = avl2.inorder()                                                 # STEP 27
avl2.delete(int3)                                                       # STEP 28
result = avl2.inorder()                                                 # STEP 29
int0 = 17                                                               # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.delete(int2)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl2.insert(int0)                                                       # STEP 34
result = avl2.inorder()                                                 # STEP 35
result = avl2.find(int2)                                                # STEP 36
int0 = 7                                                                # STEP 37
avl2.delete(int3)                                                       # STEP 38
result = avl2.find(int2)                                                # STEP 39
avl2.delete(int3)                                                       # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.delete(int2)                                                       # STEP 42
int2 = 18                                                               # STEP 43
avl2.delete(int2)                                                       # STEP 44
avl2.insert(int0)                                                       # STEP 45
avl2.delete(int3)                                                       # STEP 46
int2 = 15                                                               # STEP 47
avl2.insert(int3)                                                       # STEP 48
int1 = 13                                                               # STEP 49
avl2.insert(int1)                                                       # STEP 50
avl2.delete(int1)                                                       # STEP 51
result = avl2.inorder()                                                 # STEP 52
avl2.delete(int2)                                                       # STEP 53
avl2.insert(int1)                                                       # STEP 54
avl2.delete(int2)                                                       # STEP 55
avl2.insert(int2)                                                       # STEP 56
avl2.insert(int0)                                                       # STEP 57
result = avl2.inorder()                                                 # STEP 58
avl2.delete(int0)                                                       # STEP 59
avl2.insert(int2)                                                       # STEP 60
int2 = 5                                                                # STEP 61
avl2.delete(int2)                                                       # STEP 62
avl2.insert(int1)                                                       # STEP 63
avl2.delete(int2)                                                       # STEP 64
int1 = 2                                                                # STEP 65
int0 = 18                                                               # STEP 66
avl2.delete(int2)                                                       # STEP 67
avl2.delete(int0)                                                       # STEP 68
int3 = 6                                                                # STEP 69
result = avl2.inorder()                                                 # STEP 70
avl2.insert(int1)                                                       # STEP 71
int1 = 1                                                                # STEP 72
int2 = 18                                                               # STEP 73
avl2.delete(int2)                                                       # STEP 74
avl2.insert(int0)                                                       # STEP 75
int0 = 19                                                               # STEP 76
result = avl2.find(int0)                                                # STEP 77
avl2.insert(int2)                                                       # STEP 78
avl2.insert(int2)                                                       # STEP 79
avl2.delete(int2)                                                       # STEP 80
avl2.insert(int3)                                                       # STEP 81
result = avl2.inorder()                                                 # STEP 82
result = avl2.inorder()                                                 # STEP 83
avl2.delete(int1)                                                       # STEP 84
avl2 == avl2                                                            # STEP 85
avl2.delete(int3)                                                       # STEP 86
avl2.insert(int3)                                                       # STEP 87
avl2.display()                                                          # STEP 88
avl2.insert(int0)                                                       # STEP 89
int2 = 7                                                                # STEP 90
avl2.insert(int3)                                                       # STEP 91
avl2.delete(int3)                                                       # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a20638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE 1
avl0 = avl.AVLTree()                                                     # STEP 0
avl0 == avl0                                                             # STEP 1
int1 = 17                                                                # STEP 2
avl0.insert(int1)                                                        # STEP 3
avl0.insert(int1)                                                        # STEP 4
avl0.delete(int1)                                                        # STEP 5
result = avl0.inorder()                                                  # STEP 6
avl0.insert(int1)                                                        # STEP 7
result = avl0.find(int1)                                                 # STEP 8
avl0.insert(int1)                                                        # STEP 9
result = avl0.find(int1)                                                # STEP 10
avl0.insert(int1)                                                       # STEP 11
result = avl0.inorder()                                                 # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.delete(int1)                                                       # STEP 14
int2 = 13                                                               # STEP 15
avl0.insert(int2)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
int2 = 4                                                                # STEP 18
int3 = 15                                                               # STEP 19
int1 = 6                                                                # STEP 20
result = avl0.inorder()                                                 # STEP 21
int0 = 1                                                                # STEP 22
avl2 = avl.AVLTree()                                                    # STEP 23
avl2.insert(int1)                                                       # STEP 24
int1 = 17                                                               # STEP 25
avl0.insert(int2)                                                       # STEP 26
avl2.delete(int2)                                                       # STEP 27
avl2.insert(int0)                                                       # STEP 28
result = avl0.inorder()                                                 # STEP 29
avl2.insert(int3)                                                       # STEP 30
int3 = 14                                                               # STEP 31
result = avl0.find(int2)                                                # STEP 32
avl0.insert(int1)                                                       # STEP 33
avl2 == avl0                                                            # STEP 34
int2 = 11                                                               # STEP 35
avl0.delete(int0)                                                       # STEP 36
avl0.insert(int3)                                                       # STEP 37
result = avl0.find(int1)                                                # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl0.delete(int3)                                                       # STEP 40
avl2.delete(int2)                                                       # STEP 41
avl0.insert(int1)                                                       # STEP 42
avl2.insert(int3)                                                       # STEP 43
result = avl0.inorder()                                                 # STEP 44
avl2 == avl0                                                            # STEP 45
result = avl2.find(int3)                                                # STEP 46
avl2.delete(int1)                                                       # STEP 47
avl0.delete(int2)                                                       # STEP 48
result = avl0.find(int3)                                                # STEP 49
avl2.insert(int0)                                                       # STEP 50
int3 = 18                                                               # STEP 51
avl0.delete(int0)                                                       # STEP 52
avl2.insert(int3)                                                       # STEP 53
result = avl0.find(int3)                                                # STEP 54
avl2.delete(int2)                                                       # STEP 55
avl0.insert(int1)                                                       # STEP 56
avl0.delete(int2)                                                       # STEP 57
int0 = 17                                                               # STEP 58
int2 = 4                                                                # STEP 59
avl2.delete(int3)                                                       # STEP 60
avl0.insert(int0)                                                       # STEP 61
avl2.delete(int3)                                                       # STEP 62
int3 = 6                                                                # STEP 63
avl2.delete(int3)                                                       # STEP 64
int1 = 14                                                               # STEP 65
avl0.insert(int1)                                                       # STEP 66
result = avl2.inorder()                                                 # STEP 67
avl2.delete(int2)                                                       # STEP 68
avl0.insert(int2)                                                       # STEP 69
int2 = 17                                                               # STEP 70
int3 = 1                                                                # STEP 71
avl2.delete(int3)                                                       # STEP 72
result = avl0.inorder()                                                 # STEP 73
avl0.insert(int3)                                                       # STEP 74
int3 = 8                                                                # STEP 75
result = avl2.inorder()                                                 # STEP 76
avl2 == avl2                                                            # STEP 77
avl2.delete(int1)                                                       # STEP 78
avl0.delete(int0)                                                       # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102b32128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 12                                                                # STEP 0
int3 = 8                                                                 # STEP 1
int0 = 13                                                                # STEP 2
int1 = 13                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int1)                                                        # STEP 5
int1 = 18                                                                # STEP 6
avl2.insert(int1)                                                        # STEP 7
int1 = 7                                                                 # STEP 8
avl2.delete(int3)                                                        # STEP 9
avl2.delete(int1)                                                       # STEP 10
int1 = 8                                                                # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.insert(int2)                                                       # STEP 15
result = avl2.find(int2)                                                # STEP 16
int3 = 1                                                                # STEP 17
result = avl2.find(int0)                                                # STEP 18
avl2.delete(int1)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
int1 = 2                                                                # STEP 24
result = avl2.find(int3)                                                # STEP 25
result = avl2.find(int3)                                                # STEP 26
avl2.delete(int0)                                                       # STEP 27
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102bb25f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

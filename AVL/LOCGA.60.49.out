Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62270.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  8 [2:0]
-- < 1 [1:-1]
---- > 3 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([1, 3, 8, 10, 13, 17])
  10 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
set([3, 8, 10, 11, 12, 13, 17])
  10 [3:-1]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
set([3, 4, 8, 10, 11, 12, 13, 17])
  10 [3:-1]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
set([3, 4, 8, 10, 11, 12, 13, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101e24c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.62270.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                 # STEP 2
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int0)                                                        # STEP 3
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 4
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int0)                                                # STEP 10
ACTION: result = avl0.find(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int3 = 8                                                                # STEP 11
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 12
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 13
ACTION: int0 = 11 
int0 = 5 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 14
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 15
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 16
ACTION: avl0.insert(int3) 
int3 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 11]) : <type 'set'>
==================================================
int3 = 18                                                               # STEP 17
ACTION: int3 = 18 
int3 = 8 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 18
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 19
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 11, 5]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 21
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([8, 5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 23
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 1                                                                # STEP 28
ACTION: int0 = 1 
int0 = 11 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 5]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 30
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 18 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 32
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 10]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 33
ACTION: int1 = 19 
int1 = 5 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 34
ACTION: int2 = 13 
int2 = 10 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 35
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 36
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 10, 19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 37
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 10, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([8, 10]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 38
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 39
ACTION: int1 = 3 
int1 = 19 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 40
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 1, 10]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 42
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 18                                                               # STEP 43
ACTION: int0 = 18 
int0 = 1 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 45
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 10, 13]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([8, 1, 10]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 47
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 10, 13]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 48
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 10, 3, 13]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 50
ACTION: int0 = 17 
int0 = 18 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int1 = 1                                                                # STEP 51
ACTION: int1 = 1 
int1 = 3 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 52
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10, 3, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 53
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([8, 1, 10, 3, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3, 8, 10, 13, 17]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 54
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([1, 3, 8, 10, 13, 17]) : <type 'set'>
  8 [2:0]
-- < 1 [1:-1]
---- > 3 [0:0] L
-- > 13 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 3, 8, 10, 13, 17])
==================================================
avl0.delete(int1)                                                       # STEP 55
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([1, 3, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([3, 8, 10, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 56
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 57
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 8, 10, 11, 13, 17]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 59
ACTION: int2 = 4 
int2 = 11 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 60
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 62
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.display()                                                          # STEP 63
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
  10 [3:-1]
-- < 8 [1:1]
---- < 3 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 8, 10, 11, 12, 13, 17])
==================================================
avl0.delete(int2)                                                       # STEP 64
ACTION: avl0.delete(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 65
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 66
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
  10 [3:-1]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 8, 10, 11, 12, 13, 17])
==================================================
result = avl0.inorder()                                                 # STEP 67
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0 == avl0                                                            # STEP 68
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int3)                                                       # STEP 69
ACTION: avl0.insert(int3) 
int3 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.display()                                                          # STEP 70
ACTION: avl0.display() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
  10 [3:-1]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 8 [0:0] L
-- > 13 [2:1]
---- < 11 [1:-1]
------ > 12 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([3, 4, 8, 10, 11, 12, 13, 17])
==================================================
avl0.delete(int1)                                                       # STEP 71
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 72
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int0)                                                       # STEP 73
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101fbf830> : <type 'instance'>
avl_REF0 = set([3, 4, 8, 10, 11, 12, 13, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 4, 8, 10, 11, 12, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aa99e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e8cbd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 36 steps

SAVING TEST AS failure.62270.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 7                                                                 # STEP 0
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                        # STEP 2
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int0 = 10                                                                # STEP 3
ACTION: int0 = 10 
int0 = 7 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 4
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                        # STEP 5
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int0)                                                        # STEP 6
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 2                                                                 # STEP 7
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 8
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 9
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 11
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 14
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.find(int1)                                                # STEP 15
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 6                                                                # STEP 16
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 17
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int1 = 1                                                                # STEP 18
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0 == avl0                                                            # STEP 20
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int1)                                                       # STEP 21
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 10, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 23
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([1, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 4                                                                # STEP 25
ACTION: int1 = 4 
int1 = 1 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 26
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 7                                                                # STEP 30
ACTION: int0 = 7 
int0 = 10 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1, 4, 6, 7]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 33
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int2 = 3                                                                # STEP 34
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 35
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102e8ca28> : <type 'instance'>
avl_REF0 = set([1, 4, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cc9560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #3 STEP #70 (0:00:30.051760) Mon May  1 18:06:07 2017 [ 158 stmts 208 branches ]
  10 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 9, 10, 13, 15, 18])
  10 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([2, 9, 10, 13, 15, 18])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 2, 9, 10, 13, 15, 18])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 2, 9, 10, 13, 15, 18])
  10 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 15 [1:0]
---- < 13 [0:0] L
---- > 18 [0:0] L
set([1, 2, 9, 10, 13, 15, 18])
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([3, 4, 5, 8, 15, 17])
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
set([3, 4, 5, 8, 9, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f357a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 63 steps

SAVING TEST AS failure.62270.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 2
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 3
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
int1 = 4                                                                 # STEP 4
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 7
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                        # STEP 8
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 9
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 4]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 11
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 13
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int0 = 5                                                                # STEP 14
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 15
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 16
ACTION: int2 = 17 
int2 = 17 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([17, 4, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 19
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 20
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 15]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 21
ACTION: result = avl1.find(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int1 = 8                                                                # STEP 23
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int3 = 9                                                                # STEP 25
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 26
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 4, 15]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                 # STEP 29
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 30
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 10                                                               # STEP 31
ACTION: int1 = 10 
int1 = 8 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 34
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 17, 3, 4, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([8, 17, 3, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
==================================================
int1 = 4                                                                # STEP 36
ACTION: int1 = 4 
int1 = 10 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl1.display()                                                          # STEP 37
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 4, 5, 8, 15, 17])
==================================================
result = avl1.inorder()                                                 # STEP 38
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([4, 5, 8, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 40
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([4, 5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([5, 8, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 41
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int2)                                                       # STEP 44
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([3, 5, 8, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 8, 9, 15, 17]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 46
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 5, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([3, 8, 9, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 47
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 48
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.delete(int1)                                                       # STEP 49
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 4, 8, 9, 15, 17]) : <type 'set'>
==================================================
int1 = 18                                                               # STEP 51
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 52
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 4, 8, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 53
ACTION: avl1.insert(int0) 
int0 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 54
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 55
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 4, 5, 8, 9, 15, 17]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 56
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 57
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl1.display()                                                          # STEP 58
ACTION: avl1.display() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 15, 17]) : <type 'set'>
  8 [2:0]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:0]
---- < 9 [0:0] L
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF1) 
set([3, 4, 5, 8, 9, 15, 17])
==================================================
int0 = 17                                                               # STEP 59
ACTION: int0 = 17 
int0 = 5 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 60
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 61
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 4, 5, 8, 9, 15, 17, 18]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 62
ACTION: avl1.delete(int3) 
int3 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x101e266c8> : <type 'instance'>
avl_REF1 = set([3, 4, 5, 8, 9, 15, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([3, 4, 5, 9, 15, 17, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dc2b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 32
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.2340900898 TOTAL RUNTIME
6 EXECUTED
405 TOTAL TEST OPERATIONS
21.0112917423 TIME SPENT EXECUTING TEST OPERATIONS
0.0448710918427 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
21.0647308826 TIME SPENT CHECKING PROPERTIES
42.076022625 TOTAL TIME SPENT RUNNING SUT
0.0040762424469 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 5                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
result = avl0.find(int0)                                                 # STEP 2
avl0.delete(int0)                                                        # STEP 3
avl0.insert(int0)                                                        # STEP 4
avl0.delete(int0)                                                        # STEP 5
avl0.delete(int0)                                                        # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
result = avl0.find(int0)                                                # STEP 10
int3 = 8                                                                # STEP 11
int2 = 10                                                               # STEP 12
int0 = 11                                                               # STEP 13
avl0.insert(int0)                                                       # STEP 14
int1 = 5                                                                # STEP 15
avl0.insert(int3)                                                       # STEP 16
int3 = 18                                                               # STEP 17
avl0.delete(int3)                                                       # STEP 18
result = avl0.find(int2)                                                # STEP 19
avl0.insert(int1)                                                       # STEP 20
avl0 == avl0                                                            # STEP 21
avl0.delete(int0)                                                       # STEP 22
avl0.delete(int3)                                                       # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl0.delete(int3)                                                       # STEP 27
int0 = 1                                                                # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl0.delete(int1)                                                       # STEP 30
int3 = 19                                                               # STEP 31
avl0.insert(int2)                                                       # STEP 32
int1 = 19                                                               # STEP 33
int2 = 13                                                               # STEP 34
avl0.delete(int1)                                                       # STEP 35
avl0.insert(int3)                                                       # STEP 36
avl0.delete(int1)                                                       # STEP 37
int3 = 12                                                               # STEP 38
int1 = 3                                                                # STEP 39
avl0.insert(int0)                                                       # STEP 40
avl0.insert(int0)                                                       # STEP 41
result = avl0.inorder()                                                 # STEP 42
int0 = 18                                                               # STEP 43
avl0.delete(int0)                                                       # STEP 44
avl0.insert(int2)                                                       # STEP 45
avl0.delete(int2)                                                       # STEP 46
avl0.insert(int2)                                                       # STEP 47
int2 = 11                                                               # STEP 48
avl0.insert(int1)                                                       # STEP 49
int0 = 17                                                               # STEP 50
int1 = 1                                                                # STEP 51
result = avl0.inorder()                                                 # STEP 52
avl0.insert(int0)                                                       # STEP 53
avl0.display()                                                          # STEP 54
avl0.delete(int1)                                                       # STEP 55
avl0.insert(int0)                                                       # STEP 56
avl0.insert(int2)                                                       # STEP 57
avl0.insert(int3)                                                       # STEP 58
int2 = 4                                                                # STEP 59
avl0.insert(int3)                                                       # STEP 60
avl0.insert(int0)                                                       # STEP 61
result = avl0.inorder()                                                 # STEP 62
avl0.display()                                                          # STEP 63
avl0.delete(int2)                                                       # STEP 64
avl0.insert(int2)                                                       # STEP 65
avl0.display()                                                          # STEP 66
result = avl0.inorder()                                                 # STEP 67
avl0 == avl0                                                            # STEP 68
avl0.insert(int3)                                                       # STEP 69
avl0.display()                                                          # STEP 70
avl0.delete(int1)                                                       # STEP 71
result = avl0.inorder()                                                 # STEP 72
avl0.delete(int0)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102aa99e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int0 = 7                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.insert(int0)                                                        # STEP 2
int0 = 10                                                                # STEP 3
avl0.delete(int0)                                                        # STEP 4
avl0.delete(int0)                                                        # STEP 5
avl0.delete(int0)                                                        # STEP 6
int1 = 2                                                                 # STEP 7
avl0.insert(int0)                                                        # STEP 8
avl0.delete(int0)                                                        # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.delete(int0)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
avl0.delete(int1)                                                       # STEP 13
result = avl0.find(int1)                                                # STEP 14
result = avl0.find(int1)                                                # STEP 15
int3 = 6                                                                # STEP 16
avl0 == avl0                                                            # STEP 17
int1 = 1                                                                # STEP 18
avl0.delete(int3)                                                       # STEP 19
avl0 == avl0                                                            # STEP 20
avl0.delete(int1)                                                       # STEP 21
avl0.insert(int1)                                                       # STEP 22
avl0.delete(int0)                                                       # STEP 23
avl0.insert(int1)                                                       # STEP 24
int1 = 4                                                                # STEP 25
avl0.delete(int3)                                                       # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
avl0.insert(int3)                                                       # STEP 29
int0 = 7                                                                # STEP 30
avl0.delete(int1)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl0.insert(int1)                                                       # STEP 33
int2 = 3                                                                # STEP 34
avl0.delete(int3)                                                       # STEP 35
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101cc9560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 17                                                                # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int2)                                                        # STEP 2
avl1.insert(int2)                                                        # STEP 3
int1 = 4                                                                 # STEP 4
avl1.delete(int2)                                                        # STEP 5
avl1.insert(int1)                                                        # STEP 6
avl1.delete(int2)                                                        # STEP 7
avl1.insert(int2)                                                        # STEP 8
avl1.delete(int1)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.insert(int2)                                                       # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1.insert(int1)                                                       # STEP 13
int0 = 5                                                                # STEP 14
int1 = 15                                                               # STEP 15
int2 = 17                                                               # STEP 16
avl1.insert(int1)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
result = avl1.find(int1)                                                # STEP 19
avl1.delete(int2)                                                       # STEP 20
result = avl1.find(int2)                                                # STEP 21
result = avl1.inorder()                                                 # STEP 22
int1 = 8                                                                # STEP 23
avl1.delete(int2)                                                       # STEP 24
int3 = 9                                                                # STEP 25
avl1.insert(int2)                                                       # STEP 26
avl1.insert(int1)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
result = avl1.inorder()                                                 # STEP 29
avl1.delete(int0)                                                       # STEP 30
int1 = 10                                                               # STEP 31
int2 = 3                                                                # STEP 32
avl1.delete(int1)                                                       # STEP 33
avl1.insert(int2)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
int1 = 4                                                                # STEP 36
avl1.display()                                                          # STEP 37
result = avl1.inorder()                                                 # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl1.delete(int1)                                                       # STEP 40
avl1.delete(int3)                                                       # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl1.delete(int1)                                                       # STEP 43
avl1.insert(int2)                                                       # STEP 44
avl1.insert(int3)                                                       # STEP 45
avl1.delete(int0)                                                       # STEP 46
avl1.insert(int2)                                                       # STEP 47
avl1.insert(int3)                                                       # STEP 48
avl1.delete(int1)                                                       # STEP 49
avl1.insert(int1)                                                       # STEP 50
int1 = 18                                                               # STEP 51
avl1.delete(int3)                                                       # STEP 52
avl1.insert(int0)                                                       # STEP 53
int2 = 5                                                                # STEP 54
avl1.insert(int3)                                                       # STEP 55
int3 = 8                                                                # STEP 56
avl1.insert(int3)                                                       # STEP 57
avl1.display()                                                          # STEP 58
int0 = 17                                                               # STEP 59
result = avl1.inorder()                                                 # STEP 60
avl1.insert(int1)                                                       # STEP 61
avl1.delete(int3)                                                       # STEP 62
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102dc2b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

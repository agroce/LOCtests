Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99496.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  3 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [1:0]
---- < 6 [0:0] L
---- > 17 [0:0] L
set([1, 2, 3, 6, 15, 17])
  3 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [2:1]
---- < 7 [1:0]
------ < 6 [0:0] L
------ > 14 [0:0] L
---- > 17 [0:0] L
set([1, 2, 3, 6, 7, 14, 15, 17])
  3 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 15 [2:1]
---- < 7 [1:0]
------ < 6 [0:0] L
------ > 14 [0:0] L
---- > 17 [0:0] L
set([1, 2, 3, 6, 7, 14, 15, 17])
TEST #4 STEP #89 (0:00:30.007916) Fri Apr 28 04:08:11 2017 [ 135 stmts 180 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031c4908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 77 steps

SAVING TEST AS failure.99496.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 5                                                                 # STEP 0
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 19                                                                # STEP 1
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 2
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 3
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                        # STEP 5
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 18                                                                # STEP 6
ACTION: int3 = 18 
int3 = 13 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 7
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 20                                                                # STEP 9
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 10
ACTION: result = avl1.find(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 5                                                                # STEP 11
ACTION: int2 = 5 
int2 = 9 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int2)                                                       # STEP 13
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 14
ACTION: int2 = 13 
int2 = 5 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 15
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 16
ACTION: avl0.delete(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18, 5]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 19
ACTION: int3 = 8 
int3 = 18 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 21
ACTION: int1 = 8 
int1 = 19 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 22
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 18, 5]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 25
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int1 = 7                                                                # STEP 26
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 27
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF1 = set([8, 18, 5]) : <type 'set'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int0 = 13                                                               # STEP 28
ACTION: int0 = 13 
int0 = 1 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 29
ACTION: int3 = 20 
int3 = 8 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 13                                                               # STEP 31
ACTION: int0 = 13 
int0 = 13 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 32
ACTION: result = avl1.find(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 8                                                                # STEP 33
ACTION: int2 = 8 
int2 = 13 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 34
ACTION: avl0.delete(int0) 
int0 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 35
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0 == avl0                                                            # STEP 36
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int0 = 6                                                                # STEP 37
ACTION: int0 = 6 
int0 = 13 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 38
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
==================================================
result = avl0.find(int3)                                                # STEP 40
ACTION: result = avl0.find(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 4                                                                # STEP 41
ACTION: int3 = 4 
int3 = 20 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 42
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.insert(int0)                                                       # STEP 43
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 6]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 44
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 45
ACTION: int2 = 13 
int2 = 9 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 46
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([20, 13, 6]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 47
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 48
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 9, 18, 5, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 49
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0 == avl1                                                            # STEP 50
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
avl_REF1 = set([8, 9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
int0 = 15                                                               # STEP 51
ACTION: int0 = 15 
int0 = 16 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 52
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 53
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 54
ACTION: result = avl1.find(int0) 
int0 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 7                                                                # STEP 55
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 56
ACTION: int1 = 2 
int1 = 7 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 57
ACTION: result = avl1.find(int2) 
int2 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl0.find(int0)                                                # STEP 58
ACTION: result = avl0.find(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 59
ACTION: result = avl0.find(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 60
ACTION: int3 = 2 
int3 = 4 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 61
ACTION: int2 = 13 
int2 = 6 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 62
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int0 = 6                                                                # STEP 63
ACTION: int0 = 6 
int0 = 7 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 65
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl0.delete(int1)                                                       # STEP 66
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 67
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 20, 13, 6]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 68
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 69
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([2, 20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 13                                                               # STEP 70
ACTION: int3 = 13 
int3 = 2 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 71
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([2, 20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 72
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 12                                                               # STEP 73
ACTION: int3 = 12 
int3 = 13 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 74
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 75
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1037c5128> : <type 'instance'>
avl_REF1 = set([8, 9, 18, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int2)                                                       # STEP 76
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1037c5950> : <type 'instance'>
avl_REF0 = set([2, 20, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 20, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10362b830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 19
STOPPING TESTING DUE TO TIMEOUT
8.3135391924 PERCENT COVERED
60.2034959793 TOTAL RUNTIME
8 EXECUTED
696 TOTAL TEST OPERATIONS
26.9315690994 TIME SPENT EXECUTING TEST OPERATIONS
0.0251059532166 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1023812294 TIME SPENT CHECKING PROPERTIES
54.0339503288 TOTAL TIME SPENT RUNNING SUT
0.00440645217896 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 5                                                                 # STEP 0
int1 = 19                                                                # STEP 1
int3 = 13                                                                # STEP 2
int2 = 9                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int3)                                                        # STEP 5
int3 = 18                                                                # STEP 6
avl0 = avl.AVLTree()                                                     # STEP 7
avl0.delete(int0)                                                        # STEP 8
int0 = 20                                                                # STEP 9
result = avl1.find(int2)                                                # STEP 10
int2 = 5                                                                # STEP 11
avl1.delete(int2)                                                       # STEP 12
avl1.insert(int2)                                                       # STEP 13
int2 = 13                                                               # STEP 14
avl0.insert(int1)                                                       # STEP 15
avl0.delete(int0)                                                       # STEP 16
avl0.delete(int1)                                                       # STEP 17
avl1.insert(int3)                                                       # STEP 18
int3 = 8                                                                # STEP 19
avl0.insert(int0)                                                       # STEP 20
int1 = 8                                                                # STEP 21
int0 = 1                                                                # STEP 22
avl1.insert(int1)                                                       # STEP 23
result = avl0.find(int0)                                                # STEP 24
avl1.insert(int3)                                                       # STEP 25
int1 = 7                                                                # STEP 26
avl1 == avl0                                                            # STEP 27
int0 = 13                                                               # STEP 28
int3 = 20                                                               # STEP 29
avl0.delete(int0)                                                       # STEP 30
int0 = 13                                                               # STEP 31
result = avl1.find(int2)                                                # STEP 32
int2 = 8                                                                # STEP 33
avl0.delete(int0)                                                       # STEP 34
result = avl1.find(int2)                                                # STEP 35
avl0 == avl0                                                            # STEP 36
int0 = 6                                                                # STEP 37
int2 = 9                                                                # STEP 38
avl1.insert(int2)                                                       # STEP 39
result = avl0.find(int3)                                                # STEP 40
int3 = 4                                                                # STEP 41
avl1 == avl1                                                            # STEP 42
avl0.insert(int0)                                                       # STEP 43
int0 = 16                                                               # STEP 44
int2 = 13                                                               # STEP 45
avl0.insert(int2)                                                       # STEP 46
int2 = 6                                                                # STEP 47
avl1.insert(int1)                                                       # STEP 48
avl0.delete(int0)                                                       # STEP 49
avl0 == avl1                                                            # STEP 50
int0 = 15                                                               # STEP 51
avl1.delete(int1)                                                       # STEP 52
result = avl1.find(int1)                                                # STEP 53
result = avl1.find(int0)                                                # STEP 54
int0 = 7                                                                # STEP 55
int1 = 2                                                                # STEP 56
result = avl1.find(int2)                                                # STEP 57
result = avl0.find(int0)                                                # STEP 58
result = avl0.find(int3)                                                # STEP 59
int3 = 2                                                                # STEP 60
int2 = 13                                                               # STEP 61
avl1 == avl1                                                            # STEP 62
int0 = 6                                                                # STEP 63
avl0.delete(int1)                                                       # STEP 64
result = avl1.find(int3)                                                # STEP 65
avl0.delete(int1)                                                       # STEP 66
avl0.insert(int3)                                                       # STEP 67
int1 = 1                                                                # STEP 68
avl0.insert(int0)                                                       # STEP 69
int3 = 13                                                               # STEP 70
avl0.insert(int0)                                                       # STEP 71
avl1.delete(int3)                                                       # STEP 72
int3 = 12                                                               # STEP 73
int0 = 19                                                               # STEP 74
avl1 == avl1                                                            # STEP 75
avl0.delete(int2)                                                       # STEP 76
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10362b830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
208 BRANCHES COVERED
158 STATEMENTS COVERED

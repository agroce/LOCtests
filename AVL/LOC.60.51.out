Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.212.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104c1e518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.212.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 1
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 3
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                        # STEP 6
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
result = avl1.find(int2)                                                 # STEP 7
ACTION: result = avl1.find(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int3 = 9                                                                 # STEP 8
ACTION: int3 = 9 
int3 = 5 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 11
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 12
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 3                                                                # STEP 13
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 14
ACTION: int2 = 12 
int2 = 5 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 15
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 16
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 17
ACTION: result = avl1.find(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 19
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 21
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
int0 = 14                                                               # STEP 22
ACTION: int0 = 14 
int0 = 7 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.delete(int2)                                                       # STEP 24
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int1)                                                       # STEP 25
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 3, 5]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 26
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 27
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 28
ACTION: avl1.insert(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 29
ACTION: avl1.insert(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 3, 4, 5, 14]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 30
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 3, 4, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([9, 4, 5, 14]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 31
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10498e680> : <type 'instance'>
avl_REF1 = set([9, 4, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([9, 5, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049403f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  11 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([1, 4, 9, 11, 17, 19])
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([4, 7, 9, 11, 17, 19])
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([4, 7, 9, 11, 17, 19])
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([4, 7, 9, 11, 17, 19])
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([4, 7, 9, 11, 17, 19])
  11 [3:1]
-- < 7 [2:1]
---- < 4 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([1, 4, 7, 9, 11, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104a72368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 65 steps

SAVING TEST AS failure.212.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 2
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 3
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 5
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int1 = 4                                                                 # STEP 6
ACTION: int1 = 4 
int1 = 11 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int0)                                                        # STEP 7
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 11]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 8
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 11, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 9
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 10
ACTION: avl0.insert(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int1 = 17                                                               # STEP 11
ACTION: int1 = 17 
int1 = 4 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0 == avl0                                                            # STEP 13
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int2)                                                       # STEP 14
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 15
ACTION: result = avl0.find(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 19                                                               # STEP 16
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 17
ACTION: avl0.insert(int2) 
int2 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
==================================================
int2 = 1                                                                # STEP 18
ACTION: int2 = 1 
int2 = 19 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int3 = 9                                                                # STEP 21
ACTION: int3 = 9 
int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 22
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 23
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.insert(int1)                                                       # STEP 24
ACTION: avl0.insert(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
int0 = 1                                                                # STEP 25
ACTION: int0 = 1 
int0 = 17 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int1 = 18                                                               # STEP 26
ACTION: int1 = 18 
int1 = 17 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 27
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 17, 11, 4, 9]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 29
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 31
ACTION: avl0.delete(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 7                                                                # STEP 32
ACTION: int1 = 7 
int1 = 18 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 33
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 34
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
avl_REF0 = set([19, 17, 11, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([19, 17, 11, 4, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 9, 11, 17, 19]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 37
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.display()                                                          # STEP 38
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 9, 11, 17, 19]) : <type 'set'>
  11 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 9, 11, 17, 19])
==================================================
int3 = 1                                                                # STEP 39
ACTION: int3 = 1 
int3 = 14 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 40
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([4, 9, 11, 17, 19]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 41
ACTION: int3 = 17 
int3 = 1 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 42
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 43
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 44
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0 == avl0                                                            # STEP 45
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.display()                                                          # STEP 46
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 9, 11, 17, 19])
==================================================
avl0.display()                                                          # STEP 47
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 9, 11, 17, 19])
==================================================
result = avl0.find(int3)                                                # STEP 48
ACTION: result = avl0.find(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.display()                                                          # STEP 49
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 9, 11, 17, 19])
==================================================
avl1.delete(int1)                                                       # STEP 50
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 52
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1 == avl0                                                            # STEP 54
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int0)                                                       # STEP 55
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 57
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 14]) : <type 'set'>
==================================================
avl0.display()                                                          # STEP 58
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
  11 [2:0]
-- < 7 [1:0]
---- < 4 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([4, 7, 9, 11, 17, 19])
==================================================
avl1.delete(int0)                                                       # STEP 59
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104a7fc20> : <type 'instance'>
avl_REF1 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([14]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 4, 7, 9, 11, 17, 19]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 61
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.display()                                                          # STEP 63
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 9, 11, 17, 19]) : <type 'set'>
  11 [3:1]
-- < 7 [2:1]
---- < 4 [1:1]
------ < 1 [0:0] L
---- > 9 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([1, 4, 7, 9, 11, 17, 19])
==================================================
avl0.delete(int3)                                                       # STEP 64
ACTION: avl0.delete(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104a72758> : <type 'instance'>
avl_REF0 = set([1, 4, 7, 9, 11, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1, 4, 7, 9, 11, 19]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fa9ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  15 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([2, 4, 11, 15, 16, 17])
  15 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
set([2, 4, 11, 15, 16, 17])
  11 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
set([2, 4, 5, 11, 15, 17])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ed4c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 72 steps

SAVING TEST AS failure.212.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl0 = avl.AVLTree()                                                     # STEP 0
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 6                                                                 # STEP 1
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 13                                                                # STEP 2
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.find(int3)                                                 # STEP 3
ACTION: result = avl0.find(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int2)                                                        # STEP 4
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 15                                                                # STEP 5
ACTION: int3 = 15 
int3 = 6 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 6
ACTION: int2 = 15 
int2 = 13 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 7
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 8
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 10
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 15]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 13
ACTION: int2 = 11 
int2 = 15 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 14
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 17                                                               # STEP 15
ACTION: int0 = 17 
int0 = 17 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int3 = 4                                                                # STEP 17
ACTION: int3 = 4 
int3 = 15 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 11, 15]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 19
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 20
ACTION: int0 = 19 
int0 = 17 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 21
ACTION: int2 = 17 
int2 = 11 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 22
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([11, 15]) : <type 'set'>
==================================================
int1 = 8                                                                # STEP 24
ACTION: int1 = 8 
int1 = 7 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 26
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([17, 11, 15]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 28
ACTION: avl0.insert(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 29
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 11, 4, 15]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 30
ACTION: int3 = 16 
int3 = 4 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([17, 11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 17, 11, 4, 15]) : <type 'set'>
==================================================
int2 = 2                                                                # STEP 32
ACTION: int2 = 2 
int2 = 17 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 33
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([16, 17, 11, 4, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 34
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 16                                                               # STEP 35
ACTION: int2 = 16 
int2 = 2 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 36
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.display()                                                          # STEP 37
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
  15 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 4, 11, 15, 16, 17])
==================================================
avl0.display()                                                          # STEP 38
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
  15 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 11 [0:0] L
-- > 17 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 4, 11, 15, 16, 17])
==================================================
avl0.delete(int0)                                                       # STEP 39
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int2)                                                       # STEP 40
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 42
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 4, 11, 15, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 45
ACTION: avl0.insert(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 4, 11, 15, 16, 17, 19]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 47
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 48
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 49
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 16, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 50
ACTION: result = avl0.find(int0) 
int0 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 51
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 52
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 53
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f1a518> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 54
ACTION: int2 = 5 
int2 = 16 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 55
ACTION: avl0.delete(int3) 
int3 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 56
ACTION: int3 = 5 
int3 = 16 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 57
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl0.inorder()                                                 # STEP 58
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 59
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f1a518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 60
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 61
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f1a518> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0 == avl0                                                            # STEP 63
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.display()                                                          # STEP 64
ACTION: avl0.display() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
  11 [2:0]
-- < 4 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 15 [1:-1]
---- > 17 [0:0] L
REFERENCE ACTION: print(avl_REF0) 
set([2, 4, 5, 11, 15, 17])
==================================================
avl0.insert(int3)                                                       # STEP 65
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 66
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.insert(int2)                                                       # STEP 67
ACTION: avl0.insert(int2) 
int2 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 3, 4, 5, 11, 15, 17]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 69
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 18                                                               # STEP 70
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 71
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ed6878> : <type 'instance'>
avl_REF0 = set([2, 3, 4, 5, 11, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2, 3, 4, 11, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104eef4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:31.760001) Fri Apr 28 05:46:55 2017 [ 160 stmts 212 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ee05a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 45 steps

SAVING TEST AS failure.212.test.3
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 18                                                                # STEP 0
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 3
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                        # STEP 4
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                        # STEP 6
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 7
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                        # STEP 8
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 11
ACTION: avl0.delete(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.find(int1)                                                # STEP 12
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 15
ACTION: avl2.delete(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 17
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 18
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 19
ACTION: int1 = 11 
int1 = 18 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 21
ACTION: result = avl0.find(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int1)                                                       # STEP 22
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([18, 11]) : <type 'set'>
==================================================
int3 = 15                                                               # STEP 23
ACTION: int3 = 15 
int3 = 18 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 24
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 11, 2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 26
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 11]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 27
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18, 11, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([18, 11, 2, 15]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 29
ACTION: int1 = 19 
int1 = 11 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 30
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.find(int3)                                                # STEP 31
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 8                                                                # STEP 32
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 33
ACTION: int3 = 19 
int3 = 15 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([18, 19]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 35
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 18, 19]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([8, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
int2 = 8                                                                # STEP 37
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
int1 = 10                                                               # STEP 38
ACTION: int1 = 10 
int1 = 19 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 39
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 40
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x104f2f290> : <type 'instance'>
avl_REF1 = set([8, 18, 19]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x104ec2170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 11]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 42
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104ed4a70> : <type 'instance'>
avl_REF2 = set([8, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18, 11, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 44
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104ee0a70> : <type 'instance'>
avl_REF0 = set([18, 11, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([18, 11, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ec2ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 4 DISTINCT FAILURES
  7 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 2, 4, 5, 7, 11, 14])
  7 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 2, 4, 5, 7, 11, 14])
  7 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 2, 4, 5, 7, 11, 14])
  7 [3:1]
-- < 4 [2:1]
---- < 1 [1:-1]
------ > 2 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 2, 4, 5, 7, 11, 14])
  7 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 4, 5, 7, 11, 14])
  7 [2:0]
-- < 4 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 4, 5, 7, 11, 14])
  13 [2:0]
-- < 6 [1:1]
---- < 2 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 17 [0:0] L
set([2, 6, 13, 14, 16, 17])
  13 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 6 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 16 [0:0] L
set([2, 5, 6, 13, 14, 15, 16])
  13 [3:1]
-- < 5 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 6 [0:0] L
-- > 16 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([1, 2, 5, 6, 13, 14, 16, 18])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.203950882 TOTAL RUNTIME
8 EXECUTED
613 TOTAL TEST OPERATIONS
22.110565424 TIME SPENT EXECUTING TEST OPERATIONS
0.0636515617371 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
22.2805500031 TIME SPENT CHECKING PROPERTIES
44.391115427 TOTAL TIME SPENT RUNNING SUT
0.00423383712769 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
4 FAILED
0 REPEATS OF FAILURES
4 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 4                                                                 # STEP 0
int0 = 7                                                                 # STEP 1
int2 = 5                                                                 # STEP 2
int3 = 5                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int0)                                                        # STEP 5
avl1.delete(int3)                                                        # STEP 6
result = avl1.find(int2)                                                 # STEP 7
int3 = 9                                                                 # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
avl1.insert(int3)                                                       # STEP 11
result = avl1.inorder()                                                 # STEP 12
int3 = 3                                                                # STEP 13
int2 = 12                                                               # STEP 14
avl1.delete(int1)                                                       # STEP 15
result = avl1.inorder()                                                 # STEP 16
result = avl1.find(int3)                                                # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.insert(int1)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl1.insert(int3)                                                       # STEP 21
int0 = 14                                                               # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl1.delete(int2)                                                       # STEP 24
avl1.delete(int1)                                                       # STEP 25
result = avl1.inorder()                                                 # STEP 26
avl1.insert(int1)                                                       # STEP 27
avl1.insert(int1)                                                       # STEP 28
avl1.insert(int0)                                                       # STEP 29
avl1.delete(int3)                                                       # STEP 30
avl1.delete(int1)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049403f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int3 = 9                                                                 # STEP 0
int1 = 11                                                                # STEP 1
int0 = 17                                                                # STEP 2
int2 = 4                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int1)                                                        # STEP 5
int1 = 4                                                                 # STEP 6
avl0.insert(int0)                                                        # STEP 7
avl0.insert(int1)                                                        # STEP 8
avl0.insert(int1)                                                        # STEP 9
avl0.insert(int1)                                                       # STEP 10
int1 = 17                                                               # STEP 11
avl0.insert(int0)                                                       # STEP 12
avl0 == avl0                                                            # STEP 13
avl0.insert(int2)                                                       # STEP 14
result = avl0.find(int2)                                                # STEP 15
int2 = 19                                                               # STEP 16
avl0.insert(int2)                                                       # STEP 17
int2 = 1                                                                # STEP 18
avl0.delete(int3)                                                       # STEP 19
avl0.insert(int0)                                                       # STEP 20
int3 = 9                                                                # STEP 21
result = avl0.find(int0)                                                # STEP 22
avl0 == avl0                                                            # STEP 23
avl0.insert(int1)                                                       # STEP 24
int0 = 1                                                                # STEP 25
int1 = 18                                                               # STEP 26
avl1 = avl.AVLTree()                                                    # STEP 27
avl0.insert(int3)                                                       # STEP 28
int3 = 14                                                               # STEP 29
avl1.delete(int1)                                                       # STEP 30
avl0.delete(int3)                                                       # STEP 31
int1 = 7                                                                # STEP 32
avl1.insert(int3)                                                       # STEP 33
avl1 == avl0                                                            # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl0.insert(int2)                                                       # STEP 37
avl0.display()                                                          # STEP 38
int3 = 1                                                                # STEP 39
avl0.delete(int3)                                                       # STEP 40
int3 = 17                                                               # STEP 41
avl1.insert(int0)                                                       # STEP 42
avl0.insert(int1)                                                       # STEP 43
avl1.delete(int0)                                                       # STEP 44
avl0 == avl0                                                            # STEP 45
avl0.display()                                                          # STEP 46
avl0.display()                                                          # STEP 47
result = avl0.find(int3)                                                # STEP 48
avl0.display()                                                          # STEP 49
avl1.delete(int1)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl1.delete(int0)                                                       # STEP 52
avl0.delete(int0)                                                       # STEP 53
avl1 == avl0                                                            # STEP 54
avl1.delete(int0)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
avl1.insert(int2)                                                       # STEP 57
avl0.display()                                                          # STEP 58
avl1.delete(int0)                                                       # STEP 59
avl0.insert(int2)                                                       # STEP 60
result = avl0.find(int1)                                                # STEP 61
avl0.insert(int0)                                                       # STEP 62
avl0.display()                                                          # STEP 63
avl0.delete(int3)                                                       # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104fa9ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
avl0 = avl.AVLTree()                                                     # STEP 0
int3 = 6                                                                 # STEP 1
int2 = 13                                                                # STEP 2
result = avl0.find(int3)                                                 # STEP 3
avl0.delete(int2)                                                        # STEP 4
int3 = 15                                                                # STEP 5
int2 = 15                                                                # STEP 6
int0 = 17                                                                # STEP 7
avl0.delete(int0)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
avl0.insert(int3)                                                       # STEP 10
avl0.insert(int2)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
int2 = 11                                                               # STEP 13
int1 = 7                                                                # STEP 14
int0 = 17                                                               # STEP 15
avl0.delete(int2)                                                       # STEP 16
int3 = 4                                                                # STEP 17
avl0.insert(int2)                                                       # STEP 18
result = avl0.find(int0)                                                # STEP 19
int0 = 19                                                               # STEP 20
int2 = 17                                                               # STEP 21
avl0.delete(int1)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
int1 = 8                                                                # STEP 24
avl0.delete(int0)                                                       # STEP 25
result = avl0.inorder()                                                 # STEP 26
avl0.insert(int2)                                                       # STEP 27
avl0.insert(int2)                                                       # STEP 28
avl0.insert(int3)                                                       # STEP 29
int3 = 16                                                               # STEP 30
avl0.insert(int3)                                                       # STEP 31
int2 = 2                                                                # STEP 32
avl0.insert(int2)                                                       # STEP 33
result = avl0.inorder()                                                 # STEP 34
int2 = 16                                                               # STEP 35
avl0 == avl0                                                            # STEP 36
avl0.display()                                                          # STEP 37
avl0.display()                                                          # STEP 38
avl0.delete(int0)                                                       # STEP 39
avl0.delete(int2)                                                       # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl0.insert(int0)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.delete(int3)                                                       # STEP 44
avl0.insert(int3)                                                       # STEP 45
avl0.delete(int0)                                                       # STEP 46
int1 = 3                                                                # STEP 47
result = avl0.inorder()                                                 # STEP 48
avl0.delete(int2)                                                       # STEP 49
result = avl0.find(int0)                                                # STEP 50
int0 = 3                                                                # STEP 51
avl0.delete(int2)                                                       # STEP 52
avl1 = avl.AVLTree()                                                    # STEP 53
int2 = 5                                                                # STEP 54
avl0.delete(int3)                                                       # STEP 55
int3 = 5                                                                # STEP 56
avl0.delete(int3)                                                       # STEP 57
result = avl0.inorder()                                                 # STEP 58
avl1.delete(int3)                                                       # STEP 59
avl0.insert(int2)                                                       # STEP 60
avl1.insert(int3)                                                       # STEP 61
avl0.insert(int2)                                                       # STEP 62
avl0 == avl0                                                            # STEP 63
avl0.display()                                                          # STEP 64
avl0.insert(int3)                                                       # STEP 65
avl0.insert(int3)                                                       # STEP 66
avl0.insert(int2)                                                       # STEP 67
avl0.insert(int1)                                                       # STEP 68
result = avl0.inorder()                                                 # STEP 69
int1 = 18                                                               # STEP 70
avl0.delete(int3)                                                       # STEP 71
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104eef4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 3
int3 = 18                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
int1 = 18                                                                # STEP 2
avl0 = avl.AVLTree()                                                     # STEP 3
avl0.delete(int1)                                                        # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int3)                                                        # STEP 6
avl2.delete(int3)                                                        # STEP 7
avl2.insert(int1)                                                        # STEP 8
result = avl2.find(int1)                                                 # STEP 9
avl0.delete(int1)                                                       # STEP 10
avl0.delete(int3)                                                       # STEP 11
result = avl2.find(int1)                                                # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
avl2.delete(int3)                                                       # STEP 15
int0 = 2                                                                # STEP 16
result = avl2.inorder()                                                 # STEP 17
avl1 = avl.AVLTree()                                                    # STEP 18
int1 = 11                                                               # STEP 19
avl1.insert(int3)                                                       # STEP 20
result = avl0.find(int1)                                                # STEP 21
avl0.insert(int1)                                                       # STEP 22
int3 = 15                                                               # STEP 23
avl2.insert(int1)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
avl1.insert(int1)                                                       # STEP 26
avl1.delete(int1)                                                       # STEP 27
avl0.insert(int3)                                                       # STEP 28
int1 = 19                                                               # STEP 29
result = avl1.inorder()                                                 # STEP 30
result = avl1.find(int3)                                                # STEP 31
int2 = 8                                                                # STEP 32
int3 = 19                                                               # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl1.insert(int2)                                                       # STEP 35
avl1.insert(int1)                                                       # STEP 36
int2 = 8                                                                # STEP 37
int1 = 10                                                               # STEP 38
result = avl2.inorder()                                                 # STEP 39
avl1 = avl.AVLTree()                                                    # STEP 40
avl2.insert(int2)                                                       # STEP 41
avl2.delete(int0)                                                       # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.delete(int0)                                                       # STEP 44
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ec2ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

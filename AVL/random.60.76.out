Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.710.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031a9170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 60 steps

SAVING TEST AS failure.710.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 4                                                                 # STEP 1
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 2
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 3
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 4
ACTION: avl2.delete(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 9                                                                 # STEP 5
ACTION: int1 = 9 
int1 = 18 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 6
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
int0 = 6                                                                 # STEP 8
ACTION: int0 = 6 
int0 = 4 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 9
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4, 6]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int0 = 8                                                                # STEP 11
ACTION: int0 = 8 
int0 = 6 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 12
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                            # STEP 13
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
result = avl1.find(int3)                                                # STEP 14
ACTION: result = avl1.find(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 15
ACTION: int3 = 8 
int3 = 6 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 16
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 17
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([11, 4, 6]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 18
ACTION: result = avl2.find(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 19
ACTION: int1 = 10 
int1 = 9 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([8, 11, 4, 6]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 21
ACTION: int2 = 3 
int2 = 11 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 22
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 20                                                               # STEP 24
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 25
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([8, 11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11, 4, 6]) : <type 'set'>
==================================================
int3 = 10                                                               # STEP 26
ACTION: int3 = 10 
int3 = 8 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 27
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 == avl2                                                            # STEP 28
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 30
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 6                                                                # STEP 33
ACTION: int3 = 6 
int3 = 10 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 34
ACTION: int2 = 20 
int2 = 3 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 35
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 36
ACTION: result = avl0.find(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0 == avl2                                                            # STEP 37
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl1.insert(int1)                                                       # STEP 38
ACTION: avl1.insert(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([10]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 39
ACTION: int1 = 1 
int1 = 10 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 6]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 41
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 42
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 43
ACTION: int3 = 12 
int3 = 14 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 44
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 19                                                               # STEP 46
ACTION: int1 = 19 
int1 = 1 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1 == avl0                                                            # STEP 47
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
avl1.delete(int3)                                                       # STEP 48
ACTION: avl1.delete(int3) 
int3 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 7                                                                # STEP 49
ACTION: int3 = 7 
int3 = 12 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([20, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 51
ACTION: avl2.delete(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1 == avl2                                                            # STEP 52
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x10333de60> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
avl_REF2 = set([11, 4, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int0 = 2                                                                # STEP 53
ACTION: int0 = 2 
int0 = 20 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 54
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 2                                                                # STEP 55
ACTION: int3 = 2 
int3 = 7 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 56
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 20, 14]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 57
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1038f9b00> : <type 'instance'>
avl_REF1 = set([10, 6]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x1038d7c68> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 58
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 19, 20, 14]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1038ec7a0> : <type 'instance'>
avl_REF0 = set([2, 19, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 20, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038e7830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #30 (0:00:30.029925) Fri Apr 28 07:04:22 2017 [ 148 stmts 195 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10365b5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 34 steps

SAVING TEST AS failure.710.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 19                                                                # STEP 0
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 4                                                                 # STEP 2
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([4]) : <type 'set'>
==================================================
int1 = 19                                                                # STEP 4
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 5
ACTION: int2 = 14 
int2 = 4 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 6
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
avl0.delete(int0)                                                        # STEP 7
ACTION: avl0.delete(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([19, 4]) : <type 'set'>
==================================================
int0 = 12                                                                # STEP 9
ACTION: int0 = 12 
int0 = 5 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 10
ACTION: int3 = 9 
int3 = 19 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 11
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 2                                                                # STEP 12
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 14
ACTION: int2 = 10 
int2 = 14 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 19, 4]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 16
ACTION: int0 = 2 
int0 = 12 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 19, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([12, 4]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 18
ACTION: avl0.insert(int0) 
int0 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 2, 4]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 19
ACTION: int1 = 6 
int1 = 19 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 20
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 21
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 2, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 1                                                                # STEP 22
ACTION: int2 = 1 
int2 = 10 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([12, 2, 4, 20]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 24
ACTION: result = avl0.find(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 25
ACTION: int0 = 8 
int0 = 20 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 11                                                               # STEP 27
ACTION: int1 = 11 
int1 = 6 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 28
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x10370c098> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 29
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10370c098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 5                                                                # STEP 30
ACTION: int2 = 5 
int2 = 1 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 31
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x10370c098> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 2                                                                # STEP 32
ACTION: int2 = 2 
int2 = 5 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 33
ACTION: avl0.delete(int3) 
int3 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103652128> : <type 'instance'>
avl_REF0 = set([12, 2, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([12, 4, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10370ce60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 26
STOPPING TESTING DUE TO TIMEOUT
7.83847980998 PERCENT COVERED
60.2254159451 TOTAL RUNTIME
8 EXECUTED
620 TOTAL TEST OPERATIONS
25.9668443203 TIME SPENT EXECUTING TEST OPERATIONS
0.0229058265686 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.1692860126 TIME SPENT CHECKING PROPERTIES
52.1361303329 TOTAL TIME SPENT RUNNING SUT
0.0042986869812 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
avl2 = avl.AVLTree()                                                     # STEP 0
int0 = 4                                                                 # STEP 1
int1 = 18                                                                # STEP 2
int2 = 11                                                                # STEP 3
avl2.delete(int1)                                                        # STEP 4
int1 = 9                                                                 # STEP 5
int3 = 6                                                                 # STEP 6
avl2.insert(int0)                                                        # STEP 7
int0 = 6                                                                 # STEP 8
avl2.insert(int0)                                                        # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 8                                                                # STEP 11
avl1 = avl.AVLTree()                                                    # STEP 12
avl1 == avl1                                                            # STEP 13
result = avl1.find(int3)                                                # STEP 14
int3 = 8                                                                # STEP 15
avl1.delete(int0)                                                       # STEP 16
avl2.insert(int2)                                                       # STEP 17
result = avl2.find(int1)                                                # STEP 18
int1 = 10                                                               # STEP 19
avl2.insert(int0)                                                       # STEP 20
int2 = 3                                                                # STEP 21
int0 = 19                                                               # STEP 22
avl1.delete(int0)                                                       # STEP 23
int0 = 20                                                               # STEP 24
avl2.delete(int3)                                                       # STEP 25
int3 = 10                                                               # STEP 26
result = avl1.inorder()                                                 # STEP 27
avl2 == avl2                                                            # STEP 28
avl1.delete(int3)                                                       # STEP 29
avl1.delete(int3)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
avl2.delete(int2)                                                       # STEP 32
int3 = 6                                                                # STEP 33
int2 = 20                                                               # STEP 34
avl0 = avl.AVLTree()                                                    # STEP 35
result = avl0.find(int1)                                                # STEP 36
avl0 == avl2                                                            # STEP 37
avl1.insert(int1)                                                       # STEP 38
int1 = 1                                                                # STEP 39
avl1.insert(int3)                                                       # STEP 40
int3 = 14                                                               # STEP 41
avl0.insert(int3)                                                       # STEP 42
int3 = 12                                                               # STEP 43
avl2 == avl1                                                            # STEP 44
avl2.delete(int1)                                                       # STEP 45
int1 = 19                                                               # STEP 46
avl1 == avl0                                                            # STEP 47
avl1.delete(int3)                                                       # STEP 48
int3 = 7                                                                # STEP 49
avl0.insert(int0)                                                       # STEP 50
avl2.delete(int0)                                                       # STEP 51
avl1 == avl2                                                            # STEP 52
int0 = 2                                                                # STEP 53
avl0.delete(int3)                                                       # STEP 54
int3 = 2                                                                # STEP 55
avl0.insert(int1)                                                       # STEP 56
avl1 = avl.AVLTree()                                                    # STEP 57
avl0.insert(int3)                                                       # STEP 58
avl0.delete(int1)                                                       # STEP 59
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038e7830>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 19                                                                # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
int2 = 4                                                                 # STEP 2
avl0.insert(int2)                                                        # STEP 3
int1 = 19                                                                # STEP 4
int2 = 14                                                                # STEP 5
int0 = 5                                                                 # STEP 6
avl0.delete(int0)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
int0 = 12                                                                # STEP 9
int3 = 9                                                                # STEP 10
result = avl0.find(int3)                                                # STEP 11
int3 = 2                                                                # STEP 12
result = avl0.find(int2)                                                # STEP 13
int2 = 10                                                               # STEP 14
avl0.insert(int0)                                                       # STEP 15
int0 = 2                                                                # STEP 16
avl0.delete(int1)                                                       # STEP 17
avl0.insert(int0)                                                       # STEP 18
int1 = 6                                                                # STEP 19
int0 = 20                                                               # STEP 20
result = avl0.find(int2)                                                # STEP 21
int2 = 1                                                                # STEP 22
avl0.insert(int0)                                                       # STEP 23
result = avl0.find(int0)                                                # STEP 24
int0 = 8                                                                # STEP 25
avl0.delete(int1)                                                       # STEP 26
int1 = 11                                                               # STEP 27
avl2 = avl.AVLTree()                                                    # STEP 28
avl2.delete(int2)                                                       # STEP 29
int2 = 5                                                                # STEP 30
avl2.delete(int2)                                                       # STEP 31
int2 = 2                                                                # STEP 32
avl0.delete(int3)                                                       # STEP 33
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10370ce60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
196 BRANCHES COVERED
148 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99648.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 8 [1:1]
---- < 5 [0:0] L
-- > 15 [1:0]
---- < 14 [0:0] L
---- > 18 [0:0] L
set([5, 8, 11, 14, 15, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042387a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 90 steps

SAVING TEST AS failure.99648.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([20]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 6
ACTION: result = avl0.find(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int3 = 11                                                                # STEP 7
ACTION: int3 = 11 
int3 = 20 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.delete(int2)                                                        # STEP 8
ACTION: avl0.delete(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int0)                                                 # STEP 9
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int1 = 4                                                                # STEP 10
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 11
ACTION: avl0.insert(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([18, 20]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 12
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 13
ACTION: result = avl0.find(int2) 
int2 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 7                                                                # STEP 14
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 15
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl0.find(int2)                                                # STEP 17
ACTION: result = avl0.find(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 18
ACTION: result = avl0.find(int3) 
int3 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 9                                                                # STEP 19
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 20
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 21
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 22
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int3 = 4                                                                # STEP 23
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 25
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 27
ACTION: avl0.insert(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([4, 18, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 28
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 4]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 29
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x10467d440> : <type 'instance'>
avl_REF0 = set([4, 18, 20]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 30
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 31
ACTION: int0 = 5 
int0 = 2 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 32
ACTION: int1 = 5 
int1 = 4 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int3 = 4                                                                # STEP 33
ACTION: int3 = 4 
int3 = 4 : <type 'int'>
==================================================
int2 = 12                                                               # STEP 34
ACTION: int2 = 12 
int2 = 7 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 35
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 36
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int0 = 6                                                                # STEP 37
ACTION: int0 = 6 
int0 = 5 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 38
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 39
ACTION: avl1.insert(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 12]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 40
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.insert(int0)                                                       # STEP 41
ACTION: avl0.insert(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5, 6]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 42
ACTION: int2 = 11 
int2 = 12 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([6]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 44
ACTION: result = avl0.find(int0) 
int0 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
int0 = 10                                                               # STEP 45
ACTION: int0 = 10 
int0 = 6 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 46
ACTION: int1 = 9 
int1 = 5 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 47
ACTION: avl1.delete(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
result = avl1.find(int0)                                                # STEP 48
ACTION: result = avl1.find(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 19                                                               # STEP 49
ACTION: int0 = 19 
int0 = 10 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 50
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([11, 6]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 51
ACTION: int2 = 14 
int2 = 11 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 52
ACTION: result = avl1.find(int0) 
int0 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 53
ACTION: avl1.delete(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl0                                                            # STEP 54
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
avl_REF0 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
int2 = 15                                                               # STEP 55
ACTION: int2 = 15 
int2 = 14 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 56
ACTION: avl0.delete(int1) 
int1 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int0 = 5                                                                # STEP 57
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 58
ACTION: avl1.delete(int0) 
int0 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 8                                                                # STEP 59
ACTION: int1 = 8 
int1 = 9 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 60
ACTION: int0 = 9 
int0 = 5 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 61
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([9, 11, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 62
ACTION: result = avl0.find(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([9, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 63
ACTION: int2 = 20 
int2 = 15 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 64
ACTION: result = avl0.find(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([9, 11, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int0 = 10                                                               # STEP 65
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 66
ACTION: avl0.insert(int2) 
int2 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([9, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([9, 11, 20, 6]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 67
ACTION: avl1.insert(int0) 
int0 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 12, 10]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 68
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([9, 11, 20, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 69
ACTION: avl0.delete(int0) 
int0 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int1 = 12                                                               # STEP 70
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 4                                                                # STEP 71
ACTION: int0 = 4 
int0 = 10 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 72
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 73
ACTION: result = avl1.find(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 15                                                               # STEP 74
ACTION: int2 = 15 
int2 = 2 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 75
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 76
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042eacb0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                # STEP 77
ACTION: int2 = 6 
int2 = 15 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 78
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl0                                                            # STEP 79
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1042eacb0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl2.delete(int3)                                                       # STEP 80
ACTION: avl2.delete(int3) 
int3 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042eacb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 11                                                               # STEP 81
ACTION: int3 = 11 
int3 = 14 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 82
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 11                                                               # STEP 83
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 84
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([2, 12, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4, 2, 12, 10]) : <type 'set'>
==================================================
int0 = 5                                                                # STEP 85
ACTION: int0 = 5 
int0 = 4 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 86
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042eacb0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 10                                                               # STEP 87
ACTION: int3 = 10 
int3 = 11 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 88
ACTION: avl0 = avl.AVLTree() 
avl0 = <avl.AVLTree instance at 0x1046479e0> : <type 'instance'>
avl_REF0 = set([6, 8, 9, 11, 20]) : <type 'set'>
=> avl0 = <avl.AVLTree instance at 0x1042fecf8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 89
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1046684d0> : <type 'instance'>
avl_REF1 = set([4, 2, 12, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([4, 2, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042feb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #45 (0:00:30.011708) Fri Apr 28 04:31:32 2017 [ 163 stmts 218 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042f7c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 74 steps

SAVING TEST AS failure.99648.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl2 = avl.AVLTree()                                                     # STEP 0
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int2 = 6                                                                 # STEP 1
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 3
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 4
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
int0 = 11                                                                # STEP 6
ACTION: int0 = 11 
int0 = 20 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 7
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 15                                                                # STEP 8
ACTION: int0 = 15 
int0 = 11 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 10
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 12
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int0 = 6                                                                # STEP 13
ACTION: int0 = 6 
int0 = 15 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 14
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 16
ACTION: avl0.delete(int1) 
int1 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 8                                                                # STEP 17
ACTION: int1 = 8 
int1 = 18 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 18
ACTION: int3 = 10 
int3 = 20 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 20
ACTION: result = avl0.find(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 13                                                               # STEP 21
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 6]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 23
ACTION: int2 = 8 
int2 = 6 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 24
ACTION: result = avl2.find(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 15]) : <type 'set'>
==================================================
int2 = 7                                                                # STEP 26
ACTION: int2 = 7 
int2 = 8 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 27
ACTION: avl0.delete(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 28
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18, 13, 6]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 29
ACTION: int3 = 1 
int3 = 13 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl0 == avl2                                                            # STEP 30
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
avl_REF2 = set([18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18, 13, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 13, 6, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 32
ACTION: avl2.insert(int1) 
int1 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([18, 13, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([6, 7, 8, 13, 18]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 33
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([8, 1, 15]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 34
ACTION: int1 = 2 
int1 = 8 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 35
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 36
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 37
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104305cb0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 3                                                                # STEP 38
ACTION: int0 = 3 
int0 = 6 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 39
ACTION: int2 = 5 
int2 = 7 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 40
ACTION: avl2.insert(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
==================================================
int2 = 4                                                                # STEP 41
ACTION: int2 = 4 
int2 = 5 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 42
ACTION: avl0.insert(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
result = avl0.find(int0)                                                # STEP 43
ACTION: result = avl0.find(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.delete(int1)                                                       # STEP 44
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 4                                                                # STEP 45
ACTION: int1 = 4 
int1 = 2 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 46
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 47
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1 == avl1                                                            # STEP 48
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104305cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 12                                                               # STEP 49
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 50
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 16                                                               # STEP 51
ACTION: int0 = 16 
int0 = 3 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 52
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 53
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
result = avl2.find(int2)                                                # STEP 54
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 55
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 56
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2 == avl2                                                            # STEP 57
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 9                                                                # STEP 58
ACTION: int2 = 9 
int2 = 10 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 59
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 60
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 61
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 62
ACTION: avl1.delete(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104305cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 8                                                                # STEP 63
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 64
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl1 == avl1                                                            # STEP 65
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x104305cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 16                                                               # STEP 66
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 67
ACTION: avl1.insert(int2) 
int2 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104305cb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 68
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6, 7, 8, 13, 16, 18]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 70
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1042f95f0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 8, 13, 16, 18]) : <type 'set'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
int0 = 11                                                               # STEP 71
ACTION: int0 = 11 
int0 = 16 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 72
ACTION: result = avl0.find(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 73
ACTION: avl0.delete(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1042defc8> : <type 'instance'>
avl_REF0 = set([8, 1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 2, 15]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104284170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.1962869167 TOTAL RUNTIME
8 EXECUTED
671 TOTAL TEST OPERATIONS
23.9004375935 TIME SPENT EXECUTING TEST OPERATIONS
0.0228078365326 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.033775568 TIME SPENT CHECKING PROPERTIES
47.9342131615 TOTAL TIME SPENT RUNNING SUT
0.00442790985107 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
int3 = 20                                                                # STEP 1
int1 = 2                                                                 # STEP 2
int2 = 18                                                                # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
result = avl0.find(int1)                                                 # STEP 6
int3 = 11                                                                # STEP 7
avl0.delete(int2)                                                        # STEP 8
result = avl0.find(int0)                                                 # STEP 9
int1 = 4                                                                # STEP 10
avl0.insert(int2)                                                       # STEP 11
int0 = 2                                                                # STEP 12
result = avl0.find(int2)                                                # STEP 13
int2 = 7                                                                # STEP 14
result = avl0.inorder()                                                 # STEP 15
avl0.delete(int2)                                                       # STEP 16
result = avl0.find(int2)                                                # STEP 17
result = avl0.find(int3)                                                # STEP 18
int3 = 9                                                                # STEP 19
result = avl0.find(int3)                                                # STEP 20
avl0.delete(int3)                                                       # STEP 21
avl1 = avl.AVLTree()                                                    # STEP 22
int3 = 4                                                                # STEP 23
avl1.insert(int3)                                                       # STEP 24
result = avl1.find(int0)                                                # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl0.insert(int3)                                                       # STEP 27
avl1.insert(int0)                                                       # STEP 28
avl0 = avl.AVLTree()                                                    # STEP 29
avl1.delete(int1)                                                       # STEP 30
int0 = 5                                                                # STEP 31
int1 = 5                                                                # STEP 32
int3 = 4                                                                # STEP 33
int2 = 12                                                               # STEP 34
avl0.insert(int0)                                                       # STEP 35
avl0.delete(int3)                                                       # STEP 36
int0 = 6                                                                # STEP 37
int3 = 14                                                               # STEP 38
avl1.insert(int2)                                                       # STEP 39
avl1.delete(int0)                                                       # STEP 40
avl0.insert(int0)                                                       # STEP 41
int2 = 11                                                               # STEP 42
avl0.delete(int1)                                                       # STEP 43
result = avl0.find(int0)                                                # STEP 44
int0 = 10                                                               # STEP 45
int1 = 9                                                                # STEP 46
avl1.delete(int0)                                                       # STEP 47
result = avl1.find(int0)                                                # STEP 48
int0 = 19                                                               # STEP 49
avl0.insert(int2)                                                       # STEP 50
int2 = 14                                                               # STEP 51
result = avl1.find(int0)                                                # STEP 52
avl1.delete(int2)                                                       # STEP 53
avl1 == avl0                                                            # STEP 54
int2 = 15                                                               # STEP 55
avl0.delete(int1)                                                       # STEP 56
int0 = 5                                                                # STEP 57
avl1.delete(int0)                                                       # STEP 58
int1 = 8                                                                # STEP 59
int0 = 9                                                                # STEP 60
avl0.insert(int0)                                                       # STEP 61
result = avl0.find(int2)                                                # STEP 62
int2 = 20                                                               # STEP 63
result = avl0.find(int2)                                                # STEP 64
int0 = 10                                                               # STEP 65
avl0.insert(int2)                                                       # STEP 66
avl1.insert(int0)                                                       # STEP 67
avl0.insert(int1)                                                       # STEP 68
avl0.delete(int0)                                                       # STEP 69
int1 = 12                                                               # STEP 70
int0 = 4                                                                # STEP 71
int2 = 2                                                                # STEP 72
result = avl1.find(int2)                                                # STEP 73
int2 = 15                                                               # STEP 74
avl0.delete(int2)                                                       # STEP 75
avl2 = avl.AVLTree()                                                    # STEP 76
int2 = 6                                                                # STEP 77
result = avl0.inorder()                                                 # STEP 78
avl2 == avl0                                                            # STEP 79
avl2.delete(int3)                                                       # STEP 80
int3 = 11                                                               # STEP 81
avl0.delete(int1)                                                       # STEP 82
int1 = 11                                                               # STEP 83
avl1.insert(int0)                                                       # STEP 84
int0 = 5                                                                # STEP 85
result = avl2.find(int3)                                                # STEP 86
int3 = 10                                                               # STEP 87
avl0 = avl.AVLTree()                                                    # STEP 88
avl1.delete(int3)                                                       # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1042feb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
avl2 = avl.AVLTree()                                                     # STEP 0
int2 = 6                                                                 # STEP 1
int0 = 20                                                                # STEP 2
int3 = 20                                                                # STEP 3
int1 = 18                                                                # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 11                                                                # STEP 6
result = avl2.find(int0)                                                 # STEP 7
int0 = 15                                                                # STEP 8
avl2.insert(int3)                                                        # STEP 9
avl0 = avl.AVLTree()                                                    # STEP 10
avl0.insert(int0)                                                       # STEP 11
avl0.insert(int0)                                                       # STEP 12
int0 = 6                                                                # STEP 13
avl2.delete(int3)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl0.delete(int1)                                                       # STEP 16
int1 = 8                                                                # STEP 17
int3 = 10                                                               # STEP 18
avl2.delete(int3)                                                       # STEP 19
result = avl0.find(int2)                                                # STEP 20
int3 = 13                                                               # STEP 21
avl2.insert(int2)                                                       # STEP 22
int2 = 8                                                                # STEP 23
result = avl2.find(int0)                                                # STEP 24
avl0.insert(int2)                                                       # STEP 25
int2 = 7                                                                # STEP 26
avl0.delete(int3)                                                       # STEP 27
avl2.insert(int3)                                                       # STEP 28
int3 = 1                                                                # STEP 29
avl0 == avl2                                                            # STEP 30
avl2.insert(int2)                                                       # STEP 31
avl2.insert(int1)                                                       # STEP 32
avl0.insert(int3)                                                       # STEP 33
int1 = 2                                                                # STEP 34
avl0.insert(int1)                                                       # STEP 35
int3 = 7                                                                # STEP 36
avl1 = avl.AVLTree()                                                    # STEP 37
int0 = 3                                                                # STEP 38
int2 = 5                                                                # STEP 39
avl2.insert(int2)                                                       # STEP 40
int2 = 4                                                                # STEP 41
avl0.insert(int1)                                                       # STEP 42
result = avl0.find(int0)                                                # STEP 43
avl2.delete(int1)                                                       # STEP 44
int1 = 4                                                                # STEP 45
result = avl2.find(int2)                                                # STEP 46
result = avl2.find(int1)                                                # STEP 47
avl1 == avl1                                                            # STEP 48
int1 = 12                                                               # STEP 49
avl2.delete(int0)                                                       # STEP 50
int0 = 16                                                               # STEP 51
int2 = 10                                                               # STEP 52
avl2.insert(int3)                                                       # STEP 53
result = avl2.find(int2)                                                # STEP 54
avl2.delete(int1)                                                       # STEP 55
result = avl2.find(int1)                                                # STEP 56
avl2 == avl2                                                            # STEP 57
int2 = 9                                                                # STEP 58
int3 = 3                                                                # STEP 59
int1 = 15                                                               # STEP 60
result = avl2.find(int1)                                                # STEP 61
avl1.delete(int1)                                                       # STEP 62
int1 = 8                                                                # STEP 63
avl0.delete(int2)                                                       # STEP 64
avl1 == avl1                                                            # STEP 65
int2 = 16                                                               # STEP 66
avl1.insert(int2)                                                       # STEP 67
result = avl0.find(int0)                                                # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl2 == avl0                                                            # STEP 70
int0 = 11                                                               # STEP 71
result = avl0.find(int0)                                                # STEP 72
avl0.delete(int1)                                                       # STEP 73
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104284170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

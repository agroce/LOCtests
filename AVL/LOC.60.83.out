Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.826.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 8 [1:0]
---- < 3 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:-1]
---- > 19 [0:0] L
set([3, 8, 10, 11, 17, 19])
  12 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 4, 12, 16, 17, 19])
  10 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([2, 4, 10, 12, 14, 19])
  12 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 4, 12, 16, 17, 19])
  10 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([2, 4, 10, 12, 14, 19])
  10 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([2, 4, 10, 12, 14, 19])
  10 [2:0]
-- < 2 [1:-1]
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([2, 4, 10, 12, 14, 19])
  8 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 10, 11, 20])
  8 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 10, 11, 20])
  8 [2:0]
-- < 1 [1:-1]
---- > 2 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 20 [0:0] L
set([1, 2, 8, 10, 11, 20])
TEST #4 STEP #46 (0:00:30.004170) Fri Apr 28 07:24:41 2017 [ 162 stmts 215 branches ]
  15 [2:0]
-- < 11 [1:0]
---- < 6 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([16, 17, 6, 11, 12, 15])
  15 [2:0]
-- < 11 [1:0]
---- < 6 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([16, 17, 6, 11, 12, 15])
  15 [2:0]
-- < 11 [1:0]
---- < 6 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([16, 17, 6, 11, 12, 15])
  15 [2:0]
-- < 11 [1:0]
---- < 6 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 17 [0:0] L
set([16, 17, 6, 11, 12, 15])
  10 [2:0]
-- < 9 [1:1]
---- < 6 [0:0] L
-- > 12 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([6, 9, 10, 11, 12, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103ef2050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 41 steps

SAVING TEST AS failure.826.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 2
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 3
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 5
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([5, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                        # STEP 7
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                 # STEP 8
ACTION: result = avl0.find(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.insert(int0)                                                        # STEP 9
ACTION: avl0.insert(int0) 
int0 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int1 = 7                                                                # STEP 10
ACTION: int1 = 7 
int1 = 14 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 11
ACTION: int3 = 9 
int3 = 5 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 12
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([9, 14]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 15
ACTION: int0 = 17 
int0 = 14 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 16
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 17
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int3 = 3                                                                # STEP 18
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 19
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([9, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([14]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 20
ACTION: avl0.insert(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([14, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 21
ACTION: avl0.delete(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 10                                                               # STEP 22
ACTION: int1 = 10 
int1 = 7 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 23
ACTION: int2 = 13 
int2 = 9 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 24
ACTION: avl0.delete(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int3 = 5                                                                # STEP 25
ACTION: int3 = 5 
int3 = 3 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 26
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int3)                                                       # STEP 28
ACTION: avl0.delete(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([17, 14, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 30
ACTION: avl0.insert(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 31
ACTION: avl0.delete(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 6                                                                # STEP 32
ACTION: int2 = 6 
int2 = 13 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
result = avl0.find(int0)                                                # STEP 33
ACTION: result = avl0.find(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl0 == avl0                                                            # STEP 34
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int3 = 5                                                                # STEP 35
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 36
ACTION: avl0.insert(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.find(int3)                                                # STEP 37
ACTION: result = avl0.find(int3) 
int3 = 5 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int3 = 17                                                               # STEP 38
ACTION: int3 = 17 
int3 = 5 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 39
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([17, 10, 5, 14, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 40
ACTION: avl0.delete(int0) 
int0 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c83ab8> : <type 'instance'>
avl_REF0 = set([17, 10, 5, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 5, 14, 7]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038dfc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c7ed88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 38 steps

SAVING TEST AS failure.826.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int1 = 8                                                                 # STEP 1
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 2
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 3
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                        # STEP 4
ACTION: avl1.delete(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int3 = 6                                                                 # STEP 5
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 6
ACTION: avl1.insert(int1) 
int1 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = 8 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl1.insert(int1)                                                        # STEP 8
ACTION: avl1.insert(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 12]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 9
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 10
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int3)                                                       # STEP 11
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 3                                                                # STEP 12
ACTION: int3 = 3 
int3 = 6 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 14
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 15
ACTION: result = avl1.find(int1) 
int1 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int1 = 11                                                               # STEP 16
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([8, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 18
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
avl1 == avl0                                                            # STEP 19
ACTION: avl1 == avl0 
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int0)                                                       # STEP 21
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 3, 4]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 22
ACTION: int3 = 1 
int3 = 3 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 12]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 24
ACTION: avl1.insert(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([4, 11, 12]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 25
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
int2 = 13                                                               # STEP 26
ACTION: int2 = 13 
int2 = 4 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 27
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int1 = 8                                                                # STEP 28
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 29
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int0)                                                       # STEP 30
ACTION: avl0.delete(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([3, 4]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 31
ACTION: avl0.insert(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 3, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 32
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([8, 1, 3, 4]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 33
ACTION: avl0.insert(int0) 
int0 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl0.insert(int1)                                                       # STEP 34
ACTION: avl0.insert(int1) 
int1 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 35
ACTION: avl1.insert(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103c85ef0> : <type 'instance'>
avl_REF1 = set([4, 11, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([4, 11, 12, 1]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 36
ACTION: avl0.insert(int2) 
int2 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([8, 1, 3, 4, 13]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 37
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103c580e0> : <type 'instance'>
avl_REF0 = set([8, 1, 3, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 3, 4, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c4dfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e63050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 53 steps

SAVING TEST AS failure.826.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 10                                                                # STEP 2
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 3
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 6
ACTION: avl2.insert(int2) 
int2 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2 == avl2                                                             # STEP 7
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int2 = 9                                                                 # STEP 8
ACTION: int2 = 9 
int2 = 2 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 9
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 10
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2 == avl2                                                            # STEP 11
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 14
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 10]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 17
ACTION: int0 = 6 
int0 = 10 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 19
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 9                                                                # STEP 20
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 21
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 22
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 2, 20]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 23
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int1)                                                       # STEP 24
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 2, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 2, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 28
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 20]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 29
ACTION: int2 = 19 
int2 = 9 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 30
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int1 = 9                                                                # STEP 31
ACTION: int1 = 9 
int1 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 32
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 2, 20]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 33
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 20                                                               # STEP 34
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 35
ACTION: avl2.insert(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 36
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 19                                                               # STEP 37
ACTION: int3 = 19 
int3 = 9 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 38
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 39
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 2, 20, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([9, 2, 20, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 6, 7, 9, 20]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 41
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 6, 7, 9, 19, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 43
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 20                                                               # STEP 44
ACTION: int0 = 20 
int0 = 6 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 6, 7, 9, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 46
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 47
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 48
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103e4bc20> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 49
ACTION: int2 = 9 
int2 = 20 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 50
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103e4bc20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 == avl2                                                            # STEP 51
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 52
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103e63680> : <type 'instance'>
avl_REF2 = set([2, 6, 7, 9, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 6, 7, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a737a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 32
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
60.2360260487 TOTAL RUNTIME
8 EXECUTED
564 TOTAL TEST OPERATIONS
24.1382141113 TIME SPENT EXECUTING TEST OPERATIONS
0.0644943714142 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.3394401073 TIME SPENT CHECKING PROPERTIES
48.4776542187 TOTAL TIME SPENT RUNNING SUT
0.00451374053955 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int0 = 14                                                                # STEP 1
int3 = 5                                                                 # STEP 2
int2 = 9                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
avl0.insert(int3)                                                        # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.delete(int3)                                                        # STEP 7
result = avl0.find(int1)                                                 # STEP 8
avl0.insert(int0)                                                        # STEP 9
int1 = 7                                                                # STEP 10
int3 = 9                                                                # STEP 11
result = avl0.find(int2)                                                # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.insert(int3)                                                       # STEP 14
int0 = 17                                                               # STEP 15
avl0 == avl0                                                            # STEP 16
result = avl0.inorder()                                                 # STEP 17
int3 = 3                                                                # STEP 18
avl0.delete(int2)                                                       # STEP 19
avl0.insert(int1)                                                       # STEP 20
avl0.delete(int2)                                                       # STEP 21
int1 = 10                                                               # STEP 22
int2 = 13                                                               # STEP 23
avl0.delete(int3)                                                       # STEP 24
int3 = 5                                                                # STEP 25
avl0 == avl0                                                            # STEP 26
avl0.delete(int2)                                                       # STEP 27
avl0.delete(int3)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
avl0.insert(int3)                                                       # STEP 30
avl0.delete(int2)                                                       # STEP 31
int2 = 6                                                                # STEP 32
result = avl0.find(int0)                                                # STEP 33
avl0 == avl0                                                            # STEP 34
int3 = 5                                                                # STEP 35
avl0.insert(int0)                                                       # STEP 36
result = avl0.find(int3)                                                # STEP 37
int3 = 17                                                               # STEP 38
avl0.insert(int1)                                                       # STEP 39
avl0.delete(int0)                                                       # STEP 40
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038dfc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 4                                                                 # STEP 0
int1 = 8                                                                 # STEP 1
avl1 = avl.AVLTree()                                                     # STEP 2
result = avl1.inorder()                                                  # STEP 3
avl1.delete(int1)                                                        # STEP 4
int3 = 6                                                                 # STEP 5
avl1.insert(int1)                                                        # STEP 6
int1 = 12                                                                # STEP 7
avl1.insert(int1)                                                        # STEP 8
avl0 = avl.AVLTree()                                                     # STEP 9
result = avl0.inorder()                                                 # STEP 10
avl1.delete(int3)                                                       # STEP 11
int3 = 3                                                                # STEP 12
int0 = 8                                                                # STEP 13
avl0.insert(int3)                                                       # STEP 14
result = avl1.find(int1)                                                # STEP 15
int1 = 11                                                               # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl0.insert(int2)                                                       # STEP 18
avl1 == avl0                                                            # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl0.insert(int0)                                                       # STEP 21
int3 = 1                                                                # STEP 22
avl1.insert(int1)                                                       # STEP 23
avl1.insert(int2)                                                       # STEP 24
avl0.insert(int0)                                                       # STEP 25
int2 = 13                                                               # STEP 26
result = avl0.inorder()                                                 # STEP 27
int1 = 8                                                                # STEP 28
avl0.delete(int3)                                                       # STEP 29
avl0.delete(int0)                                                       # STEP 30
avl0.insert(int3)                                                       # STEP 31
avl0.insert(int1)                                                       # STEP 32
avl0.insert(int0)                                                       # STEP 33
avl0.insert(int1)                                                       # STEP 34
avl1.insert(int3)                                                       # STEP 35
avl0.insert(int2)                                                       # STEP 36
avl0.delete(int3)                                                       # STEP 37
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c4dfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int2 = 2                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int0 = 10                                                                # STEP 2
int1 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
avl2.insert(int2)                                                        # STEP 6
avl2 == avl2                                                             # STEP 7
int2 = 9                                                                 # STEP 8
avl2.delete(int0)                                                        # STEP 9
result = avl2.inorder()                                                 # STEP 10
avl2 == avl2                                                            # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
result = avl2.find(int2)                                                # STEP 14
avl2.insert(int0)                                                       # STEP 15
avl2.delete(int0)                                                       # STEP 16
int0 = 6                                                                # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.delete(int1)                                                       # STEP 19
int3 = 9                                                                # STEP 20
result = avl2.inorder()                                                 # STEP 21
avl2.insert(int3)                                                       # STEP 22
avl2 == avl2                                                            # STEP 23
avl2.delete(int1)                                                       # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
avl2.delete(int3)                                                       # STEP 28
int2 = 19                                                               # STEP 29
result = avl2.inorder()                                                 # STEP 30
int1 = 9                                                                # STEP 31
avl2.insert(int3)                                                       # STEP 32
avl2.delete(int2)                                                       # STEP 33
int2 = 20                                                               # STEP 34
avl2.insert(int1)                                                       # STEP 35
avl2.insert(int3)                                                       # STEP 36
int3 = 19                                                               # STEP 37
int1 = 7                                                                # STEP 38
avl2.insert(int1)                                                       # STEP 39
avl2.insert(int0)                                                       # STEP 40
int1 = 12                                                               # STEP 41
avl2.insert(int3)                                                       # STEP 42
avl2.delete(int1)                                                       # STEP 43
int0 = 20                                                               # STEP 44
avl2.delete(int2)                                                       # STEP 45
avl2.delete(int1)                                                       # STEP 46
avl2.insert(int3)                                                       # STEP 47
avl0 = avl.AVLTree()                                                    # STEP 48
int2 = 9                                                                # STEP 49
result = avl0.inorder()                                                 # STEP 50
avl2 == avl2                                                            # STEP 51
avl2.delete(int3)                                                       # STEP 52
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a737a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.165.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  12 [2:0]
-- < 6 [1:-1]
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([6, 8, 12, 16, 18, 19])
  12 [2:0]
-- < 6 [1:-1]
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([6, 8, 12, 16, 18, 19])
  12 [2:0]
-- < 6 [1:-1]
---- > 8 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([6, 8, 12, 16, 18, 19])
  12 [2:0]
-- < 8 [1:0]
---- < 6 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([6, 8, 9, 12, 16, 18, 19])
  12 [3:1]
-- < 8 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 6, 8, 9, 12, 16, 18, 19])
  12 [3:0]
-- < 8 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 8, 9, 12, 15, 16, 18, 19])
  12 [3:0]
-- < 8 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 8, 9, 12, 15, 16, 18, 19])
  12 [3:0]
-- < 8 [2:1]
---- < 6 [1:1]
------ < 2 [0:0] L
---- > 9 [0:0] L
-- > 18 [2:1]
---- < 16 [1:1]
------ < 15 [0:0] L
---- > 19 [0:0] L
set([2, 6, 8, 9, 12, 15, 16, 18, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10494e5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 70 steps

SAVING TEST AS failure.165.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 1
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 2
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 4
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 16                                                                # STEP 5
ACTION: int2 = 16 
int2 = None : <type 'NoneType'>
=> int2 = 16 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 6
ACTION: avl2.delete(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
int1 = 13                                                                # STEP 8
ACTION: int1 = 13 
int1 = 14 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl2.insert(int3)                                                        # STEP 9
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 18]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 10
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 2, 18]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 12
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 13
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int3 = 5                                                                # STEP 14
ACTION: int3 = 5 
int3 = 13 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 15
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 2, 18, 13]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 19
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 2, 19, 18, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 20
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 19, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 21
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([16, 2, 19, 18, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 11, 13, 16, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 22
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 13, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 23
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 13, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([2, 11, 16, 18, 19]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                # STEP 24
ACTION: result = avl2.find(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 5, 11, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 26
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 5, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl2.find(int0)                                                # STEP 27
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 5, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 5, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 5, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 29
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 5, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 30
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 16, 18]) : <type 'set'>
==================================================
int3 = 3                                                                # STEP 31
ACTION: int3 = 3 
int3 = 5 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 32
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 33
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 34
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 16, 18]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 36
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 3, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 3, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 38
ACTION: avl2.delete(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 3, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 16, 18]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 39
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 11, 16, 18]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 40
ACTION: avl2.insert(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 11, 16, 18, 19]) : <type 'set'>
==================================================
int0 = 15                                                               # STEP 41
ACTION: int0 = 15 
int0 = 19 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 42
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 44
ACTION: avl2.insert(int0) 
int0 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 13                                                               # STEP 46
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 47
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int0)                                                # STEP 48
ACTION: result = avl2.find(int0) 
int0 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 49
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([3]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 50
ACTION: int0 = 2 
int0 = 13 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 51
ACTION: avl0.delete(int2) 
int2 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 54
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([2, 11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([11, 15, 16, 18, 19]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 55
ACTION: int0 = 1 
int0 = 2 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 56
ACTION: result = avl2.find(int3) 
int3 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 57
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 58
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 59
ACTION: avl0.insert(int3) 
int3 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 1                                                                # STEP 60
ACTION: int2 = 1 
int2 = 11 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 61
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.insert(int0)                                                       # STEP 62
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([1, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3, 4]) : <type 'set'>
==================================================
int1 = 12                                                               # STEP 63
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104b5eb90> : <type 'instance'>
avl_REF2 = set([11, 15, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 20                                                               # STEP 65
ACTION: int0 = 20 
int0 = 4 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 66
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 2 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 68
ACTION: avl0.insert(int0) 
int0 = 20 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([1, 3, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 3, 4, 20]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 69
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x105823488> : <type 'instance'>
avl_REF0 = set([1, 3, 4, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([3, 4, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582fe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049ae950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 33 steps

SAVING TEST AS failure.165.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 1
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 2
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 3
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 4
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 5
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int1)                                                        # STEP 6
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([1, 9]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 8
ACTION: avl0.insert(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int1)                                                        # STEP 9
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([9]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 10
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 14                                                               # STEP 11
ACTION: int1 = 14 
int1 = 1 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 12
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 13
ACTION: avl0.delete(int2) 
int2 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int2 = 17                                                               # STEP 14
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 15
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([15, 9]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 16
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 17
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 18
ACTION: avl0.delete(int2) 
int2 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 19
ACTION: avl0.insert(int0) 
int0 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int2 = 16                                                               # STEP 21
ACTION: int2 = 16 
int2 = 17 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 22
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 23
ACTION: avl0.delete(int2) 
int2 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 24
ACTION: avl0.insert(int3) 
int3 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([15, 14, 9]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 25
ACTION: int0 = 16 
int0 = 15 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 26
ACTION: int2 = 7 
int2 = 16 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 27
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([15, 14, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7, 15, 14, 9]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([7, 15, 14, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7, 16, 15, 14, 9]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 29
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([7, 16, 15, 14, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
result = avl0.inorder()                                                 # STEP 30
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([7, 16, 15, 14, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                       # STEP 31
ACTION: avl0.delete(int1) 
int1 = 14 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([7, 16, 15, 14, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([7, 16, 15, 9]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 32
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1049870e0> : <type 'instance'>
avl_REF0 = set([7, 16, 15, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([7, 15, 9]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049b2d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([2, 4, 6, 9, 14, 18])
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 18 [0:0] L
set([2, 4, 6, 9, 14, 18])
  6 [3:-1]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [2:-1]
---- < 9 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([2, 4, 6, 9, 14, 16, 18])
  6 [3:-1]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [2:-1]
---- < 9 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([2, 4, 6, 9, 14, 16, 18])
  6 [3:-1]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [2:-1]
---- < 9 [0:0] L
---- > 18 [1:1]
------ < 16 [0:0] L
set([2, 4, 6, 9, 14, 16, 18])
TEST #4 STEP #84 (0:00:30.015077) Fri Apr 28 05:40:47 2017 [ 160 stmts 212 branches ]
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 16 [0:0] L
set([2, 4, 6, 9, 14, 16])
  6 [2:0]
-- < 4 [1:1]
---- < 2 [0:0] L
-- > 14 [1:0]
---- < 9 [0:0] L
---- > 16 [0:0] L
set([2, 4, 6, 9, 14, 16])
  14 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 12 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([1, 2, 12, 14, 15, 20])
  14 [3:1]
-- < 2 [2:-1]
---- < 1 [0:0] L
---- > 12 [1:1]
------ < 6 [0:0] L
-- > 15 [1:-1]
---- > 20 [0:0] L
set([1, 2, 6, 12, 14, 15, 20])
  9 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 17 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([4, 6, 9, 10, 17, 19])
  9 [2:0]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 17 [1:0]
---- < 10 [0:0] L
---- > 19 [0:0] L
set([4, 6, 9, 10, 17, 19])
  9 [3:-1]
-- < 6 [1:1]
---- < 4 [0:0] L
-- > 17 [2:1]
---- < 10 [1:-1]
------ > 12 [0:0] L
---- > 19 [0:0] L
set([4, 6, 9, 10, 12, 17, 19])
  9 [3:0]
-- < 5 [2:-1]
---- < 4 [0:0] L
---- > 6 [1:-1]
------ > 7 [0:0] L
-- > 17 [2:1]
---- < 10 [1:-1]
------ > 12 [0:0] L
---- > 19 [0:0] L
set([4, 5, 6, 7, 9, 10, 12, 17, 19])
  9 [3:1]
-- < 7 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([2, 3, 7, 8, 9, 16, 19])
  9 [3:1]
-- < 7 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([2, 3, 7, 8, 9, 16, 19])
  9 [3:1]
-- < 7 [2:1]
---- < 3 [1:1]
------ < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([2, 3, 7, 8, 9, 16, 19])
  9 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 19 [1:1]
---- < 16 [0:0] L
set([2, 7, 8, 9, 16, 19])
  9 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 7, 8, 9, 16, 17, 19])
  9 [2:0]
-- < 7 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 17 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([2, 7, 8, 9, 16, 17, 19])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cfb8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 26 steps

SAVING TEST AS failure.165.test.2
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 4                                                                 # STEP 0
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 2
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.inorder()                                                  # STEP 4
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 17                                                                # STEP 5
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 6
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 2                                                                 # STEP 7
ACTION: int0 = 2 
int0 = 7 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 10
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 2]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 11
ACTION: int0 = 12 
int0 = 2 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 12
ACTION: int2 = 18 
int2 = 17 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 13
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([17, 2, 18]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 14
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 15
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([17, 2, 12, 18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2, 12, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([17, 2, 12, 18, 4]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2, 12, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 18
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2, 12, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([17, 2, 12, 18, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 4, 12, 17, 18, 20]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 20
ACTION: int3 = 17 
int3 = 20 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 21
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([2, 4, 12, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int3)                                                       # STEP 22
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([2, 4, 12, 17, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 4, 12, 18, 20]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 23
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([2, 4, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
int1 = 18                                                               # STEP 24
ACTION: int1 = 18 
int1 = 4 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 25
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104cfbd40> : <type 'instance'>
avl_REF2 = set([2, 4, 12, 18, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([2, 4, 12, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cf2b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 3 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 2
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
60.1773440838 TOTAL RUNTIME
9 EXECUTED
631 TOTAL TEST OPERATIONS
24.8978357315 TIME SPENT EXECUTING TEST OPERATIONS
0.0688488483429 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.1019449234 TIME SPENT CHECKING PROPERTIES
49.9997806549 TOTAL TIME SPENT RUNNING SUT
0.00484442710876 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
3 FAILED
0 REPEATS OF FAILURES
3 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int0 = 2                                                                 # STEP 1
avl2 = avl.AVLTree()                                                     # STEP 2
int3 = 18                                                                # STEP 3
avl2.delete(int0)                                                        # STEP 4
int2 = 16                                                                # STEP 5
avl2.delete(int1)                                                        # STEP 6
avl2.insert(int0)                                                        # STEP 7
int1 = 13                                                                # STEP 8
avl2.insert(int3)                                                        # STEP 9
int3 = 13                                                               # STEP 10
avl2.insert(int2)                                                       # STEP 11
int2 = 11                                                               # STEP 12
avl2.delete(int3)                                                       # STEP 13
int3 = 5                                                                # STEP 14
int0 = 19                                                               # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int0)                                                       # STEP 19
avl2.delete(int2)                                                       # STEP 20
avl2.insert(int2)                                                       # STEP 21
avl2.insert(int2)                                                       # STEP 22
avl2.delete(int1)                                                       # STEP 23
result = avl2.find(int3)                                                # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.delete(int1)                                                       # STEP 26
result = avl2.find(int0)                                                # STEP 27
avl2.delete(int2)                                                       # STEP 28
avl2.delete(int3)                                                       # STEP 29
avl2.delete(int0)                                                       # STEP 30
int3 = 3                                                                # STEP 31
avl2.delete(int0)                                                       # STEP 32
result = avl2.inorder()                                                 # STEP 33
avl2.delete(int1)                                                       # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl2 == avl2                                                            # STEP 36
avl2.delete(int2)                                                       # STEP 37
avl2.delete(int3)                                                       # STEP 38
avl2.insert(int2)                                                       # STEP 39
avl2.insert(int0)                                                       # STEP 40
int0 = 15                                                               # STEP 41
avl0 = avl.AVLTree()                                                    # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl2.insert(int0)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
int0 = 13                                                               # STEP 46
avl2.insert(int2)                                                       # STEP 47
result = avl2.find(int0)                                                # STEP 48
avl0.insert(int3)                                                       # STEP 49
int0 = 2                                                                # STEP 50
avl0.delete(int2)                                                       # STEP 51
avl0.delete(int1)                                                       # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl2.delete(int0)                                                       # STEP 54
int0 = 1                                                                # STEP 55
result = avl2.find(int3)                                                # STEP 56
avl0.insert(int0)                                                       # STEP 57
int0 = 4                                                                # STEP 58
avl0.insert(int3)                                                       # STEP 59
int2 = 1                                                                # STEP 60
result = avl2.inorder()                                                 # STEP 61
avl0.insert(int0)                                                       # STEP 62
int1 = 12                                                               # STEP 63
avl2.delete(int1)                                                       # STEP 64
int0 = 20                                                               # STEP 65
int1 = 2                                                                # STEP 66
avl0.delete(int1)                                                       # STEP 67
avl0.insert(int0)                                                       # STEP 68
avl0.delete(int2)                                                       # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582fe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 9                                                                 # STEP 0
int2 = 14                                                                # STEP 1
int0 = 15                                                                # STEP 2
int1 = 1                                                                 # STEP 3
avl0 = avl.AVLTree()                                                     # STEP 4
result = avl0.inorder()                                                  # STEP 5
avl0.insert(int1)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
avl0.insert(int3)                                                        # STEP 8
avl0.delete(int1)                                                        # STEP 9
avl0.delete(int1)                                                       # STEP 10
int1 = 14                                                               # STEP 11
int3 = 14                                                               # STEP 12
avl0.delete(int2)                                                       # STEP 13
int2 = 17                                                               # STEP 14
avl0.insert(int0)                                                       # STEP 15
avl0.delete(int2)                                                       # STEP 16
avl0.delete(int2)                                                       # STEP 17
avl0.delete(int2)                                                       # STEP 18
avl0.insert(int0)                                                       # STEP 19
result = avl0.inorder()                                                 # STEP 20
int2 = 16                                                               # STEP 21
avl0.delete(int2)                                                       # STEP 22
avl0.delete(int2)                                                       # STEP 23
avl0.insert(int3)                                                       # STEP 24
int0 = 16                                                               # STEP 25
int2 = 7                                                                # STEP 26
avl0.insert(int2)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.insert(int0)                                                       # STEP 29
result = avl0.inorder()                                                 # STEP 30
avl0.delete(int1)                                                       # STEP 31
avl0.delete(int0)                                                       # STEP 32
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1049b2d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE 2
int1 = 4                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int0 = 7                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
result = avl2.inorder()                                                  # STEP 4
int2 = 17                                                                # STEP 5
avl2.delete(int0)                                                        # STEP 6
int0 = 2                                                                 # STEP 7
avl2.delete(int2)                                                        # STEP 8
avl2.insert(int2)                                                        # STEP 9
avl2.insert(int0)                                                       # STEP 10
int0 = 12                                                               # STEP 11
int2 = 18                                                               # STEP 12
avl2.insert(int2)                                                       # STEP 13
int2 = 20                                                               # STEP 14
avl2.insert(int0)                                                       # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
avl2.delete(int2)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
int3 = 17                                                               # STEP 20
result = avl2.find(int1)                                                # STEP 21
avl2.delete(int3)                                                       # STEP 22
avl2.insert(int0)                                                       # STEP 23
int1 = 18                                                               # STEP 24
avl2.delete(int2)                                                       # STEP 25
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cf2b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.804.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
  11 [3:0]
-- < 9 [2:1]
---- < 5 [1:-1]
------ > 8 [0:0] L
---- > 10 [0:0] L
-- > 18 [2:1]
---- < 15 [1:-1]
------ > 17 [0:0] L
---- > 19 [0:0] L
set([5, 8, 9, 10, 11, 15, 17, 18, 19])
  14 [2:0]
-- < 10 [1:0]
---- < 9 [0:0] L
---- > 12 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([9, 10, 12, 14, 16, 19])
  14 [3:1]
-- < 6 [2:-1]
---- < 1 [0:0] L
---- > 12 [1:1]
------ < 11 [0:0] L
-- > 20 [1:1]
---- < 16 [0:0] L
set([1, 6, 11, 12, 14, 16, 20])
TEST #5 STEP #76 (0:00:30.087417) Fri Apr 28 07:20:38 2017 [ 163 stmts 218 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058aa680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.804.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 3
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 5
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 1                                                                 # STEP 6
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
result = avl2.inorder()                                                  # STEP 7
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 9
ACTION: int0 = 7 
int0 = 3 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int3 = 8                                                                # STEP 11
ACTION: int3 = 8 
int3 = 11 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 12
ACTION: avl2 = avl.AVLTree() 
avl2 = <avl.AVLTree instance at 0x103da0ea8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
=> avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 13
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 14
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 9                                                                # STEP 15
ACTION: int1 = 9 
int1 = 2 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 16
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 17
ACTION: avl2.delete(int3) 
int3 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 19                                                               # STEP 18
ACTION: int3 = 19 
int3 = 8 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 20
ACTION: avl0.insert(int0) 
int0 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int3 = 16                                                               # STEP 21
ACTION: int3 = 16 
int3 = 19 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 22
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 23
ACTION: int0 = 17 
int0 = 7 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 24
ACTION: avl1.insert(int3) 
int3 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([16]) : <type 'set'>
==================================================
int3 = 12                                                               # STEP 25
ACTION: int3 = 12 
int3 = 16 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
result = avl0.find(int3)                                                # STEP 26
ACTION: result = avl0.find(int3) 
int3 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
result = avl0.find(int2)                                                # STEP 27
ACTION: result = avl0.find(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int2 = 9                                                                # STEP 28
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 29
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 3                                                                # STEP 30
ACTION: int0 = 3 
int0 = 17 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 32
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 33
ACTION: avl1.insert(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 9]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 34
ACTION: result = avl0.find(int2) 
int2 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 35
ACTION: avl2.delete(int1) 
int1 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 36
ACTION: result = avl1.find(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 37
ACTION: result = avl1.find(int1) 
int1 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int3 = 2                                                                # STEP 38
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 39
ACTION: int1 = 12 
int1 = 9 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 40
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 42
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 43
ACTION: avl1.insert(int0) 
int0 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 9, 3]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 44
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 45
ACTION: int2 = 1 
int2 = 1 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 46
ACTION: avl0.delete(int2) 
int2 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 19                                                               # STEP 47
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 48
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 49
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 50
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 51
ACTION: avl1.insert(int1) 
int1 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 9, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([16, 9, 3, 19]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 52
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int1 = 14                                                               # STEP 53
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 54
ACTION: avl2.insert(int1) 
int1 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 14]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 55
ACTION: int1 = 15 
int1 = 14 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 56
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 9, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([16, 3, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 57
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 15                                                               # STEP 58
ACTION: int2 = 15 
int2 = 9 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 59
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 60
ACTION: avl0.delete(int1) 
int1 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 15 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 19                                                               # STEP 62
ACTION: int1 = 19 
int1 = 15 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 63
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 64
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 19                                                               # STEP 65
ACTION: int1 = 19 
int1 = 19 : <type 'int'>
==================================================
int0 = 18                                                               # STEP 66
ACTION: int0 = 18 
int0 = 6 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 67
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 68
ACTION: int2 = 9 
int2 = 15 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 69
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 3, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2.insert(int0)                                                       # STEP 70
ACTION: avl2.insert(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([1, 18, 14]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 71
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 19, 7]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 72
ACTION: avl0.delete(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([18, 19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([19, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 73
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 18, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 14, 18]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 74
ACTION: avl1.insert(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 3, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([16, 18, 3, 19]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 75
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 2, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 17                                                               # STEP 76
ACTION: int3 = 17 
int3 = 2 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 7                                                                # STEP 77
ACTION: int0 = 7 
int0 = 18 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 78
ACTION: int2 = 13 
int2 = 9 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
int1 = 14                                                               # STEP 79
ACTION: int1 = 14 
int1 = 19 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 80
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x103a10f38> : <type 'instance'>
avl_REF1 = set([16, 18, 3, 19]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x103dac488> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 81
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl1.delete(int2)                                                       # STEP 82
ACTION: avl1.delete(int2) 
int2 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dac488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 14                                                               # STEP 83
ACTION: int2 = 14 
int2 = 13 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 84
ACTION: avl0.insert(int3) 
int3 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103a126c8> : <type 'instance'>
avl_REF0 = set([19, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([17, 19, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 85
ACTION: avl2.insert(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 2, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 14, 17, 18]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 86
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 2, 14, 17, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 2, 14, 18]) : <type 'set'>
==================================================
int3 = 5                                                                # STEP 87
ACTION: int3 = 5 
int3 = 17 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 88
ACTION: result = avl1.find(int2) 
int2 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dac488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 18                                                               # STEP 89
ACTION: int2 = 18 
int2 = 14 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 90
ACTION: result = avl1.find(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x103dac488> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 91
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x103a124d0> : <type 'instance'>
avl_REF2 = set([1, 2, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([1, 2, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103daf248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 54
STOPPING TESTING DUE TO TIMEOUT
8.72073294876 PERCENT COVERED
60.2115302086 TOTAL RUNTIME
8 EXECUTED
649 TOTAL TEST OPERATIONS
26.335770607 TIME SPENT EXECUTING TEST OPERATIONS
0.0232734680176 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.4990236759 TIME SPENT CHECKING PROPERTIES
52.8347942829 TOTAL TIME SPENT RUNNING SUT
0.0043568611145 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int3 = 11                                                                # STEP 1
int1 = 2                                                                 # STEP 2
int2 = 9                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int2)                                                        # STEP 5
int2 = 1                                                                 # STEP 6
result = avl2.inorder()                                                  # STEP 7
avl2.insert(int0)                                                        # STEP 8
int0 = 7                                                                 # STEP 9
result = avl2.find(int3)                                                # STEP 10
int3 = 8                                                                # STEP 11
avl2 = avl.AVLTree()                                                    # STEP 12
avl0 = avl.AVLTree()                                                    # STEP 13
result = avl2.find(int1)                                                # STEP 14
int1 = 9                                                                # STEP 15
avl2.insert(int3)                                                       # STEP 16
avl2.delete(int3)                                                       # STEP 17
int3 = 19                                                               # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl0.insert(int0)                                                       # STEP 20
int3 = 16                                                               # STEP 21
avl1 = avl.AVLTree()                                                    # STEP 22
int0 = 17                                                               # STEP 23
avl1.insert(int3)                                                       # STEP 24
int3 = 12                                                               # STEP 25
result = avl0.find(int3)                                                # STEP 26
result = avl0.find(int2)                                                # STEP 27
int2 = 9                                                                # STEP 28
avl2.delete(int0)                                                       # STEP 29
int0 = 3                                                                # STEP 30
avl2.insert(int3)                                                       # STEP 31
avl2.delete(int1)                                                       # STEP 32
avl1.insert(int1)                                                       # STEP 33
result = avl0.find(int2)                                                # STEP 34
avl2.delete(int1)                                                       # STEP 35
result = avl1.find(int0)                                                # STEP 36
result = avl1.find(int1)                                                # STEP 37
int3 = 2                                                                # STEP 38
int1 = 12                                                               # STEP 39
int2 = 1                                                                # STEP 40
avl2.delete(int2)                                                       # STEP 41
avl2.delete(int1)                                                       # STEP 42
avl1.insert(int0)                                                       # STEP 43
int0 = 6                                                                # STEP 44
int2 = 1                                                                # STEP 45
avl0.delete(int2)                                                       # STEP 46
int1 = 19                                                               # STEP 47
result = avl2.inorder()                                                 # STEP 48
avl2.insert(int2)                                                       # STEP 49
int2 = 9                                                                # STEP 50
avl1.insert(int1)                                                       # STEP 51
result = avl0.find(int1)                                                # STEP 52
int1 = 14                                                               # STEP 53
avl2.insert(int1)                                                       # STEP 54
int1 = 15                                                               # STEP 55
avl1.delete(int2)                                                       # STEP 56
avl2.delete(int2)                                                       # STEP 57
int2 = 15                                                               # STEP 58
avl1.delete(int2)                                                       # STEP 59
avl0.delete(int1)                                                       # STEP 60
avl0.delete(int2)                                                       # STEP 61
int1 = 19                                                               # STEP 62
avl1.delete(int0)                                                       # STEP 63
avl0.delete(int1)                                                       # STEP 64
int1 = 19                                                               # STEP 65
int0 = 18                                                               # STEP 66
avl0.insert(int1)                                                       # STEP 67
int2 = 9                                                                # STEP 68
result = avl1.inorder()                                                 # STEP 69
avl2.insert(int0)                                                       # STEP 70
avl0.insert(int0)                                                       # STEP 71
avl0.delete(int0)                                                       # STEP 72
avl2.insert(int3)                                                       # STEP 73
avl1.insert(int0)                                                       # STEP 74
avl2.delete(int2)                                                       # STEP 75
int3 = 17                                                               # STEP 76
int0 = 7                                                                # STEP 77
int2 = 13                                                               # STEP 78
int1 = 14                                                               # STEP 79
avl1 = avl.AVLTree()                                                    # STEP 80
result = avl0.inorder()                                                 # STEP 81
avl1.delete(int2)                                                       # STEP 82
int2 = 14                                                               # STEP 83
avl0.insert(int3)                                                       # STEP 84
avl2.insert(int3)                                                       # STEP 85
avl2.delete(int3)                                                       # STEP 86
int3 = 5                                                                # STEP 87
result = avl1.find(int2)                                                # STEP 88
int2 = 18                                                               # STEP 89
result = avl1.find(int2)                                                # STEP 90
avl2.delete(int2)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103daf248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
220 BRANCHES COVERED
164 STATEMENTS COVERED

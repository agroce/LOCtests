Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99876.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105885c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.99876.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 11                                                                # STEP 0
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 1
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
int2 = 2                                                                 # STEP 2
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int0 = 1                                                                 # STEP 3
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                        # STEP 5
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int1)                                                        # STEP 6
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([11]) : <type 'set'>
==================================================
int1 = 11                                                                # STEP 7
ACTION: int1 = 11 
int1 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                        # STEP 8
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                 # STEP 9
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 10
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int1 = 20                                                               # STEP 11
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 12
ACTION: avl1.delete(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 9                                                                # STEP 13
ACTION: int3 = 9 
int3 = 9 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 14
ACTION: avl1.insert(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 15
ACTION: avl1.insert(int1) 
int1 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 20]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 16
ACTION: avl1.insert(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 20]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 17
ACTION: int0 = 1 
int0 = 1 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 18
ACTION: avl1.delete(int0) 
int0 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([1, 2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([2, 20]) : <type 'set'>
==================================================
int0 = 11                                                               # STEP 19
ACTION: int0 = 11 
int0 = 1 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 20
ACTION: int2 = 15 
int2 = 2 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 3                                                                # STEP 21
ACTION: int1 = 3 
int1 = 20 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 22
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int2)                                                       # STEP 23
ACTION: avl1.delete(int2) 
int2 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 24
ACTION: avl2.delete(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1 == avl2                                                            # STEP 25
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 2                                                                # STEP 26
ACTION: int2 = 2 
int2 = 15 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 27
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 28
ACTION: avl1.delete(int2) 
int2 = 2 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([2, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([20]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 29
ACTION: int2 = 19 
int2 = 2 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 30
ACTION: int3 = 6 
int3 = 9 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([9, 6]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 32
ACTION: int3 = 11 
int3 = 6 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 33
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([9, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([9, 19, 6]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 34
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([9, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 9, 19, 6]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 35
ACTION: int3 = 9 
int3 = 11 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 9                                                                # STEP 36
ACTION: int2 = 9 
int2 = 19 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 37
ACTION: result = avl1.find(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int3)                                                       # STEP 38
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([9, 20]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 9, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([11, 19, 6]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 40
ACTION: avl1.insert(int3) 
int3 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 41
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 42
ACTION: int3 = 1 
int3 = 9 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 43
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 44
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([9, 3, 20]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int1 = 1                                                                # STEP 46
ACTION: int1 = 1 
int1 = 3 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 47
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
int0 = 18                                                               # STEP 48
ACTION: int0 = 18 
int0 = 11 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 49
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 50
ACTION: avl0.insert(int0) 
int0 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([18, 11]) : <type 'set'>
==================================================
result = avl2.find(int2)                                                # STEP 51
ACTION: result = avl2.find(int2) 
int2 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int3 = 19                                                               # STEP 52
ACTION: int3 = 19 
int3 = 1 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 53
ACTION: int0 = 3 
int0 = 18 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 54
ACTION: int2 = 8 
int2 = 9 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 55
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 56
ACTION: result = avl2.find(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl0.delete(int2)                                                       # STEP 57
ACTION: avl0.delete(int2) 
int2 = 8 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int0 = 16                                                               # STEP 58
ACTION: int0 = 16 
int0 = 3 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 59
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl0 == avl0                                                            # STEP 60
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
int2 = 19                                                               # STEP 61
ACTION: int2 = 19 
int2 = 8 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 62
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x1057336c8> : <type 'instance'>
avl_REF0 = set([18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 6                                                                # STEP 63
ACTION: int3 = 6 
int3 = 19 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 64
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int1 = 15                                                               # STEP 65
ACTION: int1 = 15 
int1 = 1 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.find(int1)                                                # STEP 67
ACTION: result = avl2.find(int1) 
int1 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl1.find(int1)                                                # STEP 68
ACTION: result = avl1.find(int1) 
int1 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.find(int0)                                                # STEP 69
ACTION: result = avl1.find(int0) 
int0 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058b92d8> : <type 'instance'>
avl_REF1 = set([9, 3, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 70
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1052c1320> : <type 'instance'>
avl_REF2 = set([11, 1, 19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([11, 1, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105708758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #0 (0:00:35.682852) Fri Apr 28 05:11:19 2017 [ 149 stmts 200 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.176636219 TOTAL RUNTIME
8 EXECUTED
684 TOTAL TEST OPERATIONS
27.1141674519 TIME SPENT EXECUTING TEST OPERATIONS
0.0242438316345 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.1976037025 TIME SPENT CHECKING PROPERTIES
54.3117711544 TOTAL TIME SPENT RUNNING SUT
0.00464081764221 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 11                                                                # STEP 0
int3 = 7                                                                 # STEP 1
int2 = 2                                                                 # STEP 2
int0 = 1                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.delete(int3)                                                        # STEP 5
avl2.insert(int1)                                                        # STEP 6
int1 = 11                                                                # STEP 7
avl2.delete(int1)                                                        # STEP 8
int3 = 9                                                                 # STEP 9
avl1 = avl.AVLTree()                                                    # STEP 10
int1 = 20                                                               # STEP 11
avl1.delete(int3)                                                       # STEP 12
int3 = 9                                                                # STEP 13
avl1.insert(int2)                                                       # STEP 14
avl1.insert(int1)                                                       # STEP 15
avl1.insert(int0)                                                       # STEP 16
int0 = 1                                                                # STEP 17
avl1.delete(int0)                                                       # STEP 18
int0 = 11                                                               # STEP 19
int2 = 15                                                               # STEP 20
int1 = 3                                                                # STEP 21
result = avl1.inorder()                                                 # STEP 22
avl1.delete(int2)                                                       # STEP 23
avl2.delete(int2)                                                       # STEP 24
avl1 == avl2                                                            # STEP 25
int2 = 2                                                                # STEP 26
avl2.insert(int3)                                                       # STEP 27
avl1.delete(int2)                                                       # STEP 28
int2 = 19                                                               # STEP 29
int3 = 6                                                                # STEP 30
avl2.insert(int3)                                                       # STEP 31
int3 = 11                                                               # STEP 32
avl2.insert(int2)                                                       # STEP 33
avl2.insert(int3)                                                       # STEP 34
int3 = 9                                                                # STEP 35
int2 = 9                                                                # STEP 36
result = avl1.find(int0)                                                # STEP 37
avl1.insert(int3)                                                       # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl1.insert(int3)                                                       # STEP 40
avl0 = avl.AVLTree()                                                    # STEP 41
int3 = 1                                                                # STEP 42
avl2.insert(int3)                                                       # STEP 43
avl1.insert(int1)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
int1 = 1                                                                # STEP 46
avl0.insert(int0)                                                       # STEP 47
int0 = 18                                                               # STEP 48
avl2.delete(int2)                                                       # STEP 49
avl0.insert(int0)                                                       # STEP 50
result = avl2.find(int2)                                                # STEP 51
int3 = 19                                                               # STEP 52
int0 = 3                                                                # STEP 53
int2 = 8                                                                # STEP 54
avl0.delete(int0)                                                       # STEP 55
result = avl2.find(int3)                                                # STEP 56
avl0.delete(int2)                                                       # STEP 57
int0 = 16                                                               # STEP 58
avl0 == avl1                                                            # STEP 59
avl0 == avl0                                                            # STEP 60
int2 = 19                                                               # STEP 61
avl0.delete(int1)                                                       # STEP 62
int3 = 6                                                                # STEP 63
avl1 == avl1                                                            # STEP 64
int1 = 15                                                               # STEP 65
result = avl1.inorder()                                                 # STEP 66
result = avl2.find(int1)                                                # STEP 67
result = avl1.find(int1)                                                # STEP 68
result = avl1.find(int0)                                                # STEP 69
avl2.delete(int2)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105708758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

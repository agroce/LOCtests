Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99939.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  11 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 10 [0:0] L
-- > 17 [1:-1]
---- > 20 [0:0] L
set([3, 9, 10, 11, 17, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10589d7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 48 steps

SAVING TEST AS failure.99939.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 1                                                                 # STEP 0
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 1
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 2
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                        # STEP 5
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int0)                                                        # STEP 6
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([8]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                 # STEP 7
ACTION: result = avl1.find(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
result = avl1.inorder()                                                  # STEP 8
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int2)                                                        # STEP 9
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 1]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 10
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
result = avl1.inorder()                                                 # STEP 11
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int1)                                                       # STEP 12
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([8, 1, 18]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1058df128> : <type 'instance'>
avl_REF1 = set([8, 1, 18]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 15
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 16
ACTION: result = avl1.find(int0) 
int0 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 17
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 11]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 18
ACTION: avl1.insert(int1) 
int1 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 18, 11]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 19
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 20
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 4                                                                # STEP 21
ACTION: int0 = 4 
int0 = 8 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 22
ACTION: result = avl1.find(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 10                                                               # STEP 23
ACTION: int2 = 10 
int2 = 1 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 24
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 18]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 26
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 27
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl1.inorder()                                                 # STEP 28
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([1, 18, 11]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 31
ACTION: int3 = 6 
int3 = 11 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 32
ACTION: int1 = 13 
int1 = 1 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 33
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
result = avl0.find(int2)                                                # STEP 34
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 35
ACTION: avl1.delete(int3) 
int3 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int2 = 4                                                                # STEP 36
ACTION: int2 = 4 
int2 = 10 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 37
ACTION: result = avl1.find(int2) 
int2 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl0.delete(int1)                                                       # STEP 38
ACTION: avl0.delete(int1) 
int1 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 39
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 18, 11, 4]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 40
ACTION: int1 = 5 
int1 = 13 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 41
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int3)                                                       # STEP 42
ACTION: avl0.delete(int3) 
int3 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([1, 18, 11, 4, 5]) : <type 'set'>
==================================================
result = avl1.find(int0)                                                # STEP 44
ACTION: result = avl1.find(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int3 = 18                                                               # STEP 45
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 46
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10582abd8> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10580fb48> : <type 'instance'>
avl_REF1 = set([1, 18, 11, 4, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 11, 4, 5]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582f3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  13 [2:0]
-- < 5 [1:1]
---- < 1 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([1, 5, 13, 15, 16, 19])
  13 [2:0]
-- < 5 [1:0]
---- < 1 [0:0] L
---- > 7 [0:0] L
-- > 16 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([1, 5, 7, 13, 15, 16, 19])
  17 [2:0]
-- < 9 [1:0]
---- < 7 [0:0] L
---- > 12 [0:0] L
-- > 19 [1:1]
---- < 18 [0:0] L
set([7, 9, 12, 17, 18, 19])
TEST #4 STEP #75 (0:00:30.012955) Fri Apr 28 05:22:23 2017 [ 160 stmts 212 branches ]
  9 [2:0]
-- < 6 [1:0]
---- < 3 [0:0] L
---- > 7 [0:0] L
-- > 18 [1:-1]
---- > 19 [0:0] L
set([3, 6, 7, 9, 18, 19])
  8 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 14 [0:0] L
set([1, 2, 8, 12, 13, 14])
  8 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 14 [0:0] L
set([1, 2, 8, 12, 13, 14])
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 9, 17])
  7 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([5, 6, 7, 10, 11, 17])
  7 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([5, 6, 7, 10, 11, 17])
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 9, 17])
  7 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([5, 6, 7, 10, 11, 17])
  7 [2:0]
-- < 6 [1:1]
---- < 5 [0:0] L
-- > 11 [1:0]
---- < 10 [0:0] L
---- > 17 [0:0] L
set([5, 6, 7, 10, 11, 17])
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 9, 17])
  6 [2:0]
-- < 2 [1:-1]
---- > 5 [0:0] L
-- > 9 [1:0]
---- < 7 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 7, 9, 17])
  6 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 5 [0:0] L
-- > 9 [1:1]
---- < 7 [0:0] L
set([2, 3, 5, 6, 7, 9])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10467b878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
Original test has 47 steps

SAVING TEST AS failure.99939.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 1
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 2
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([7]) : <type 'set'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 4
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                        # STEP 5
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int3)                                                        # STEP 6
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
avl0.insert(int3)                                                        # STEP 7
ACTION: avl0.insert(int3) 
int3 = 10 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int0 = 1                                                                 # STEP 8
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
avl0.insert(int2)                                                        # STEP 9
ACTION: avl0.insert(int2) 
int2 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
int1 = 1                                                                # STEP 10
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 11
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 7]) : <type 'set'>
==================================================
int2 = 14                                                               # STEP 12
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
result = avl0.inorder()                                                 # STEP 13
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 14
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 15
ACTION: int3 = 9 
int3 = 10 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl2.insert(int1)                                                       # STEP 16
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 17
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 18
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 9]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 20
ACTION: result = avl0.inorder() 
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.insert(int1)                                                       # STEP 21
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 22
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 23
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 24
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([1, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 25
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl0.delete(int0)                                                       # STEP 26
ACTION: avl0.delete(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 27
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 28
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 6                                                                # STEP 29
ACTION: int2 = 6 
int2 = 14 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 31
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([6, 9]) : <type 'set'>
==================================================
int1 = 17                                                               # STEP 32
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 33
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 9                                                                # STEP 34
ACTION: int3 = 9 
int3 = 9 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl0.find(int3)                                                # STEP 36
ACTION: result = avl0.find(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
avl0 == avl2                                                            # STEP 37
ACTION: avl0 == avl2 
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
avl_REF2 = set([6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
avl0.insert(int0)                                                       # STEP 38
ACTION: avl0.insert(int0) 
int0 = 1 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 10, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 39
ACTION: avl0.insert(int2) 
int2 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([1, 10, 6, 7]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 40
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([6, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int2 = 14                                                               # STEP 41
ACTION: int2 = 14 
int2 = 6 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 42
ACTION: int1 = 7 
int1 = 17 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 43
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 44
ACTION: avl0.delete(int3) 
int3 = 9 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x104667c68> : <type 'instance'>
avl_REF2 = set([6, 9]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int1)                                                       # STEP 46
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x10466c2d8> : <type 'instance'>
avl_REF0 = set([1, 10, 6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([1, 10, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104663248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.51713607058 PERCENT COVERED
63.3642411232 TOTAL RUNTIME
9 EXECUTED
695 TOTAL TEST OPERATIONS
27.6413111687 TIME SPENT EXECUTING TEST OPERATIONS
0.0762221813202 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.9085040092 TIME SPENT CHECKING PROPERTIES
55.5498151779 TOTAL TIME SPENT RUNNING SUT
0.00545024871826 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 1                                                                 # STEP 0
int3 = 11                                                                # STEP 1
int0 = 8                                                                 # STEP 2
int1 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int1)                                                        # STEP 5
avl1.insert(int0)                                                        # STEP 6
result = avl1.find(int1)                                                 # STEP 7
result = avl1.inorder()                                                  # STEP 8
avl1.insert(int2)                                                        # STEP 9
avl1.delete(int1)                                                       # STEP 10
result = avl1.inorder()                                                 # STEP 11
avl1.insert(int1)                                                       # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
avl1.insert(int3)                                                       # STEP 14
int3 = 11                                                               # STEP 15
result = avl1.find(int0)                                                # STEP 16
avl1.insert(int2)                                                       # STEP 17
avl1.insert(int1)                                                       # STEP 18
int1 = 1                                                                # STEP 19
result = avl1.inorder()                                                 # STEP 20
int0 = 4                                                                # STEP 21
result = avl1.find(int3)                                                # STEP 22
int2 = 10                                                               # STEP 23
avl1.delete(int3)                                                       # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl0 = avl.AVLTree()                                                    # STEP 26
avl0.delete(int2)                                                       # STEP 27
result = avl1.inorder()                                                 # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
int3 = 6                                                                # STEP 31
int1 = 13                                                               # STEP 32
avl0.delete(int0)                                                       # STEP 33
result = avl0.find(int2)                                                # STEP 34
avl1.delete(int3)                                                       # STEP 35
int2 = 4                                                                # STEP 36
result = avl1.find(int2)                                                # STEP 37
avl0.delete(int1)                                                       # STEP 38
avl1.insert(int0)                                                       # STEP 39
int1 = 5                                                                # STEP 40
result = avl0.inorder()                                                 # STEP 41
avl0.delete(int3)                                                       # STEP 42
avl1.insert(int1)                                                       # STEP 43
result = avl1.find(int0)                                                # STEP 44
int3 = 18                                                               # STEP 45
avl0.delete(int0)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10582f3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE 1
int2 = 7                                                                 # STEP 0
avl0 = avl.AVLTree()                                                     # STEP 1
avl0.insert(int2)                                                        # STEP 2
int3 = 10                                                                # STEP 3
avl0.insert(int2)                                                        # STEP 4
avl0.insert(int2)                                                        # STEP 5
avl0.insert(int3)                                                        # STEP 6
avl0.insert(int3)                                                        # STEP 7
int0 = 1                                                                 # STEP 8
avl0.insert(int2)                                                        # STEP 9
int1 = 1                                                                # STEP 10
avl0.insert(int0)                                                       # STEP 11
int2 = 14                                                               # STEP 12
result = avl0.inorder()                                                 # STEP 13
avl2 = avl.AVLTree()                                                    # STEP 14
int3 = 9                                                                # STEP 15
avl2.insert(int1)                                                       # STEP 16
avl0.insert(int1)                                                       # STEP 17
avl2.insert(int1)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
result = avl0.inorder()                                                 # STEP 20
avl2.insert(int1)                                                       # STEP 21
avl0.delete(int0)                                                       # STEP 22
avl0.insert(int0)                                                       # STEP 23
avl2.delete(int0)                                                       # STEP 24
result = avl2.find(int0)                                                # STEP 25
avl0.delete(int0)                                                       # STEP 26
avl0.delete(int1)                                                       # STEP 27
avl2.delete(int2)                                                       # STEP 28
int2 = 6                                                                # STEP 29
avl0.delete(int3)                                                       # STEP 30
avl2.insert(int2)                                                       # STEP 31
int1 = 17                                                               # STEP 32
avl0.delete(int1)                                                       # STEP 33
int3 = 9                                                                # STEP 34
avl2.insert(int2)                                                       # STEP 35
result = avl0.find(int3)                                                # STEP 36
avl0 == avl2                                                            # STEP 37
avl0.insert(int0)                                                       # STEP 38
avl0.insert(int2)                                                       # STEP 39
avl2.delete(int0)                                                       # STEP 40
int2 = 14                                                               # STEP 41
int1 = 7                                                                # STEP 42
avl0.delete(int3)                                                       # STEP 43
avl0.delete(int3)                                                       # STEP 44
result = avl2.inorder()                                                 # STEP 45
avl0.delete(int1)                                                       # STEP 46
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104663248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7890, in check
    assert self.p_avl[0].check_balanced()
214 BRANCHES COVERED
161 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62457.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  17 [2:0]
-- < 13 [1:0]
---- < 10 [0:0] L
---- > 16 [0:0] L
-- > 18 [1:-1]
---- > 20 [0:0] L
set([10, 13, 16, 17, 18, 20])
TEST #3 STEP #85 (0:00:30.043031) Mon May  1 18:33:52 2017 [ 161 stmts 214 branches ]
  17 [3:1]
-- < 13 [2:1]
---- < 10 [1:1]
------ < 6 [0:0] L
---- > 16 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([6, 10, 13, 16, 17, 18, 19, 20])
  17 [3:1]
-- < 13 [2:1]
---- < 10 [1:1]
------ < 6 [0:0] L
---- > 16 [0:0] L
-- > 19 [1:0]
---- < 18 [0:0] L
---- > 20 [0:0] L
set([6, 10, 13, 16, 17, 18, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102a74488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 73 steps

SAVING TEST AS failure.62457.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
avl1 = avl.AVLTree()                                                     # STEP 0
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1 == avl1                                                             # STEP 1
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 7                                                                 # STEP 2
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
avl1 == avl1                                                             # STEP 3
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int2 = 17                                                                # STEP 4
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int0 = 7                                                                 # STEP 6
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 3                                                                 # STEP 8
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl1.delete(int2)                                                        # STEP 9
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int1)                                                       # STEP 10
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 12
ACTION: avl1.delete(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 13
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 14
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
result = avl1.find(int3)                                                # STEP 15
ACTION: result = avl1.find(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int2 = 1                                                                # STEP 16
ACTION: int2 = 1 
int2 = 17 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 17
ACTION: avl1.insert(int1) 
int1 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 18
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int0)                                                       # STEP 19
ACTION: avl1.delete(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int1 = 18                                                               # STEP 20
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 21
ACTION: avl1.insert(int0) 
int0 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([3, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 22
ACTION: avl1.delete(int1) 
int1 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int0 = 15                                                               # STEP 23
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
int3 = 5                                                                # STEP 24
ACTION: int3 = 5 
int3 = 7 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15, 3, 7]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 26
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([15, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 2                                                                # STEP 27
ACTION: int1 = 2 
int1 = 18 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 28
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([15, 3, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([15, 3, 5, 7]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 29
ACTION: avl1 = avl.AVLTree() 
avl1 = <avlbug2.AVLTree instance at 0x1038df6c8> : <type 'instance'>
avl_REF1 = set([15, 3, 5, 7]) : <type 'set'>
=> avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 30
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 31
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 32
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([15]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 34
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 15]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 35
ACTION: avl1.insert(int0) 
int0 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 2                                                                # STEP 36
ACTION: int0 = 2 
int0 = 15 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 37
ACTION: avl2.insert(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 38
ACTION: result = avl2.find(int2) 
int2 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 39
ACTION: avl1.delete(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1 == avl2                                                            # STEP 40
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF1 = set([5, 15]) : <type 'set'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int2)                                                       # STEP 41
ACTION: avl1.insert(int2) 
int2 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 5, 15]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 42
ACTION: avl2.delete(int3) 
int3 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
int2 = 7                                                                # STEP 43
ACTION: int2 = 7 
int2 = 1 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 44
ACTION: avl1.delete(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 5, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([1, 15]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 45
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([1, 2]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 47
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([1, 2, 15]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 48
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1, 2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([1, 2, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 49
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 7, 15]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 50
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1, 2, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.insert(int0)                                                       # STEP 51
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 52
ACTION: avl1.insert(int2) 
int2 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
result = avl2.find(int1)                                                # STEP 53
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int2 = 17                                                               # STEP 54
ACTION: int2 = 17 
int2 = 7 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 55
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x102544050> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 56
ACTION: avl1.insert(int2) 
int2 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([1, 2, 7, 15, 17]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 57
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 58
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1, 2, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl0.delete(int0)                                                       # STEP 59
ACTION: avl0.delete(int0) 
int0 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102544050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int0 = 3                                                                # STEP 60
ACTION: int0 = 3 
int0 = 2 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 61
ACTION: avl0.delete(int2) 
int2 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102544050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 16                                                               # STEP 62
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 63
ACTION: avl0.delete(int0) 
int0 = 3 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102544050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int3 = 5                                                                # STEP 64
ACTION: int3 = 5 
int3 = 5 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 65
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 66
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 67
ACTION: avl0.delete(int1) 
int1 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x102544050> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2 = avl.AVLTree()                                                    # STEP 68
ACTION: avl2 = avl.AVLTree() 
avl2 = <avlbug2.AVLTree instance at 0x102a76488> : <type 'instance'>
avl_REF2 = set([1, 2, 7]) : <type 'set'>
=> avl2 = <avlbug2.AVLTree instance at 0x1025772d8> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025772d8> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3]) : <type 'set'>
==================================================
int1 = 1                                                                # STEP 70
ACTION: int1 = 1 
int1 = 16 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 71
ACTION: avl2.delete(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1025772d8> : <type 'instance'>
avl_REF2 = set([3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 72
ACTION: avl1.delete(int1) 
int1 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102a51170> : <type 'instance'>
avl_REF1 = set([1, 2, 7, 15, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([2, 7, 15, 17]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102577b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([2, 3, 7, 10, 12, 13])
  10 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 7 [0:0] L
-- > 12 [1:-1]
---- > 13 [0:0] L
set([2, 3, 7, 10, 12, 13])
  10 [2:0]
-- < 3 [1:1]
---- < 2 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 20 [0:0] L
set([2, 3, 10, 12, 13, 20])
  10 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 2, 3, 10, 12, 13, 16, 20])
  10 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 2, 3, 10, 12, 13, 16, 20])
  10 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 2, 3, 10, 12, 13, 16, 20])
  10 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 2, 3, 10, 12, 13, 16, 20])
  10 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 13 [2:-1]
---- < 12 [0:0] L
---- > 20 [1:1]
------ < 16 [0:0] L
set([1, 2, 3, 10, 12, 13, 16, 20])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 22
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2357800007 TOTAL RUNTIME
6 EXECUTED
495 TOTAL TEST OPERATIONS
26.0396289825 TIME SPENT EXECUTING TEST OPERATIONS
0.0562739372253 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
26.1879270077 TIME SPENT CHECKING PROPERTIES
52.2275559902 TOTAL TIME SPENT RUNNING SUT
0.00376510620117 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
avl1 = avl.AVLTree()                                                     # STEP 0
avl1 == avl1                                                             # STEP 1
int3 = 7                                                                 # STEP 2
avl1 == avl1                                                             # STEP 3
int2 = 17                                                                # STEP 4
result = avl1.inorder()                                                  # STEP 5
int0 = 7                                                                 # STEP 6
avl1.delete(int0)                                                        # STEP 7
int1 = 3                                                                 # STEP 8
avl1.delete(int2)                                                        # STEP 9
avl1.insert(int1)                                                       # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl1.delete(int1)                                                       # STEP 12
avl1.delete(int0)                                                       # STEP 13
avl1.delete(int2)                                                       # STEP 14
result = avl1.find(int3)                                                # STEP 15
int2 = 1                                                                # STEP 16
avl1.insert(int1)                                                       # STEP 17
result = avl1.inorder()                                                 # STEP 18
avl1.delete(int0)                                                       # STEP 19
int1 = 18                                                               # STEP 20
avl1.insert(int0)                                                       # STEP 21
avl1.delete(int1)                                                       # STEP 22
int0 = 15                                                               # STEP 23
int3 = 5                                                                # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl1.delete(int3)                                                       # STEP 26
int1 = 2                                                                # STEP 27
avl1.insert(int3)                                                       # STEP 28
avl1 = avl.AVLTree()                                                    # STEP 29
avl2 = avl.AVLTree()                                                    # STEP 30
avl2.delete(int3)                                                       # STEP 31
avl2.insert(int2)                                                       # STEP 32
avl1.insert(int0)                                                       # STEP 33
avl1.insert(int3)                                                       # STEP 34
avl1.insert(int0)                                                       # STEP 35
int0 = 2                                                                # STEP 36
avl2.insert(int2)                                                       # STEP 37
result = avl2.find(int2)                                                # STEP 38
avl1.delete(int2)                                                       # STEP 39
avl1 == avl2                                                            # STEP 40
avl1.insert(int2)                                                       # STEP 41
avl2.delete(int3)                                                       # STEP 42
int2 = 7                                                                # STEP 43
avl1.delete(int3)                                                       # STEP 44
avl2.delete(int1)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
avl1.insert(int0)                                                       # STEP 47
avl2.insert(int2)                                                       # STEP 48
avl1.insert(int2)                                                       # STEP 49
avl2.insert(int1)                                                       # STEP 50
avl1.insert(int0)                                                       # STEP 51
avl1.insert(int2)                                                       # STEP 52
result = avl2.find(int1)                                                # STEP 53
int2 = 17                                                               # STEP 54
avl0 = avl.AVLTree()                                                    # STEP 55
avl1.insert(int2)                                                       # STEP 56
int2 = 3                                                                # STEP 57
result = avl2.inorder()                                                 # STEP 58
avl0.delete(int0)                                                       # STEP 59
int0 = 3                                                                # STEP 60
avl0.delete(int2)                                                       # STEP 61
int1 = 16                                                               # STEP 62
avl0.delete(int0)                                                       # STEP 63
int3 = 5                                                                # STEP 64
avl1.delete(int1)                                                       # STEP 65
avl1.delete(int1)                                                       # STEP 66
avl0.delete(int1)                                                       # STEP 67
avl2 = avl.AVLTree()                                                    # STEP 68
avl2.insert(int2)                                                       # STEP 69
int1 = 1                                                                # STEP 70
avl2.delete(int0)                                                       # STEP 71
avl1.delete(int1)                                                       # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102577b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

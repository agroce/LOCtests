Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61959.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10353fab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 51 steps

SAVING TEST AS failure.61959.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
avl0 = avl.AVLTree()                                                     # STEP 2
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.insert(int2)                                                        # STEP 3
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
avl0.insert(int1)                                                        # STEP 4
ACTION: avl0.insert(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 10]) : <type 'set'>
==================================================
int2 = 10                                                                # STEP 5
ACTION: int2 = 10 
int2 = 2 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
avl0.delete(int1)                                                        # STEP 6
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
result = avl0.inorder()                                                  # STEP 7
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.delete(int1)                                                        # STEP 8
ACTION: avl0.delete(int1) 
int1 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int2)                                                        # STEP 9
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
int1 = 12                                                               # STEP 10
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
result = avl0.find(int2)                                                # STEP 11
ACTION: result = avl0.find(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
int3 = 15                                                               # STEP 12
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 13
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 14
ACTION: avl0.delete(int1) 
int1 = 12 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int1 = 17                                                               # STEP 15
ACTION: int1 = 17 
int1 = 12 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
result = avl0.find(int1)                                                # STEP 16
ACTION: result = avl0.find(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
avl0.delete(int1)                                                       # STEP 17
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0 == avl0                                                            # STEP 18
ACTION: avl0 == avl0 
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl0.delete(int3)                                                       # STEP 19
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl0.insert(int3)                                                       # STEP 20
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 15]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 21
ACTION: avl0.insert(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
avl0.delete(int3)                                                       # STEP 22
ACTION: avl0.delete(int3) 
int3 = 15 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([2]) : <type 'set'>
==================================================
int3 = 6                                                                # STEP 23
ACTION: int3 = 6 
int3 = 15 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 17 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int2)                                                       # STEP 25
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 10]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 26
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 10, 6]) : <type 'set'>
==================================================
int1 = 19                                                               # STEP 27
ACTION: int1 = 19 
int1 = 17 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 28
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int2 = 2                                                                # STEP 29
ACTION: int2 = 2 
int2 = 10 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
result = avl0.find(int2)                                                # STEP 31
ACTION: result = avl0.find(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int2) 
==================================================
avl0.insert(int3)                                                       # STEP 32
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
result = avl0.find(int1)                                                # STEP 33
ACTION: result = avl0.find(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
int0 = 19                                                               # STEP 34
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
avl0.delete(int2)                                                       # STEP 35
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 36
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([19, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 37
ACTION: avl0.delete(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([19, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([10, 6]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 38
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([2, 10, 6]) : <type 'set'>
==================================================
avl0.insert(int3)                                                       # STEP 39
ACTION: avl0.insert(int3) 
int3 = 6 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
==================================================
int3 = 14                                                               # STEP 40
ACTION: int3 = 14 
int3 = 6 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 41
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 42
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 43
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 10, 6]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 44
ACTION: avl0.insert(int0) 
int0 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 45
ACTION: avl0.delete(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
=> avl_REF0 = set([2, 10, 6]) : <type 'set'>
==================================================
result = avl0.inorder()                                                 # STEP 46
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl0.insert(int2)                                                       # STEP 47
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int2)                                                       # STEP 48
ACTION: avl0.insert(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
==================================================
avl0.insert(int1)                                                       # STEP 49
ACTION: avl0.insert(int1) 
int1 = 19 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 50
ACTION: avl0.delete(int2) 
int2 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10305c3b0> : <type 'instance'>
avl_REF0 = set([2, 19, 10, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
=> avl_REF0 = set([19, 10, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101fb1f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  14 [3:1]
-- < 9 [2:1]
---- < 5 [1:-1]
------ > 6 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 15 [0:0] L
---- > 19 [0:0] L
set([5, 6, 9, 12, 14, 15, 18, 19])
  7 [3:-1]
-- < 4 [1:1]
---- < 3 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 14 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([3, 4, 7, 9, 14, 15, 17, 20])
  7 [3:-1]
-- < 4 [1:0]
---- < 3 [0:0] L
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 14 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([3, 4, 6, 7, 9, 14, 15, 17, 20])
TEST #3 STEP #91 (0:00:30.034064) Mon May  1 17:23:56 2017 [ 160 stmts 212 branches ]
  7 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 14 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([4, 6, 7, 9, 14, 15, 17, 20])
  7 [3:-1]
-- < 4 [1:-1]
---- > 6 [0:0] L
-- > 15 [2:0]
---- < 9 [1:-1]
------ > 14 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([4, 6, 7, 9, 14, 15, 17, 20])
  10 [3:1]
-- < 3 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
set([1, 2, 3, 5, 10, 11, 14])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10314ce18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 71 steps

SAVING TEST AS failure.61959.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 10                                                                # STEP 0
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 1
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 2
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 3
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int1)                                                        # STEP 4
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 5
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                        # STEP 6
ACTION: avl1.insert(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([10, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 7
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
int0 = 14                                                                # STEP 8
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.delete(int3)                                                        # STEP 9
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
result = avl2.find(int3)                                                # STEP 10
ACTION: result = avl2.find(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
avl2.delete(int1)                                                       # STEP 11
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int1)                                                       # STEP 12
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int0)                                                       # STEP 14
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 10 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([10, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 16
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 17
ACTION: avl1.delete(int0) 
int0 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int3)                                                       # STEP 18
ACTION: avl2.delete(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 19
ACTION: avl2.insert(int3) 
int3 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 5]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 20
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([10, 5, 14]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 21
ACTION: int0 = 6 
int0 = 14 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 13                                                               # STEP 22
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 23
ACTION: avl1.delete(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 24
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([6, 7]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 25
ACTION: int3 = 11 
int3 = 10 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 26
ACTION: avl2.insert(int2) 
int2 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10, 5, 14, 13]) : <type 'set'>
==================================================
int0 = 17                                                               # STEP 27
ACTION: int0 = 17 
int0 = 6 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 28
ACTION: avl1.delete(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([6, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([6]) : <type 'set'>
==================================================
int1 = 11                                                               # STEP 29
ACTION: int1 = 11 
int1 = 7 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 30
ACTION: avl2.delete(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 31
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([10, 11, 5, 14, 13]) : <type 'set'>
==================================================
int2 = 3                                                                # STEP 32
ACTION: int2 = 3 
int2 = 13 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 33
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 34
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([11, 6]) : <type 'set'>
==================================================
avl1.delete(int2)                                                       # STEP 35
ACTION: avl1.delete(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.insert(int0)                                                       # STEP 36
ACTION: avl1.insert(int0) 
int0 = 17 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([17, 11, 6]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 37
ACTION: avl1.delete(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([17, 11, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([17, 6]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 38
ACTION: int3 = 13 
int3 = 11 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 40
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 41
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 42
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([17, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([17, 3, 6]) : <type 'set'>
==================================================
avl1.insert(int1)                                                       # STEP 43
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([17, 3, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 44
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl2.inorder()                                                 # STEP 45
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 47
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2 == avl1                                                            # STEP 48
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 49
ACTION: avl1.insert(int1) 
int1 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 50
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 51
ACTION: avl0.delete(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
int3 = 2                                                                # STEP 52
ACTION: int3 = 2 
int3 = 13 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl0.insert(int1)                                                       # STEP 53
ACTION: avl0.insert(int1) 
int1 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([11]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 54
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([10, 11, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 5, 10, 11, 14]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 55
ACTION: avl2.delete(int0) 
int0 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.insert(int3)                                                       # STEP 56
ACTION: avl0.insert(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
avl_REF0 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([2, 11]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 57
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 5, 10, 11, 14]) : <type 'set'>
==================================================
int3 = 1                                                                # STEP 58
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
result = avl2.find(int3)                                                # STEP 59
ACTION: result = avl2.find(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([2, 3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int1 = 2                                                                # STEP 60
ACTION: int1 = 2 
int1 = 11 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 61
ACTION: avl2.insert(int3) 
int3 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([2, 3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([1, 2, 3, 5, 10, 11, 14]) : <type 'set'>
==================================================
avl0.delete(int3)                                                       # STEP 62
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
avl_REF0 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
result = avl1.find(int3)                                                # STEP 63
ACTION: result = avl1.find(int3) 
int3 = 1 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.display()                                                          # STEP 64
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 5, 10, 11, 14]) : <type 'set'>
  10 [3:1]
-- < 3 [2:1]
---- < 2 [1:1]
------ < 1 [0:0] L
---- > 5 [0:0] L
-- > 14 [1:1]
---- < 11 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([1, 2, 3, 5, 10, 11, 14])
==================================================
avl0.delete(int3)                                                       # STEP 65
ACTION: avl0.delete(int3) 
int3 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x103175c20> : <type 'instance'>
avl_REF0 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x1033ef758> : <type 'instance'>
avl_REF1 = set([3, 6, 11, 17]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
==================================================
int2 = 8                                                                # STEP 67
ACTION: int2 = 8 
int2 = 3 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 68
ACTION: int3 = 11 
int3 = 1 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 69
ACTION: avl2.insert(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.delete(int3)                                                       # STEP 70
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103141200> : <type 'instance'>
avl_REF2 = set([1, 2, 3, 5, 10, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([1, 2, 3, 5, 10, 14]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10317c6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 42
STOPPING TESTING DUE TO TIMEOUT
8.27045850261 PERCENT COVERED
60.2287518978 TOTAL RUNTIME
6 EXECUTED
464 TOTAL TEST OPERATIONS
23.6999094486 TIME SPENT EXECUTING TEST OPERATIONS
0.050633430481 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
23.7793211937 TIME SPENT CHECKING PROPERTIES
47.4792306423 TOTAL TIME SPENT RUNNING SUT
0.0036313533783 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 2                                                                 # STEP 0
int1 = 10                                                                # STEP 1
avl0 = avl.AVLTree()                                                     # STEP 2
avl0.insert(int2)                                                        # STEP 3
avl0.insert(int1)                                                        # STEP 4
int2 = 10                                                                # STEP 5
avl0.delete(int1)                                                        # STEP 6
result = avl0.inorder()                                                  # STEP 7
avl0.delete(int1)                                                        # STEP 8
avl0.delete(int2)                                                        # STEP 9
int1 = 12                                                               # STEP 10
result = avl0.find(int2)                                                # STEP 11
int3 = 15                                                               # STEP 12
avl0.delete(int1)                                                       # STEP 13
avl0.delete(int1)                                                       # STEP 14
int1 = 17                                                               # STEP 15
result = avl0.find(int1)                                                # STEP 16
avl0.delete(int1)                                                       # STEP 17
avl0 == avl0                                                            # STEP 18
avl0.delete(int3)                                                       # STEP 19
avl0.insert(int3)                                                       # STEP 20
avl0.insert(int3)                                                       # STEP 21
avl0.delete(int3)                                                       # STEP 22
int3 = 6                                                                # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl0.insert(int2)                                                       # STEP 25
avl0.insert(int3)                                                       # STEP 26
int1 = 19                                                               # STEP 27
avl0.insert(int3)                                                       # STEP 28
int2 = 2                                                                # STEP 29
avl0.delete(int2)                                                       # STEP 30
result = avl0.find(int2)                                                # STEP 31
avl0.insert(int3)                                                       # STEP 32
result = avl0.find(int1)                                                # STEP 33
int0 = 19                                                               # STEP 34
avl0.delete(int2)                                                       # STEP 35
avl0.insert(int1)                                                       # STEP 36
avl0.delete(int0)                                                       # STEP 37
avl0.insert(int2)                                                       # STEP 38
avl0.insert(int3)                                                       # STEP 39
int3 = 14                                                               # STEP 40
avl0.delete(int1)                                                       # STEP 41
avl0.insert(int0)                                                       # STEP 42
avl0.delete(int1)                                                       # STEP 43
avl0.insert(int0)                                                       # STEP 44
avl0.delete(int1)                                                       # STEP 45
result = avl0.inorder()                                                 # STEP 46
avl0.insert(int2)                                                       # STEP 47
avl0.insert(int2)                                                       # STEP 48
avl0.insert(int1)                                                       # STEP 49
avl0.delete(int2)                                                       # STEP 50
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101fb1f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int3 = 10                                                                # STEP 0
int0 = 5                                                                 # STEP 1
int1 = 7                                                                 # STEP 2
avl1 = avl.AVLTree()                                                     # STEP 3
avl1.insert(int1)                                                        # STEP 4
avl2 = avl.AVLTree()                                                     # STEP 5
avl1.insert(int3)                                                        # STEP 6
avl2.insert(int0)                                                        # STEP 7
int0 = 14                                                                # STEP 8
avl2.delete(int3)                                                        # STEP 9
result = avl2.find(int3)                                                # STEP 10
avl2.delete(int1)                                                       # STEP 11
avl2.insert(int1)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
avl1.delete(int0)                                                       # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl2.delete(int1)                                                       # STEP 16
avl1.delete(int0)                                                       # STEP 17
avl2.delete(int3)                                                       # STEP 18
avl2.insert(int3)                                                       # STEP 19
avl2.insert(int0)                                                       # STEP 20
int0 = 6                                                                # STEP 21
int2 = 13                                                               # STEP 22
avl1.delete(int0)                                                       # STEP 23
avl1.insert(int0)                                                       # STEP 24
int3 = 11                                                               # STEP 25
avl2.insert(int2)                                                       # STEP 26
int0 = 17                                                               # STEP 27
avl1.delete(int1)                                                       # STEP 28
int1 = 11                                                               # STEP 29
avl2.delete(int1)                                                       # STEP 30
avl2.insert(int3)                                                       # STEP 31
int2 = 3                                                                # STEP 32
avl2.delete(int0)                                                       # STEP 33
avl1.insert(int1)                                                       # STEP 34
avl1.delete(int2)                                                       # STEP 35
avl1.insert(int0)                                                       # STEP 36
avl1.delete(int1)                                                       # STEP 37
int3 = 13                                                               # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl2.insert(int1)                                                       # STEP 40
avl2.delete(int0)                                                       # STEP 41
avl1.insert(int2)                                                       # STEP 42
avl1.insert(int1)                                                       # STEP 43
result = avl1.inorder()                                                 # STEP 44
result = avl2.inorder()                                                 # STEP 45
avl2.insert(int1)                                                       # STEP 46
avl1.delete(int3)                                                       # STEP 47
avl2 == avl1                                                            # STEP 48
avl1.insert(int1)                                                       # STEP 49
avl0 = avl.AVLTree()                                                    # STEP 50
avl0.delete(int1)                                                       # STEP 51
int3 = 2                                                                # STEP 52
avl0.insert(int1)                                                       # STEP 53
avl2.insert(int2)                                                       # STEP 54
avl2.delete(int0)                                                       # STEP 55
avl0.insert(int3)                                                       # STEP 56
avl2.insert(int3)                                                       # STEP 57
int3 = 1                                                                # STEP 58
result = avl2.find(int3)                                                # STEP 59
int1 = 2                                                                # STEP 60
avl2.insert(int3)                                                       # STEP 61
avl0.delete(int3)                                                       # STEP 62
result = avl1.find(int3)                                                # STEP 63
avl2.display()                                                          # STEP 64
avl0.delete(int3)                                                       # STEP 65
avl1.insert(int2)                                                       # STEP 66
int2 = 8                                                                # STEP 67
int3 = 11                                                               # STEP 68
avl2.insert(int3)                                                       # STEP 69
avl2.delete(int3)                                                       # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10317c6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

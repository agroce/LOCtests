Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.666.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #52 (0:00:30.061975) Fri Apr 28 06:58:08 2017 [ 139 stmts 188 branches ]
  10 [2:0]
-- < 8 [1:0]
---- < 1 [0:0] L
---- > 9 [0:0] L
-- > 19 [1:0]
---- < 15 [0:0] L
---- > 20 [0:0] L
set([1, 8, 9, 10, 15, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058eba70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 85 steps

SAVING TEST AS failure.666.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 1
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 2
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
result = avl1.inorder()                                                  # STEP 5
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
result = avl1.inorder()                                                  # STEP 6
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl2 = avl.AVLTree()                                                     # STEP 7
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                 # STEP 8
ACTION: result = avl1.find(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 20                                                                # STEP 9
ACTION: int2 = 20 
int2 = 11 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 10
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 11
ACTION: avl1.insert(int0) 
int0 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([4]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 13
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 3                                                                # STEP 14
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 15
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 16
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl1.find(int2)                                                # STEP 17
ACTION: result = avl1.find(int2) 
int2 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
int2 = 10                                                               # STEP 18
ACTION: int2 = 10 
int2 = 3 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 12                                                               # STEP 20
ACTION: int2 = 12 
int2 = 10 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 21
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl1.delete(int2)                                                       # STEP 22
ACTION: avl1.delete(int2) 
int2 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 17                                                               # STEP 23
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 24
ACTION: avl2.insert(int3) 
int3 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
int0 = 20                                                               # STEP 25
ACTION: int0 = 20 
int0 = 9 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 26
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 27
ACTION: result = avl1.find(int0) 
int0 = 20 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1 == avl1                                                            # STEP 28
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int3)                                                       # STEP 29
ACTION: avl1.delete(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int0 = 7                                                                # STEP 30
ACTION: int0 = 7 
int0 = 20 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 31
ACTION: int3 = 19 
int3 = 13 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 32
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 3                                                                # STEP 34
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 35
ACTION: result = avl1.find(int0) 
int0 = 7 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
int0 = 16                                                               # STEP 36
ACTION: int0 = 16 
int0 = 7 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 37
ACTION: result = avl2.find(int1) 
int1 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 10                                                               # STEP 38
ACTION: int1 = 10 
int1 = 1 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 39
ACTION: avl2.delete(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1 == avl1                                                            # STEP 40
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 3]) : <type 'set'>
==================================================
int2 = 5                                                                # STEP 42
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 43
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int3 = 8                                                                # STEP 44
ACTION: int3 = 8 
int3 = 19 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl1.insert(int3)                                                       # STEP 45
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 4]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 46
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 47
ACTION: avl1 = avl.AVLTree() 
avl1 = <avl.AVLTree instance at 0x1058fdef0> : <type 'instance'>
avl_REF1 = set([8, 4]) : <type 'set'>
=> avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 48
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 8                                                                # STEP 49
ACTION: int2 = 8 
int2 = 5 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 50
ACTION: int3 = 13 
int3 = 8 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl0.insert(int0)                                                       # STEP 51
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
result = avl0.find(int0)                                                # STEP 52
ACTION: result = avl0.find(int0) 
int0 = 16 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int0) 
==================================================
avl2 == avl0                                                            # STEP 53
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.find(int3)                                                # STEP 54
ACTION: result = avl0.find(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int0 = 12                                                               # STEP 55
ACTION: int0 = 12 
int0 = 16 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 56
ACTION: avl2.insert(int0) 
int0 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18, 3]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([18, 3, 12]) : <type 'set'>
==================================================
int3 = 13                                                               # STEP 57
ACTION: int3 = 13 
int3 = 13 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 58
ACTION: result = avl1.find(int0) 
int0 = 12 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 59
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 18, 3, 12]) : <type 'set'>
==================================================
avl0.delete(int0)                                                       # STEP 60
ACTION: avl0.delete(int0) 
int0 = 12 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
int2 = 4                                                                # STEP 61
ACTION: int2 = 4 
int2 = 8 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([8, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 4, 18, 3, 12]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 63
ACTION: avl0.insert(int2) 
int2 = 4 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 4]) : <type 'set'>
==================================================
int2 = 8                                                                # STEP 64
ACTION: int2 = 8 
int2 = 4 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 65
ACTION: avl0.insert(int3) 
int3 = 13 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 4, 13]) : <type 'set'>
==================================================
result = avl1.inorder()                                                 # STEP 66
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 67
ACTION: avl1.delete(int1) 
int1 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1 == avl2                                                            # STEP 68
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
avl_REF2 = set([8, 4, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl1.insert(int3)                                                       # STEP 69
ACTION: avl1.insert(int3) 
int3 = 13 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([13]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 70
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl0.delete(int3)                                                       # STEP 71
ACTION: avl0.delete(int3) 
int3 = 7 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
==================================================
int1 = 7                                                                # STEP 72
ACTION: int1 = 7 
int1 = 10 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int3 = 18                                                               # STEP 73
ACTION: int3 = 18 
int3 = 7 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 74
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([8, 4, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int0 = 11                                                               # STEP 75
ACTION: int0 = 11 
int0 = 12 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 76
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([8, 4, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl0.insert(int0)                                                       # STEP 77
ACTION: avl0.insert(int0) 
int0 = 11 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 11, 4, 13]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 78
ACTION: avl1.delete(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 79
ACTION: avl1.delete(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 18                                                               # STEP 80
ACTION: int2 = 18 
int2 = 8 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 81
ACTION: avl1.insert(int2) 
int2 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10325f248> : <type 'instance'>
avl_REF1 = set([13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([18, 13]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 82
ACTION: int0 = 4 
int0 = 11 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int3)                                                       # STEP 83
ACTION: avl0.insert(int3) 
int3 = 18 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x103277ef0> : <type 'instance'>
avl_REF0 = set([16, 11, 4, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int3) 
=> avl_REF0 = set([16, 18, 11, 4, 13]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 84
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1027f1998> : <type 'instance'>
avl_REF2 = set([8, 4, 18, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 4, 3, 12]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027f58c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.6528673227 PERCENT COVERED
64.9296228886 TOTAL RUNTIME
8 EXECUTED
685 TOTAL TEST OPERATIONS
28.6603682041 TIME SPENT EXECUTING TEST OPERATIONS
0.0240602493286 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8508005142 TIME SPENT CHECKING PROPERTIES
57.5111687183 TOTAL TIME SPENT RUNNING SUT
0.00455856323242 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 11                                                                # STEP 0
int1 = 1                                                                 # STEP 1
int0 = 4                                                                 # STEP 2
int3 = 18                                                                # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
result = avl1.inorder()                                                  # STEP 5
result = avl1.inorder()                                                  # STEP 6
avl2 = avl.AVLTree()                                                     # STEP 7
result = avl1.find(int2)                                                 # STEP 8
int2 = 20                                                                # STEP 9
avl1 == avl1                                                            # STEP 10
avl1.insert(int0)                                                       # STEP 11
avl2.delete(int2)                                                       # STEP 12
avl2.delete(int2)                                                       # STEP 13
int2 = 3                                                                # STEP 14
int0 = 9                                                                # STEP 15
avl2.delete(int0)                                                       # STEP 16
result = avl1.find(int2)                                                # STEP 17
int2 = 10                                                               # STEP 18
result = avl2.find(int2)                                                # STEP 19
int2 = 12                                                               # STEP 20
avl2 == avl2                                                            # STEP 21
avl1.delete(int2)                                                       # STEP 22
int2 = 17                                                               # STEP 23
avl2.insert(int3)                                                       # STEP 24
int0 = 20                                                               # STEP 25
int3 = 13                                                               # STEP 26
result = avl1.find(int0)                                                # STEP 27
avl1 == avl1                                                            # STEP 28
avl1.delete(int3)                                                       # STEP 29
int0 = 7                                                                # STEP 30
int3 = 19                                                               # STEP 31
avl1 == avl1                                                            # STEP 32
avl1.delete(int2)                                                       # STEP 33
int2 = 3                                                                # STEP 34
result = avl1.find(int0)                                                # STEP 35
int0 = 16                                                               # STEP 36
result = avl2.find(int1)                                                # STEP 37
int1 = 10                                                               # STEP 38
avl2.delete(int3)                                                       # STEP 39
avl1 == avl1                                                            # STEP 40
avl2.insert(int2)                                                       # STEP 41
int2 = 5                                                                # STEP 42
avl1 == avl2                                                            # STEP 43
int3 = 8                                                                # STEP 44
avl1.insert(int3)                                                       # STEP 45
avl0 = avl.AVLTree()                                                    # STEP 46
avl1 = avl.AVLTree()                                                    # STEP 47
avl2.delete(int2)                                                       # STEP 48
int2 = 8                                                                # STEP 49
int3 = 13                                                               # STEP 50
avl0.insert(int0)                                                       # STEP 51
result = avl0.find(int0)                                                # STEP 52
avl2 == avl0                                                            # STEP 53
result = avl0.find(int3)                                                # STEP 54
int0 = 12                                                               # STEP 55
avl2.insert(int0)                                                       # STEP 56
int3 = 13                                                               # STEP 57
result = avl1.find(int0)                                                # STEP 58
avl2.insert(int2)                                                       # STEP 59
avl0.delete(int0)                                                       # STEP 60
int2 = 4                                                                # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl0.insert(int2)                                                       # STEP 63
int2 = 8                                                                # STEP 64
avl0.insert(int3)                                                       # STEP 65
result = avl1.inorder()                                                 # STEP 66
avl1.delete(int1)                                                       # STEP 67
avl1 == avl2                                                            # STEP 68
avl1.insert(int3)                                                       # STEP 69
int3 = 7                                                                # STEP 70
avl0.delete(int3)                                                       # STEP 71
int1 = 7                                                                # STEP 72
int3 = 18                                                               # STEP 73
avl2.delete(int1)                                                       # STEP 74
int0 = 11                                                               # STEP 75
avl2.delete(int1)                                                       # STEP 76
avl0.insert(int0)                                                       # STEP 77
avl1.delete(int0)                                                       # STEP 78
avl1.delete(int2)                                                       # STEP 79
int2 = 18                                                               # STEP 80
avl1.insert(int2)                                                       # STEP 81
int0 = 4                                                                # STEP 82
avl0.insert(int3)                                                       # STEP 83
avl2.delete(int2)                                                       # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1027f58c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

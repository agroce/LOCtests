Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.660.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 14 [1:-1]
---- > 18 [0:0] L
set([1, 3, 4, 5, 14, 18])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 14 [1:-1]
---- > 18 [0:0] L
set([1, 3, 4, 5, 14, 18])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 14 [1:-1]
---- > 18 [0:0] L
set([1, 3, 4, 5, 14, 18])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 8 [0:0] L
---- > 18 [0:0] L
set([1, 3, 4, 5, 8, 14, 18])
  5 [2:0]
-- < 3 [1:0]
---- < 1 [0:0] L
---- > 4 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 18 [0:0] L
set([1, 3, 4, 5, 11, 14, 18])
  11 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 5, 11, 17, 19, 20])
  11 [2:0]
-- < 5 [1:1]
---- < 3 [0:0] L
-- > 19 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 5, 11, 17, 19, 20])
TEST #4 STEP #38 (0:00:30.100783) Fri Apr 28 06:57:07 2017 [ 161 stmts 214 branches ]
  14 [3:1]
-- < 7 [2:1]
---- < 5 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
set([5, 6, 7, 13, 14, 16, 18])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1050eb908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 99 steps

SAVING TEST AS failure.660.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 11                                                                # STEP 0
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 1
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 2
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int2 = 18                                                                # STEP 3
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int3)                                                 # STEP 5
ACTION: result = avl2.find(int3) 
int3 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
result = avl2.find(int0)                                                 # STEP 6
ACTION: result = avl2.find(int0) 
int0 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                        # STEP 7
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.delete(int2)                                                        # STEP 8
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                 # STEP 9
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 10
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2 == avl2                                                            # STEP 11
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
avl2.insert(int2)                                                       # STEP 12
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 13
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([18, 12]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 14
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 12                                                               # STEP 15
ACTION: int1 = 12 
int1 = 12 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 16
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 18 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
int0 = 14                                                               # STEP 20
ACTION: int0 = 14 
int0 = 18 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 21
ACTION: int2 = 7 
int2 = 18 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 23
ACTION: avl2.insert(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([18, 12, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 24
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int3)                                                       # STEP 26
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int1)                                                       # STEP 27
ACTION: avl2.insert(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
result = avl2.find(int2)                                                # STEP 29
ACTION: result = avl2.find(int2) 
int2 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 30
ACTION: int2 = 20 
int2 = 7 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 31
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int2)                                                       # STEP 32
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 12, 7]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 33
ACTION: result = avl2.find(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int3 = 13                                                               # STEP 34
ACTION: int3 = 13 
int3 = 20 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 36
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([20, 18, 12, 14, 7]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 37
ACTION: int0 = 2 
int0 = 14 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 38
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.delete(int1)                                                       # STEP 39
ACTION: avl2.delete(int1) 
int1 = 12 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 12, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 41
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int1 = 2                                                                # STEP 42
ACTION: int1 = 2 
int1 = 12 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 43
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int3)                                                       # STEP 44
ACTION: avl2.delete(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.delete(int2)                                                       # STEP 45
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([20, 18, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([18, 14, 7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 46
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([18, 14, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 7, 14, 18]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 47
ACTION: int2 = 19 
int2 = 20 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 48
ACTION: avl2.insert(int3) 
int3 = 13 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 49
ACTION: result = avl2.find(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                       # STEP 50
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.insert(int1)                                                       # STEP 51
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 52
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 53
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 7, 13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 54
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([2, 7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 55
ACTION: int0 = 1 
int0 = 2 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 56
ACTION: int2 = 14 
int2 = 19 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 57
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 7                                                                # STEP 58
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 59
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
==================================================
result = avl2.find(int0)                                                # STEP 60
ACTION: result = avl2.find(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl2.inorder()                                                 # STEP 61
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 62
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 63
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int1)                                                       # STEP 64
ACTION: avl2.delete(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 65
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
int0 = 5                                                                # STEP 66
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 67
ACTION: avl2.delete(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 68
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([13, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 69
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([13, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 70
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int2)                                                       # STEP 71
ACTION: avl2.insert(int2) 
int2 = 14 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 72
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 73
ACTION: avl2.insert(int0) 
int0 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([5, 7, 13, 14, 18, 19]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 74
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 75
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 76
ACTION: int3 = 7 
int3 = 7 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 77
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([5, 13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 78
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 13, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 79
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 80
ACTION: avl2.insert(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 81
ACTION: avl2.delete(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([5, 7, 13, 14, 18, 19]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 82
ACTION: avl2.insert(int1) 
int1 = 16 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
==================================================
int0 = 1                                                                # STEP 83
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 84
ACTION: avl2.delete(int2) 
int2 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 6                                                                # STEP 85
ACTION: int2 = 6 
int2 = 17 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 86
ACTION: avl2.delete(int0) 
int0 = 1 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 87
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int0 = 19                                                               # STEP 88
ACTION: int0 = 19 
int0 = 1 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 89
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([5, 6, 7, 13, 14, 16, 18, 19]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 90
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18, 19]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
==================================================
int1 = 15                                                               # STEP 91
ACTION: int1 = 15 
int1 = 16 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 92
ACTION: result = avl2.find(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 93
ACTION: avl2.delete(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.display()                                                          # STEP 94
ACTION: avl2.display() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
  14 [3:1]
-- < 7 [2:1]
---- < 5 [1:-1]
------ > 6 [0:0] L
---- > 13 [0:0] L
-- > 18 [1:1]
---- < 16 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([5, 6, 7, 13, 14, 16, 18])
==================================================
avl2.insert(int2)                                                       # STEP 95
ACTION: avl2.insert(int2) 
int2 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl2.inorder()                                                 # STEP 96
ACTION: result = avl2.inorder() 
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int0 = 18                                                               # STEP 97
ACTION: int0 = 18 
int0 = 19 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 98
ACTION: avl2.delete(int3) 
int3 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x105106200> : <type 'instance'>
avl_REF2 = set([5, 6, 7, 13, 14, 16, 18]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([5, 6, 13, 14, 16, 18]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10474f7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
  12 [3:-1]
-- < 5 [1:-1]
---- > 6 [0:0] L
-- > 14 [2:-1]
---- < 13 [0:0] L
---- > 15 [1:-1]
------ > 17 [0:0] L
set([5, 6, 12, 13, 14, 15, 17])
  12 [2:0]
-- < 6 [1:0]
---- < 5 [0:0] L
---- > 10 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([5, 6, 10, 12, 13, 14, 17])
  12 [3:1]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 2 [0:0] L
---- > 10 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 10, 12, 13, 14, 17])
  12 [3:1]
-- < 6 [2:1]
---- < 5 [1:1]
------ < 2 [0:0] L
---- > 10 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([2, 5, 6, 10, 12, 13, 14, 17])
  12 [3:1]
-- < 6 [2:1]
---- < 2 [1:0]
------ < 1 [0:0] L
------ > 5 [0:0] L
---- > 10 [0:0] L
-- > 14 [1:0]
---- < 13 [0:0] L
---- > 17 [0:0] L
set([1, 2, 5, 6, 10, 12, 13, 14, 17])
  15 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([3, 9, 12, 15, 16, 18, 19])
  15 [2:0]
-- < 9 [1:0]
---- < 3 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([3, 9, 12, 15, 16, 18, 19])
  15 [3:1]
-- < 9 [2:1]
---- < 3 [1:-1]
------ > 5 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([3, 5, 9, 12, 15, 16, 18, 19])
  15 [3:1]
-- < 9 [2:1]
---- < 3 [1:-1]
------ > 5 [0:0] L
---- > 12 [0:0] L
-- > 18 [1:0]
---- < 16 [0:0] L
---- > 19 [0:0] L
set([3, 5, 9, 12, 15, 16, 18, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 87
STOPPING TESTING DUE TO TIMEOUT
8.58500169664 PERCENT COVERED
60.2501871586 TOTAL RUNTIME
6 EXECUTED
586 TOTAL TEST OPERATIONS
25.7630934715 TIME SPENT EXECUTING TEST OPERATIONS
0.065446138382 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.875420332 TIME SPENT CHECKING PROPERTIES
51.6385138035 TOTAL TIME SPENT RUNNING SUT
0.00410389900208 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 11                                                                # STEP 0
int0 = 18                                                                # STEP 1
int1 = 12                                                                # STEP 2
int2 = 18                                                                # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
result = avl2.find(int3)                                                 # STEP 5
result = avl2.find(int0)                                                 # STEP 6
avl2.insert(int2)                                                        # STEP 7
avl2.delete(int2)                                                        # STEP 8
result = avl2.find(int1)                                                 # STEP 9
avl2.delete(int2)                                                       # STEP 10
avl2 == avl2                                                            # STEP 11
avl2.insert(int2)                                                       # STEP 12
avl2.insert(int1)                                                       # STEP 13
int3 = 20                                                               # STEP 14
int1 = 12                                                               # STEP 15
result = avl2.inorder()                                                 # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int2)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
int0 = 14                                                               # STEP 20
int2 = 7                                                                # STEP 21
avl2.delete(int2)                                                       # STEP 22
avl2.insert(int2)                                                       # STEP 23
result = avl2.inorder()                                                 # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.insert(int3)                                                       # STEP 26
avl2.insert(int1)                                                       # STEP 27
result = avl2.find(int1)                                                # STEP 28
result = avl2.find(int2)                                                # STEP 29
int2 = 20                                                               # STEP 30
result = avl2.inorder()                                                 # STEP 31
avl2.delete(int2)                                                       # STEP 32
result = avl2.find(int0)                                                # STEP 33
int3 = 13                                                               # STEP 34
avl2.insert(int2)                                                       # STEP 35
avl2.insert(int0)                                                       # STEP 36
int0 = 2                                                                # STEP 37
result = avl2.inorder()                                                 # STEP 38
avl2.delete(int1)                                                       # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2.insert(int2)                                                       # STEP 41
int1 = 2                                                                # STEP 42
avl2.insert(int2)                                                       # STEP 43
avl2.delete(int3)                                                       # STEP 44
avl2.delete(int2)                                                       # STEP 45
avl2.insert(int1)                                                       # STEP 46
int2 = 19                                                               # STEP 47
avl2.insert(int3)                                                       # STEP 48
result = avl2.find(int1)                                                # STEP 49
avl2.insert(int0)                                                       # STEP 50
avl2.insert(int1)                                                       # STEP 51
avl2.delete(int2)                                                       # STEP 52
avl2.insert(int2)                                                       # STEP 53
avl2.delete(int1)                                                       # STEP 54
int0 = 1                                                                # STEP 55
int2 = 14                                                               # STEP 56
avl2.delete(int0)                                                       # STEP 57
int3 = 7                                                                # STEP 58
avl2.delete(int2)                                                       # STEP 59
result = avl2.find(int0)                                                # STEP 60
result = avl2.inorder()                                                 # STEP 61
avl2.insert(int2)                                                       # STEP 62
avl2.delete(int1)                                                       # STEP 63
avl2.delete(int1)                                                       # STEP 64
avl2.insert(int2)                                                       # STEP 65
int0 = 5                                                                # STEP 66
avl2.delete(int2)                                                       # STEP 67
avl2.delete(int3)                                                       # STEP 68
avl2.insert(int2)                                                       # STEP 69
avl2.insert(int2)                                                       # STEP 70
avl2.insert(int2)                                                       # STEP 71
avl2.insert(int3)                                                       # STEP 72
avl2.insert(int0)                                                       # STEP 73
int1 = 16                                                               # STEP 74
int2 = 17                                                               # STEP 75
int3 = 7                                                                # STEP 76
avl2.delete(int3)                                                       # STEP 77
avl2.insert(int1)                                                       # STEP 78
avl2.delete(int3)                                                       # STEP 79
avl2.insert(int3)                                                       # STEP 80
avl2.delete(int1)                                                       # STEP 81
avl2.insert(int1)                                                       # STEP 82
int0 = 1                                                                # STEP 83
avl2.delete(int2)                                                       # STEP 84
int2 = 6                                                                # STEP 85
avl2.delete(int0)                                                       # STEP 86
result = avl2.find(int2)                                                # STEP 87
int0 = 19                                                               # STEP 88
avl2.insert(int2)                                                       # STEP 89
avl2.delete(int0)                                                       # STEP 90
int1 = 15                                                               # STEP 91
result = avl2.find(int2)                                                # STEP 92
avl2.delete(int0)                                                       # STEP 93
avl2.display()                                                          # STEP 94
avl2.insert(int2)                                                       # STEP 95
result = avl2.inorder()                                                 # STEP 96
int0 = 18                                                               # STEP 97
avl2.delete(int3)                                                       # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10474f7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
216 BRANCHES COVERED
162 STATEMENTS COVERED

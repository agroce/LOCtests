Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.218.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10377f7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
Original test has 42 steps

SAVING TEST AS failure.218.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 20                                                                # STEP 0
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 3
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([4]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([4]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int0 = 11                                                                # STEP 8
ACTION: int0 = 11 
int0 = 4 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int1)                                                        # STEP 9
ACTION: avl2.insert(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([20]) : <type 'set'>
==================================================
result = avl2.find(int1)                                                # STEP 10
ACTION: result = avl2.find(int1) 
int1 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 11
ACTION: int1 = 4 
int1 = 20 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 12
ACTION: result = avl2.find(int0) 
int0 = 11 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl1 = avl.AVLTree()                                                    # STEP 13
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
int0 = 19                                                               # STEP 14
ACTION: int0 = 19 
int0 = 11 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 15
ACTION: result = avl2.find(int0) 
int0 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 16
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 20]) : <type 'set'>
==================================================
int0 = 14                                                               # STEP 17
ACTION: int0 = 14 
int0 = 19 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 18
ACTION: avl2.insert(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 19
ACTION: result = avl1.find(int0) 
int0 = 14 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([19]) : <type 'set'>
==================================================
result = avl1.find(int1)                                                # STEP 21
ACTION: result = avl1.find(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
int0 = 18                                                               # STEP 22
ACTION: int0 = 18 
int0 = 14 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
int2 = 10                                                               # STEP 23
ACTION: int2 = 10 
int2 = 19 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
result = avl1.find(int2)                                                # STEP 24
ACTION: result = avl1.find(int2) 
int2 = 10 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
result = avl1.find(int0)                                                # STEP 25
ACTION: result = avl1.find(int0) 
int0 = 18 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 26
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int2 = 8                                                                # STEP 27
ACTION: int2 = 8 
int2 = 10 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
result = avl2.find(int1)                                                # STEP 28
ACTION: result = avl2.find(int1) 
int1 = 4 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
int1 = 4                                                                # STEP 29
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 30
ACTION: int0 = 20 
int0 = 18 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 31
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
result = avl1.inorder()                                                 # STEP 32
ACTION: result = avl1.inorder() 
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.delete(int1)                                                       # STEP 33
ACTION: avl1.delete(int1) 
int1 = 4 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 4                                                                # STEP 34
ACTION: int1 = 4 
int1 = 4 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 35
ACTION: avl2.delete(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl2.insert(int2)                                                       # STEP 36
ACTION: avl2.insert(int2) 
int2 = 8 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([8, 19, 20]) : <type 'set'>
==================================================
result = avl1.find(int2)                                                # STEP 37
ACTION: result = avl1.find(int2) 
int2 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x104570c20> : <type 'instance'>
avl_REF1 = set([19]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 38
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([8, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([8, 2, 19, 20]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 39
ACTION: int2 = 19 
int2 = 8 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 40
ACTION: int3 = 6 
int3 = 2 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 41
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1046c2b00> : <type 'instance'>
avl_REF2 = set([8, 2, 19, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([8, 2, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058b2518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #5 STEP #29 (0:00:30.031330) Fri Apr 28 05:47:54 2017 [ 151 stmts 202 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
8.10994231422 PERCENT COVERED
60.2501559258 TOTAL RUNTIME
9 EXECUTED
782 TOTAL TEST OPERATIONS
28.3779034615 TIME SPENT EXECUTING TEST OPERATIONS
0.0257065296173 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.5995709896 TIME SPENT CHECKING PROPERTIES
56.9774744511 TOTAL TIME SPENT RUNNING SUT
0.0046238899231 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 20                                                                # STEP 0
int2 = 19                                                                # STEP 1
int3 = 2                                                                 # STEP 2
int0 = 4                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
avl2.insert(int0)                                                        # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 11                                                                # STEP 8
avl2.insert(int1)                                                        # STEP 9
result = avl2.find(int1)                                                # STEP 10
int1 = 4                                                                # STEP 11
result = avl2.find(int0)                                                # STEP 12
avl1 = avl.AVLTree()                                                    # STEP 13
int0 = 19                                                               # STEP 14
result = avl2.find(int0)                                                # STEP 15
avl2.insert(int2)                                                       # STEP 16
int0 = 14                                                               # STEP 17
avl2.insert(int2)                                                       # STEP 18
result = avl1.find(int0)                                                # STEP 19
avl1.insert(int2)                                                       # STEP 20
result = avl1.find(int1)                                                # STEP 21
int0 = 18                                                               # STEP 22
int2 = 10                                                               # STEP 23
result = avl1.find(int2)                                                # STEP 24
result = avl1.find(int0)                                                # STEP 25
avl2.delete(int2)                                                       # STEP 26
int2 = 8                                                                # STEP 27
result = avl2.find(int1)                                                # STEP 28
int1 = 4                                                                # STEP 29
int0 = 20                                                               # STEP 30
avl2 == avl1                                                            # STEP 31
result = avl1.inorder()                                                 # STEP 32
avl1.delete(int1)                                                       # STEP 33
int1 = 4                                                                # STEP 34
avl2.delete(int3)                                                       # STEP 35
avl2.insert(int2)                                                       # STEP 36
result = avl1.find(int2)                                                # STEP 37
avl2.insert(int3)                                                       # STEP 38
int2 = 19                                                               # STEP 39
int3 = 6                                                                # STEP 40
avl2.delete(int2)                                                       # STEP 41
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1058b2518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7894, in check
    assert self.p_avl[2].check_balanced()
204 BRANCHES COVERED
152 STATEMENTS COVERED

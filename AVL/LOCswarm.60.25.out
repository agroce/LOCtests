Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40311.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  14 [2:0]
-- < 3 [1:-1]
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 10, 14, 17, 18, 20])
  14 [2:0]
-- < 3 [1:-1]
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 8 [2:1]
---- < 3 [1:-1]
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 8 [2:1]
---- < 3 [1:-1]
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 8 [2:1]
---- < 3 [1:-1]
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 8 [2:1]
---- < 3 [1:-1]
------ > 4 [0:0] L
---- > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([3, 4, 8, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 17, 18, 20])
  14 [3:1]
-- < 4 [2:0]
---- < 3 [1:1]
------ < 1 [0:0] L
---- > 8 [1:0]
------ < 7 [0:0] L
------ > 10 [0:0] L
-- > 18 [1:0]
---- < 17 [0:0] L
---- > 20 [0:0] L
set([1, 3, 4, 7, 8, 10, 14, 17, 18, 20])
TEST #4 STEP #45 (0:00:30.088035) Mon May  1 02:13:47 2017 [ 128 stmts 170 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10357c3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
Original test has 44 steps

SAVING TEST AS failure.40311.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 1
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 2
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int3 = 11                                                                # STEP 3
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
avl1.insert(int3)                                                        # STEP 4
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
avl1.delete(int0)                                                        # STEP 5
ACTION: avl1.delete(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 18                                                                # STEP 6
ACTION: int0 = 18 
int0 = 8 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
avl1.delete(int0)                                                        # STEP 7
ACTION: avl1.delete(int0) 
int0 = 18 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 2                                                                 # STEP 8
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 10
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([11]) : <type 'set'>
==================================================
int3 = 7                                                                # STEP 11
ACTION: int3 = 7 
int3 = 11 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.find(int0)                                                # STEP 12
ACTION: result = avl1.find(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 13
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([2, 11]) : <type 'set'>
==================================================
int2 = 13                                                               # STEP 14
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 15
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.insert(int3)                                                       # STEP 16
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 11, 7]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 17
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 18
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
avl1.delete(int3)                                                       # STEP 19
ACTION: avl1.delete(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([2, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 20
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([2, 11, 7]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 21
ACTION: avl1.insert(int2) 
int2 = 13 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 22
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 23
ACTION: avl1.insert(int0) 
int0 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
==================================================
int0 = 4                                                                # STEP 24
ACTION: int0 = 4 
int0 = 2 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 25
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 26
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int0)                                                       # STEP 27
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int0)                                                       # STEP 28
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int2)                                                       # STEP 29
ACTION: avl1.insert(int2) 
int2 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([9, 2, 11, 13, 7]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 30
ACTION: int3 = 2 
int3 = 7 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 31
ACTION: int2 = 11 
int2 = 9 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 32
ACTION: avl1.delete(int0) 
int0 = 4 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([9, 2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.delete(int2)                                                       # STEP 33
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([9, 2, 11, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
=> avl_REF1 = set([9, 2, 13, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 34
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.delete(int1)                                                       # STEP 35
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int1)                                                       # STEP 36
ACTION: avl1.insert(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([9, 2, 13, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([2, 6, 7, 9, 13]) : <type 'set'>
==================================================
result = avl1.find(int3)                                                # STEP 37
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 38
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([2, 6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([6, 7, 9, 13]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 39
ACTION: avl1.delete(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int2)                                                       # STEP 40
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
avl1.delete(int2)                                                       # STEP 41
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int0 = 10                                                               # STEP 42
ACTION: int0 = 10 
int0 = 4 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
avl1.delete(int1)                                                       # STEP 43
ACTION: avl1.delete(int1) 
int1 = 6 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x103230b90> : <type 'instance'>
avl_REF1 = set([6, 7, 9, 13]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
=> avl_REF1 = set([7, 9, 13]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031a93b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
8.67164663852 PERCENT COVERED
62.2664568424 TOTAL RUNTIME
8 EXECUTED
644 TOTAL TEST OPERATIONS
28.7403092384 TIME SPENT EXECUTING TEST OPERATIONS
0.0926246643066 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8783140182 TIME SPENT CHECKING PROPERTIES
57.6186232567 TOTAL TIME SPENT RUNNING SUT
0.00453853607178 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 8                                                                 # STEP 0
avl1 = avl.AVLTree()                                                     # STEP 1
avl1.delete(int0)                                                        # STEP 2
int3 = 11                                                                # STEP 3
avl1.insert(int3)                                                        # STEP 4
avl1.delete(int0)                                                        # STEP 5
int0 = 18                                                                # STEP 6
avl1.delete(int0)                                                        # STEP 7
int0 = 2                                                                 # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.insert(int3)                                                       # STEP 10
int3 = 7                                                                # STEP 11
result = avl1.find(int0)                                                # STEP 12
avl1.insert(int0)                                                       # STEP 13
int2 = 13                                                               # STEP 14
avl1.delete(int3)                                                       # STEP 15
avl1.insert(int3)                                                       # STEP 16
int1 = 6                                                                # STEP 17
avl1.insert(int0)                                                       # STEP 18
avl1.delete(int3)                                                       # STEP 19
avl1.insert(int3)                                                       # STEP 20
avl1.insert(int2)                                                       # STEP 21
int2 = 9                                                                # STEP 22
avl1.insert(int0)                                                       # STEP 23
int0 = 4                                                                # STEP 24
avl1.delete(int2)                                                       # STEP 25
avl1.delete(int2)                                                       # STEP 26
avl1.delete(int0)                                                       # STEP 27
avl1.delete(int0)                                                       # STEP 28
avl1.insert(int2)                                                       # STEP 29
int3 = 2                                                                # STEP 30
int2 = 11                                                               # STEP 31
avl1.delete(int0)                                                       # STEP 32
avl1.delete(int2)                                                       # STEP 33
avl1.delete(int1)                                                       # STEP 34
avl1.delete(int1)                                                       # STEP 35
avl1.insert(int1)                                                       # STEP 36
result = avl1.find(int3)                                                # STEP 37
avl1.delete(int3)                                                       # STEP 38
avl1.delete(int3)                                                       # STEP 39
avl1.delete(int2)                                                       # STEP 40
avl1.delete(int2)                                                       # STEP 41
int0 = 10                                                               # STEP 42
avl1.delete(int1)                                                       # STEP 43
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031a93b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7893, in check
    assert self.p_avl[1].check_balanced()
210 BRANCHES COVERED
159 STATEMENTS COVERED

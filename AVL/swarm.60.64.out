Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.491.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #4 STEP #61 (0:00:30.089839) Fri Apr 28 06:28:40 2017 [ 118 stmts 157 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1059df488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
Original test has 67 steps

SAVING TEST AS failure.491.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 11                                                                # STEP 0
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 1
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 2
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 3
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                     # STEP 4
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl1.delete(int2)                                                        # STEP 5
ACTION: avl1.delete(int2) 
int2 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 9                                                                 # STEP 6
ACTION: int2 = 9 
int2 = 11 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1.delete(int1)                                                        # STEP 7
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
int1 = 7                                                                 # STEP 8
ACTION: int1 = 7 
int1 = 16 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl1.delete(int3)                                                        # STEP 9
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 10
ACTION: avl1.delete(int3) 
int3 = 3 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 15                                                               # STEP 11
ACTION: int3 = 15 
int3 = 3 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.delete(int2)                                                       # STEP 12
ACTION: avl1.delete(int2) 
int2 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int2) 
==================================================
int2 = 5                                                                # STEP 13
ACTION: int2 = 5 
int2 = 9 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                    # STEP 14
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 15
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 5 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl1.delete(int3)                                                       # STEP 17
ACTION: avl1.delete(int3) 
int3 = 15 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
avl2.insert(int0)                                                       # STEP 18
ACTION: avl2.insert(int0) 
int0 = 6 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int3 = 17                                                               # STEP 19
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
avl1.insert(int2)                                                       # STEP 20
ACTION: avl1.insert(int2) 
int2 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 21
ACTION: int1 = 5 
int1 = 7 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 22
ACTION: int0 = 9 
int0 = 6 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 23
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 24
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl1.insert(int0)                                                       # STEP 25
ACTION: avl1.insert(int0) 
int0 = 9 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 5]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 26
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl1.delete(int3)                                                       # STEP 27
ACTION: avl1.delete(int3) 
int3 = 17 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 19                                                               # STEP 28
ACTION: int3 = 19 
int3 = 17 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 11                                                               # STEP 29
ACTION: int0 = 11 
int0 = 9 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 30
ACTION: avl2.insert(int3) 
int3 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([19, 6]) : <type 'set'>
==================================================
avl1.delete(int3)                                                       # STEP 31
ACTION: avl1.delete(int3) 
int3 = 19 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int3 = 15                                                               # STEP 32
ACTION: int3 = 15 
int3 = 19 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 33
ACTION: avl1.insert(int0) 
int0 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 11, 5]) : <type 'set'>
==================================================
int0 = 6                                                                # STEP 34
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 35
ACTION: avl2.insert(int2) 
int2 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([19, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([19, 6, 15]) : <type 'set'>
==================================================
int2 = 19                                                               # STEP 36
ACTION: int2 = 19 
int2 = 15 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 19 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([19, 6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([6, 15]) : <type 'set'>
==================================================
int2 = 20                                                               # STEP 38
ACTION: int2 = 20 
int2 = 19 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 39
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
avl_REF1 = set([9, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl1.insert(int1)                                                       # STEP 40
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 41
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avl.AVLTree instance at 0x104fa2170> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int1 = 2                                                                # STEP 42
ACTION: int1 = 2 
int1 = 5 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
avl0 == avl0                                                            # STEP 43
ACTION: avl0 == avl0 
avl0 = <avl.AVLTree instance at 0x104fa2170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF0 
==================================================
avl1 == avl2                                                            # STEP 44
ACTION: avl1 == avl2 
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF1 = set([9, 11, 5]) : <type 'set'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl2.delete(int3)                                                       # STEP 45
ACTION: avl2.delete(int3) 
int3 = 15 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6, 15]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([6]) : <type 'set'>
==================================================
int3 = 8                                                                # STEP 46
ACTION: int3 = 8 
int3 = 15 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl0 == avl1                                                            # STEP 47
ACTION: avl0 == avl1 
avl0 = <avl.AVLTree instance at 0x104fa2170> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF1 = set([9, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF1 
==================================================
avl1.insert(int0)                                                       # STEP 48
ACTION: avl1.insert(int0) 
int0 = 6 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 11, 5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([9, 11, 5, 6]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 49
ACTION: avl2 == avl0 
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl0 = <avl.AVLTree instance at 0x104fa2170> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
avl1 == avl1                                                            # STEP 50
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl1.insert(int3)                                                       # STEP 51
ACTION: avl1.insert(int3) 
int3 = 8 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 52
ACTION: int0 = 2 
int0 = 6 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 == avl2                                                            # STEP 53
ACTION: avl2 == avl2 
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
int3 = 1                                                                # STEP 54
ACTION: int3 = 1 
int3 = 8 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int2)                                                       # STEP 55
ACTION: avl2.delete(int2) 
int2 = 20 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 56
ACTION: avl2.insert(int1) 
int1 = 2 : <type 'int'>
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl_REF2 = set([6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([2, 6]) : <type 'set'>
==================================================
int1 = 6                                                                # STEP 57
ACTION: int1 = 6 
int1 = 2 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
avl1 == avl1                                                            # STEP 58
ACTION: avl1 == avl1 
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
avl0.delete(int1)                                                       # STEP 59
ACTION: avl0.delete(int1) 
int1 = 6 : <type 'int'>
avl0 = <avl.AVLTree instance at 0x104fa2170> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl1.delete(int3)                                                       # STEP 60
ACTION: avl1.delete(int3) 
int3 = 1 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
==================================================
int1 = 12                                                               # STEP 61
ACTION: int1 = 12 
int1 = 6 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 62
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int3 = 11                                                               # STEP 63
ACTION: int3 = 11 
int3 = 1 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 64
ACTION: avl2 == avl1 
avl2 = <avl.AVLTree instance at 0x1048e1710> : <type 'instance'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF2 = set([2, 6]) : <type 'set'>
avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int2 = 11                                                               # STEP 65
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl1.delete(int3)                                                       # STEP 66
ACTION: avl1.delete(int3) 
int3 = 11 : <type 'int'>
avl1 = <avl.AVLTree instance at 0x10493acb0> : <type 'instance'>
avl_REF1 = set([8, 9, 11, 5, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int3) 
=> avl_REF1 = set([8, 9, 5, 6]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f99368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
7.26162198846 PERCENT COVERED
61.2776010036 TOTAL RUNTIME
8 EXECUTED
667 TOTAL TEST OPERATIONS
27.6787371635 TIME SPENT EXECUTING TEST OPERATIONS
0.0266411304474 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7917079926 TIME SPENT CHECKING PROPERTIES
55.4704451561 TOTAL TIME SPENT RUNNING SUT
0.00471305847168 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 11                                                                # STEP 0
int1 = 16                                                                # STEP 1
int3 = 3                                                                 # STEP 2
int0 = 6                                                                 # STEP 3
avl1 = avl.AVLTree()                                                     # STEP 4
avl1.delete(int2)                                                        # STEP 5
int2 = 9                                                                 # STEP 6
avl1.delete(int1)                                                        # STEP 7
int1 = 7                                                                 # STEP 8
avl1.delete(int3)                                                        # STEP 9
avl1.delete(int3)                                                       # STEP 10
int3 = 15                                                               # STEP 11
avl1.delete(int2)                                                       # STEP 12
int2 = 5                                                                # STEP 13
avl2 = avl.AVLTree()                                                    # STEP 14
avl2.delete(int1)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl1.delete(int3)                                                       # STEP 17
avl2.insert(int0)                                                       # STEP 18
int3 = 17                                                               # STEP 19
avl1.insert(int2)                                                       # STEP 20
int1 = 5                                                                # STEP 21
int0 = 9                                                                # STEP 22
int2 = 15                                                               # STEP 23
avl1.delete(int0)                                                       # STEP 24
avl1.insert(int0)                                                       # STEP 25
avl2.delete(int3)                                                       # STEP 26
avl1.delete(int3)                                                       # STEP 27
int3 = 19                                                               # STEP 28
int0 = 11                                                               # STEP 29
avl2.insert(int3)                                                       # STEP 30
avl1.delete(int3)                                                       # STEP 31
int3 = 15                                                               # STEP 32
avl1.insert(int0)                                                       # STEP 33
int0 = 6                                                                # STEP 34
avl2.insert(int2)                                                       # STEP 35
int2 = 19                                                               # STEP 36
avl2.delete(int2)                                                       # STEP 37
int2 = 20                                                               # STEP 38
avl2 == avl1                                                            # STEP 39
avl1.insert(int1)                                                       # STEP 40
avl0 = avl.AVLTree()                                                    # STEP 41
int1 = 2                                                                # STEP 42
avl0 == avl0                                                            # STEP 43
avl1 == avl2                                                            # STEP 44
avl2.delete(int3)                                                       # STEP 45
int3 = 8                                                                # STEP 46
avl0 == avl1                                                            # STEP 47
avl1.insert(int0)                                                       # STEP 48
avl2 == avl0                                                            # STEP 49
avl1 == avl1                                                            # STEP 50
avl1.insert(int3)                                                       # STEP 51
int0 = 2                                                                # STEP 52
avl2 == avl2                                                            # STEP 53
int3 = 1                                                                # STEP 54
avl2.delete(int2)                                                       # STEP 55
avl2.insert(int1)                                                       # STEP 56
int1 = 6                                                                # STEP 57
avl1 == avl1                                                            # STEP 58
avl0.delete(int1)                                                       # STEP 59
avl1.delete(int3)                                                       # STEP 60
int1 = 12                                                               # STEP 61
avl2 == avl1                                                            # STEP 62
int3 = 11                                                               # STEP 63
avl2 == avl1                                                            # STEP 64
int2 = 11                                                               # STEP 65
avl1.delete(int3)                                                       # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f99368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7892, in check
    assert self.p_avl[1].check_balanced()
182 BRANCHES COVERED
136 STATEMENTS COVERED

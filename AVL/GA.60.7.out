Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13804.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #3 STEP #96 (0:00:30.023612) Sun Apr 30 02:35:34 2017 [ 137 stmts 184 branches ]
  9 [2:0]
-- < 3 [1:-1]
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([3, 8, 9, 11, 14, 20])
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
set([2, 3, 8, 9, 11, 14, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101f22908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 92 steps

SAVING TEST AS failure.13804.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 4                                                                 # STEP 0
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 1
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 3
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 4
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 5
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([9]) : <type 'set'>
==================================================
int0 = 7                                                                 # STEP 6
ACTION: int0 = 7 
int0 = 9 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int0 = 8                                                                 # STEP 8
ACTION: int0 = 8 
int0 = 7 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 3                                                                # STEP 10
ACTION: int0 = 3 
int0 = 8 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 11
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 12
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 13
ACTION: result = avl2.find(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl1.insert(int3)                                                       # STEP 14
ACTION: avl1.insert(int3) 
int3 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5]) : <type 'set'>
==================================================
int3 = 14                                                               # STEP 15
ACTION: int3 = 14 
int3 = 5 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 16
ACTION: int2 = 3 
int2 = 4 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 17
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 18
ACTION: avl1.insert(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([5]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([5, 14]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 19
ACTION: avl2.insert(int1) 
int1 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([9, 11]) : <type 'set'>
==================================================
int1 = 5                                                                # STEP 20
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
avl2.delete(int1)                                                       # STEP 21
ACTION: avl2.delete(int1) 
int1 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 15                                                               # STEP 22
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
avl1.insert(int1)                                                       # STEP 23
ACTION: avl1.insert(int1) 
int1 = 5 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
==================================================
result = avl1.find(int3)                                                # STEP 24
ACTION: result = avl1.find(int3) 
int3 = 15 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 3                                                                # STEP 25
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 26
ACTION: result = avl2.find(int0) 
int0 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int1 = 7                                                                # STEP 27
ACTION: int1 = 7 
int1 = 5 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl2 == avl1                                                            # STEP 28
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
avl2.insert(int2)                                                       # STEP 29
ACTION: avl2.insert(int2) 
int2 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([3, 9, 11]) : <type 'set'>
==================================================
avl1.insert(int3)                                                       # STEP 30
ACTION: avl1.insert(int3) 
int3 = 3 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 14]) : <type 'set'>
==================================================
int3 = 9                                                                # STEP 31
ACTION: int3 = 9 
int3 = 3 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 32
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF1 = set([3, 5, 14]) : <type 'set'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
int2 = 5                                                                # STEP 33
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 34
ACTION: int0 = 19 
int0 = 3 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 35
ACTION: avl2.insert(int3) 
int3 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl1 == avl1                                                            # STEP 36
ACTION: avl1 == avl1 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF1 
==================================================
int3 = 3                                                                # STEP 37
ACTION: int3 = 3 
int3 = 9 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
avl1.insert(int0)                                                       # STEP 38
ACTION: avl1.insert(int0) 
int0 = 19 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 3, 5, 14]) : <type 'set'>
==================================================
int0 = 16                                                               # STEP 39
ACTION: int0 = 16 
int0 = 19 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 40
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int3)                                                       # STEP 41
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
avl2.insert(int3)                                                       # STEP 42
ACTION: avl2.insert(int3) 
int3 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
==================================================
int3 = 2                                                                # STEP 43
ACTION: int3 = 2 
int3 = 3 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 44
ACTION: result = avl1.find(int3) 
int3 = 2 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
avl2.delete(int0)                                                       # STEP 45
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int3)                                                # STEP 46
ACTION: result = avl2.find(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int3) 
==================================================
int0 = 14                                                               # STEP 47
ACTION: int0 = 14 
int0 = 16 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 48
ACTION: avl2.insert(int0) 
int0 = 14 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([3, 9, 11, 14]) : <type 'set'>
==================================================
int3 = 20                                                               # STEP 49
ACTION: int3 = 20 
int3 = 2 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 50
ACTION: int0 = 8 
int0 = 14 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 51
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF1 = set([19, 3, 5, 14]) : <type 'set'>
avl_REF2 = set([3, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 52
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.find(int0)                                                # STEP 53
ACTION: result = avl2.find(int0) 
int0 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
int0 = 8                                                                # STEP 54
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 55
ACTION: avl2.insert(int3) 
int3 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 9, 11, 20, 14]) : <type 'set'>
==================================================
avl1.insert(int0)                                                       # STEP 56
ACTION: avl1.insert(int0) 
int0 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int0) 
=> avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
==================================================
int0 = 12                                                               # STEP 57
ACTION: int0 = 12 
int0 = 8 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
int3 = 8                                                                # STEP 58
ACTION: int3 = 8 
int3 = 20 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 59
ACTION: avl2.insert(int3) 
int3 = 8 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 9, 11, 20, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([3, 8, 9, 11, 14, 20]) : <type 'set'>
==================================================
int3 = 2                                                                # STEP 60
ACTION: int3 = 2 
int3 = 8 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
avl2.display()                                                          # STEP 61
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 11, 14, 20]) : <type 'set'>
  9 [2:0]
-- < 3 [1:-1]
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([3, 8, 9, 11, 14, 20])
==================================================
avl1.delete(int0)                                                       # STEP 62
ACTION: avl1.delete(int0) 
int0 = 12 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
int0 = 5                                                                # STEP 63
ACTION: int0 = 5 
int0 = 12 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
avl2.insert(int3)                                                       # STEP 64
ACTION: avl2.insert(int3) 
int3 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
==================================================
avl2.display()                                                          # STEP 65
ACTION: avl2.display() 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
  9 [2:0]
-- < 3 [1:0]
---- < 2 [0:0] L
---- > 8 [0:0] L
-- > 14 [1:0]
---- < 11 [0:0] L
---- > 20 [0:0] L
REFERENCE ACTION: print(avl_REF2) 
set([2, 3, 8, 9, 11, 14, 20])
==================================================
avl2.delete(int0)                                                       # STEP 66
ACTION: avl2.delete(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
int3 = 2                                                                # STEP 67
ACTION: int3 = 2 
int3 = 2 : <type 'int'>
==================================================
result = avl2.find(int2)                                                # STEP 68
ACTION: result = avl2.find(int2) 
int2 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
int2 = 20                                                               # STEP 69
ACTION: int2 = 20 
int2 = 5 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 70
ACTION: int0 = 5 
int0 = 5 : <type 'int'>
==================================================
result = avl2.find(int0)                                                # STEP 71
ACTION: result = avl2.find(int0) 
int0 = 5 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
result = avl1.find(int1)                                                # STEP 72
ACTION: result = avl1.find(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int1) 
==================================================
avl0 = avl.AVLTree()                                                    # STEP 73
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x101c28950> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl0 == avl2                                                            # STEP 74
ACTION: avl0 == avl2 
avl0 = <avlbug2.AVLTree instance at 0x101c28950> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF0 == avl_REF2 
==================================================
result = avl0.find(int3)                                                # STEP 75
ACTION: result = avl0.find(int3) 
int3 = 2 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101c28950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int3) 
==================================================
int1 = 6                                                                # STEP 76
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 77
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
int3 = 14                                                               # STEP 78
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
result = avl2.inorder()                                                 # STEP 79
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
avl2.insert(int2)                                                       # STEP 80
ACTION: avl2.insert(int2) 
int2 = 20 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 81
ACTION: avl0.insert(int0) 
int0 = 5 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x101c28950> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([5]) : <type 'set'>
==================================================
int0 = 2                                                                # STEP 82
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
int2 = 4                                                                # STEP 83
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
result = avl1.find(int3)                                                # STEP 84
ACTION: result = avl1.find(int3) 
int3 = 14 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF1.__contains__(int3) 
==================================================
int3 = 7                                                                # STEP 85
ACTION: int3 = 7 
int3 = 14 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
result = avl1.inorder()                                                 # STEP 86
ACTION: result = avl1.inorder() 
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF1) 
==================================================
avl1.insert(int3)                                                       # STEP 87
ACTION: avl1.insert(int3) 
int3 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x102257830> : <type 'instance'>
avl_REF1 = set([19, 8, 3, 5, 14]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([3, 5, 7, 8, 14, 19]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 88
ACTION: avl2.insert(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([2, 3, 4, 8, 9, 11, 14, 20]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 89
ACTION: int2 = 11 
int2 = 4 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
int3 = 1                                                                # STEP 90
ACTION: int3 = 1 
int3 = 7 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 91
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x101da5ef0> : <type 'instance'>
avl_REF2 = set([2, 3, 4, 8, 9, 11, 14, 20]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 4, 8, 9, 11, 14, 20]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101c06908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 6
STOPPING TESTING DUE TO TIMEOUT
8.01059251903 PERCENT COVERED
60.3123910427 TOTAL RUNTIME
6 EXECUTED
498 TOTAL TEST OPERATIONS
25.1996014118 TIME SPENT EXECUTING TEST OPERATIONS
0.0193150043488 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.4195802212 TIME SPENT CHECKING PROPERTIES
50.619181633 TOTAL TIME SPENT RUNNING SUT
0.00466012954712 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 4                                                                 # STEP 0
int0 = 9                                                                 # STEP 1
int1 = 11                                                                # STEP 2
int3 = 5                                                                 # STEP 3
avl2 = avl.AVLTree()                                                     # STEP 4
avl2.insert(int0)                                                        # STEP 5
int0 = 7                                                                 # STEP 6
avl2.delete(int0)                                                        # STEP 7
int0 = 8                                                                 # STEP 8
result = avl2.find(int0)                                                 # STEP 9
int0 = 3                                                                # STEP 10
avl1 = avl.AVLTree()                                                    # STEP 11
avl2.delete(int2)                                                       # STEP 12
result = avl2.find(int2)                                                # STEP 13
avl1.insert(int3)                                                       # STEP 14
int3 = 14                                                               # STEP 15
int2 = 3                                                                # STEP 16
result = avl1.inorder()                                                 # STEP 17
avl1.insert(int3)                                                       # STEP 18
avl2.insert(int1)                                                       # STEP 19
int1 = 5                                                                # STEP 20
avl2.delete(int1)                                                       # STEP 21
int3 = 15                                                               # STEP 22
avl1.insert(int1)                                                       # STEP 23
result = avl1.find(int3)                                                # STEP 24
int3 = 3                                                                # STEP 25
result = avl2.find(int0)                                                # STEP 26
int1 = 7                                                                # STEP 27
avl2 == avl1                                                            # STEP 28
avl2.insert(int2)                                                       # STEP 29
avl1.insert(int3)                                                       # STEP 30
int3 = 9                                                                # STEP 31
avl1 == avl2                                                            # STEP 32
int2 = 5                                                                # STEP 33
int0 = 19                                                               # STEP 34
avl2.insert(int3)                                                       # STEP 35
avl1 == avl1                                                            # STEP 36
int3 = 3                                                                # STEP 37
avl1.insert(int0)                                                       # STEP 38
int0 = 16                                                               # STEP 39
result = avl2.inorder()                                                 # STEP 40
avl2.insert(int3)                                                       # STEP 41
avl2.insert(int3)                                                       # STEP 42
int3 = 2                                                                # STEP 43
result = avl1.find(int3)                                                # STEP 44
avl2.delete(int0)                                                       # STEP 45
result = avl2.find(int3)                                                # STEP 46
int0 = 14                                                               # STEP 47
avl2.insert(int0)                                                       # STEP 48
int3 = 20                                                               # STEP 49
int0 = 8                                                                # STEP 50
avl1 == avl2                                                            # STEP 51
result = avl2.inorder()                                                 # STEP 52
result = avl2.find(int0)                                                # STEP 53
int0 = 8                                                                # STEP 54
avl2.insert(int3)                                                       # STEP 55
avl1.insert(int0)                                                       # STEP 56
int0 = 12                                                               # STEP 57
int3 = 8                                                                # STEP 58
avl2.insert(int3)                                                       # STEP 59
int3 = 2                                                                # STEP 60
avl2.display()                                                          # STEP 61
avl1.delete(int0)                                                       # STEP 62
int0 = 5                                                                # STEP 63
avl2.insert(int3)                                                       # STEP 64
avl2.display()                                                          # STEP 65
avl2.delete(int0)                                                       # STEP 66
int3 = 2                                                                # STEP 67
result = avl2.find(int2)                                                # STEP 68
int2 = 20                                                               # STEP 69
int0 = 5                                                                # STEP 70
result = avl2.find(int0)                                                # STEP 71
result = avl1.find(int1)                                                # STEP 72
avl0 = avl.AVLTree()                                                    # STEP 73
avl0 == avl2                                                            # STEP 74
result = avl0.find(int3)                                                # STEP 75
int1 = 6                                                                # STEP 76
result = avl1.inorder()                                                 # STEP 77
int3 = 14                                                               # STEP 78
result = avl2.inorder()                                                 # STEP 79
avl2.insert(int2)                                                       # STEP 80
avl0.insert(int0)                                                       # STEP 81
int0 = 2                                                                # STEP 82
int2 = 4                                                                # STEP 83
result = avl1.find(int3)                                                # STEP 84
int3 = 7                                                                # STEP 85
result = avl1.inorder()                                                 # STEP 86
avl1.insert(int3)                                                       # STEP 87
avl2.insert(int2)                                                       # STEP 88
int2 = 11                                                               # STEP 89
int3 = 1                                                                # STEP 90
avl2.delete(int0)                                                       # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x101c06908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
201 BRANCHES COVERED
149 STATEMENTS COVERED

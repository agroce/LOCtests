Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.61869.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
  5 [2:0]
-- < 2 [1:-1]
---- > 3 [0:0] L
-- > 15 [1:0]
---- < 6 [0:0] L
---- > 16 [0:0] L
set([2, 3, 5, 6, 15, 16])
  15 [3:1]
-- < 5 [2:0]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 6 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([2, 4, 5, 6, 12, 15, 16, 19])
  15 [3:1]
-- < 5 [2:0]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 6 [1:-1]
------ > 12 [0:0] L
-- > 16 [1:-1]
---- > 19 [0:0] L
set([2, 4, 5, 6, 12, 15, 16, 19])
  15 [3:1]
-- < 5 [2:0]
---- < 2 [1:-1]
------ > 4 [0:0] L
---- > 6 [1:-1]
------ > 12 [0:0] L
-- > 19 [1:0]
---- < 16 [0:0] L
---- > 20 [0:0] L
set([2, 4, 5, 6, 12, 15, 16, 19, 20])
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103354170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
Original test has 77 steps

SAVING TEST AS failure.61869.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 1
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 2
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.insert(int0)                                                        # STEP 3
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
avl2.insert(int0)                                                        # STEP 4
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.inorder()                                                  # STEP 5
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
result = avl2.inorder()                                                  # STEP 6
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 12                                                                # STEP 7
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
avl2.insert(int0)                                                        # STEP 8
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
==================================================
result = avl2.find(int0)                                                 # STEP 9
ACTION: result = avl2.find(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int0) 
==================================================
avl2.insert(int2)                                                       # STEP 10
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 12]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 11
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.delete(int0)                                                       # STEP 12
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
int1 = 3                                                                # STEP 13
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 14
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
==================================================
avl2.insert(int1)                                                       # STEP 15
ACTION: avl2.insert(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([3, 12]) : <type 'set'>
==================================================
avl2.insert(int0)                                                       # STEP 16
ACTION: avl2.insert(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 3, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 17
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([3, 12]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 18
ACTION: avl2.delete(int0) 
int0 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
result = avl2.find(int2)                                                # STEP 19
ACTION: result = avl2.find(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl2.delete(int1)                                                       # STEP 20
ACTION: avl2.delete(int1) 
int1 = 3 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([3, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 22
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
int2 = 10                                                               # STEP 23
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 24
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
avl0.delete(int0)                                                       # STEP 25
ACTION: avl0.delete(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
==================================================
avl0.delete(int1)                                                       # STEP 26
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int2)                                                       # STEP 27
ACTION: avl2.insert(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([10]) : <type 'set'>
==================================================
avl0.delete(int2)                                                       # STEP 28
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
result = avl2.find(int2)                                                # STEP 29
ACTION: result = avl2.find(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int2) 
==================================================
avl0.delete(int2)                                                       # STEP 30
ACTION: avl0.delete(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int2) 
==================================================
avl0.insert(int0)                                                       # STEP 31
ACTION: avl0.insert(int0) 
int0 = 16 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16]) : <type 'set'>
==================================================
avl2 == avl0                                                            # STEP 32
ACTION: avl2 == avl0 
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF0 
==================================================
result = avl0.inorder()                                                 # STEP 33
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
int0 = 4                                                                # STEP 34
ACTION: int0 = 4 
int0 = 16 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 35
ACTION: avl0.insert(int2) 
int2 = 10 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 10]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 36
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.delete(int2)                                                       # STEP 37
ACTION: avl2.delete(int2) 
int2 = 10 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([10]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
result = avl0.find(int1)                                                # STEP 38
ACTION: result = avl0.find(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF0.__contains__(int1) 
==================================================
result = avl0.inorder()                                                 # STEP 39
ACTION: result = avl0.inorder() 
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF0) 
==================================================
avl2.delete(int1)                                                       # STEP 40
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
int3 = 17                                                               # STEP 41
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 42
ACTION: int2 = 16 
int2 = 10 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
avl1 = avl.AVLTree()                                                    # STEP 43
ACTION: avl1 = avl.AVLTree() 
avl1 = None : <type 'NoneType'>
avl_REF1 = None : <type 'NoneType'>
=> avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
REFERENCE ACTION: avl_REF1 = set() 
=> avl_REF1 = set([]) : <type 'set'>
==================================================
avl2.insert(int2)                                                       # STEP 44
ACTION: avl2.insert(int2) 
int2 = 16 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16]) : <type 'set'>
==================================================
int2 = 11                                                               # STEP 45
ACTION: int2 = 11 
int2 = 16 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 46
ACTION: avl2.delete(int3) 
int3 = 17 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
==================================================
avl0.insert(int0)                                                       # STEP 47
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([16, 10, 4]) : <type 'set'>
==================================================
avl2.delete(int1)                                                       # STEP 48
ACTION: avl2.delete(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int1) 
==================================================
avl2.delete(int0)                                                       # STEP 49
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl1.insert(int1)                                                       # STEP 50
ACTION: avl1.insert(int1) 
int1 = 7 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int1) 
=> avl_REF1 = set([7]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 51
ACTION: avl2.insert(int1) 
int1 = 7 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([16, 7]) : <type 'set'>
==================================================
avl0.delete(int1)                                                       # STEP 52
ACTION: avl0.delete(int1) 
int1 = 7 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl0.delete(int0)                                                       # STEP 53
ACTION: avl0.delete(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int0) 
=> avl_REF0 = set([16, 10]) : <type 'set'>
==================================================
avl2 == avl1                                                            # STEP 54
ACTION: avl2 == avl1 
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF2 = set([16, 7]) : <type 'set'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF1 
==================================================
int0 = 9                                                                # STEP 55
ACTION: int0 = 9 
int0 = 4 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
avl0.insert(int2)                                                       # STEP 56
ACTION: avl0.insert(int2) 
int2 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 10, 11]) : <type 'set'>
==================================================
int1 = 16                                                               # STEP 57
ACTION: int1 = 16 
int1 = 7 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
avl2.insert(int2)                                                       # STEP 58
ACTION: avl2.insert(int2) 
int2 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([16, 11, 7]) : <type 'set'>
==================================================
int3 = 11                                                               # STEP 59
ACTION: int3 = 11 
int3 = 17 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 60
ACTION: int2 = 8 
int2 = 11 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
avl2.delete(int3)                                                       # STEP 61
ACTION: avl2.delete(int3) 
int3 = 11 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([16, 7]) : <type 'set'>
==================================================
avl0.insert(int2)                                                       # STEP 62
ACTION: avl0.insert(int2) 
int2 = 8 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int2) 
=> avl_REF0 = set([16, 8, 10, 11]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 63
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([16, 8, 10, 11]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([8, 9, 10, 11, 16]) : <type 'set'>
==================================================
avl1.delete(int0)                                                       # STEP 64
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.insert(int0)                                                       # STEP 65
ACTION: avl2.insert(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([16, 7, 9]) : <type 'set'>
==================================================
avl1.insert(int2)                                                       # STEP 66
ACTION: avl1.insert(int2) 
int2 = 8 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int2) 
=> avl_REF1 = set([8, 7]) : <type 'set'>
==================================================
avl1.delete(int1)                                                       # STEP 67
ACTION: avl1.delete(int1) 
int1 = 16 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int1) 
==================================================
avl1.insert(int3)                                                       # STEP 68
ACTION: avl1.insert(int3) 
int3 = 11 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([8, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.add(int3) 
=> avl_REF1 = set([8, 11, 7]) : <type 'set'>
==================================================
int2 = 9                                                                # STEP 69
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
avl1 == avl2                                                            # STEP 70
ACTION: avl1 == avl2 
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF1 = set([8, 11, 7]) : <type 'set'>
avl_REF2 = set([16, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF1 == avl_REF2 
==================================================
avl0.insert(int0)                                                       # STEP 71
ACTION: avl0.insert(int0) 
int0 = 9 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([8, 9, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 72
ACTION: avl2.delete(int2) 
int2 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 7, 9]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
=> avl_REF2 = set([16, 7]) : <type 'set'>
==================================================
int1 = 13                                                               # STEP 73
ACTION: int1 = 13 
int1 = 16 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
avl1.delete(int0)                                                       # STEP 74
ACTION: avl1.delete(int0) 
int0 = 9 : <type 'int'>
avl1 = <avlbug2.AVLTree instance at 0x10264d170> : <type 'instance'>
avl_REF1 = set([8, 11, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF1.discard(int0) 
==================================================
avl2.delete(int0)                                                       # STEP 75
ACTION: avl2.delete(int0) 
int0 = 9 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x1036b3710> : <type 'instance'>
avl_REF2 = set([16, 7]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl0.delete(int3)                                                       # STEP 76
ACTION: avl0.delete(int3) 
int3 = 11 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x10266e0e0> : <type 'instance'>
avl_REF0 = set([8, 9, 10, 11, 16]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([8, 9, 10, 16]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102686758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #4 STEP #0 (0:00:34.033086) Mon May  1 17:15:46 2017 [ 163 stmts 218 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035226c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
Original test has 32 steps

SAVING TEST AS failure.61869.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 12                                                                # STEP 0
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 1
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
avl2 = avl.AVLTree()                                                     # STEP 3
ACTION: avl2 = avl.AVLTree() 
avl2 = None : <type 'NoneType'>
avl_REF2 = None : <type 'NoneType'>
=> avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
REFERENCE ACTION: avl_REF2 = set() 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 18                                                                # STEP 4
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
result = avl2.find(int1)                                                 # STEP 5
ACTION: result = avl2.find(int1) 
int1 = 18 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: result_REF = avl_REF2.__contains__(int1) 
==================================================
avl2.insert(int0)                                                        # STEP 6
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2]) : <type 'set'>
==================================================
avl2.delete(int0)                                                        # STEP 7
ACTION: avl2.delete(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([]) : <type 'set'>
==================================================
int1 = 1                                                                 # STEP 8
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
avl2.insert(int2)                                                        # STEP 9
ACTION: avl2.insert(int2) 
int2 = 12 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int2) 
=> avl_REF2 = set([12]) : <type 'set'>
==================================================
avl2 == avl2                                                            # STEP 10
ACTION: avl2 == avl2 
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2 == avl_REF2 
==================================================
result = avl2.inorder()                                                 # STEP 11
ACTION: result = avl2.inorder() 
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: result_REF = items(avl_REF2) 
==================================================
int2 = 4                                                                # STEP 12
ACTION: int2 = 4 
int2 = 12 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
avl2.insert(int0)                                                       # STEP 13
ACTION: avl2.insert(int0) 
int0 = 2 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int0) 
=> avl_REF2 = set([2, 12]) : <type 'set'>
==================================================
int0 = 4                                                                # STEP 14
ACTION: int0 = 4 
int0 = 2 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
avl2.delete(int0)                                                       # STEP 15
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
==================================================
avl2.delete(int2)                                                       # STEP 16
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 17
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.insert(int3)                                                       # STEP 18
ACTION: avl2.insert(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([2, 12, 6]) : <type 'set'>
==================================================
avl2.delete(int3)                                                       # STEP 19
ACTION: avl2.delete(int3) 
int3 = 6 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12, 6]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int3) 
=> avl_REF2 = set([2, 12]) : <type 'set'>
==================================================
avl0 = avl.AVLTree()                                                    # STEP 20
ACTION: avl0 = avl.AVLTree() 
avl0 = None : <type 'NoneType'>
avl_REF0 = None : <type 'NoneType'>
=> avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
REFERENCE ACTION: avl_REF0 = set() 
=> avl_REF0 = set([]) : <type 'set'>
==================================================
avl2.delete(int2)                                                       # STEP 21
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
avl2.delete(int2)                                                       # STEP 22
ACTION: avl2.delete(int2) 
int2 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int2) 
==================================================
int3 = 4                                                                # STEP 23
ACTION: int3 = 4 
int3 = 6 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
avl0.delete(int1)                                                       # STEP 24
ACTION: avl0.delete(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int1) 
==================================================
avl2.insert(int3)                                                       # STEP 25
ACTION: avl2.insert(int3) 
int3 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int3) 
=> avl_REF2 = set([4, 2, 12]) : <type 'set'>
==================================================
avl2.insert(int1)                                                       # STEP 26
ACTION: avl2.insert(int1) 
int1 = 1 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([4, 2, 12]) : <type 'set'>
REFERENCE ACTION: avl_REF2.add(int1) 
=> avl_REF2 = set([4, 2, 12, 1]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 27
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
avl_REF0 = set([]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl0.insert(int0)                                                       # STEP 28
ACTION: avl0.insert(int0) 
int0 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
avl_REF0 = set([1]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int0) 
=> avl_REF0 = set([1, 4]) : <type 'set'>
==================================================
avl0.insert(int1)                                                       # STEP 29
ACTION: avl0.insert(int1) 
int1 = 1 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.add(int1) 
==================================================
avl0.delete(int3)                                                       # STEP 30
ACTION: avl0.delete(int3) 
int3 = 4 : <type 'int'>
avl0 = <avlbug2.AVLTree instance at 0x1026b6908> : <type 'instance'>
avl_REF0 = set([1, 4]) : <type 'set'>
REFERENCE ACTION: avl_REF0.discard(int3) 
=> avl_REF0 = set([1]) : <type 'set'>
==================================================
avl2.delete(int0)                                                       # STEP 31
ACTION: avl2.delete(int0) 
int0 = 4 : <type 'int'>
avl2 = <avlbug2.AVLTree instance at 0x103522b00> : <type 'instance'>
avl_REF2 = set([4, 2, 12, 1]) : <type 'set'>
REFERENCE ACTION: avl_REF2.discard(int0) 
=> avl_REF2 = set([2, 12, 1]) : <type 'set'>
==================================================
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10351b908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
  7 [2:0]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [1:0]
---- < 8 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 8, 12, 17])
  7 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [2:1]
---- < 8 [1:-1]
------ > 10 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 8, 10, 12, 17])
  7 [3:-1]
-- < 2 [1:1]
---- < 1 [0:0] L
-- > 12 [2:1]
---- < 8 [1:-1]
------ > 10 [0:0] L
---- > 17 [0:0] L
set([1, 2, 7, 8, 10, 12, 17])
  7 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [2:0]
---- < 8 [1:-1]
------ > 10 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([1, 2, 3, 7, 8, 10, 12, 17, 20])
  7 [3:-1]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 3 [0:0] L
-- > 12 [2:0]
---- < 8 [1:-1]
------ > 10 [0:0] L
---- > 17 [1:-1]
------ > 20 [0:0] L
set([1, 2, 3, 7, 8, 10, 12, 17, 20])
  11 [2:0]
-- < 2 [1:-1]
---- > 6 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 6, 11, 13, 16, 19])
  11 [2:0]
-- < 2 [1:-1]
---- > 6 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 6, 11, 13, 16, 19])
  11 [2:0]
-- < 9 [1:1]
---- < 2 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 9, 11, 13, 16, 19])
  11 [2:0]
-- < 5 [1:0]
---- < 2 [0:0] L
---- > 9 [0:0] L
-- > 16 [1:0]
---- < 13 [0:0] L
---- > 19 [0:0] L
set([2, 5, 9, 11, 13, 16, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 19 [1:1]
---- < 13 [0:0] L
set([1, 2, 5, 11, 13, 19])
  11 [2:0]
-- < 2 [1:0]
---- < 1 [0:0] L
---- > 5 [0:0] L
-- > 13 [1:0]
---- < 12 [0:0] L
---- > 19 [0:0] L
set([1, 2, 5, 11, 12, 13, 19])
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
8.32849680789 PERCENT COVERED
60.3210759163 TOTAL RUNTIME
7 EXECUTED
516 TOTAL TEST OPERATIONS
25.6148650646 TIME SPENT EXECUTING TEST OPERATIONS
0.0583603382111 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
24.1694815159 TIME SPENT CHECKING PROPERTIES
49.7843465805 TOTAL TIME SPENT RUNNING SUT
0.0046923160553 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
avl2 = avl.AVLTree()                                                     # STEP 1
avl2.delete(int0)                                                        # STEP 2
avl2.insert(int0)                                                        # STEP 3
avl2.insert(int0)                                                        # STEP 4
result = avl2.inorder()                                                  # STEP 5
result = avl2.inorder()                                                  # STEP 6
int2 = 12                                                                # STEP 7
avl2.insert(int0)                                                        # STEP 8
result = avl2.find(int0)                                                 # STEP 9
avl2.insert(int2)                                                       # STEP 10
avl2.insert(int2)                                                       # STEP 11
avl2.delete(int0)                                                       # STEP 12
int1 = 3                                                                # STEP 13
avl2.insert(int2)                                                       # STEP 14
avl2.insert(int1)                                                       # STEP 15
avl2.insert(int0)                                                       # STEP 16
avl2.delete(int0)                                                       # STEP 17
avl2.delete(int0)                                                       # STEP 18
result = avl2.find(int2)                                                # STEP 19
avl2.delete(int1)                                                       # STEP 20
avl2.delete(int2)                                                       # STEP 21
avl0 = avl.AVLTree()                                                    # STEP 22
int2 = 10                                                               # STEP 23
int1 = 7                                                                # STEP 24
avl0.delete(int0)                                                       # STEP 25
avl0.delete(int1)                                                       # STEP 26
avl2.insert(int2)                                                       # STEP 27
avl0.delete(int2)                                                       # STEP 28
result = avl2.find(int2)                                                # STEP 29
avl0.delete(int2)                                                       # STEP 30
avl0.insert(int0)                                                       # STEP 31
avl2 == avl0                                                            # STEP 32
result = avl0.inorder()                                                 # STEP 33
int0 = 4                                                                # STEP 34
avl0.insert(int2)                                                       # STEP 35
avl0.delete(int1)                                                       # STEP 36
avl2.delete(int2)                                                       # STEP 37
result = avl0.find(int1)                                                # STEP 38
result = avl0.inorder()                                                 # STEP 39
avl2.delete(int1)                                                       # STEP 40
int3 = 17                                                               # STEP 41
int2 = 16                                                               # STEP 42
avl1 = avl.AVLTree()                                                    # STEP 43
avl2.insert(int2)                                                       # STEP 44
int2 = 11                                                               # STEP 45
avl2.delete(int3)                                                       # STEP 46
avl0.insert(int0)                                                       # STEP 47
avl2.delete(int1)                                                       # STEP 48
avl2.delete(int0)                                                       # STEP 49
avl1.insert(int1)                                                       # STEP 50
avl2.insert(int1)                                                       # STEP 51
avl0.delete(int1)                                                       # STEP 52
avl0.delete(int0)                                                       # STEP 53
avl2 == avl1                                                            # STEP 54
int0 = 9                                                                # STEP 55
avl0.insert(int2)                                                       # STEP 56
int1 = 16                                                               # STEP 57
avl2.insert(int2)                                                       # STEP 58
int3 = 11                                                               # STEP 59
int2 = 8                                                                # STEP 60
avl2.delete(int3)                                                       # STEP 61
avl0.insert(int2)                                                       # STEP 62
avl0.insert(int0)                                                       # STEP 63
avl1.delete(int0)                                                       # STEP 64
avl2.insert(int0)                                                       # STEP 65
avl1.insert(int2)                                                       # STEP 66
avl1.delete(int1)                                                       # STEP 67
avl1.insert(int3)                                                       # STEP 68
int2 = 9                                                                # STEP 69
avl1 == avl2                                                            # STEP 70
avl0.insert(int0)                                                       # STEP 71
avl2.delete(int2)                                                       # STEP 72
int1 = 13                                                               # STEP 73
avl1.delete(int0)                                                       # STEP 74
avl2.delete(int0)                                                       # STEP 75
avl0.delete(int3)                                                       # STEP 76
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102686758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7891, in check
    assert self.p_avl[0].check_balanced()
FAILURE 1
int2 = 12                                                                # STEP 0
int3 = 6                                                                 # STEP 1
int0 = 2                                                                 # STEP 2
avl2 = avl.AVLTree()                                                     # STEP 3
int1 = 18                                                                # STEP 4
result = avl2.find(int1)                                                 # STEP 5
avl2.insert(int0)                                                        # STEP 6
avl2.delete(int0)                                                        # STEP 7
int1 = 1                                                                 # STEP 8
avl2.insert(int2)                                                        # STEP 9
avl2 == avl2                                                            # STEP 10
result = avl2.inorder()                                                 # STEP 11
int2 = 4                                                                # STEP 12
avl2.insert(int0)                                                       # STEP 13
int0 = 4                                                                # STEP 14
avl2.delete(int0)                                                       # STEP 15
avl2.delete(int2)                                                       # STEP 16
avl2.delete(int2)                                                       # STEP 17
avl2.insert(int3)                                                       # STEP 18
avl2.delete(int3)                                                       # STEP 19
avl0 = avl.AVLTree()                                                    # STEP 20
avl2.delete(int2)                                                       # STEP 21
avl2.delete(int2)                                                       # STEP 22
int3 = 4                                                                # STEP 23
avl0.delete(int1)                                                       # STEP 24
avl2.insert(int3)                                                       # STEP 25
avl2.insert(int1)                                                       # STEP 26
avl0.insert(int1)                                                       # STEP 27
avl0.insert(int0)                                                       # STEP 28
avl0.insert(int1)                                                       # STEP 29
avl0.delete(int3)                                                       # STEP 30
avl2.delete(int0)                                                       # STEP 31
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10351b908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/AVL/sut.py", line 7895, in check
    assert self.p_avl[2].check_balanced()
218 BRANCHES COVERED
163 STATEMENTS COVERED

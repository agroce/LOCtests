Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.618.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104646c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 92 steps

SAVING TEST AS failure.618.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int4 = 18                                                                # STEP 3
ACTION: int4 = 18 
int4 = None : <type 'NoneType'>
=> int4 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                               # STEP 5
ACTION: heaps.heappush(heap1,int4) 
int4 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int2 = 19                                                                # STEP 6
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 7
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int4 = 3                                                                 # STEP 8
ACTION: int4 = 3 
int4 = 18 : <type 'int'>
=> int4 = 3 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 13
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [9, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 14
ACTION: heaps.heappush(heap0,int3) 
int3 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 15
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 16
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 17
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [9, 18] : <type 'list'>
=> heap1 = [8, 18, 9] : <type 'list'>
==================================================
int3 = 12                                                               # STEP 18
ACTION: int3 = 12 
int3 = 8 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 20
ACTION: heaps.heappush(heap1,int2) 
int2 = 19 : <type 'int'>
heap1 = [8, 18, 9] : <type 'list'>
=> heap1 = [8, 18, 9, 19] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 21
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 22
ACTION: int2 = 12 
int2 = 19 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 23
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [8, 18, 9, 19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 24
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 25
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 26
ACTION: heaps.heappush(heap1,int4) 
int4 = 3 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [3] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 27
ACTION: int4 = 18 
int4 = 3 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [3] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 30
ACTION: heaps.heappush(heap1,int4) 
int4 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 31
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [18] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
int4 = 20                                                               # STEP 32
ACTION: int4 = 20 
int4 = 18 : <type 'int'>
=> int4 = 20 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 33
ACTION: heaps.heappop(heap1) 
heap1 = [18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [18] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 35
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [18] : <type 'list'>
=> heap0 = [18, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 36
ACTION: heaps.heappush(heap0,int1) 
int1 = 18 : <type 'int'>
heap0 = [18, 20] : <type 'list'>
=> heap0 = [18, 20, 18] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 37
ACTION: int1 = 1 
int1 = 18 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int4 = 15                                                               # STEP 38
ACTION: int4 = 15 
int4 = 20 : <type 'int'>
=> int4 = 15 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 39
ACTION: heaps.heappush(heap0,int4) 
int4 = 15 : <type 'int'>
heap0 = [18, 20, 18] : <type 'list'>
=> heap0 = [15, 18, 18, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 40
ACTION: heaps.heappush(heap0,int3) 
int3 = 12 : <type 'int'>
heap0 = [15, 18, 18, 20] : <type 'list'>
=> heap0 = [12, 15, 18, 20, 18] : <type 'list'>
==================================================
int4 = 9                                                                # STEP 41
ACTION: int4 = 9 
int4 = 15 : <type 'int'>
=> int4 = 9 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 42
ACTION: heaps.heappush(heap1,int4) 
int4 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 43
ACTION: int3 = 9 
int3 = 12 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [9] : <type 'list'>
heap0 = [12, 15, 18, 20, 18] : <type 'list'>
=> heap0 = [9, 12, 15, 18, 20, 18] : <type 'list'>
==================================================
int4 = 8                                                                # STEP 45
ACTION: int4 = 8 
int4 = 9 : <type 'int'>
=> int4 = 8 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 46
ACTION: heaps.heappush(heap1,int1) 
int1 = 1 : <type 'int'>
heap1 = [9] : <type 'list'>
=> heap1 = [1, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 47
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [1, 9] : <type 'list'>
=> heap1 = [1, 9, 9] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 48
ACTION: int1 = 17 
int1 = 1 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 49
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 9, 9] : <type 'list'>
heap2 = [18] : <type 'list'>
=> heap2 = [1, 9, 9, 18] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 50
ACTION: int3 = 4 
int3 = 9 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [9, 12, 15, 18, 20, 18] : <type 'list'>
heap1 = [1, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 12, 12, 15, 15, 18, 18, 20, 18, 20, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 52
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [9, 9, 12, 12, 15, 15, 18, 18, 20, 18, 20, 18] : <type 'list'>
=> heap1 = [9, 9, 12, 12, 15, 15, 18, 18, 20, 18, 20, 18, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 9, 12, 12, 15, 15, 18, 18, 20, 18, 20, 18, 17] : <type 'list'>
heap2 = [1, 9, 9, 18] : <type 'list'>
=> heap1 = [1, 9, 9, 9, 9, 12, 12, 15, 15, 18, 18, 18, 20, 18, 20, 18, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 54
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [1, 9, 9, 18] : <type 'list'>
heap0 = [9, 12, 15, 18, 20, 18] : <type 'list'>
=> heap0 = [1, 1, 9, 9, 9, 9, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [1, 9, 9, 18] : <type 'list'>
=> heap2 = [1, 1, 9, 9, 9, 9, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 9, 9, 9, 9, 18, 18] : <type 'list'>
=> heap0 = [1, 9, 9, 18, 9, 9, 18] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 57
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 9, 9, 18, 9, 9, 18] : <type 'list'>
heap2 = [1, 1, 9, 9, 9, 9, 18, 18] : <type 'list'>
=> heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 59
ACTION: heaps.heappush(heap0,int2) 
int2 = 12 : <type 'int'>
heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18] : <type 'list'>
=> heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 60
ACTION: heaps.heappush(heap2,int4) 
int4 = 8 : <type 'int'>
heap2 = [1, 1, 9, 9, 9, 9, 18, 18] : <type 'list'>
=> heap2 = [1, 1, 9, 8, 9, 9, 18, 18, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 61
ACTION: heaps.heappush(heap1,int4) 
int4 = 8 : <type 'int'>
heap1 = [1, 9, 9, 9, 9, 12, 12, 15, 15, 18, 18, 18, 20, 18, 20, 18, 17] : <type 'list'>
=> heap1 = [1, 8, 9, 9, 9, 12, 12, 15, 9, 18, 18, 18, 20, 18, 20, 18, 17, 15] : <type 'list'>
==================================================
int2 = 17                                                               # STEP 62
ACTION: int2 = 17 
int2 = 12 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [1, 1, 9, 8, 9, 9, 18, 18, 9] : <type 'list'>
heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18, 12] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 1, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 9, 18, 9, 9, 18, 18, 18, 12] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 64
ACTION: int4 = 16 
int4 = 8 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 65
ACTION: heaps.heappush(heap2,int1) 
int1 = 4 : <type 'int'>
heap2 = [1, 1, 1, 1, 1, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 9, 18, 9, 9, 18, 18, 18, 12] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 1, 4, 8, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 9, 18, 9, 9, 18, 18, 18, 12, 9] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 66
ACTION: int1 = 15 
int1 = 4 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 67
ACTION: heap2 = heaps.heapnew() 
heap2 = [1, 1, 1, 1, 1, 4, 8, 9, 9, 9, 9, 9, 9, 9, 9, 18, 18, 9, 18, 9, 9, 18, 18, 18, 12, 9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 68
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 69
ACTION: heaps.heappush(heap0,int0) 
int0 = 16 : <type 'int'>
heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18, 12, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 70
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 9, 9, 9, 9, 9, 9, 18, 9, 9, 18, 18, 18, 12, 16] : <type 'list'>
=> heap0 = [1, 9, 1, 9, 9, 9, 9, 12, 9, 18, 9, 9, 18, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 71
ACTION: heaps.heappush(heap0,int4) 
int4 = 16 : <type 'int'>
heap0 = [1, 9, 1, 9, 9, 9, 9, 12, 9, 18, 9, 9, 18, 18, 18, 16] : <type 'list'>
=> heap0 = [1, 9, 1, 9, 9, 9, 9, 12, 9, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
==================================================
int1 = 2                                                                # STEP 72
ACTION: int1 = 2 
int1 = 15 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 73
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [1, 8, 9, 9, 9, 12, 12, 15, 9, 18, 18, 18, 20, 18, 20, 18, 17, 15] : <type 'list'>
=> heap1 = [1, 1, 8, 8, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 9, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 74
ACTION: heaps.heappush(heap2,int3) 
int3 = 4 : <type 'int'>
heap2 = [15] : <type 'list'>
=> heap2 = [4, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 75
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [4, 15] : <type 'list'>
heap0 = [1, 9, 1, 9, 9, 9, 9, 12, 9, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
=> heap0 = [1, 4, 9, 1, 9, 9, 9, 9, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 76
ACTION: int3 = 16 
int3 = 4 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int4 = 13                                                               # STEP 77
ACTION: int4 = 13 
int4 = 16 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
int0 = 10                                                               # STEP 78
ACTION: int0 = 10 
int0 = 16 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 79
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [4, 15] : <type 'list'>
=> heap2 = [4, 4, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 80
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [4, 4, 15, 15] : <type 'list'>
=> heap2 = [4, 4, 15, 15, 13] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 81
ACTION: int4 = 17 
int4 = 13 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 82
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 8, 8, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 9, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17, 15] : <type 'list'>
=> heap1 = [1, 8, 8, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 15, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 83
ACTION: heaps.heappush(heap1,int2) 
int2 = 17 : <type 'int'>
heap1 = [1, 8, 8, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 15, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17] : <type 'list'>
=> heap1 = [1, 8, 8, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 15, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 4, 9, 1, 9, 9, 9, 9, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
=> heap0 = [4, 1, 9, 9, 9, 9, 9, 16, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 85
ACTION: heaps.heappush(heap0,int3) 
int3 = 16 : <type 'int'>
heap0 = [4, 1, 9, 9, 9, 9, 9, 16, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16] : <type 'list'>
=> heap0 = [4, 1, 9, 9, 9, 9, 9, 16, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 8, 8, 9, 9, 9, 9, 9, 9, 9, 12, 12, 12, 12, 15, 15, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17, 17] : <type 'list'>
=> heap1 = [8, 9, 8, 9, 9, 9, 9, 15, 9, 9, 12, 12, 12, 12, 15, 17, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 87
ACTION: int3 = 19 
int3 = 16 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
int2 = 3                                                                # STEP 88
ACTION: int2 = 3 
int2 = 17 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 89
ACTION: heaps.heappush(heap1,int1) 
int1 = 2 : <type 'int'>
heap1 = [8, 9, 8, 9, 9, 9, 9, 15, 9, 9, 12, 12, 12, 12, 15, 17, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17] : <type 'list'>
=> heap1 = [2, 8, 8, 9, 9, 9, 9, 15, 9, 9, 12, 12, 12, 12, 15, 17, 15, 9, 18, 18, 18, 18, 18, 18, 20, 18, 20, 18, 17, 15, 20, 18, 20, 18, 17, 9] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 90
ACTION: int1 = 11 
int1 = 2 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 91
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 1, 9, 9, 9, 9, 9, 16, 12, 9, 15, 18, 9, 9, 18, 18, 18, 16, 16] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [1, 9, 9, 12, 9, 9, 9, 16, 16, 9, 15, 18, 9, 9, 18, 18, 18, 16] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046f5638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #0 (0:00:30.424495) Fri Apr 28 06:49:49 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 64
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0581970215 TOTAL RUNTIME
23 EXECUTED
2256 TOTAL TEST OPERATIONS
30.8971178532 TIME SPENT EXECUTING TEST OPERATIONS
0.0814399719238 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
27.7376289368 TIME SPENT CHECKING PROPERTIES
58.6347467899 TOTAL TIME SPENT RUNNING SUT
0.0188059806824 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 9                                                                 # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
int0 = 16                                                                # STEP 2
int4 = 18                                                                # STEP 3
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
heaps.heappush(heap1,int4)                                               # STEP 5
int2 = 19                                                                # STEP 6
int1 = 18                                                                # STEP 7
int4 = 3                                                                 # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
heaps.heappush(heap1,int3)                                              # STEP 13
heaps.heappush(heap0,int3)                                              # STEP 14
int3 = 8                                                                # STEP 15
heap2 = heaps.heapnew()                                                 # STEP 16
heaps.heappush(heap1,int3)                                              # STEP 17
int3 = 12                                                               # STEP 18
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
heaps.heappush(heap1,int2)                                              # STEP 20
heap2 = heaps.heapnew()                                                 # STEP 21
int2 = 12                                                               # STEP 22
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 23
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 24
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 25
heaps.heappush(heap1,int4)                                              # STEP 26
int4 = 18                                                               # STEP 27
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 28
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 29
heaps.heappush(heap1,int4)                                              # STEP 30
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 31
int4 = 20                                                               # STEP 32
heaps.heappop(heap1)                                                    # STEP 33
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 34
heaps.heappush(heap0,int4)                                              # STEP 35
heaps.heappush(heap0,int1)                                              # STEP 36
int1 = 1                                                                # STEP 37
int4 = 15                                                               # STEP 38
heaps.heappush(heap0,int4)                                              # STEP 39
heaps.heappush(heap0,int3)                                              # STEP 40
int4 = 9                                                                # STEP 41
heaps.heappush(heap1,int4)                                              # STEP 42
int3 = 9                                                                # STEP 43
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
int4 = 8                                                                # STEP 45
heaps.heappush(heap1,int1)                                              # STEP 46
heaps.heappush(heap1,int3)                                              # STEP 47
int1 = 17                                                               # STEP 48
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 49
int3 = 4                                                                # STEP 50
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 51
heaps.heappush(heap1,int1)                                              # STEP 52
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 54
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
int1 = 4                                                                # STEP 57
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
heaps.heappush(heap0,int2)                                              # STEP 59
heaps.heappush(heap2,int4)                                              # STEP 60
heaps.heappush(heap1,int4)                                              # STEP 61
int2 = 17                                                               # STEP 62
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 63
int4 = 16                                                               # STEP 64
heaps.heappush(heap2,int1)                                              # STEP 65
int1 = 15                                                               # STEP 66
heap2 = heaps.heapnew()                                                 # STEP 67
heaps.heappush(heap2,int1)                                              # STEP 68
heaps.heappush(heap0,int0)                                              # STEP 69
heaps.heappop(heap0)                                                    # STEP 70
heaps.heappush(heap0,int4)                                              # STEP 71
int1 = 2                                                                # STEP 72
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 73
heaps.heappush(heap2,int3)                                              # STEP 74
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 75
int3 = 16                                                               # STEP 76
int4 = 13                                                               # STEP 77
int0 = 10                                                               # STEP 78
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 79
heaps.heappush(heap2,int4)                                              # STEP 80
int4 = 17                                                               # STEP 81
heaps.heappop(heap1)                                                    # STEP 82
heaps.heappush(heap1,int2)                                              # STEP 83
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
heaps.heappush(heap0,int3)                                              # STEP 85
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
int3 = 19                                                               # STEP 87
int2 = 3                                                                # STEP 88
heaps.heappush(heap1,int1)                                              # STEP 89
int1 = 11                                                               # STEP 90
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046f5638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

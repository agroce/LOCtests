Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14779.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #9 STEP #91 (0:00:30.021198) Sun Apr 30 04:59:04 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103288170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 67 steps

SAVING TEST AS failure.14779.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 14                                                                # STEP 0
ACTION: int1 = 14 
int1 = None : <type 'NoneType'>
=> int1 = 14 : <type 'int'>
==================================================
int4 = 6                                                                 # STEP 1
ACTION: int4 = 6 
int4 = None : <type 'NoneType'>
=> int4 = 6 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 2
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 3
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 4
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 6
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 8
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [8] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 10
ACTION: int3 = 4 
int3 = 8 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 11
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [8] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 12
ACTION: heaps.heappush(heap1,int0) 
int0 = 12 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 14
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [12] : <type 'list'>
=> heap1 = [4, 12] : <type 'list'>
==================================================
int3 = 7                                                                # STEP 15
ACTION: int3 = 7 
int3 = 4 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
int0 = 3                                                                # STEP 16
ACTION: int0 = 3 
int0 = 12 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 17
ACTION: heaps.heappush(heap2,int3) 
int3 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 18
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [7] : <type 'list'>
heap0 = [8] : <type 'list'>
=> heap2 = [7, 8] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 20
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [4, 12] : <type 'list'>
=> heap1 = [3, 12, 4] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 21
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [3, 12, 4] : <type 'list'>
heap0 = [8] : <type 'list'>
=> heap1 = [3, 8, 12, 4] : <type 'list'>
==================================================
int0 = 15                                                               # STEP 22
ACTION: int0 = 15 
int0 = 3 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [7, 8] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 24
ACTION: heaps.heappush(heap2,int1) 
int1 = 14 : <type 'int'>
heap2 = [8] : <type 'list'>
=> heap2 = [8, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 26
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [8, 14] : <type 'list'>
=> heap2 = [6, 14, 8] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 27
ACTION: int1 = 4 
int1 = 14 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [6, 14, 8] : <type 'list'>
heap1 = [3, 8, 12, 4] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [3, 6, 8, 12, 4, 14, 8] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 29
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [6, 14, 8] : <type 'list'>
=> heap2 = [3, 6, 8, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 30
ACTION: heaps.heappop(heap1) 
heap1 = [3, 8, 12, 4] : <type 'list'>
=> heap1 = [4, 8, 12] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 31
ACTION: int4 = 5 
int4 = 6 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 6, 8, 14] : <type 'list'>
=> heap2 = [6, 14, 8] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 33
ACTION: heaps.heappush(heap2,int2) 
int2 = 19 : <type 'int'>
heap2 = [6, 14, 8] : <type 'list'>
=> heap2 = [6, 14, 8, 19] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 34
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [6, 14, 8, 19] : <type 'list'>
heap1 = [4, 8, 12] : <type 'list'>
=> heap1 = [4, 6, 8, 12, 14, 8, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 6, 8, 12, 4, 14, 8] : <type 'list'>
=> heap0 = [6, 4, 8, 12, 8, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 37
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [6, 4, 8, 12, 8, 14] : <type 'list'>
=> heap0 = [5, 4, 6, 12, 8, 14, 8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [6, 14, 8, 19] : <type 'list'>
heap0 = [5, 4, 6, 12, 8, 14, 8] : <type 'list'>
=> heap0 = [5, 4, 6, 6, 12, 8, 14, 8, 14, 8, 19] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 39
ACTION: int3 = 16 
int3 = 3 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int4 = 13                                                               # STEP 40
ACTION: int4 = 13 
int4 = 5 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 41
ACTION: heaps.heappush(heap1,int1) 
int1 = 4 : <type 'int'>
heap1 = [4, 6, 8, 12, 14, 8, 19] : <type 'list'>
=> heap1 = [4, 4, 8, 6, 14, 8, 19, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [6, 14, 8, 19] : <type 'list'>
heap0 = [5, 4, 6, 6, 12, 8, 14, 8, 14, 8, 19] : <type 'list'>
heap1 = [4, 4, 8, 6, 14, 8, 19, 12] : <type 'list'>
=> heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 43
ACTION: heaps.heappush(heap1,int0) 
int0 = 15 : <type 'int'>
heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19] : <type 'list'>
=> heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 4, 6, 6, 12, 8, 14, 8, 14, 8, 19] : <type 'list'>
heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15] : <type 'list'>
=> heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15] : <type 'list'>
==================================================
int1 = 9                                                                # STEP 45
ACTION: int1 = 9 
int1 = 4 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 46
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 47
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15] : <type 'list'>
heap2 = [6, 14, 8, 19] : <type 'list'>
=> heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 48
ACTION: heaps.heappush(heap2,int2) 
int2 = 3 : <type 'int'>
heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
=> heap2 = [3, 4, 5, 4, 5, 5, 5, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 6, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 19, 19, 19, 15, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15] : <type 'list'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15] : <type 'list'>
heap2 = [3, 4, 5, 4, 5, 5, 5, 4, 6, 6, 6, 6, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 6, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 19, 19, 19, 15, 14] : <type 'list'>
=> heap2 = [5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 50
ACTION: heaps.heappush(heap0,int1) 
int1 = 9 : <type 'int'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15] : <type 'list'>
=> heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 4, 6, 6, 6, 12, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15] : <type 'list'>
heap2 = [5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
=> heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
==================================================
int2 = 19                                                               # STEP 52
ACTION: int2 = 19 
int2 = 3 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 53
ACTION: heaps.heappush(heap1,int3) 
int3 = 16 : <type 'int'>
heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
=> heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 54
ACTION: heaps.heappush(heap2,int1) 
int1 = 9 : <type 'int'>
heap2 = [5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 19, 15] : <type 'list'>
=> heap2 = [5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 19, 15, 9] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 55
ACTION: heaps.heappush(heap0,int3) 
int3 = 16 : <type 'int'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14] : <type 'list'>
=> heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 56
ACTION: heaps.heappush(heap0,int2) 
int2 = 19 : <type 'int'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16] : <type 'list'>
=> heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
==================================================
int3 = 11                                                               # STEP 57
ACTION: int3 = 11 
int3 = 16 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 58
ACTION: heaps.heappush(heap1,int1) 
int1 = 9 : <type 'int'>
heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16] : <type 'list'>
=> heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 59
ACTION: int1 = 12 
int1 = 9 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 60
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14] : <type 'list'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
heap2 = [5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 19, 15, 9] : <type 'list'>
=> heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 61
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 62
ACTION: heaps.heappush(heap2,int0) 
int0 = 20 : <type 'int'>
heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
=> heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14] : <type 'list'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
=> heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 64
ACTION: heaps.heappush(heap0,int2) 
int2 = 3 : <type 'int'>
heap0 = [5, 4, 5, 4, 6, 6, 6, 6, 6, 12, 8, 12, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
=> heap0 = [3, 4, 5, 4, 6, 6, 5, 6, 6, 12, 8, 12, 8, 9, 6, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19, 8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 65
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
heap2 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 20] : <type 'list'>
heap0 = [3, 4, 5, 4, 6, 6, 5, 6, 6, 12, 8, 12, 8, 9, 6, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 19, 15, 14, 16, 19, 8] : <type 'list'>
=> heap0 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 6, 5, 4, 5, 4, 5, 4, 5, 4, 6, 6, 6, 6, 6, 6, 6, 8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 12, 8, 9, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 9, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 20, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 14, 8, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19, 19, 19, 15, 19, 19, 15, 19, 19, 19, 15, 16, 14, 19, 19, 19, 15, 14, 16, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032b0e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 84
STOPPING TESTING DUE TO TIMEOUT
15.6186612576 PERCENT COVERED
60.0666089058 TOTAL RUNTIME
18 EXECUTED
1751 TOTAL TEST OPERATIONS
29.6450943947 TIME SPENT EXECUTING TEST OPERATIONS
0.0679128170013 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1123735905 TIME SPENT CHECKING PROPERTIES
58.7574679852 TOTAL TIME SPENT RUNNING SUT
0.0129337310791 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 14                                                                # STEP 0
int4 = 6                                                                 # STEP 1
int3 = 8                                                                 # STEP 2
int2 = 19                                                                # STEP 3
int0 = 12                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heap0 = heaps.heapnew()                                                  # STEP 6
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
heaps.heappush(heap1,int3)                                               # STEP 8
heap0 = heaps.heapmerge(heap2,heap1)                                     # STEP 9
int3 = 4                                                                # STEP 10
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 11
heaps.heappush(heap1,int0)                                              # STEP 12
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
heaps.heappush(heap1,int3)                                              # STEP 14
int3 = 7                                                                # STEP 15
int0 = 3                                                                # STEP 16
heaps.heappush(heap2,int3)                                              # STEP 17
int3 = 3                                                                # STEP 18
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
heaps.heappush(heap1,int0)                                              # STEP 20
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 21
int0 = 15                                                               # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
heaps.heappush(heap2,int1)                                              # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
heaps.heappush(heap2,int4)                                              # STEP 26
int1 = 4                                                                # STEP 27
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
heaps.heappush(heap2,int3)                                              # STEP 29
heaps.heappop(heap1)                                                    # STEP 30
int4 = 5                                                                # STEP 31
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
heaps.heappush(heap2,int2)                                              # STEP 33
int2 = 3                                                                # STEP 34
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
heaps.heappush(heap0,int4)                                              # STEP 37
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 38
int3 = 16                                                               # STEP 39
int4 = 13                                                               # STEP 40
heaps.heappush(heap1,int1)                                              # STEP 41
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
heaps.heappush(heap1,int0)                                              # STEP 43
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
int1 = 9                                                                # STEP 45
int0 = 20                                                               # STEP 46
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 47
heaps.heappush(heap2,int2)                                              # STEP 48
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
heaps.heappush(heap0,int1)                                              # STEP 50
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 51
int2 = 19                                                               # STEP 52
heaps.heappush(heap1,int3)                                              # STEP 53
heaps.heappush(heap2,int1)                                              # STEP 54
heaps.heappush(heap0,int3)                                              # STEP 55
heaps.heappush(heap0,int2)                                              # STEP 56
int3 = 11                                                               # STEP 57
heaps.heappush(heap1,int1)                                              # STEP 58
int1 = 12                                                               # STEP 59
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 60
int2 = 3                                                                # STEP 61
heaps.heappush(heap2,int0)                                              # STEP 62
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
heaps.heappush(heap0,int2)                                              # STEP 64
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032b0e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

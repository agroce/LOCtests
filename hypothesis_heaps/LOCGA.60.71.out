Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69614.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #63 (0:00:30.020912) Tue May  2 20:01:35 2017 [ 39 stmts 55 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ebf908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 57 steps

SAVING TEST AS failure.69614.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 15                                                                # STEP 0
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 1
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int4 = 14                                                                # STEP 3
ACTION: int4 = 14 
int4 = None : <type 'NoneType'>
=> int4 = 14 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 4
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 6
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 8
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int3)                                               # STEP 9
ACTION: heaps.heappush(heap1,int3) 
int3 = 15 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [15] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [15] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [15, 15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15, 15] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 18
ACTION: int3 = 9 
int3 = 15 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [15, 15] : <type 'list'>
heap2 = [15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 20
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [15, 15] : <type 'list'>
heap0 = [15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 21
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [15, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15, 15, 15] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 22
ACTION: int3 = 16 
int3 = 9 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 23
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [9, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 9, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 24
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 26
ACTION: int2 = 2 
int2 = 9 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [15, 15, 15, 15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
heap1 = [9, 15, 9, 15, 15, 15] : <type 'list'>
heap2 = [15, 15, 15] : <type 'list'>
=> heap2 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 9, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 32
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [9, 15, 15, 15, 15] : <type 'list'>
heap0 = [15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 35
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 36
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 37
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 38
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 39
ACTION: heaps.heappush(heap1,int2) 
int2 = 2 : <type 'int'>
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [2, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 40
ACTION: heaps.heappush(heap1,int0) 
int0 = 15 : <type 'int'>
heap1 = [2, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 43
ACTION: heaps.heappush(heap0,int4) 
int4 = 14 : <type 'int'>
heap0 = [3, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 14, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 45
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
heap0 = [3, 14, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 46
ACTION: int0 = 7 
int0 = 15 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 48
ACTION: heaps.heappush(heap1,int4) 
int4 = 14 : <type 'int'>
heap1 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [14, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 49
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 51
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9] : <type 'list'>
=> heap0 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 52
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
heap0 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 54
ACTION: heaps.heappush(heap2,int2) 
int2 = 2 : <type 'int'>
heap2 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9] : <type 'list'>
=> heap2 = [2, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 55
ACTION: int4 = 17 
int4 = 14 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e83c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 32
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0595378876 TOTAL RUNTIME
20 EXECUTED
1889 TOTAL TEST OPERATIONS
29.4392032623 TIME SPENT EXECUTING TEST OPERATIONS
0.245166540146 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4153728485 TIME SPENT CHECKING PROPERTIES
58.8545761108 TOTAL TIME SPENT RUNNING SUT
0.0110929012299 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 15                                                                # STEP 0
int0 = 15                                                                # STEP 1
int1 = 3                                                                 # STEP 2
int4 = 14                                                                # STEP 3
int2 = 9                                                                 # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap1)                                                     # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heaps.heappop(heap1)                                                     # STEP 8
heaps.heappush(heap1,int3)                                               # STEP 9
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 17
int3 = 9                                                                # STEP 18
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 20
heaps.heappush(heap1,int3)                                              # STEP 21
int3 = 16                                                               # STEP 22
heaps.heappush(heap1,int2)                                              # STEP 23
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
int2 = 2                                                                # STEP 26
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 32
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heaps.heappop(heap1)                                                    # STEP 35
heaps.heappop(heap2)                                                    # STEP 36
heaps.heappush(heap0,int1)                                              # STEP 37
heaps.heappop(heap1)                                                    # STEP 38
heaps.heappush(heap1,int2)                                              # STEP 39
heaps.heappush(heap1,int0)                                              # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
heaps.heappush(heap0,int4)                                              # STEP 43
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 45
int0 = 7                                                                # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
heaps.heappush(heap1,int4)                                              # STEP 48
heaps.heappop(heap0)                                                    # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
heaps.heappop(heap0)                                                    # STEP 51
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
heaps.heappush(heap2,int2)                                              # STEP 54
int4 = 17                                                               # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e83c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

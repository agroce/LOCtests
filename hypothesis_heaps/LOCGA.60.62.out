Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69564.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d0ab90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 79 steps

SAVING TEST AS failure.69564.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap1 = heaps.heapnew()                                                  # STEP 0
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 5                                                                 # STEP 1
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 2
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 5                                                                 # STEP 3
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 4
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                     # STEP 5
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 6
ACTION: heaps.heappush(heap1,int1) 
int1 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 7
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int3 = 8                                                                 # STEP 9
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 11
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 12
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 13
ACTION: heaps.heappush(heap1,int2) 
int2 = 20 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 14
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [8, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [8, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
int4 = 7                                                                # STEP 16
ACTION: int4 = 7 
int4 = None : <type 'NoneType'>
=> int4 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [20] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 19
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 20
ACTION: int2 = 2 
int2 = 20 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 21
ACTION: int3 = 7 
int3 = 8 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 22
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 25
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [15] : <type 'list'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 28
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 30
ACTION: heaps.heappush(heap2,int3) 
int3 = 7 : <type 'int'>
heap2 = [15, 15] : <type 'list'>
=> heap2 = [7, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 31
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [7, 15, 15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [7, 15, 15] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 32
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 34
ACTION: heaps.heappush(heap0,int0) 
int0 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 35
ACTION: int0 = 9 
int0 = 5 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 15, 15] : <type 'list'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 37
ACTION: heaps.heappush(heap1,int0) 
int0 = 9 : <type 'int'>
heap1 = [7, 15, 15] : <type 'list'>
=> heap1 = [7, 9, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 38
ACTION: heaps.heappop(heap1) 
heap1 = [7, 9, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 15, 15] : <type 'list'>
heap2 = [15, 15] : <type 'list'>
heap0 = [5] : <type 'list'>
=> heap0 = [9, 15, 15, 15, 15] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 40
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 41
ACTION: heaps.heappush(heap0,int1) 
int1 = 13 : <type 'int'>
heap0 = [9, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [9, 15, 13, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 15, 15] : <type 'list'>
=> heap1 = [15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [9, 15, 13, 15, 15, 15] : <type 'list'>
heap1 = [15, 15] : <type 'list'>
=> heap1 = [9, 15, 13, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 44
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 45
ACTION: heaps.heappop(heap2) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 46
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 13, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [13, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 49
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 50
ACTION: heaps.heappush(heap0,int1) 
int1 = 13 : <type 'int'>
heap0 = [9, 15, 13, 15, 15, 15] : <type 'list'>
=> heap0 = [9, 15, 13, 15, 15, 15, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 52
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [15, 15, 15, 15, 15] : <type 'list'>
heap0 = [9, 15, 13, 15, 15, 15, 13] : <type 'list'>
=> heap0 = [9, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [9, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 13] : <type 'list'>
=> heap0 = [13, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 56
ACTION: heap1 = heaps.heapnew() 
heap1 = [15, 15, 15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 57
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [13, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 59
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 60
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 13, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 62
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 63
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 18                                                               # STEP 64
ACTION: int1 = 18 
int1 = 13 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
int0 = 2                                                                # STEP 65
ACTION: int0 = 2 
int0 = 9 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 66
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 15, 15, 15, 15, 15, 13, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 69
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 70
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 71
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 15, 13] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 72
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 73
ACTION: heap0 = heaps.heapnew() 
heap0 = [15, 15, 15, 15, 15, 15, 15, 13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 74
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 75
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 76
ACTION: heaps.heappush(heap0,int0) 
int0 = 2 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [2] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 77
ACTION: heaps.heappop(heap0) 
heap0 = [2] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 13, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 13] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cd3e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #55 (0:00:30.000283) Tue May  2 19:52:31 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 16
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0513279438 TOTAL RUNTIME
20 EXECUTED
1895 TOTAL TEST OPERATIONS
29.2295877934 TIME SPENT EXECUTING TEST OPERATIONS
0.234876871109 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1922228336 TIME SPENT CHECKING PROPERTIES
58.421810627 TOTAL TIME SPENT RUNNING SUT
0.0116119384766 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap1 = heaps.heapnew()                                                  # STEP 0
int1 = 5                                                                 # STEP 1
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 2
int0 = 5                                                                 # STEP 3
int2 = 20                                                                # STEP 4
heap1 = heaps.heapmerge(heap2,heap1)                                     # STEP 5
heaps.heappush(heap1,int1)                                               # STEP 6
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 7
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
int3 = 8                                                                 # STEP 9
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 10
int1 = 15                                                               # STEP 11
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 12
heaps.heappush(heap1,int2)                                              # STEP 13
heaps.heappush(heap1,int3)                                              # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
int4 = 7                                                                # STEP 16
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 18
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 19
int2 = 2                                                                # STEP 20
int3 = 7                                                                # STEP 21
heaps.heappop(heap2)                                                    # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
heaps.heappush(heap2,int1)                                              # STEP 25
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
heaps.heappop(heap1)                                                    # STEP 28
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
heaps.heappush(heap2,int3)                                              # STEP 30
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 31
int3 = 9                                                                # STEP 32
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
heaps.heappush(heap0,int0)                                              # STEP 34
int0 = 9                                                                # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
heaps.heappush(heap1,int0)                                              # STEP 37
heaps.heappop(heap1)                                                    # STEP 38
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 39
int1 = 13                                                               # STEP 40
heaps.heappush(heap0,int1)                                              # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
heaps.heappop(heap2)                                                    # STEP 44
heaps.heappop(heap2)                                                    # STEP 45
heaps.heappop(heap2)                                                    # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
heap2 = heaps.heapnew()                                                 # STEP 49
heaps.heappush(heap0,int1)                                              # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
heap1 = heaps.heapnew()                                                 # STEP 56
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
heaps.heappop(heap1)                                                    # STEP 59
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
heaps.heappop(heap0)                                                    # STEP 62
heaps.heappop(heap1)                                                    # STEP 63
int1 = 18                                                               # STEP 64
int0 = 2                                                                # STEP 65
heaps.heappop(heap2)                                                    # STEP 66
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
heaps.heappop(heap2)                                                    # STEP 69
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 70
heaps.heappop(heap0)                                                    # STEP 71
heap2 = heaps.heapnew()                                                 # STEP 72
heap0 = heaps.heapnew()                                                 # STEP 73
heaps.heappop(heap2)                                                    # STEP 74
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 75
heaps.heappush(heap0,int0)                                              # STEP 76
heaps.heappop(heap0)                                                    # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cd3e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

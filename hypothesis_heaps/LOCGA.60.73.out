Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69624.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10453e8c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 79 steps

SAVING TEST AS failure.69624.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 2
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int4 = 15                                                                # STEP 3
ACTION: int4 = 15 
int4 = None : <type 'NoneType'>
=> int4 = 15 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 4
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 5
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int2)                                              # STEP 10
ACTION: heaps.heappush(heap2,int2) 
int2 = 18 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 11
ACTION: int2 = 18 
int2 = 18 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 12
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 14
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 15
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 19
ACTION: heaps.heappush(heap0,int1) 
int1 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 20
ACTION: int1 = 17 
int1 = 10 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 21
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 22
ACTION: heaps.heappush(heap2,int3) 
int3 = 16 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 23
ACTION: int3 = 1 
int3 = 16 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 24
ACTION: heaps.heappop(heap0) 
heap0 = [10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 25
ACTION: heaps.heappush(heap0,int3) 
int3 = 1 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [1] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 26
ACTION: heaps.heappush(heap2,int4) 
int4 = 15 : <type 'int'>
heap2 = [16] : <type 'list'>
=> heap2 = [15, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 27
ACTION: heaps.heappush(heap1,int3) 
int3 = 1 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [1] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [1] : <type 'list'>
heap2 = [15, 16] : <type 'list'>
heap1 = [1] : <type 'list'>
=> heap1 = [1, 15, 16] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 29
ACTION: int4 = 6 
int4 = 15 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 30
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [1, 15, 16] : <type 'list'>
heap2 = [15, 16] : <type 'list'>
=> heap2 = [1, 1, 15, 15, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 15, 16] : <type 'list'>
=> heap1 = [15, 16] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 32
ACTION: int3 = 19 
int3 = 1 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 33
ACTION: heaps.heappop(heap0) 
heap0 = [1] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 34
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [15, 16] : <type 'list'>
=> heap1 = [15, 16, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 35
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int1)                                              # STEP 37
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [15, 16, 17] : <type 'list'>
=> heap1 = [15, 16, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 38
ACTION: heaps.heappop(heap1) 
heap1 = [15, 16, 17, 17] : <type 'list'>
=> heap1 = [16, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 39
ACTION: heaps.heappush(heap1,int0) 
int0 = 12 : <type 'int'>
heap1 = [16, 17, 17] : <type 'list'>
=> heap1 = [12, 16, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 15, 15, 16, 16] : <type 'list'>
=> heap2 = [1, 15, 15, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 41
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [12, 16, 17, 17] : <type 'list'>
=> heap1 = [12, 16, 17, 17, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [12, 16, 17, 17, 17] : <type 'list'>
heap2 = [1, 15, 15, 16, 16] : <type 'list'>
=> heap2 = [1, 12, 15, 15, 16, 16, 16, 17, 17, 17] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 43
ACTION: int1 = 13 
int1 = 17 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 12, 15, 15, 16, 16, 16, 17, 17, 17] : <type 'list'>
=> heap2 = [12, 15, 15, 17, 16, 16, 16, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [12, 16, 17, 17, 17] : <type 'list'>
=> heap1 = [16, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 46
ACTION: heaps.heappop(heap2) 
heap2 = [12, 15, 15, 17, 16, 16, 16, 17, 17] : <type 'list'>
=> heap2 = [15, 16, 15, 17, 17, 16, 16, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 17, 17, 17] : <type 'list'>
=> heap1 = [17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 16, 15, 17, 17, 16, 16, 17] : <type 'list'>
=> heap2 = [15, 16, 16, 17, 17, 17, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 49
ACTION: heaps.heappop(heap2) 
heap2 = [15, 16, 16, 17, 17, 17, 16] : <type 'list'>
=> heap2 = [16, 16, 16, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 50
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [16, 16, 16, 17, 17, 17] : <type 'list'>
=> heap2 = [6, 16, 16, 17, 17, 17, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 52
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [6, 16, 16, 17, 17, 17, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [6, 16, 16, 17, 17, 17, 16] : <type 'list'>
heap1 = [17, 17, 17] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [6, 16, 16, 17, 17, 17, 16, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 16, 16, 17, 17, 17, 16, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 17, 16, 17, 17, 17, 16, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 55
ACTION: heaps.heappop(heap2) 
heap2 = [6, 16, 16, 17, 17, 17, 16] : <type 'list'>
=> heap2 = [16, 16, 16, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [16, 16, 16, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 17, 16, 17, 17] : <type 'list'>
==================================================
int4 = 20                                                               # STEP 57
ACTION: int4 = 20 
int4 = 6 : <type 'int'>
=> int4 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 58
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [16, 17, 16, 17, 17] : <type 'list'>
heap1 = [17, 17, 17] : <type 'list'>
=> heap1 = [16, 17, 16, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 17, 16, 17, 17] : <type 'list'>
=> heap2 = [16, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [16, 17, 16, 17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [16, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 61
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [16, 17, 16, 17, 17, 17, 16, 17, 17] : <type 'list'>
heap1 = [16, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 16, 17, 16, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 62
ACTION: heaps.heappop(heap0) 
heap0 = [16, 16, 17, 16, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
heap2 = [16, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 16, 16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 64
ACTION: int0 = 1 
int0 = 12 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16, 16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 16, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 66
ACTION: heaps.heappush(heap0,int1) 
int1 = 13 : <type 'int'>
heap0 = [16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [13, 16, 17, 16, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 67
ACTION: heaps.heappop(heap2) 
heap2 = [16, 16, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 69
ACTION: int1 = 7 
int1 = 13 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 71
ACTION: heaps.heappop(heap0) 
heap0 = [13, 16, 17, 16, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 72
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 74
ACTION: heaps.heappop(heap1) 
heap1 = [17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 75
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 76
ACTION: heaps.heappop(heap0) 
heap0 = [16, 16, 17, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 77
ACTION: heaps.heappop(heap0) 
heap0 = [16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 17] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041cacf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #36 (0:00:30.007032) Tue May  2 20:03:36 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 2
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0688409805 TOTAL RUNTIME
20 EXECUTED
1881 TOTAL TEST OPERATIONS
29.1676363945 TIME SPENT EXECUTING TEST OPERATIONS
0.257374048233 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2046537399 TIME SPENT CHECKING PROPERTIES
58.3722901344 TOTAL TIME SPENT RUNNING SUT
0.0112526416779 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 18                                                                # STEP 0
int1 = 10                                                                # STEP 1
int0 = 12                                                                # STEP 2
int4 = 15                                                                # STEP 3
heap2 = heaps.heapnew()                                                  # STEP 4
heaps.heappop(heap2)                                                     # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heaps.heappush(heap2,int2)                                              # STEP 10
int2 = 18                                                               # STEP 11
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 12
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 13
int3 = 16                                                               # STEP 14
heap0 = heaps.heapnew()                                                 # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 18
heaps.heappush(heap0,int1)                                              # STEP 19
int1 = 17                                                               # STEP 20
heaps.heappop(heap1)                                                    # STEP 21
heaps.heappush(heap2,int3)                                              # STEP 22
int3 = 1                                                                # STEP 23
heaps.heappop(heap0)                                                    # STEP 24
heaps.heappush(heap0,int3)                                              # STEP 25
heaps.heappush(heap2,int4)                                              # STEP 26
heaps.heappush(heap1,int3)                                              # STEP 27
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 28
int4 = 6                                                                # STEP 29
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
int3 = 19                                                               # STEP 32
heaps.heappop(heap0)                                                    # STEP 33
heaps.heappush(heap1,int1)                                              # STEP 34
heaps.heappop(heap0)                                                    # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heaps.heappush(heap1,int1)                                              # STEP 37
heaps.heappop(heap1)                                                    # STEP 38
heaps.heappush(heap1,int0)                                              # STEP 39
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
heaps.heappush(heap1,int1)                                              # STEP 41
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
int1 = 13                                                               # STEP 43
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
heaps.heappop(heap2)                                                    # STEP 46
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
heaps.heappop(heap2)                                                    # STEP 49
heaps.heappush(heap2,int4)                                              # STEP 50
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 51
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 52
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
heaps.heappop(heap2)                                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
int4 = 20                                                               # STEP 57
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 61
heaps.heappop(heap0)                                                    # STEP 62
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 63
int0 = 1                                                                # STEP 64
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
heaps.heappush(heap0,int1)                                              # STEP 66
heaps.heappop(heap2)                                                    # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
int1 = 7                                                                # STEP 69
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
heaps.heappop(heap0)                                                    # STEP 71
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 72
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
heaps.heappop(heap1)                                                    # STEP 74
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 75
heaps.heappop(heap0)                                                    # STEP 76
heaps.heappop(heap0)                                                    # STEP 77
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1041cacf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

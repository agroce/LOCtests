Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69347.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #11 STEP #12 (0:00:30.007344) Tue May  2 19:15:16 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035ae7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 95 steps

SAVING TEST AS failure.69347.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 1
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                               # STEP 3
ACTION: heaps.heappush(heap2,int2) 
int2 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 4
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                     # STEP 5
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 2                                                                 # STEP 6
ACTION: int4 = 2 
int4 = None : <type 'NoneType'>
=> int4 = 2 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 8
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 15                                                                # STEP 9
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 10
ACTION: heaps.heappush(heap1,int4) 
int4 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 12
ACTION: int4 = 14 
int4 = 2 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 14
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 18                                                               # STEP 15
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 17
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 18
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 19
ACTION: heaps.heappush(heap0,int3) 
int3 = 18 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 20
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 22
ACTION: heaps.heappush(heap1,int3) 
int3 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 23
ACTION: int3 = 4 
int3 = 18 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 25
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 27
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int3)                                              # STEP 30
ACTION: heaps.heappush(heap0,int3) 
int3 = 4 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 31
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 20                                                               # STEP 32
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 33
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [4] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [4, 4] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [4, 4] : <type 'list'>
heap0 = [4] : <type 'list'>
=> heap0 = [4, 4, 4, 4] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 35
ACTION: heaps.heappush(heap0,int2) 
int2 = 4 : <type 'int'>
heap0 = [4, 4, 4, 4] : <type 'list'>
=> heap0 = [4, 4, 4, 4, 4] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [4, 4] : <type 'list'>
=> heap1 = [4, 4] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 4] : <type 'list'>
=> heap2 = [4] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4, 4, 4, 4] : <type 'list'>
=> heap0 = [4, 4, 4, 4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 39
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 40
ACTION: int2 = 12 
int2 = 4 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 41
ACTION: heaps.heappush(heap0,int4) 
int4 = 14 : <type 'int'>
heap0 = [4, 4, 4, 4] : <type 'list'>
=> heap0 = [4, 4, 4, 4, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4, 4, 4, 14] : <type 'list'>
=> heap0 = [4, 4, 4, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 4, 4, 14] : <type 'list'>
=> heap0 = [4, 4, 4, 4, 4, 4, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 44
ACTION: heaps.heappush(heap0,int2) 
int2 = 12 : <type 'int'>
heap0 = [4, 4, 4, 4, 4, 4, 14, 14] : <type 'list'>
=> heap0 = [4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
heap2 = [4] : <type 'list'>
heap1 = [4] : <type 'list'>
=> heap1 = [4, 4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [4, 4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
heap2 = [4] : <type 'list'>
=> heap2 = [4, 4, 4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 47
ACTION: heaps.heappush(heap2,int2) 
int2 = 12 : <type 'int'>
heap2 = [4, 4, 4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
=> heap2 = [4, 4, 4, 4, 4, 4, 4, 4, 14, 14, 12, 12] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 48
ACTION: heap2 = heaps.heapnew() 
heap2 = [4, 4, 4, 4, 4, 4, 4, 4, 14, 14, 12, 12] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 49
ACTION: heaps.heappush(heap2,int0) 
int0 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
=> heap1 = [4, 4, 4, 12, 4, 4, 4, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4, 4, 4, 4, 4, 14, 14, 12] : <type 'list'>
=> heap0 = [4, 4, 4, 12, 4, 4, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 4, 12, 4, 4, 4, 14, 14] : <type 'list'>
=> heap1 = [4, 4, 4, 12, 14, 4, 4, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 53
ACTION: heaps.heappop(heap2) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 54
ACTION: heaps.heappush(heap0,int0) 
int0 = 15 : <type 'int'>
heap0 = [4, 4, 4, 12, 4, 4, 14, 14] : <type 'list'>
=> heap0 = [4, 4, 4, 12, 4, 4, 14, 14, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 55
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [4, 4, 4, 12, 4, 4, 14, 14, 15] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 56
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 4, 12, 14, 4, 4, 14] : <type 'list'>
=> heap1 = [4, 12, 4, 14, 14, 4, 4] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 57
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [4, 12, 4, 14, 14, 4, 4] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [4, 12, 4, 14, 14, 4, 4] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4, 4, 12, 4, 4, 14, 14, 15] : <type 'list'>
=> heap0 = [4, 4, 4, 12, 15, 4, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 12, 4, 14, 14, 4, 4] : <type 'list'>
=> heap2 = [4, 12, 4, 14, 14, 4] : <type 'list'>
==================================================
int0 = 12                                                               # STEP 60
ACTION: int0 = 12 
int0 = 15 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [4, 12, 4, 14, 14, 4, 4] : <type 'list'>
=> heap1 = [4, 12, 4, 14, 14, 4] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 62
ACTION: heaps.heappop(heap2) 
heap2 = [4, 12, 4, 14, 14, 4] : <type 'list'>
=> heap2 = [4, 12, 4, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 63
ACTION: heaps.heappop(heap0) 
heap0 = [4, 4, 4, 12, 15, 4, 14, 14] : <type 'list'>
=> heap0 = [4, 12, 4, 14, 15, 4, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 64
ACTION: heaps.heappush(heap0,int2) 
int2 = 12 : <type 'int'>
heap0 = [4, 12, 4, 14, 15, 4, 14] : <type 'list'>
=> heap0 = [4, 12, 4, 12, 15, 4, 14, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [4, 12, 4, 14, 14] : <type 'list'>
heap0 = [4, 12, 4, 12, 15, 4, 14, 14] : <type 'list'>
=> heap2 = [4, 4, 12, 4, 12, 4, 12, 14, 14, 15, 4, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 66
ACTION: heaps.heappop(heap2) 
heap2 = [4, 4, 12, 4, 12, 4, 12, 14, 14, 15, 4, 14, 14] : <type 'list'>
=> heap2 = [4, 4, 12, 14, 12, 4, 12, 14, 14, 15, 4, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 4, 12, 14, 12, 4, 12, 14, 14, 15, 4, 14] : <type 'list'>
=> heap2 = [4, 12, 12, 14, 4, 4, 12, 14, 14, 15, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 12, 4, 12, 15, 4, 14, 14] : <type 'list'>
=> heap0 = [4, 12, 4, 12, 15, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 12, 4, 12, 15, 14, 14] : <type 'list'>
=> heap0 = [4, 12, 14, 12, 15, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 70
ACTION: heaps.heappop(heap0) 
heap0 = [4, 12, 14, 12, 15, 14] : <type 'list'>
=> heap0 = [12, 12, 14, 14, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [12, 12, 14, 14, 15] : <type 'list'>
=> heap0 = [12, 14, 14, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 72
ACTION: heaps.heappop(heap1) 
heap1 = [4, 12, 4, 14, 14, 4] : <type 'list'>
=> heap1 = [4, 12, 4, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 12, 4, 14, 14] : <type 'list'>
=> heap1 = [4, 12, 14, 14] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 74
ACTION: int2 = 3 
int2 = 12 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 75
ACTION: heaps.heappush(heap0,int0) 
int0 = 12 : <type 'int'>
heap0 = [12, 14, 14, 15] : <type 'list'>
=> heap0 = [12, 12, 14, 15, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [4, 12, 14, 14] : <type 'list'>
=> heap1 = [12, 14, 14] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 77
ACTION: int4 = 5 
int4 = 14 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12, 14, 14] : <type 'list'>
=> heap1 = [14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 14] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 80
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [4, 12, 12, 14, 4, 4, 12, 14, 14, 15, 14] : <type 'list'>
heap0 = [12, 12, 14, 15, 14] : <type 'list'>
=> heap2 = [4, 12, 12, 12, 12, 14, 4, 4, 12, 14, 14, 14, 15, 14, 15, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 81
ACTION: heaps.heappop(heap2) 
heap2 = [4, 12, 12, 12, 12, 14, 4, 4, 12, 14, 14, 14, 15, 14, 15, 14] : <type 'list'>
=> heap2 = [12, 12, 12, 4, 12, 14, 4, 14, 12, 14, 14, 14, 15, 14, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 82
ACTION: heaps.heappop(heap2) 
heap2 = [12, 12, 12, 4, 12, 14, 4, 14, 12, 14, 14, 14, 15, 14, 15] : <type 'list'>
=> heap2 = [12, 4, 12, 12, 12, 14, 4, 14, 15, 14, 14, 14, 15, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 84
ACTION: int0 = 20 
int0 = 12 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 85
ACTION: heaps.heappop(heap2) 
heap2 = [12, 4, 12, 12, 12, 14, 4, 14, 15, 14, 14, 14, 15, 14] : <type 'list'>
=> heap2 = [4, 12, 12, 14, 12, 14, 4, 14, 15, 14, 14, 14, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [12, 12, 14, 15, 14] : <type 'list'>
=> heap0 = [12, 14, 14, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 87
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 88
ACTION: heaps.heappop(heap0) 
heap0 = [12, 14, 14, 15] : <type 'list'>
=> heap0 = [14, 15, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 89
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [14, 15, 14] : <type 'list'>
heap2 = [4, 12, 12, 14, 12, 14, 4, 14, 15, 14, 14, 14, 15] : <type 'list'>
=> heap2 = [4, 12, 12, 14, 14, 12, 14, 4, 14, 15, 14, 15, 14, 14, 14, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 90
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [14, 15, 14] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [14, 15, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 91
ACTION: heaps.heappop(heap2) 
heap2 = [4, 12, 12, 14, 14, 12, 14, 4, 14, 15, 14, 15, 14, 14, 14, 15] : <type 'list'>
=> heap2 = [12, 14, 12, 4, 14, 12, 14, 15, 14, 15, 14, 15, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 15, 14] : <type 'list'>
=> heap1 = [14, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 93
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12, 14, 12, 4, 14, 12, 14, 15, 14, 15, 14, 15, 14, 14, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [12, 14, 12, 4, 14, 14, 14, 15, 14, 15, 14, 15, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103663dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 80
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.062885046 TOTAL RUNTIME
20 EXECUTED
1975 TOTAL TEST OPERATIONS
29.1555929184 TIME SPENT EXECUTING TEST OPERATIONS
0.254393577576 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1408503056 TIME SPENT CHECKING PROPERTIES
58.296443224 TOTAL TIME SPENT RUNNING SUT
0.0108997821808 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
heap2 = heaps.heapnew()                                                  # STEP 1
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
heaps.heappush(heap2,int2)                                               # STEP 3
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 4
heap1 = heaps.heapmerge(heap0,heap2)                                     # STEP 5
int4 = 2                                                                 # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heaps.heappop(heap1)                                                     # STEP 8
int0 = 15                                                                # STEP 9
heaps.heappush(heap1,int4)                                              # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
int4 = 14                                                               # STEP 12
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 13
heaps.heappop(heap2)                                                    # STEP 14
int3 = 18                                                               # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heaps.heappop(heap2)                                                    # STEP 17
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 18
heaps.heappush(heap0,int3)                                              # STEP 19
heaps.heappop(heap1)                                                    # STEP 20
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
heaps.heappush(heap1,int3)                                              # STEP 22
int3 = 4                                                                # STEP 23
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
heaps.heappush(heap1,int3)                                              # STEP 25
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
int2 = 4                                                                # STEP 27
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heaps.heappush(heap0,int3)                                              # STEP 30
int1 = 11                                                               # STEP 31
int3 = 20                                                               # STEP 32
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 33
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 34
heaps.heappush(heap0,int2)                                              # STEP 35
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 39
int2 = 12                                                               # STEP 40
heaps.heappush(heap0,int4)                                              # STEP 41
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
heaps.heappush(heap0,int2)                                              # STEP 44
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
heaps.heappush(heap2,int2)                                              # STEP 47
heap2 = heaps.heapnew()                                                 # STEP 48
heaps.heappush(heap2,int0)                                              # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
heaps.heappop(heap2)                                                    # STEP 53
heaps.heappush(heap0,int0)                                              # STEP 54
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 55
heaps.heappop(heap1)                                                    # STEP 56
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
int0 = 12                                                               # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
heaps.heappop(heap2)                                                    # STEP 62
heaps.heappop(heap0)                                                    # STEP 63
heaps.heappush(heap0,int2)                                              # STEP 64
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 65
heaps.heappop(heap2)                                                    # STEP 66
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
heaps.heappop(heap0)                                                    # STEP 70
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
heaps.heappop(heap1)                                                    # STEP 72
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
int2 = 3                                                                # STEP 74
heaps.heappush(heap0,int0)                                              # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
int4 = 5                                                                # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 80
heaps.heappop(heap2)                                                    # STEP 81
heaps.heappop(heap2)                                                    # STEP 82
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
int0 = 20                                                               # STEP 84
heaps.heappop(heap2)                                                    # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
heaps.heappop(heap1)                                                    # STEP 87
heaps.heappop(heap0)                                                    # STEP 88
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 89
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 90
heaps.heappop(heap2)                                                    # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 93
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103663dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69165.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103543290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 93 steps

SAVING TEST AS failure.69165.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap0 = heaps.heapnew()                                                  # STEP 0
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 1
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 20                                                                # STEP 4
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 5
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 4                                                                 # STEP 6
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 9
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 11
ACTION: heaps.heappush(heap1,int2) 
int2 = 20 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 12
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [4, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 13
ACTION: heaps.heappush(heap0,int3) 
int3 = 4 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 15
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [4, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [4, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 19
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 20
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int3)                                              # STEP 21
ACTION: heaps.heappush(heap0,int3) 
int3 = 4 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [4] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 24
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [4] : <type 'list'>
=> heap0 = [4, 4] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 25
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 4 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 29
ACTION: int2 = 4 
int2 = 20 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
int4 = 14                                                               # STEP 30
ACTION: int4 = 14 
int4 = None : <type 'NoneType'>
=> int4 = 14 : <type 'int'>
==================================================
int1 = 7                                                                # STEP 31
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 14                                                               # STEP 32
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 35
ACTION: heaps.heappush(heap0,int0) 
int0 = 14 : <type 'int'>
heap0 = [4] : <type 'list'>
=> heap0 = [4, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 14] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 37
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 38
ACTION: int0 = 9 
int0 = 14 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [14] : <type 'list'>
heap2 = [14] : <type 'list'>
=> heap2 = [14, 14] : <type 'list'>
==================================================
int3 = 15                                                               # STEP 40
ACTION: int3 = 15 
int3 = 14 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 41
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [14, 14] : <type 'list'>
heap0 = [14] : <type 'list'>
=> heap0 = [14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 42
ACTION: heaps.heappop(heap2) 
heap2 = [14, 14] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 43
ACTION: heaps.heappop(heap0) 
heap0 = [14, 14, 14] : <type 'list'>
=> heap0 = [14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 44
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 14] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 46
ACTION: heaps.heappush(heap0,int1) 
int1 = 7 : <type 'int'>
heap0 = [14] : <type 'list'>
=> heap0 = [7, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 47
ACTION: heaps.heappop(heap0) 
heap0 = [7, 14] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 48
ACTION: heaps.heappop(heap2) 
heap2 = [14] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 50
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 51
ACTION: heaps.heappush(heap2,int0) 
int0 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 52
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 53
ACTION: heaps.heappop(heap2) 
heap2 = [9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 55
ACTION: int1 = 15 
int1 = 7 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 56
ACTION: heaps.heappush(heap0,int2) 
int2 = 4 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 57
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [4] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
int0 = 15                                                               # STEP 58
ACTION: int0 = 15 
int0 = 9 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 59
ACTION: heaps.heappush(heap1,int4) 
int4 = 14 : <type 'int'>
heap1 = [4] : <type 'list'>
=> heap1 = [4, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 60
ACTION: heaps.heappush(heap0,int0) 
int0 = 15 : <type 'int'>
heap0 = [4] : <type 'list'>
=> heap0 = [4, 15] : <type 'list'>
==================================================
int0 = 5                                                                # STEP 61
ACTION: int0 = 5 
int0 = 15 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
int4 = 13                                                               # STEP 62
ACTION: int4 = 13 
int4 = 14 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 15] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [4, 4, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 64
ACTION: heaps.heappop(heap2) 
heap2 = [4, 4, 15, 15] : <type 'list'>
=> heap2 = [4, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 65
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [4, 15, 15] : <type 'list'>
heap0 = [4, 15] : <type 'list'>
=> heap0 = [4, 4, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 66
ACTION: heaps.heappop(heap1) 
heap1 = [4, 14] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 15, 15] : <type 'list'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
int2 = 6                                                                # STEP 68
ACTION: int2 = 6 
int2 = 4 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 69
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [15, 15] : <type 'list'>
=> heap2 = [13, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 4, 15, 15, 15] : <type 'list'>
heap1 = [14] : <type 'list'>
=> heap1 = [4, 4, 4, 4, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 71
ACTION: heaps.heappush(heap1,int0) 
int0 = 5 : <type 'int'>
heap1 = [4, 4, 4, 4, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 4, 4, 4, 5, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [13, 15, 15] : <type 'list'>
heap1 = [4, 4, 4, 4, 5, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 4, 4, 4, 5, 13, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [13, 15, 15] : <type 'list'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 4, 4, 5, 13, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 4, 4, 15, 5, 13, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
int0 = 11                                                               # STEP 75
ACTION: int0 = 11 
int0 = 5 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 76
ACTION: heaps.heappop(heap0) 
heap0 = [4, 4, 15, 15, 15] : <type 'list'>
=> heap0 = [4, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 77
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 15, 15, 15] : <type 'list'>
heap2 = [15, 15] : <type 'list'>
=> heap2 = [4, 4, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 4, 15, 5, 13, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 79
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [4, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 4, 5, 4, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 80
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 4, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [4, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 83
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 5, 4, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 13, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 84
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 85
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 86
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
heap0 = [4, 15, 15, 15] : <type 'list'>
=> heap0 = [4, 4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 87
ACTION: int4 = 14 
int4 = 13 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [4, 5, 5, 13, 15, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 89
ACTION: heaps.heappop(heap1) 
heap1 = [4, 5, 5, 13, 15, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [5, 13, 5, 13, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 90
ACTION: heaps.heappush(heap0,int1) 
int1 = 15 : <type 'int'>
heap0 = [4, 4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [4, 4, 4, 5, 13, 5, 4, 15, 15, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 91
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 13, 5, 13, 15, 4, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [5, 13, 4, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103563d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #64 (0:00:30.016060) Tue May  2 18:52:02 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 81
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0698769093 TOTAL RUNTIME
19 EXECUTED
1874 TOTAL TEST OPERATIONS
29.153901577 TIME SPENT EXECUTING TEST OPERATIONS
0.254644870758 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1609930992 TIME SPENT CHECKING PROPERTIES
58.3148946762 TOTAL TIME SPENT RUNNING SUT
0.0104329586029 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap0 = heaps.heapnew()                                                  # STEP 0
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
int2 = 20                                                                # STEP 4
heaps.heappop(heap0)                                                     # STEP 5
int3 = 4                                                                 # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heap0 = heaps.heapmerge(heap1,heap0)                                     # STEP 8
heaps.heappop(heap0)                                                     # STEP 9
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
heaps.heappush(heap1,int2)                                              # STEP 11
heaps.heappush(heap1,int3)                                              # STEP 12
heaps.heappush(heap0,int3)                                              # STEP 13
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
heaps.heappush(heap1,int3)                                              # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 19
heaps.heappop(heap1)                                                    # STEP 20
heaps.heappush(heap0,int3)                                              # STEP 21
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 24
heap2 = heaps.heapnew()                                                 # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
int3 = 14                                                               # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
int2 = 4                                                                # STEP 29
int4 = 14                                                               # STEP 30
int1 = 7                                                                # STEP 31
int0 = 14                                                               # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heaps.heappush(heap0,int0)                                              # STEP 35
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
heaps.heappush(heap2,int3)                                              # STEP 37
int0 = 9                                                                # STEP 38
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 39
int3 = 15                                                               # STEP 40
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 41
heaps.heappop(heap2)                                                    # STEP 42
heaps.heappop(heap0)                                                    # STEP 43
heap1 = heaps.heapnew()                                                 # STEP 44
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
heaps.heappush(heap0,int1)                                              # STEP 46
heaps.heappop(heap0)                                                    # STEP 47
heaps.heappop(heap2)                                                    # STEP 48
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 50
heaps.heappush(heap2,int0)                                              # STEP 51
heaps.heappop(heap0)                                                    # STEP 52
heaps.heappop(heap2)                                                    # STEP 53
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
int1 = 15                                                               # STEP 55
heaps.heappush(heap0,int2)                                              # STEP 56
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 57
int0 = 15                                                               # STEP 58
heaps.heappush(heap1,int4)                                              # STEP 59
heaps.heappush(heap0,int0)                                              # STEP 60
int0 = 5                                                                # STEP 61
int4 = 13                                                               # STEP 62
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 63
heaps.heappop(heap2)                                                    # STEP 64
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 65
heaps.heappop(heap1)                                                    # STEP 66
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
int2 = 6                                                                # STEP 68
heaps.heappush(heap2,int4)                                              # STEP 69
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
heaps.heappush(heap1,int0)                                              # STEP 71
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
int0 = 11                                                               # STEP 75
heaps.heappop(heap0)                                                    # STEP 76
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 79
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
heaps.heappop(heap1)                                                    # STEP 83
heaps.heappop(heap2)                                                    # STEP 84
heaps.heappop(heap2)                                                    # STEP 85
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 86
int4 = 14                                                               # STEP 87
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
heaps.heappop(heap1)                                                    # STEP 89
heaps.heappush(heap0,int1)                                              # STEP 90
int1 = 16                                                               # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103563d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

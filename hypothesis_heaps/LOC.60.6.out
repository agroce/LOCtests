Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99251.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #16 STEP #15 (0:00:30.004554) Fri Apr 28 03:29:32 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ddd2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 98 steps

SAVING TEST AS failure.99251.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 17                                                                # STEP 0
ACTION: int4 = 17 
int4 = None : <type 'NoneType'>
=> int4 = 17 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 3
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 13                                                                # STEP 4
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 6
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 10
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 12
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 13
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 14
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 15
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 21
ACTION: heaps.heappush(heap1,int1) 
int1 = 15 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 23
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [15] : <type 'list'>
heap1 = [15] : <type 'list'>
=> heap1 = [15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 28
ACTION: heaps.heappop(heap1) 
heap1 = [15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 29
ACTION: heaps.heappush(heap0,int4) 
int4 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 30
ACTION: int4 = 6 
int4 = 17 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 31
ACTION: heaps.heappop(heap0) 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 33
ACTION: heaps.heappush(heap1,int2) 
int2 = 12 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 34
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 35
ACTION: heaps.heappop(heap1) 
heap1 = [12] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 13                                                               # STEP 36
ACTION: int2 = 13 
int2 = 12 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 38
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 39
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 40
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 41
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 42
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 43
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 44
ACTION: int4 = 5 
int4 = 6 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [6] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 46
ACTION: heaps.heappop(heap1) 
heap1 = [6] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 47
ACTION: heaps.heappush(heap2,int2) 
int2 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 48
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [6] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 49
ACTION: int2 = 12 
int2 = 13 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 50
ACTION: heaps.heappop(heap2) 
heap2 = [13] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [6] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 54
ACTION: heaps.heappush(heap0,int0) 
int0 = 14 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 55
ACTION: heaps.heappush(heap2,int0) 
int0 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 57
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [14] : <type 'list'>
heap1 = [6] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [6, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 58
ACTION: heaps.heappush(heap0,int3) 
int3 = 13 : <type 'int'>
heap0 = [6, 14] : <type 'list'>
=> heap0 = [6, 14, 13] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 59
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 60
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int3 = 7                                                                # STEP 61
ACTION: int3 = 7 
int3 = 13 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 14, 13] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [6, 14, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 64
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 14, 13] : <type 'list'>
heap0 = [6, 14, 13] : <type 'list'>
=> heap0 = [6, 6, 14, 13, 14, 13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 6, 14, 13, 14, 13] : <type 'list'>
heap2 = [6, 14, 13] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 14, 13, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 66
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 67
ACTION: heaps.heappush(heap2,int2) 
int2 = 12 : <type 'int'>
heap2 = [6, 6, 6, 6, 14, 13, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 14, 12, 14, 13, 14, 13, 14, 13, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 6, 14, 12, 14, 13, 14, 13, 14, 13, 13] : <type 'list'>
=> heap2 = [6, 6, 6, 13, 14, 12, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 69
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [6, 6, 6, 13, 14, 12, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap2 = [5, 6, 6, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 70
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [5] : <type 'list'>
=> heap1 = [5, 8] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 71
ACTION: heap1 = heaps.heapnew() 
heap1 = [5, 8] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 14, 13, 14, 13] : <type 'list'>
=> heap0 = [6, 13, 14, 13, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 73
ACTION: heaps.heappush(heap1,int0) 
int0 = 7 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 74
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [7] : <type 'list'>
heap2 = [5, 6, 6, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
=> heap1 = [5, 6, 6, 7, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
==================================================
int0 = 15                                                               # STEP 75
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 76
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 6, 6, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
=> heap2 = [6, 12, 6, 13, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 77
ACTION: heaps.heappop(heap2) 
heap2 = [6, 12, 6, 13, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap2 = [6, 12, 6, 13, 14, 13, 14, 13, 14, 13, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 13, 14, 13, 14] : <type 'list'>
=> heap0 = [13, 13, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 79
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [5, 6, 6, 7, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
=> heap1 = [5, 6, 6, 7, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12, 8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 80
ACTION: heaps.heappop(heap2) 
heap2 = [6, 12, 6, 13, 14, 13, 14, 13, 14, 13, 14] : <type 'list'>
=> heap2 = [6, 12, 13, 13, 14, 14, 14, 13, 14, 13] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 81
ACTION: int2 = 10 
int2 = 12 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 82
ACTION: heaps.heappop(heap0) 
heap0 = [13, 13, 14, 14] : <type 'list'>
=> heap0 = [13, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 6, 6, 7, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12, 8] : <type 'list'>
=> heap1 = [6, 7, 6, 8, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 84
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [13, 14, 14] : <type 'list'>
heap1 = [6, 7, 6, 8, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
heap2 = [6, 12, 13, 13, 14, 14, 14, 13, 14, 13] : <type 'list'>
=> heap2 = [6, 7, 6, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 85
ACTION: heaps.heappop(heap1) 
heap1 = [6, 7, 6, 8, 13, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
=> heap1 = [6, 7, 6, 8, 13, 14, 12, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 86
ACTION: heaps.heappop(heap2) 
heap2 = [6, 7, 6, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 12] : <type 'list'>
=> heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
int1 = 6                                                                # STEP 87
ACTION: int1 = 6 
int1 = 8 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 88
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [13, 14, 14] : <type 'list'>
heap1 = [6, 7, 6, 8, 13, 14, 12, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap1 = [13, 13, 14, 14, 14, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 89
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
heap1 = [13, 13, 14, 14, 14, 14] : <type 'list'>
heap0 = [13, 14, 14] : <type 'list'>
=> heap0 = [6, 7, 12, 8, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 14, 14, 14, 14] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 90
ACTION: int4 = 16 
int4 = 5 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 91
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
heap1 = [13, 13, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [6, 6, 7, 7, 12, 8, 12, 8, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 92
ACTION: heaps.heappush(heap2,int4) 
int4 = 16 : <type 'int'>
heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 93
ACTION: heaps.heappop(heap0) 
heap0 = [6, 7, 12, 8, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [7, 8, 12, 13, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 14, 14, 13, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 94
ACTION: heaps.heappush(heap1,int1) 
int1 = 6 : <type 'int'>
heap1 = [6, 6, 7, 7, 12, 8, 12, 8, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13] : <type 'list'>
=> heap1 = [6, 6, 7, 7, 12, 8, 12, 8, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 6] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 7, 12, 8, 13, 13, 14, 14, 14, 6, 14, 13, 14, 13, 14, 13, 16] : <type 'list'>
=> heap2 = [7, 8, 12, 14, 13, 13, 14, 13, 14, 6, 14, 13, 14, 13, 14, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 96
ACTION: heaps.heappush(heap0,int3) 
int3 = 7 : <type 'int'>
heap0 = [7, 8, 12, 13, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 14, 14, 13, 14, 14, 14] : <type 'list'>
=> heap0 = [7, 7, 12, 13, 8, 13, 13, 13, 14, 14, 13, 6, 14, 13, 14, 14, 14, 13, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 97
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 7, 12, 13, 8, 13, 13, 13, 14, 14, 13, 6, 14, 13, 14, 14, 14, 13, 14, 14, 14, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [7, 8, 12, 13, 13, 13, 13, 13, 14, 14, 14, 6, 14, 13, 14, 14, 14, 13, 14, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dbbe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ebd908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 100 steps

SAVING TEST AS failure.99251.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int2)                                               # STEP 3
ACTION: heaps.heappush(heap1,int2) 
int2 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 5
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 6
ACTION: heaps.heappush(heap1,int2) 
int2 = 18 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 8
ACTION: heaps.heappush(heap1,int2) 
int2 = 18 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 12
ACTION: heaps.heappush(heap1,int2) 
int2 = 18 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 13
ACTION: int4 = 16 
int4 = None : <type 'NoneType'>
=> int4 = 16 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 14
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 19
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 20
ACTION: heaps.heappush(heap1,int0) 
int0 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 21
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 22
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 24
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 29
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 30
ACTION: heaps.heappush(heap2,int3) 
int3 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 31
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [1] : <type 'list'>
=> heap0 = [1] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 33
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [1] : <type 'list'>
heap2 = [1] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 34
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [1] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [1] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 35
ACTION: heaps.heappush(heap2,int0) 
int0 = 5 : <type 'int'>
heap2 = [1] : <type 'list'>
=> heap2 = [1, 5] : <type 'list'>
==================================================
int2 = 20                                                               # STEP 36
ACTION: int2 = 20 
int2 = 18 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 37
ACTION: heaps.heappush(heap2,int3) 
int3 = 1 : <type 'int'>
heap2 = [1, 5] : <type 'list'>
=> heap2 = [1, 5, 1] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [1] : <type 'list'>
heap2 = [1, 5, 1] : <type 'list'>
=> heap2 = [1, 1, 5, 1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 40
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 5, 1] : <type 'list'>
=> heap2 = [1, 1, 5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 5] : <type 'list'>
=> heap2 = [1, 5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 5] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [1] : <type 'list'>
=> heap0 = [1, 1] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [5] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 45
ACTION: int3 = 8 
int3 = 1 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [5] : <type 'list'>
heap0 = [1, 1] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [1, 1, 5] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 47
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 1] : <type 'list'>
heap1 = [1, 1, 5] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 49
ACTION: heaps.heappush(heap0,int1) 
int1 = 12 : <type 'int'>
heap0 = [1, 1, 1, 1, 5] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 5, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 50
ACTION: heaps.heappush(heap1,int0) 
int0 = 5 : <type 'int'>
heap1 = [1, 1, 5] : <type 'list'>
=> heap1 = [1, 1, 5, 5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 51
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 11                                                               # STEP 52
ACTION: int1 = 11 
int1 = 12 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 1, 1, 1, 5, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 12, 12] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 54
ACTION: int0 = 20 
int0 = 5 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 55
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 56
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 12, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 1, 1, 12, 5, 5, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 57
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 1, 1, 1, 1, 12, 5, 5, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 5, 1, 1, 1, 12, 12, 5] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 5, 1, 1, 1, 12, 12, 5] : <type 'list'>
=> heap0 = [1, 1, 1, 5, 5, 1, 1, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 59
ACTION: heaps.heappush(heap2,int2) 
int2 = 20 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 60
ACTION: heaps.heappush(heap1,int1) 
int1 = 11 : <type 'int'>
heap1 = [1, 1, 5, 5] : <type 'list'>
=> heap1 = [1, 1, 5, 5, 11] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 61
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 62
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 5, 5, 11] : <type 'list'>
=> heap1 = [1, 5, 5, 11] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 63
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 64
ACTION: heaps.heappop(heap2) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 65
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 5, 5, 1, 1, 12, 12] : <type 'list'>
=> heap0 = [1, 5, 1, 12, 5, 1, 1, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 5, 1, 12, 5, 1, 1, 12] : <type 'list'>
=> heap0 = [1, 5, 1, 12, 5, 12, 1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 68
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 69
ACTION: heaps.heappop(heap0) 
heap0 = [1, 5, 1, 12, 5, 12, 1] : <type 'list'>
=> heap0 = [1, 5, 1, 12, 5, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 70
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 5, 5, 11] : <type 'list'>
=> heap1 = [5, 11, 5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 11, 5] : <type 'list'>
=> heap1 = [5, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 73
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 5, 1, 12, 5, 12] : <type 'list'>
=> heap0 = [1, 5, 12, 12, 5] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 74
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 11] : <type 'list'>
heap0 = [1, 5, 12, 12, 5] : <type 'list'>
=> heap1 = [1, 5, 5, 11, 12, 12, 5] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 75
ACTION: heaps.heappop(heap1) 
heap1 = [1, 5, 5, 11, 12, 12, 5] : <type 'list'>
=> heap1 = [5, 5, 5, 11, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5, 11, 12, 12] : <type 'list'>
=> heap1 = [5, 11, 5, 12, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 77
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 5, 12, 12, 5] : <type 'list'>
heap1 = [5, 11, 5, 12, 12] : <type 'list'>
=> heap1 = [1, 5, 5, 11, 5, 12, 12, 5, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 78
ACTION: heaps.heappop(heap0) 
heap0 = [1, 5, 12, 12, 5] : <type 'list'>
=> heap0 = [5, 5, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 79
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 12, 12] : <type 'list'>
=> heap0 = [5, 12, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 80
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 12, 12] : <type 'list'>
heap1 = [1, 5, 5, 11, 5, 12, 12, 5, 12, 12] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [1, 5, 5, 5, 11, 5, 12, 12, 12, 12, 5, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 5, 5, 5, 11, 5, 12, 12, 12, 12, 5, 12, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 12, 11, 5, 12, 12, 12, 12, 5, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 82
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 12, 11, 5, 12, 12, 12, 12, 5, 12] : <type 'list'>
=> heap2 = [5, 11, 5, 12, 5, 5, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 5, 5, 11, 5, 12, 12, 5, 12, 12] : <type 'list'>
=> heap1 = [5, 5, 5, 11, 12, 12, 12, 5, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 84
ACTION: heaps.heappop(heap2) 
heap2 = [5, 11, 5, 12, 5, 5, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [5, 11, 5, 12, 5, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 12, 12] : <type 'list'>
=> heap0 = [12, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 86
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [12, 12] : <type 'list'>
=> heap0 = [12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 87
ACTION: heaps.heappop(heap2) 
heap2 = [5, 11, 5, 12, 5, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [5, 11, 12, 12, 5, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 88
ACTION: heaps.heappop(heap0) 
heap0 = [12] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 89
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 90
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [5, 11, 12, 12, 5, 12, 12, 12, 12] : <type 'list'>
heap1 = [5, 5, 5, 11, 12, 12, 12, 5, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 5, 12, 12, 12, 12, 12, 12, 12, 5, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 91
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5, 11, 12, 12, 12, 5, 12] : <type 'list'>
=> heap1 = [5, 11, 5, 5, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 5, 12, 12, 12, 12, 12, 12, 12, 5, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 93
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 5] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 5, 5, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 95
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 12, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [5, 11, 5, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 96
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 11, 5, 12, 12, 11, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [5, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 97
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 11, 5, 5, 12, 12, 12, 12] : <type 'list'>
=> heap1 = [5, 11, 12, 5, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 11, 12, 5, 12, 12, 12] : <type 'list'>
=> heap1 = [11, 5, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 5, 12, 12, 12, 12] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [5, 12, 12, 12, 12] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ef3128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 58
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0450298786 TOTAL RUNTIME
30 EXECUTED
2956 TOTAL TEST OPERATIONS
28.7984373569 TIME SPENT EXECUTING TEST OPERATIONS
0.399519205093 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8239552975 TIME SPENT CHECKING PROPERTIES
57.6223926544 TOTAL TIME SPENT RUNNING SUT
0.0126376152039 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 17                                                                # STEP 0
int0 = 14                                                                # STEP 1
int2 = 12                                                                # STEP 2
int1 = 15                                                                # STEP 3
int3 = 13                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heap2 = heaps.heapnew()                                                  # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 9
heaps.heappop(heap2)                                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 12
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 13
heaps.heappop(heap0)                                                    # STEP 14
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 20
heaps.heappush(heap1,int1)                                              # STEP 21
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
int1 = 8                                                                # STEP 23
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
heaps.heappop(heap1)                                                    # STEP 28
heaps.heappush(heap0,int4)                                              # STEP 29
int4 = 6                                                                # STEP 30
heaps.heappop(heap0)                                                    # STEP 31
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 32
heaps.heappush(heap1,int2)                                              # STEP 33
heaps.heappop(heap2)                                                    # STEP 34
heaps.heappop(heap1)                                                    # STEP 35
int2 = 13                                                               # STEP 36
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 37
heaps.heappop(heap0)                                                    # STEP 38
heaps.heappop(heap0)                                                    # STEP 39
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 40
heap1 = heaps.heapnew()                                                 # STEP 41
heaps.heappop(heap1)                                                    # STEP 42
heaps.heappush(heap0,int4)                                              # STEP 43
int4 = 5                                                                # STEP 44
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
heaps.heappop(heap1)                                                    # STEP 46
heaps.heappush(heap2,int2)                                              # STEP 47
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 48
int2 = 12                                                               # STEP 49
heaps.heappop(heap2)                                                    # STEP 50
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
heaps.heappush(heap0,int0)                                              # STEP 54
heaps.heappush(heap2,int0)                                              # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 57
heaps.heappush(heap0,int3)                                              # STEP 58
int0 = 7                                                                # STEP 59
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 60
int3 = 7                                                                # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 63
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 64
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
heaps.heappush(heap1,int4)                                              # STEP 66
heaps.heappush(heap2,int2)                                              # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
heaps.heappush(heap2,int4)                                              # STEP 69
heaps.heappush(heap1,int1)                                              # STEP 70
heap1 = heaps.heapnew()                                                 # STEP 71
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
heaps.heappush(heap1,int0)                                              # STEP 73
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 74
int0 = 15                                                               # STEP 75
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 76
heaps.heappop(heap2)                                                    # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
heaps.heappush(heap1,int1)                                              # STEP 79
heaps.heappop(heap2)                                                    # STEP 80
int2 = 10                                                               # STEP 81
heaps.heappop(heap0)                                                    # STEP 82
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 84
heaps.heappop(heap1)                                                    # STEP 85
heaps.heappop(heap2)                                                    # STEP 86
int1 = 6                                                                # STEP 87
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 88
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 89
int4 = 16                                                               # STEP 90
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 91
heaps.heappush(heap2,int4)                                              # STEP 92
heaps.heappop(heap0)                                                    # STEP 93
heaps.heappush(heap1,int1)                                              # STEP 94
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
heaps.heappush(heap0,int3)                                              # STEP 96
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dbbe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE 1
int2 = 18                                                                # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heaps.heappush(heap1,int2)                                               # STEP 3
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 5
heaps.heappush(heap1,int2)                                               # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heaps.heappush(heap1,int2)                                               # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
heaps.heappush(heap1,int2)                                              # STEP 12
int4 = 16                                                               # STEP 13
int0 = 5                                                                # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heap1 = heaps.heapnew()                                                 # STEP 19
heaps.heappush(heap1,int0)                                              # STEP 20
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 21
int1 = 12                                                               # STEP 22
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
int3 = 1                                                                # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
heaps.heappop(heap1)                                                    # STEP 29
heaps.heappush(heap2,int3)                                              # STEP 30
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 31
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 33
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 34
heaps.heappush(heap2,int0)                                              # STEP 35
int2 = 20                                                               # STEP 36
heaps.heappush(heap2,int3)                                              # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 39
heaps.heappop(heap2)                                                    # STEP 40
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
int3 = 8                                                                # STEP 45
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
heaps.heappush(heap0,int1)                                              # STEP 49
heaps.heappush(heap1,int0)                                              # STEP 50
heaps.heappop(heap2)                                                    # STEP 51
int1 = 11                                                               # STEP 52
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
int0 = 20                                                               # STEP 54
heaps.heappop(heap2)                                                    # STEP 55
heaps.heappop(heap0)                                                    # STEP 56
heaps.heappop(heap0)                                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
heaps.heappush(heap2,int2)                                              # STEP 59
heaps.heappush(heap1,int1)                                              # STEP 60
int2 = 10                                                               # STEP 61
heaps.heappop(heap1)                                                    # STEP 62
int1 = 5                                                                # STEP 63
heaps.heappop(heap2)                                                    # STEP 64
heaps.heappop(heap2)                                                    # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
heaps.heappop(heap2)                                                    # STEP 68
heaps.heappop(heap0)                                                    # STEP 69
heaps.heappop(heap2)                                                    # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 73
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 74
heaps.heappop(heap1)                                                    # STEP 75
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 77
heaps.heappop(heap0)                                                    # STEP 78
heaps.heappop(heap0)                                                    # STEP 79
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
heaps.heappop(heap2)                                                    # STEP 82
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
heaps.heappop(heap2)                                                    # STEP 84
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 86
heaps.heappop(heap2)                                                    # STEP 87
heaps.heappop(heap0)                                                    # STEP 88
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 89
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 90
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 91
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
heaps.heappop(heap2)                                                    # STEP 93
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
heaps.heappop(heap2)                                                    # STEP 95
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 96
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 97
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ef3128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40572.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #14 STEP #46 (0:00:30.012270) Mon May  1 02:28:03 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103492f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 62 steps

SAVING TEST AS failure.40572.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 9                                                                 # STEP 0
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 1
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 2
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int4 = 8                                                                 # STEP 3
ACTION: int4 = 8 
int4 = None : <type 'NoneType'>
=> int4 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 4
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 1                                                                 # STEP 5
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 6
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 9
ACTION: heaps.heappush(heap1,int3) 
int3 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [19] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 11
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 12
ACTION: heaps.heappush(heap1,int0) 
int0 = 1 : <type 'int'>
heap1 = [19] : <type 'list'>
=> heap1 = [1, 19] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 13
ACTION: int0 = 7 
int0 = 1 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 16
ACTION: heaps.heappush(heap2,int1) 
int1 = 12 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 17
ACTION: heaps.heappush(heap0,int3) 
int3 = 19 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 18
ACTION: int3 = 3 
int3 = 19 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 6                                                                # STEP 19
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [19] : <type 'list'>
heap2 = [12] : <type 'list'>
=> heap2 = [19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [19] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [19, 19] : <type 'list'>
heap0 = [19, 19] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap1 = [19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [19, 19] : <type 'list'>
heap0 = [19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 27
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19, 19] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [19, 19] : <type 'list'>
heap2 = [19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [19, 19] : <type 'list'>
heap1 = [19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 31
ACTION: heaps.heappush(heap1,int4) 
int4 = 8 : <type 'int'>
heap1 = [19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [8, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 32
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 33
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 34
ACTION: heaps.heappush(heap2,int4) 
int4 = 8 : <type 'int'>
heap2 = [19, 19, 19, 19] : <type 'list'>
=> heap2 = [8, 19, 19, 19, 19] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 35
ACTION: int4 = 6 
int4 = 8 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
int2 = 1                                                                # STEP 36
ACTION: int2 = 1 
int2 = 9 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 37
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [8, 19, 19, 19, 19] : <type 'list'>
heap0 = [19, 19] : <type 'list'>
=> heap0 = [8, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 39
ACTION: heaps.heappush(heap2,int2) 
int2 = 1 : <type 'int'>
heap2 = [19, 19, 19, 19] : <type 'list'>
=> heap2 = [1, 19, 19, 19, 19] : <type 'list'>
==================================================
int2 = 16                                                               # STEP 40
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 42
ACTION: heaps.heappush(heap1,int0) 
int0 = 7 : <type 'int'>
heap1 = [9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [7, 19, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
int0 = 17                                                               # STEP 43
ACTION: int0 = 17 
int0 = 7 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [7, 19, 9, 19, 19, 19, 19] : <type 'list'>
heap2 = [19, 19, 19, 19] : <type 'list'>
=> heap1 = [7, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 45
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [8, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [6, 8, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 46
ACTION: heaps.heappush(heap2,int1) 
int1 = 6 : <type 'int'>
heap2 = [19, 19, 19, 19] : <type 'list'>
=> heap2 = [6, 19, 19, 19, 19] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 47
ACTION: int1 = 13 
int1 = 6 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19] : <type 'list'>
==================================================
int4 = 10                                                               # STEP 49
ACTION: int4 = 10 
int4 = 6 : <type 'int'>
=> int4 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 50
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 8, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [6, 6, 8, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [19, 19, 19, 19] : <type 'list'>
heap1 = [7, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [7, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 52
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [7, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap2 = [7, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [7, 7, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 8, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [6, 8, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 54
ACTION: heap2 = heaps.heapnew() 
heap2 = [7, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 8, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [8, 19, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 56
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [8, 19, 8, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 7, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [7, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 60
ACTION: heaps.heappush(heap0,int4) 
int4 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034cbf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
16.1524500907 PERCENT COVERED
60.0559511185 TOTAL RUNTIME
24 EXECUTED
2072 TOTAL TEST OPERATIONS
29.3944296837 TIME SPENT EXECUTING TEST OPERATIONS
0.294746398926 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.389752388 TIME SPENT CHECKING PROPERTIES
58.7841820717 TOTAL TIME SPENT RUNNING SUT
0.0119113922119 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 9                                                                 # STEP 0
int3 = 19                                                                # STEP 1
heap2 = heaps.heapnew()                                                  # STEP 2
int4 = 8                                                                 # STEP 3
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 4
int0 = 1                                                                 # STEP 5
heap0 = heaps.heapnew()                                                  # STEP 6
int1 = 12                                                                # STEP 7
heap2 = heaps.heapmerge(heap1,heap0)                                     # STEP 8
heaps.heappush(heap1,int3)                                               # STEP 9
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 11
heaps.heappush(heap1,int0)                                              # STEP 12
int0 = 7                                                                # STEP 13
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
heaps.heappush(heap2,int1)                                              # STEP 16
heaps.heappush(heap0,int3)                                              # STEP 17
int3 = 3                                                                # STEP 18
int1 = 6                                                                # STEP 19
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 21
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 24
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 29
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
heaps.heappush(heap1,int4)                                              # STEP 31
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 32
heaps.heappush(heap1,int2)                                              # STEP 33
heaps.heappush(heap2,int4)                                              # STEP 34
int4 = 6                                                                # STEP 35
int2 = 1                                                                # STEP 36
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
heaps.heappush(heap2,int2)                                              # STEP 39
int2 = 16                                                               # STEP 40
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
heaps.heappush(heap1,int0)                                              # STEP 42
int0 = 17                                                               # STEP 43
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
heaps.heappush(heap0,int4)                                              # STEP 45
heaps.heappush(heap2,int1)                                              # STEP 46
int1 = 13                                                               # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
int4 = 10                                                               # STEP 49
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 50
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 52
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
heap2 = heaps.heapnew()                                                 # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 56
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
heaps.heappush(heap0,int4)                                              # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1034cbf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

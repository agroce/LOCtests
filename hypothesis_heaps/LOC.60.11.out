Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99360.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d69098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 64 steps

SAVING TEST AS failure.99360.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int4 = 14                                                                # STEP 1
ACTION: int4 = 14 
int4 = None : <type 'NoneType'>
=> int4 = 14 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 2
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 4
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                               # STEP 5
ACTION: heaps.heappush(heap0,int1) 
int1 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [6] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [6] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [6] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
int1 = 20                                                                # STEP 9
ACTION: int1 = 20 
int1 = 6 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [6] : <type 'list'>
heap2 = [6] : <type 'list'>
=> heap2 = [6, 6] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 11
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 12
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [6] : <type 'list'>
=> heap0 = [6, 6] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 13
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [6, 6] : <type 'list'>
=> heap2 = [6, 6, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 14
ACTION: heaps.heappush(heap2,int1) 
int1 = 20 : <type 'int'>
heap2 = [6, 6, 14] : <type 'list'>
=> heap2 = [6, 6, 14, 20] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 15
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 16
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [6, 6, 14, 20] : <type 'list'>
=> heap2 = [6, 6, 14, 20, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 18
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 14, 20, 14] : <type 'list'>
=> heap2 = [6, 14, 14, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [6, 14, 14, 20] : <type 'list'>
=> heap2 = [14, 20, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 20
ACTION: heaps.heappush(heap0,int2) 
int2 = 11 : <type 'int'>
heap0 = [6] : <type 'list'>
=> heap0 = [6, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 21
ACTION: heaps.heappop(heap2) 
heap2 = [14, 20, 14] : <type 'list'>
=> heap2 = [14, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [6, 11] : <type 'list'>
heap2 = [14, 20] : <type 'list'>
=> heap0 = [6, 11, 14, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 23
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [14, 20] : <type 'list'>
=> heap2 = [6, 20, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 24
ACTION: heaps.heappush(heap0,int1) 
int1 = 20 : <type 'int'>
heap0 = [6, 11, 14, 20] : <type 'list'>
=> heap0 = [6, 11, 14, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 20, 14] : <type 'list'>
=> heap2 = [14, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [6, 11, 14, 20, 20] : <type 'list'>
heap2 = [14, 20] : <type 'list'>
=> heap0 = [6, 11, 14, 14, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 27
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 11, 14, 14, 20, 20, 20] : <type 'list'>
=> heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [14, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 29
ACTION: heaps.heappop(heap2) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 30
ACTION: heaps.heappush(heap0,int2) 
int2 = 11 : <type 'int'>
heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
=> heap0 = [11, 14, 11, 20, 20, 20, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 31
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 14, 11, 20, 20, 20, 14] : <type 'list'>
=> heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 33
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 34
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
=> heap0 = [6, 14, 11, 20, 20, 20, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 35
ACTION: heaps.heappop(heap0) 
heap0 = [6, 14, 11, 20, 20, 20, 14] : <type 'list'>
=> heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 36
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
=> heap0 = [6, 14, 11, 20, 20, 20, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 14, 11, 20, 20, 20, 14] : <type 'list'>
heap2 = [14] : <type 'list'>
=> heap2 = [6, 6, 14, 11, 14, 11, 20, 20, 20, 14, 20, 20, 20, 14] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 38
ACTION: int4 = 2 
int4 = 14 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 14, 11, 14, 11, 20, 20, 20, 14, 20, 20, 20, 14] : <type 'list'>
=> heap2 = [6, 11, 14, 14, 14, 11, 20, 20, 20, 14, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 40
ACTION: heaps.heappop(heap0) 
heap0 = [6, 14, 11, 20, 20, 20, 14] : <type 'list'>
=> heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 41
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 13                                                               # STEP 42
ACTION: int1 = 13 
int1 = 20 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 11                                                               # STEP 43
ACTION: int2 = 11 
int2 = 11 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [11, 14, 14, 20, 20, 20] : <type 'list'>
=> heap0 = [14, 20, 14, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 11, 14, 14, 14, 11, 20, 20, 20, 14, 20, 20, 20] : <type 'list'>
=> heap2 = [11, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 46
ACTION: heaps.heappush(heap2,int2) 
int2 = 11 : <type 'int'>
heap2 = [11, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20] : <type 'list'>
=> heap2 = [11, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 20, 14, 20, 20] : <type 'list'>
=> heap0 = [14, 20, 20, 20] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 48
ACTION: int2 = 18 
int2 = 11 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 49
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 50
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [11, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [11, 11, 14, 14, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 51
ACTION: heaps.heappop(heap0) 
heap0 = [14, 20, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 52
ACTION: heaps.heappush(heap2,int3) 
int3 = 16 : <type 'int'>
heap2 = [11, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11] : <type 'list'>
=> heap2 = [11, 14, 14, 20, 14, 11, 16, 20, 20, 14, 20, 20, 11, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20, 20, 20] : <type 'list'>
=> heap0 = [20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20, 20] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 55
ACTION: heaps.heappush(heap0,int3) 
int3 = 16 : <type 'int'>
heap0 = [20] : <type 'list'>
=> heap0 = [16, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 56
ACTION: heaps.heappush(heap0,int0) 
int0 = 19 : <type 'int'>
heap0 = [16, 20] : <type 'list'>
=> heap0 = [16, 20, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 57
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [11, 11, 14, 14, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11] : <type 'list'>
=> heap1 = [11, 11, 14, 14, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 58
ACTION: heaps.heappush(heap1,int4) 
int4 = 2 : <type 'int'>
heap1 = [11, 11, 14, 14, 14, 14, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 19] : <type 'list'>
=> heap1 = [2, 11, 11, 14, 14, 14, 14, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 19, 20] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 59
ACTION: heap0 = heaps.heapnew() 
heap0 = [16, 20, 19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 60
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 61
ACTION: heaps.heappop(heap2) 
heap2 = [11, 14, 14, 20, 14, 11, 16, 20, 20, 14, 20, 20, 11, 20] : <type 'list'>
=> heap2 = [14, 14, 14, 20, 14, 11, 16, 20, 20, 20, 20, 20, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 62
ACTION: heaps.heappop(heap1) 
heap1 = [2, 11, 11, 14, 14, 14, 14, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 11, 20, 20, 20, 14, 20, 20, 11, 19, 20] : <type 'list'>
=> heap1 = [11, 14, 11, 11, 14, 14, 14, 14, 11, 20, 20, 20, 14, 20, 20, 11, 20, 14, 20, 20, 20, 20, 14, 20, 20, 11, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 63
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14, 14, 14, 20, 14, 11, 16, 20, 20, 20, 20, 20, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [11, 14, 14, 20, 14, 11, 16, 20, 20, 20, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d5da70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #14 STEP #39 (0:00:30.017304) Fri Apr 28 03:44:38 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f3e908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 96 steps

SAVING TEST AS failure.99360.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 8                                                                 # STEP 0
ACTION: int1 = 8 
int1 = None : <type 'NoneType'>
=> int1 = 8 : <type 'int'>
==================================================
int4 = 16                                                                # STEP 1
ACTION: int4 = 16 
int4 = None : <type 'NoneType'>
=> int4 = 16 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 3
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int3 = 7                                                                 # STEP 4
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 7
ACTION: heaps.heappush(heap0,int0) 
int0 = 18 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 8
ACTION: heaps.heappop(heap0) 
heap0 = [18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 11
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 13
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 10                                                               # STEP 14
ACTION: int0 = 10 
int0 = 18 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 15
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 18
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 19
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 21
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int4)                                              # STEP 22
ACTION: heaps.heappush(heap1,int4) 
int4 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 24
ACTION: heaps.heappop(heap1) 
heap1 = [16] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 25
ACTION: heaps.heappush(heap2,int0) 
int0 = 10 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
int4 = 10                                                               # STEP 26
ACTION: int4 = 10 
int4 = 16 : <type 'int'>
=> int4 = 10 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 27
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 29
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 30
ACTION: heaps.heappush(heap2,int3) 
int3 = 7 : <type 'int'>
heap2 = [10] : <type 'list'>
=> heap2 = [7, 10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 31
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [7, 10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 33
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 34
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 10] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 35
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 36
ACTION: heaps.heappush(heap2,int3) 
int3 = 7 : <type 'int'>
heap2 = [10] : <type 'list'>
=> heap2 = [7, 10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 10] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 38
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [10] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 40
ACTION: int3 = 13 
int3 = 7 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 42
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 43
ACTION: heaps.heappush(heap1,int3) 
int3 = 13 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 44
ACTION: heaps.heappop(heap1) 
heap1 = [13] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 46
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 3                                                                # STEP 48
ACTION: int1 = 3 
int1 = 8 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 49
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int2)                                              # STEP 50
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [8] : <type 'list'>
=> heap1 = [5, 8] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 51
ACTION: int3 = 19 
int3 = 13 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 8] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [8] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [8] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 55
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 56
ACTION: int2 = 10 
int2 = 5 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 57
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 58
ACTION: heaps.heappush(heap1,int1) 
int1 = 3 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [3] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 59
ACTION: heaps.heappush(heap1,int2) 
int2 = 10 : <type 'int'>
heap1 = [3] : <type 'list'>
=> heap1 = [3, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 60
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 10] : <type 'list'>
=> heap1 = [3, 3, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 61
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 3, 10, 10] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [3, 3, 3, 3, 10, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 62
ACTION: heaps.heappush(heap0,int0) 
int0 = 8 : <type 'int'>
heap0 = [3, 3, 3, 3, 10, 10, 10, 10] : <type 'list'>
=> heap0 = [3, 3, 3, 3, 10, 10, 10, 10, 8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 63
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 64
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 3, 3, 10, 10, 10, 10, 8] : <type 'list'>
=> heap0 = [3, 3, 3, 8, 10, 10, 10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 3, 8, 10, 10, 10, 10] : <type 'list'>
=> heap0 = [3, 8, 3, 10, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 66
ACTION: heaps.heappop(heap1) 
heap1 = [3, 3, 10, 10] : <type 'list'>
=> heap1 = [3, 10, 10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 67
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 10, 10] : <type 'list'>
=> heap1 = [10, 10] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 68
ACTION: int1 = 8 
int1 = 3 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 69
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                              # STEP 70
ACTION: heaps.heappush(heap0,int1) 
int1 = 8 : <type 'int'>
heap0 = [3, 8, 3, 10, 10, 10, 10] : <type 'list'>
=> heap0 = [3, 8, 3, 8, 10, 10, 10, 10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10] : <type 'list'>
=> heap1 = [10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 73
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 8, 3, 8, 10, 10, 10, 10] : <type 'list'>
=> heap0 = [3, 8, 10, 8, 10, 10, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 74
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [3, 8, 10, 8, 10, 10, 10] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [3, 8, 10, 8, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 75
ACTION: heaps.heappush(heap1,int3) 
int3 = 19 : <type 'int'>
heap1 = [3, 8, 10, 8, 10, 10, 10] : <type 'list'>
=> heap1 = [3, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 76
ACTION: int1 = 8 
int1 = 8 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 77
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [3, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
=> heap1 = [3, 8, 10, 8, 10, 10, 10, 19, 8] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 8, 10, 8, 10, 10, 10] : <type 'list'>
=> heap0 = [8, 8, 10, 10, 10, 10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 8, 10, 8, 10, 10, 10, 19, 8] : <type 'list'>
=> heap1 = [8, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 80
ACTION: heaps.heappush(heap2,int2) 
int2 = 10 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 81
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [10] : <type 'list'>
heap1 = [8, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
heap0 = [8, 8, 10, 10, 10, 10] : <type 'list'>
=> heap0 = [8, 8, 10, 10, 8, 10, 10, 10, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 82
ACTION: heaps.heappop(heap0) 
heap0 = [8, 8, 10, 10, 8, 10, 10, 10, 19] : <type 'list'>
=> heap0 = [8, 8, 10, 10, 19, 10, 10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8, 10, 10, 19, 10, 10, 10] : <type 'list'>
=> heap0 = [8, 10, 10, 10, 19, 10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 10, 10, 10, 19, 10, 10] : <type 'list'>
=> heap0 = [10, 10, 10, 10, 19, 10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 85
ACTION: heaps.heappop(heap2) 
heap2 = [10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 86
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 10, 10, 10, 19, 10] : <type 'list'>
heap1 = [8, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [8, 8, 10, 10, 10, 10, 10, 8, 10, 10, 10, 19, 10, 19] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 87
ACTION: int1 = 7 
int1 = 8 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
int0 = 19                                                               # STEP 88
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 89
ACTION: heap1 = heaps.heapnew() 
heap1 = [8, 8, 10, 8, 10, 10, 10, 19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 90
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8, 10, 10, 10, 10, 10, 8, 10, 10, 10, 19, 10, 19] : <type 'list'>
=> heap2 = [8, 10, 10, 8, 10, 10, 10, 19, 10, 10, 10, 19, 10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 91
ACTION: heaps.heappop(heap2) 
heap2 = [8, 10, 10, 8, 10, 10, 10, 19, 10, 10, 10, 19, 10] : <type 'list'>
=> heap2 = [10, 10, 10, 8, 10, 10, 10, 19, 10, 10, 10, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 92
ACTION: heaps.heappop(heap0) 
heap0 = [10, 10, 10, 10, 19, 10] : <type 'list'>
=> heap0 = [10, 10, 10, 10, 19] : <type 'list'>
==================================================
int2 = 6                                                                # STEP 93
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 94
ACTION: heaps.heappop(heap2) 
heap2 = [10, 10, 10, 8, 10, 10, 10, 19, 10, 10, 10, 19] : <type 'list'>
=> heap2 = [10, 8, 10, 10, 10, 10, 10, 19, 19, 10, 10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 8, 10, 10, 10, 10, 10, 19, 19, 10, 10] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [8, 10, 10, 10, 10, 10, 10, 19, 19, 10] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f3fea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 44
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0455570221 TOTAL RUNTIME
27 EXECUTED
2604 TOTAL TEST OPERATIONS
28.8906674385 TIME SPENT EXECUTING TEST OPERATIONS
0.377519130707 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8816635609 TIME SPENT CHECKING PROPERTIES
57.7723309994 TOTAL TIME SPENT RUNNING SUT
0.0119123458862 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int4 = 14                                                                # STEP 1
heap2 = heaps.heapnew()                                                  # STEP 2
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
heaps.heappop(heap0)                                                     # STEP 4
heaps.heappush(heap0,int1)                                               # STEP 5
heap2 = heaps.heapmerge(heap2,heap0)                                     # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heap0 = heaps.heapmerge(heap0,heap2)                                     # STEP 8
int1 = 20                                                                # STEP 9
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 10
int0 = 6                                                                # STEP 11
heaps.heappush(heap0,int0)                                              # STEP 12
heaps.heappush(heap2,int4)                                              # STEP 13
heaps.heappush(heap2,int1)                                              # STEP 14
int2 = 11                                                               # STEP 15
heaps.heappush(heap2,int4)                                              # STEP 16
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
heaps.heappop(heap2)                                                    # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heaps.heappush(heap0,int2)                                              # STEP 20
heaps.heappop(heap2)                                                    # STEP 21
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
heaps.heappush(heap2,int0)                                              # STEP 23
heaps.heappush(heap0,int1)                                              # STEP 24
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 26
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heaps.heappop(heap2)                                                    # STEP 29
heaps.heappush(heap0,int2)                                              # STEP 30
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 31
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
heaps.heappush(heap2,int4)                                              # STEP 33
heaps.heappush(heap0,int0)                                              # STEP 34
heaps.heappop(heap0)                                                    # STEP 35
heaps.heappush(heap0,int0)                                              # STEP 36
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
int4 = 2                                                                # STEP 38
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
heaps.heappop(heap0)                                                    # STEP 40
int3 = 16                                                               # STEP 41
int1 = 13                                                               # STEP 42
int2 = 11                                                               # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
heaps.heappush(heap2,int2)                                              # STEP 46
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
int2 = 18                                                               # STEP 48
int0 = 19                                                               # STEP 49
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 50
heaps.heappop(heap0)                                                    # STEP 51
heaps.heappush(heap2,int3)                                              # STEP 52
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
heaps.heappush(heap0,int3)                                              # STEP 55
heaps.heappush(heap0,int0)                                              # STEP 56
heaps.heappush(heap1,int0)                                              # STEP 57
heaps.heappush(heap1,int4)                                              # STEP 58
heap0 = heaps.heapnew()                                                 # STEP 59
heaps.heappop(heap0)                                                    # STEP 60
heaps.heappop(heap2)                                                    # STEP 61
heaps.heappop(heap1)                                                    # STEP 62
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 63
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d5da70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE 1
int1 = 8                                                                 # STEP 0
int4 = 16                                                                # STEP 1
int2 = 5                                                                 # STEP 2
int0 = 18                                                                # STEP 3
int3 = 7                                                                 # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
heaps.heappush(heap0,int0)                                               # STEP 7
heaps.heappop(heap0)                                                     # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
heap1 = heaps.heapnew()                                                 # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heaps.heappop(heap1)                                                    # STEP 13
int0 = 10                                                               # STEP 14
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 15
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 16
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 17
heaps.heappop(heap0)                                                    # STEP 18
heaps.heappop(heap0)                                                    # STEP 19
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 20
heaps.heappop(heap0)                                                    # STEP 21
heaps.heappush(heap1,int4)                                              # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
heaps.heappop(heap1)                                                    # STEP 24
heaps.heappush(heap2,int0)                                              # STEP 25
int4 = 10                                                               # STEP 26
int0 = 8                                                                # STEP 27
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
heap0 = heaps.heapnew()                                                 # STEP 29
heaps.heappush(heap2,int3)                                              # STEP 30
heaps.heappop(heap0)                                                    # STEP 31
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
heaps.heappop(heap0)                                                    # STEP 33
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 34
heaps.heappop(heap1)                                                    # STEP 35
heaps.heappush(heap2,int3)                                              # STEP 36
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
heaps.heappop(heap1)                                                    # STEP 38
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 39
int3 = 13                                                               # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 42
heaps.heappush(heap1,int3)                                              # STEP 43
heaps.heappop(heap1)                                                    # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
heaps.heappush(heap1,int1)                                              # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
int1 = 3                                                                # STEP 48
heaps.heappop(heap2)                                                    # STEP 49
heaps.heappush(heap1,int2)                                              # STEP 50
int3 = 19                                                               # STEP 51
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
heap2 = heaps.heapnew()                                                 # STEP 55
int2 = 10                                                               # STEP 56
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 57
heaps.heappush(heap1,int1)                                              # STEP 58
heaps.heappush(heap1,int2)                                              # STEP 59
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 60
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 61
heaps.heappush(heap0,int0)                                              # STEP 62
heaps.heappop(heap2)                                                    # STEP 63
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 64
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
heaps.heappop(heap1)                                                    # STEP 66
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 67
int1 = 8                                                                # STEP 68
heaps.heappop(heap2)                                                    # STEP 69
heaps.heappush(heap0,int1)                                              # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 73
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 74
heaps.heappush(heap1,int3)                                              # STEP 75
int1 = 8                                                                # STEP 76
heaps.heappush(heap1,int1)                                              # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
heaps.heappush(heap2,int2)                                              # STEP 80
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 81
heaps.heappop(heap0)                                                    # STEP 82
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
heaps.heappop(heap2)                                                    # STEP 85
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 86
int1 = 7                                                                # STEP 87
int0 = 19                                                               # STEP 88
heap1 = heaps.heapnew()                                                 # STEP 89
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 90
heaps.heappop(heap2)                                                    # STEP 91
heaps.heappop(heap0)                                                    # STEP 92
int2 = 6                                                                # STEP 93
heaps.heappop(heap2)                                                    # STEP 94
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f3fea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

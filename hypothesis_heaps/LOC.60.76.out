Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.684.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #12 STEP #65 (0:00:30.007857) Fri Apr 28 07:00:53 2017 [ 39 stmts 55 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104db6320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 54 steps

SAVING TEST AS failure.684.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 12                                                                # STEP 0
ACTION: int4 = 12 
int4 = None : <type 'NoneType'>
=> int4 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 20                                                                # STEP 2
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 3
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                               # STEP 5
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
int3 = 18                                                                # STEP 6
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int4 = 6                                                                 # STEP 7
ACTION: int4 = 6 
int4 = 12 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 8
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 9
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int0)                                              # STEP 10
ACTION: heaps.heappush(heap1,int0) 
int0 = 20 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 12
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 13
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 14
ACTION: heaps.heappush(heap1,int2) 
int2 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 2 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 18
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int4)                                              # STEP 20
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
int4 = 3                                                                # STEP 21
ACTION: int4 = 3 
int4 = 6 : <type 'int'>
=> int4 = 3 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [6] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 23
ACTION: int0 = 19 
int0 = 20 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 24
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [6] : <type 'list'>
heap1 = [6] : <type 'list'>
=> heap2 = [6, 6] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 27
ACTION: heaps.heappush(heap1,int4) 
int4 = 3 : <type 'int'>
heap1 = [6] : <type 'list'>
=> heap1 = [3, 6] : <type 'list'>
==================================================
int4 = 9                                                                # STEP 28
ACTION: int4 = 9 
int4 = 3 : <type 'int'>
=> int4 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [3, 6] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [3, 6] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [3, 6] : <type 'list'>
heap1 = [3, 6] : <type 'list'>
heap2 = [6] : <type 'list'>
=> heap2 = [3, 3, 6, 6] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 31
ACTION: heaps.heappush(heap0,int2) 
int2 = 4 : <type 'int'>
heap0 = [3, 6] : <type 'list'>
=> heap0 = [3, 6, 4] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [3, 6] : <type 'list'>
heap2 = [3, 3, 6, 6] : <type 'list'>
=> heap1 = [3, 3, 3, 6, 6, 6] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 33
ACTION: int2 = 10 
int2 = 4 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 6, 4] : <type 'list'>
=> heap0 = [4, 6] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 3, 3, 6, 6, 6] : <type 'list'>
=> heap1 = [3, 6, 3, 6, 6] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [4, 6] : <type 'list'>
heap2 = [3, 3, 6, 6] : <type 'list'>
=> heap0 = [3, 3, 4, 6, 6, 6] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 37
ACTION: heaps.heappush(heap2,int0) 
int0 = 19 : <type 'int'>
heap2 = [3, 3, 6, 6] : <type 'list'>
=> heap2 = [3, 3, 6, 6, 19] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 38
ACTION: int0 = 7 
int0 = 19 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 39
ACTION: heaps.heappush(heap2,int3) 
int3 = 18 : <type 'int'>
heap2 = [3, 3, 6, 6, 19] : <type 'list'>
=> heap2 = [3, 3, 6, 6, 19, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 40
ACTION: heaps.heappop(heap1) 
heap1 = [3, 6, 3, 6, 6] : <type 'list'>
=> heap1 = [3, 6, 6, 6] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 41
ACTION: int3 = 13 
int3 = 18 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 6, 6, 19, 18] : <type 'list'>
=> heap2 = [3, 6, 6, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 43
ACTION: heaps.heappop(heap1) 
heap1 = [3, 6, 6, 6] : <type 'list'>
=> heap1 = [6, 6, 6] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [3, 6, 6, 18, 19] : <type 'list'>
heap1 = [6, 6, 6] : <type 'list'>
=> heap1 = [3, 6, 6, 6, 6, 6, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [3, 6, 6, 6, 6, 6, 18, 19] : <type 'list'>
=> heap1 = [6, 6, 6, 19, 6, 6, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 46
ACTION: heaps.heappop(heap0) 
heap0 = [3, 3, 4, 6, 6, 6] : <type 'list'>
=> heap0 = [3, 6, 4, 6, 6] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 6, 6, 18, 19] : <type 'list'>
=> heap2 = [6, 18, 6, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 48
ACTION: heaps.heappop(heap2) 
heap2 = [6, 18, 6, 19] : <type 'list'>
=> heap2 = [6, 18, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 49
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [6, 18, 19] : <type 'list'>
heap0 = [3, 6, 4, 6, 6] : <type 'list'>
=> heap2 = [3, 6, 6, 4, 6, 6, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 50
ACTION: heaps.heappop(heap0) 
heap0 = [3, 6, 4, 6, 6] : <type 'list'>
=> heap0 = [4, 6, 6, 6] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 51
ACTION: heaps.heappush(heap2,int3) 
int3 = 13 : <type 'int'>
heap2 = [3, 6, 6, 4, 6, 6, 18, 19] : <type 'list'>
=> heap2 = [3, 6, 6, 4, 6, 6, 18, 19, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 6, 6, 4, 6, 6, 18, 19, 13] : <type 'list'>
=> heap2 = [6, 4, 6, 13, 6, 6, 18, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 4, 6, 13, 6, 6, 18, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [4, 6, 6, 13, 19, 6, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e78bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 70
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0569701195 TOTAL RUNTIME
24 EXECUTED
2324 TOTAL TEST OPERATIONS
29.4874176979 TIME SPENT EXECUTING TEST OPERATIONS
0.334213495255 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4555561543 TIME SPENT CHECKING PROPERTIES
58.9429738522 TOTAL TIME SPENT RUNNING SUT
0.0112450122833 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 12                                                                # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
int0 = 20                                                                # STEP 2
int1 = 17                                                                # STEP 3
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
heaps.heappush(heap2,int4)                                               # STEP 5
int3 = 18                                                                # STEP 6
int4 = 6                                                                 # STEP 7
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 8
heaps.heappop(heap2)                                                     # STEP 9
heaps.heappush(heap1,int0)                                              # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 12
int2 = 2                                                                # STEP 13
heaps.heappush(heap1,int2)                                              # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
int2 = 4                                                                # STEP 16
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heaps.heappop(heap2)                                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heaps.heappush(heap2,int4)                                              # STEP 20
int4 = 3                                                                # STEP 21
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 22
int0 = 19                                                               # STEP 23
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
heaps.heappush(heap1,int4)                                              # STEP 27
int4 = 9                                                                # STEP 28
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 29
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
heaps.heappush(heap0,int2)                                              # STEP 31
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
int2 = 10                                                               # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
heaps.heappush(heap2,int0)                                              # STEP 37
int0 = 7                                                                # STEP 38
heaps.heappush(heap2,int3)                                              # STEP 39
heaps.heappop(heap1)                                                    # STEP 40
int3 = 13                                                               # STEP 41
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
heaps.heappop(heap1)                                                    # STEP 43
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
heaps.heappop(heap0)                                                    # STEP 46
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
heaps.heappop(heap2)                                                    # STEP 48
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 49
heaps.heappop(heap0)                                                    # STEP 50
heaps.heappush(heap2,int3)                                              # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e78bd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

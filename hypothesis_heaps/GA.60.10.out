Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13848.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #67 (0:00:30.024877) Sun Apr 30 02:41:58 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a76518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 49 steps

SAVING TEST AS failure.13848.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 1
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 2
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
int1 = 18                                                                # STEP 3
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
int4 = 1                                                                 # STEP 4
ACTION: int4 = 1 
int4 = None : <type 'NoneType'>
=> int4 = 1 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 6
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                               # STEP 9
ACTION: heaps.heappush(heap1,int0) 
int0 = 8 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 10
ACTION: heaps.heappush(heap2,int2) 
int2 = 12 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 12
ACTION: int0 = 16 
int0 = 8 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 13
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 14
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [12] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [12] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 15
ACTION: heaps.heappush(heap0,int4) 
int4 = 1 : <type 'int'>
heap0 = [12] : <type 'list'>
=> heap0 = [1, 12] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 12 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [12] : <type 'list'>
heap0 = [1, 12] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [1, 12, 12] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 18
ACTION: int4 = 11 
int4 = 1 : <type 'int'>
=> int4 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 12, 12] : <type 'list'>
heap2 = [12] : <type 'list'>
heap0 = [1, 12] : <type 'list'>
=> heap0 = [1, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 20
ACTION: heaps.heappush(heap2,int1) 
int1 = 18 : <type 'int'>
heap2 = [12] : <type 'list'>
=> heap2 = [12, 18] : <type 'list'>
==================================================
int1 = 18                                                               # STEP 21
ACTION: int1 = 18 
int1 = 18 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 22
ACTION: heaps.heappush(heap0,int1) 
int1 = 18 : <type 'int'>
heap0 = [1, 12, 12, 12] : <type 'list'>
=> heap0 = [1, 12, 12, 12, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [1, 12, 12] : <type 'list'>
heap0 = [1, 12, 12, 12, 18] : <type 'list'>
heap2 = [12, 18] : <type 'list'>
=> heap2 = [1, 1, 12, 12, 12, 12, 12, 18] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 24
ACTION: int1 = 17 
int1 = 18 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 25
ACTION: heaps.heappush(heap0,int4) 
int4 = 11 : <type 'int'>
heap0 = [1, 12, 12, 12, 18] : <type 'list'>
=> heap0 = [1, 12, 11, 12, 18, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [1, 1, 12, 12, 12, 12, 12, 18] : <type 'list'>
heap0 = [1, 12, 11, 12, 18, 12] : <type 'list'>
heap1 = [1, 12, 12] : <type 'list'>
=> heap1 = [1, 1, 1, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 27
ACTION: heaps.heappush(heap2,int4) 
int4 = 11 : <type 'int'>
heap2 = [1, 1, 12, 12, 12, 12, 12, 18] : <type 'list'>
=> heap2 = [1, 1, 12, 11, 12, 12, 12, 18, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 28
ACTION: heaps.heappush(heap0,int3) 
int3 = 13 : <type 'int'>
heap0 = [1, 12, 11, 12, 18, 12] : <type 'list'>
=> heap0 = [1, 12, 11, 12, 18, 12, 13] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 29
ACTION: int4 = 14 
int4 = 11 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 30
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [1, 1, 12, 11, 12, 12, 12, 18, 12] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 31
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 12, 11, 12, 18, 12, 13] : <type 'list'>
heap2 = [1, 1, 1, 1, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 12, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 32
ACTION: heaps.heappush(heap1,int2) 
int2 = 4 : <type 'int'>
heap1 = [1, 1, 1, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18, 12] : <type 'list'>
=> heap1 = [1, 1, 1, 12, 12, 12, 4, 12, 12, 11, 12, 18, 18, 12, 12] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 33
ACTION: int2 = 7 
int2 = 4 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 1, 1, 12, 12, 12, 4, 12, 12, 11, 12, 18, 18, 12, 12] : <type 'list'>
=> heap1 = [1, 12, 1, 12, 12, 12, 4, 12, 12, 11, 12, 18, 18, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 12, 1, 12, 12, 12, 4, 12, 12, 11, 12, 18, 18, 12] : <type 'list'>
=> heap1 = [1, 12, 4, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 36
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [1, 12, 4, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18] : <type 'list'>
=> heap1 = [1, 12, 4, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18, 17] : <type 'list'>
==================================================
int1 = 19                                                               # STEP 37
ACTION: int1 = 19 
int1 = 17 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 38
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1, 1, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18, 12] : <type 'list'>
=> heap2 = [1, 1, 1, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 39
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 12, 4, 12, 12, 12, 12, 12, 12, 11, 12, 18, 18, 17] : <type 'list'>
=> heap1 = [4, 12, 12, 12, 12, 17, 12, 12, 12, 11, 12, 18, 18] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 40
ACTION: int3 = 9 
int3 = 13 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [4, 12, 12, 12, 12, 17, 12, 12, 12, 11, 12, 18, 18] : <type 'list'>
=> heap1 = [12, 12, 12, 12, 12, 17, 12, 18, 12, 11, 12, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 42
ACTION: heaps.heappush(heap0,int2) 
int2 = 7 : <type 'int'>
heap0 = [1, 1, 1, 1, 1, 12, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 43
ACTION: heaps.heappush(heap2,int2) 
int2 = 7 : <type 'int'>
heap2 = [1, 1, 1, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18] : <type 'list'>
=> heap2 = [1, 1, 1, 7, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 1, 1, 1, 1, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12] : <type 'list'>
heap2 = [1, 1, 1, 7, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 18, 12] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12, 18, 12, 18, 12] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 45
ACTION: int2 = 11 
int2 = 7 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [12, 12, 12, 12, 12, 17, 12, 18, 12, 11, 12, 18] : <type 'list'>
heap2 = [1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12, 18, 12, 18, 12] : <type 'list'>
heap0 = [1, 1, 1, 1, 1, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 11, 12, 12, 12, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 17, 12, 18, 12, 11, 12, 18, 18, 12, 13, 18, 12, 18, 12, 12, 18, 12, 18, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [12, 12, 12, 12, 12, 17, 12, 18, 12, 11, 12, 18] : <type 'list'>
heap2 = [1, 1, 1, 1, 1, 1, 1, 1, 7, 7, 11, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 12, 11, 12, 12, 12, 18, 12, 13, 18, 12, 18, 12, 12, 18, 12, 18, 12] : <type 'list'>
=> heap2 = [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 17, 12, 17, 12, 18, 12, 11, 12, 18, 18, 12, 11, 12, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12, 12, 12, 12, 12, 17, 12, 18, 12, 11, 12, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [12, 12, 12, 12, 12, 17, 12, 18, 18, 11, 12] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a79098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
15.6186612576 PERCENT COVERED
60.0616230965 TOTAL RUNTIME
17 EXECUTED
1648 TOTAL TEST OPERATIONS
33.6832077503 TIME SPENT EXECUTING TEST OPERATIONS
0.0657534599304 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
25.417071104 TIME SPENT CHECKING PROPERTIES
59.1002788544 TOTAL TIME SPENT RUNNING SUT
0.0264205932617 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int0 = 8                                                                 # STEP 1
int2 = 12                                                                # STEP 2
int1 = 18                                                                # STEP 3
int4 = 1                                                                 # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
heaps.heappush(heap1,int0)                                               # STEP 9
heaps.heappush(heap2,int2)                                              # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
int0 = 16                                                               # STEP 12
heap1 = heaps.heapnew()                                                 # STEP 13
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 14
heaps.heappush(heap0,int4)                                              # STEP 15
int2 = 4                                                                # STEP 16
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 17
int4 = 11                                                               # STEP 18
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
heaps.heappush(heap2,int1)                                              # STEP 20
int1 = 18                                                               # STEP 21
heaps.heappush(heap0,int1)                                              # STEP 22
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
int1 = 17                                                               # STEP 24
heaps.heappush(heap0,int4)                                              # STEP 25
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
heaps.heappush(heap2,int4)                                              # STEP 27
heaps.heappush(heap0,int3)                                              # STEP 28
int4 = 14                                                               # STEP 29
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 30
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 31
heaps.heappush(heap1,int2)                                              # STEP 32
int2 = 7                                                                # STEP 33
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heaps.heappush(heap1,int1)                                              # STEP 36
int1 = 19                                                               # STEP 37
heaps.heappop(heap2)                                                    # STEP 38
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 39
int3 = 9                                                                # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heaps.heappush(heap0,int2)                                              # STEP 42
heaps.heappush(heap2,int2)                                              # STEP 43
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
int2 = 11                                                               # STEP 45
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103a79098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

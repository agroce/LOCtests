Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69381.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #84 (0:00:30.000489) Tue May  2 19:20:18 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10367eb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 94 steps

SAVING TEST AS failure.69381.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 1
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 2
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 4
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 5
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 10
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 11
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                 # STEP 13
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 14
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 8                                                                # STEP 15
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int4 = 1                                                                # STEP 18
ACTION: int4 = 1 
int4 = None : <type 'NoneType'>
=> int4 = 1 : <type 'int'>
==================================================
int1 = 16                                                               # STEP 19
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 20
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 21
ACTION: heaps.heappush(heap2,int3) 
int3 = 8 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 22
ACTION: heaps.heappush(heap2,int4) 
int4 = 1 : <type 'int'>
heap2 = [8] : <type 'list'>
=> heap2 = [1, 8] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 16                                                               # STEP 24
ACTION: int4 = 16 
int4 = 1 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 8] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 26
ACTION: int3 = 14 
int3 = 8 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 28
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 29
ACTION: heap2 = heaps.heapnew() 
heap2 = [14] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 14 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 31
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 32
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 33
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 34
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 35
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 38
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 39
ACTION: heaps.heappush(heap0,int1) 
int1 = 16 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [16] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 41
ACTION: heaps.heappush(heap0,int2) 
int2 = 19 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 43
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 45
ACTION: int2 = 5 
int2 = 19 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 46
ACTION: int1 = 5 
int1 = 16 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 47
ACTION: heaps.heappush(heap2,int4) 
int4 = 16 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 48
ACTION: heaps.heappush(heap2,int0) 
int0 = 3 : <type 'int'>
heap2 = [16] : <type 'list'>
=> heap2 = [3, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [3, 16] : <type 'list'>
=> heap2 = [3, 3, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 50
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
int0 = 11                                                               # STEP 51
ACTION: int0 = 11 
int0 = 3 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 52
ACTION: heaps.heappush(heap1,int1) 
int1 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 53
ACTION: int4 = 5 
int4 = 16 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 54
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 55
ACTION: heaps.heappop(heap2) 
heap2 = [3, 3, 16, 16] : <type 'list'>
=> heap2 = [3, 16, 16] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 56
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [3, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [16, 16] : <type 'list'>
=> heap0 = [16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 59
ACTION: heaps.heappop(heap1) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 60
ACTION: heaps.heappush(heap2,int3) 
int3 = 8 : <type 'int'>
heap2 = [16, 16] : <type 'list'>
=> heap2 = [8, 16, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 61
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [16, 16] : <type 'list'>
heap2 = [8, 16, 16] : <type 'list'>
=> heap2 = [16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 62
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [16, 16] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 63
ACTION: heaps.heappush(heap0,int0) 
int0 = 11 : <type 'int'>
heap0 = [16] : <type 'list'>
=> heap0 = [11, 16] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 64
ACTION: int0 = 6 
int0 = 11 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 65
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16, 16, 16] : <type 'list'>
=> heap2 = [16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 67
ACTION: heaps.heappop(heap2) 
heap2 = [16, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [16] : <type 'list'>
heap0 = [11, 16] : <type 'list'>
=> heap2 = [11, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 70
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [11, 16, 16] : <type 'list'>
heap0 = [11, 16] : <type 'list'>
=> heap0 = [11, 11, 16, 16, 16, 16] : <type 'list'>
==================================================
int3 = 15                                                               # STEP 71
ACTION: int3 = 15 
int3 = 8 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 16, 16, 16, 16] : <type 'list'>
heap2 = [11, 16, 16] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [11, 11, 11, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 73
ACTION: heaps.heappop(heap0) 
heap0 = [11, 11, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 16, 16, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 74
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [11, 11, 11, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap2 = [11, 16, 16] : <type 'list'>
heap0 = [11, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 75
ACTION: heaps.heappop(heap2) 
heap2 = [11, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 11, 11, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [11, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 77
ACTION: heaps.heappush(heap0,int3) 
int3 = 15 : <type 'int'>
heap0 = [11, 11, 11, 11, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 16, 15, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 78
ACTION: heaps.heappop(heap0) 
heap0 = [11, 11, 11, 11, 16, 15, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 11, 11, 16, 16, 15, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
int3 = 7                                                                # STEP 79
ACTION: int3 = 7 
int3 = 15 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 80
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [11, 11, 11, 16, 16, 15, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap1 = [11, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 82
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [11, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 83
ACTION: heaps.heappop(heap0) 
heap0 = [11, 11, 11, 11, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 11, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 84
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16] : <type 'list'>
heap2 = [16] : <type 'list'>
heap1 = [11, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [11, 11, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 85
ACTION: heaps.heappop(heap2) 
heap2 = [16] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [11, 11, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 16, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 87
ACTION: heaps.heappop(heap1) 
heap1 = [11, 11, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [11, 16, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 88
ACTION: heaps.heappop(heap0) 
heap0 = [11, 16, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16] : <type 'list'>
=> heap0 = [11, 16, 15, 16, 16, 16, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 89
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 16, 11, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 11, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [11, 16, 15, 16, 16, 16, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 90
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 91
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 92
ACTION: heaps.heappop(heap1) 
heap1 = [11, 16, 15, 16, 16, 16, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [15, 16, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 93
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 16, 11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [11, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036a8f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 27
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0690720081 TOTAL RUNTIME
20 EXECUTED
1921 TOTAL TEST OPERATIONS
29.1762075424 TIME SPENT EXECUTING TEST OPERATIONS
0.257835626602 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1915688515 TIME SPENT CHECKING PROPERTIES
58.3677763939 TOTAL TIME SPENT RUNNING SUT
0.010529756546 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int2 = 19                                                                # STEP 1
heap1 = heaps.heapnew()                                                  # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
heaps.heappop(heap1)                                                     # STEP 4
heaps.heappop(heap1)                                                     # STEP 5
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
heap2 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heaps.heappop(heap1)                                                    # STEP 10
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
heap0 = heaps.heapnew()                                                 # STEP 13
heaps.heappop(heap0)                                                    # STEP 14
int3 = 8                                                                # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
int4 = 1                                                                # STEP 18
int1 = 16                                                               # STEP 19
heaps.heappop(heap0)                                                    # STEP 20
heaps.heappush(heap2,int3)                                              # STEP 21
heaps.heappush(heap2,int4)                                              # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
int4 = 16                                                               # STEP 24
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
int3 = 14                                                               # STEP 26
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
heaps.heappush(heap2,int3)                                              # STEP 28
heap2 = heaps.heapnew()                                                 # STEP 29
int3 = 8                                                                # STEP 30
heaps.heappop(heap0)                                                    # STEP 31
heaps.heappop(heap1)                                                    # STEP 32
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 33
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 34
heap2 = heaps.heapnew()                                                 # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
heap1 = heaps.heapnew()                                                 # STEP 38
heaps.heappush(heap0,int1)                                              # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
heaps.heappush(heap0,int2)                                              # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
heaps.heappop(heap1)                                                    # STEP 43
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
int2 = 5                                                                # STEP 45
int1 = 5                                                                # STEP 46
heaps.heappush(heap2,int4)                                              # STEP 47
heaps.heappush(heap2,int0)                                              # STEP 48
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
heap1 = heaps.heapnew()                                                 # STEP 50
int0 = 11                                                               # STEP 51
heaps.heappush(heap1,int1)                                              # STEP 52
int4 = 5                                                                # STEP 53
heaps.heappop(heap0)                                                    # STEP 54
heaps.heappop(heap2)                                                    # STEP 55
int1 = 11                                                               # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
heaps.heappop(heap1)                                                    # STEP 59
heaps.heappush(heap2,int3)                                              # STEP 60
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 61
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 62
heaps.heappush(heap0,int0)                                              # STEP 63
int0 = 6                                                                # STEP 64
heaps.heappop(heap1)                                                    # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
heaps.heappop(heap2)                                                    # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 70
int3 = 15                                                               # STEP 71
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 72
heaps.heappop(heap0)                                                    # STEP 73
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 74
heaps.heappop(heap2)                                                    # STEP 75
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
heaps.heappush(heap0,int3)                                              # STEP 77
heaps.heappop(heap0)                                                    # STEP 78
int3 = 7                                                                # STEP 79
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 82
heaps.heappop(heap0)                                                    # STEP 83
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 84
heaps.heappop(heap2)                                                    # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
heaps.heappop(heap1)                                                    # STEP 87
heaps.heappop(heap0)                                                    # STEP 88
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 89
heaps.heappop(heap2)                                                    # STEP 90
heaps.heappop(heap2)                                                    # STEP 91
heaps.heappop(heap1)                                                    # STEP 92
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 93
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036a8f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99693.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d63f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 58 steps

SAVING TEST AS failure.99693.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 16                                                                # STEP 0
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 1
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
int4 = 6                                                                 # STEP 2
ACTION: int4 = 6 
int4 = None : <type 'NoneType'>
=> int4 = 6 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 3
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 4
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                               # STEP 7
ACTION: heaps.heappush(heap2,int1) 
int1 = 4 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [4] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 8
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int1 = 8                                                                 # STEP 9
ACTION: int1 = 8 
int1 = 4 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 10
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 11
ACTION: heaps.heappush(heap2,int0) 
int0 = 16 : <type 'int'>
heap2 = [6] : <type 'list'>
=> heap2 = [6, 16] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 12
ACTION: int4 = 5 
int4 = 6 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 16] : <type 'list'>
=> heap2 = [6, 6, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 14
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 16, 16] : <type 'list'>
=> heap2 = [6, 16, 16] : <type 'list'>
==================================================
int0 = 2                                                                # STEP 15
ACTION: int0 = 2 
int0 = 16 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 16
ACTION: heaps.heappop(heap2) 
heap2 = [6, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 17
ACTION: heaps.heappush(heap2,int0) 
int0 = 2 : <type 'int'>
heap2 = [16, 16] : <type 'list'>
=> heap2 = [2, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 18
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [2, 16, 16] : <type 'list'>
=> heap2 = [2, 5, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [2, 5, 16, 16] : <type 'list'>
=> heap2 = [5, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 20
ACTION: heaps.heappop(heap2) 
heap2 = [5, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 21
ACTION: heaps.heappop(heap2) 
heap2 = [16, 16] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 22
ACTION: heaps.heappush(heap2,int0) 
int0 = 2 : <type 'int'>
heap2 = [16] : <type 'list'>
=> heap2 = [2, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [2, 16] : <type 'list'>
=> heap2 = [2, 2, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 24
ACTION: heaps.heappush(heap2,int3) 
int3 = 18 : <type 'int'>
heap2 = [2, 2, 16, 16] : <type 'list'>
=> heap2 = [2, 2, 16, 16, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 25
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [2, 2, 16, 16, 18] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [2, 2, 2, 2, 16, 16, 16, 16, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [2, 2, 2, 2, 16, 16, 16, 16, 18, 18] : <type 'list'>
heap2 = [2, 2, 16, 16, 18] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 27
ACTION: heaps.heappop(heap2) 
heap2 = [2, 2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18] : <type 'list'>
==================================================
int3 = 12                                                               # STEP 28
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 29
ACTION: heaps.heappop(heap2) 
heap2 = [2, 2, 2, 2, 2, 2, 2, 16, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [2, 2, 2, 16, 2, 2, 2, 18, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18] : <type 'list'>
==================================================
int4 = 3                                                                # STEP 30
ACTION: int4 = 3 
int4 = 5 : <type 'int'>
=> int4 = 3 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 31
ACTION: heaps.heappush(heap1,int0) 
int0 = 2 : <type 'int'>
heap1 = [2, 2, 2, 2, 16, 16, 16, 16, 18, 18] : <type 'list'>
=> heap1 = [2, 2, 2, 2, 2, 16, 16, 16, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 32
ACTION: heaps.heappop(heap1) 
heap1 = [2, 2, 2, 2, 2, 16, 16, 16, 18, 18, 16] : <type 'list'>
=> heap1 = [2, 2, 2, 16, 2, 16, 16, 16, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 33
ACTION: heaps.heappop(heap1) 
heap1 = [2, 2, 2, 16, 2, 16, 16, 16, 18, 18] : <type 'list'>
=> heap1 = [2, 2, 2, 16, 18, 16, 16, 16, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 2, 2, 16, 18, 16, 16, 16, 18] : <type 'list'>
=> heap1 = [2, 16, 2, 16, 18, 16, 16, 18] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 35
ACTION: int0 = 18 
int0 = 2 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 16, 2, 2, 2, 18, 16, 16, 16, 16, 16, 16, 16, 18, 18, 18] : <type 'list'>
=> heap2 = [2, 2, 2, 16, 16, 2, 2, 18, 16, 18, 16, 16, 16, 16, 16, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 16, 16, 2, 2, 18, 16, 18, 16, 16, 16, 16, 16, 18, 18] : <type 'list'>
=> heap2 = [2, 16, 2, 16, 16, 2, 2, 18, 18, 18, 16, 16, 16, 16, 16, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 38
ACTION: heaps.heappush(heap1,int3) 
int3 = 12 : <type 'int'>
heap1 = [2, 16, 2, 16, 18, 16, 16, 18] : <type 'list'>
=> heap1 = [2, 12, 2, 16, 18, 16, 16, 18, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [2, 12, 2, 16, 18, 16, 16, 18, 16] : <type 'list'>
heap2 = [2, 16, 2, 16, 16, 2, 2, 18, 18, 18, 16, 16, 16, 16, 16, 18] : <type 'list'>
=> heap2 = [2, 2, 12, 2, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18, 16] : <type 'list'>
==================================================
int3 = 20                                                               # STEP 40
ACTION: int3 = 20 
int3 = 12 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [2, 12, 2, 16, 18, 16, 16, 18, 16] : <type 'list'>
=> heap1 = [2, 12, 16, 16, 18, 16, 16, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 12, 2, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18, 16] : <type 'list'>
=> heap2 = [2, 2, 12, 16, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 12, 16, 16, 18, 16, 16, 18] : <type 'list'>
=> heap1 = [12, 16, 16, 18, 18, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 44
ACTION: heaps.heappush(heap1,int4) 
int4 = 3 : <type 'int'>
heap1 = [12, 16, 16, 18, 18, 16, 16] : <type 'list'>
=> heap1 = [3, 12, 16, 16, 18, 16, 16, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 45
ACTION: heaps.heappush(heap2,int3) 
int3 = 20 : <type 'int'>
heap2 = [2, 2, 12, 16, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18] : <type 'list'>
=> heap2 = [2, 2, 12, 16, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18, 20] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 46
ACTION: int3 = 9 
int3 = 20 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [2, 2, 12, 16, 12, 2, 16, 16, 18, 16, 16, 18, 16, 18, 16, 16, 18, 20] : <type 'list'>
=> heap2 = [2, 12, 12, 16, 16, 2, 16, 16, 18, 20, 16, 18, 16, 18, 16, 16, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 48
ACTION: heaps.heappush(heap2,int2) 
int2 = 11 : <type 'int'>
heap2 = [2, 12, 12, 16, 16, 2, 16, 16, 18, 20, 16, 18, 16, 18, 16, 16, 18] : <type 'list'>
=> heap2 = [2, 11, 12, 12, 16, 2, 16, 16, 16, 20, 16, 18, 16, 18, 16, 16, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 49
ACTION: heaps.heappush(heap1,int2) 
int2 = 11 : <type 'int'>
heap1 = [3, 12, 16, 16, 18, 16, 16, 18] : <type 'list'>
=> heap1 = [3, 11, 16, 12, 18, 16, 16, 18, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 50
ACTION: heaps.heappop(heap2) 
heap2 = [2, 11, 12, 12, 16, 2, 16, 16, 16, 20, 16, 18, 16, 18, 16, 16, 18, 18] : <type 'list'>
=> heap2 = [11, 12, 12, 16, 16, 2, 16, 16, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [11, 12, 12, 16, 16, 2, 16, 16, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
heap1 = [3, 11, 16, 12, 18, 16, 16, 18, 16] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [3, 11, 11, 12, 12, 16, 16, 2, 16, 16, 16, 16, 12, 18, 16, 16, 18, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 52
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [3, 11, 16, 12, 18, 16, 16, 18, 16] : <type 'list'>
=> heap1 = [3, 8, 16, 12, 11, 16, 16, 18, 16, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 8, 16, 12, 11, 16, 16, 18, 16, 18] : <type 'list'>
=> heap1 = [8, 11, 16, 12, 18, 16, 16, 18, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 54
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [8, 11, 16, 12, 18, 16, 16, 18, 16] : <type 'list'>
heap2 = [11, 12, 12, 16, 16, 2, 16, 16, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
=> heap2 = [8, 11, 11, 12, 12, 16, 12, 16, 16, 2, 16, 16, 16, 18, 16, 16, 18, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 55
ACTION: int1 = 13 
int1 = 8 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [8, 11, 11, 12, 12, 16, 12, 16, 16, 2, 16, 16, 16, 18, 16, 16, 18, 16, 20, 16, 18, 16, 18, 16, 18, 18] : <type 'list'>
=> heap2 = [11, 12, 11, 16, 12, 16, 12, 16, 16, 2, 16, 16, 16, 18, 16, 18, 18, 16, 20, 16, 18, 16, 18, 16, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 12, 11, 16, 12, 16, 12, 16, 16, 2, 16, 16, 16, 18, 16, 18, 18, 16, 20, 16, 18, 16, 18, 16, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [11, 12, 12, 16, 12, 16, 16, 16, 16, 2, 16, 16, 16, 18, 18, 18, 18, 16, 20, 16, 18, 16, 18, 16] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d48908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #14 STEP #60 (0:00:30.015632) Fri Apr 28 04:38:57 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 54
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0579609871 TOTAL RUNTIME
27 EXECUTED
2612 TOTAL TEST OPERATIONS
29.4400799274 TIME SPENT EXECUTING TEST OPERATIONS
0.367336511612 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4579088688 TIME SPENT CHECKING PROPERTIES
58.8979887962 TOTAL TIME SPENT RUNNING SUT
0.0126736164093 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 16                                                                # STEP 0
int2 = 11                                                                # STEP 1
int4 = 6                                                                 # STEP 2
int1 = 4                                                                 # STEP 3
int3 = 18                                                                # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heaps.heappush(heap2,int1)                                               # STEP 7
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 8
int1 = 8                                                                 # STEP 9
heaps.heappush(heap2,int4)                                              # STEP 10
heaps.heappush(heap2,int0)                                              # STEP 11
int4 = 5                                                                # STEP 12
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 14
int0 = 2                                                                # STEP 15
heaps.heappop(heap2)                                                    # STEP 16
heaps.heappush(heap2,int0)                                              # STEP 17
heaps.heappush(heap2,int4)                                              # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heaps.heappop(heap2)                                                    # STEP 20
heaps.heappop(heap2)                                                    # STEP 21
heaps.heappush(heap2,int0)                                              # STEP 22
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 23
heaps.heappush(heap2,int3)                                              # STEP 24
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 25
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
heaps.heappop(heap2)                                                    # STEP 27
int3 = 12                                                               # STEP 28
heaps.heappop(heap2)                                                    # STEP 29
int4 = 3                                                                # STEP 30
heaps.heappush(heap1,int0)                                              # STEP 31
heaps.heappop(heap1)                                                    # STEP 32
heaps.heappop(heap1)                                                    # STEP 33
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
int0 = 18                                                               # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 37
heaps.heappush(heap1,int3)                                              # STEP 38
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
int3 = 20                                                               # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
heaps.heappush(heap1,int4)                                              # STEP 44
heaps.heappush(heap2,int3)                                              # STEP 45
int3 = 9                                                                # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
heaps.heappush(heap2,int2)                                              # STEP 48
heaps.heappush(heap1,int2)                                              # STEP 49
heaps.heappop(heap2)                                                    # STEP 50
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
heaps.heappush(heap1,int1)                                              # STEP 52
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 54
int1 = 13                                                               # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104d48908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69654.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #38 (0:00:30.018927) Tue May  2 20:08:38 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10457bb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 46 steps

SAVING TEST AS failure.69654.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 10                                                                # STEP 0
ACTION: int4 = 10 
int4 = None : <type 'NoneType'>
=> int4 = 10 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 5                                                                 # STEP 2
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 3
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                     # STEP 4
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 11                                                                # STEP 5
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 6
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                     # STEP 7
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 8
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 9
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int1)                                              # STEP 10
ACTION: heaps.heappush(heap1,int1) 
int1 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 12
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [11] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [11] : <type 'list'>
=> heap1 = [11, 11] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 15
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int1 = 20                                                               # STEP 16
ACTION: int1 = 20 
int1 = 11 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 17
ACTION: heaps.heappush(heap1,int4) 
int4 = 10 : <type 'int'>
heap1 = [11, 11] : <type 'list'>
=> heap1 = [10, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 18
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [10, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 20
ACTION: heaps.heappop(heap2) 
heap2 = [10, 11, 11] : <type 'list'>
=> heap2 = [11, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 21
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [10, 11, 11] : <type 'list'>
=> heap1 = [5, 10, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 10, 11, 11] : <type 'list'>
heap2 = [11, 11] : <type 'list'>
=> heap2 = [5, 10, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 23
ACTION: heaps.heappush(heap0,int4) 
int4 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 24
ACTION: int4 = 6 
int4 = 10 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 10, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 26
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [11, 11, 11, 11] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 27
ACTION: int2 = 10 
int2 = 5 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 10, 11, 11] : <type 'list'>
heap2 = [11, 11, 11, 11] : <type 'list'>
heap0 = [10] : <type 'list'>
=> heap0 = [5, 10, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 10, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap2 = [11, 11, 11, 11] : <type 'list'>
=> heap2 = [5, 5, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 30
ACTION: heap1 = heaps.heapnew() 
heap1 = [5, 10, 11, 11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 10, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [10, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [5, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 33
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [5, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 35
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 11, 11, 11, 11] : <type 'list'>
heap2 = [10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 38
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 39
ACTION: heaps.heappop(heap0) 
heap0 = [11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 41
ACTION: heaps.heappop(heap2) 
heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap0 = [11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 45
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10458ee60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 31
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0821428299 TOTAL RUNTIME
20 EXECUTED
1877 TOTAL TEST OPERATIONS
29.4931349754 TIME SPENT EXECUTING TEST OPERATIONS
0.244569301605 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.5342345238 TIME SPENT CHECKING PROPERTIES
59.0273694992 TOTAL TIME SPENT RUNNING SUT
0.0112369060516 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 10                                                                # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
int2 = 5                                                                 # STEP 2
heap2 = heaps.heapnew()                                                  # STEP 3
heap0 = heaps.heapmerge(heap2,heap1)                                     # STEP 4
int1 = 11                                                                # STEP 5
int3 = 20                                                                # STEP 6
heap1 = heaps.heapmerge(heap0,heap2)                                     # STEP 7
heaps.heappop(heap2)                                                     # STEP 8
heaps.heappop(heap2)                                                     # STEP 9
heaps.heappush(heap1,int1)                                              # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 12
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 13
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
int0 = 18                                                               # STEP 15
int1 = 20                                                               # STEP 16
heaps.heappush(heap1,int4)                                              # STEP 17
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 18
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
heaps.heappop(heap2)                                                    # STEP 20
heaps.heappush(heap1,int2)                                              # STEP 21
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 22
heaps.heappush(heap0,int4)                                              # STEP 23
int4 = 6                                                                # STEP 24
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 25
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 26
int2 = 10                                                               # STEP 27
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 28
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 29
heap1 = heaps.heapnew()                                                 # STEP 30
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 35
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 38
heaps.heappop(heap0)                                                    # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
heaps.heappop(heap2)                                                    # STEP 41
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10458ee60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

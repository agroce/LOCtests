Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1047.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #12 STEP #41 (0:00:30.012826) Fri Apr 28 08:02:15 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103de93f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 75 steps

SAVING TEST AS failure.1047.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 7                                                                 # STEP 0
ACTION: int4 = 7 
int4 = None : <type 'NoneType'>
=> int4 = 7 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 1
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 2
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int0 = 8                                                                 # STEP 3
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 4
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 10
ACTION: heaps.heappush(heap0,int3) 
int3 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 11
ACTION: int3 = 4 
int3 = 10 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 12
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 13
ACTION: int3 = 3 
int3 = 4 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 15
ACTION: heaps.heappush(heap0,int2) 
int2 = 7 : <type 'int'>
heap0 = [10] : <type 'list'>
=> heap0 = [7, 10] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 16
ACTION: int2 = 4 
int2 = 7 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 19
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [7, 10] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [7, 7, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 10] : <type 'list'>
heap2 = [7, 7, 10, 10] : <type 'list'>
=> heap0 = [7, 7, 7, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 22
ACTION: heaps.heappush(heap2,int4) 
int4 = 7 : <type 'int'>
heap2 = [7, 7, 10, 10] : <type 'list'>
=> heap2 = [7, 7, 10, 10, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 7, 7, 10, 10, 10] : <type 'list'>
heap2 = [7, 7, 10, 10, 7] : <type 'list'>
=> heap2 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 24
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 7] : <type 'list'>
=> heap2 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [7, 7, 7, 10, 10, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 26
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 27
ACTION: heaps.heappush(heap1,int0) 
int0 = 8 : <type 'int'>
heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 28
ACTION: int4 = 5 
int4 = 7 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 29
ACTION: int0 = 15 
int0 = 8 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 30
ACTION: heaps.heappush(heap1,int1) 
int1 = 11 : <type 'int'>
heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 31
ACTION: heaps.heappop(heap2) 
heap2 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10] : <type 'list'>
=> heap2 = [7, 7, 7, 10, 7, 10, 10, 10, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8, 11] : <type 'list'>
heap2 = [7, 7, 7, 10, 7, 10, 10, 10, 10] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8, 10, 7, 10, 10, 10, 10, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 33
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 10, 8, 10, 7, 10, 10, 10, 10, 11] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 11, 10] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 34
ACTION: int1 = 14 
int1 = 11 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int4 = 7                                                                # STEP 35
ACTION: int4 = 7 
int4 = 5 : <type 'int'>
=> int4 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 7, 7, 10, 10, 10] : <type 'list'>
heap2 = [7, 7, 7, 10, 7, 10, 10, 10, 10] : <type 'list'>
=> heap2 = [7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 7, 10, 10, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 37
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 11, 10] : <type 'list'>
heap0 = [7, 7, 7, 10, 10, 10] : <type 'list'>
=> heap0 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 38
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 11, 10] : <type 'list'>
heap0 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10] : <type 'list'>
=> heap1 = [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10] : <type 'list'>
heap1 = [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 11, 10] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 40
ACTION: heaps.heappush(heap1,int2) 
int2 = 4 : <type 'int'>
heap1 = [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10] : <type 'list'>
=> heap1 = [4, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 8] : <type 'list'>
==================================================
int2 = 19                                                               # STEP 41
ACTION: int2 = 19 
int2 = 4 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 42
ACTION: heaps.heappush(heap2,int1) 
int1 = 14 : <type 'int'>
heap2 = [7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 7, 10, 10, 10, 10] : <type 'list'>
=> heap2 = [7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 7, 10, 10, 10, 10, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 43
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [7, 7, 7, 7, 7, 7, 10, 10, 10, 10, 7, 10, 10, 10, 10, 14] : <type 'list'>
=> heap2 = [3, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10] : <type 'list'>
==================================================
int3 = 6                                                                # STEP 44
ACTION: int3 = 6 
int3 = 3 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [4, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 8] : <type 'list'>
=> heap1 = [5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 46
ACTION: int1 = 16 
int1 = 14 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [3, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10] : <type 'list'>
heap1 = [5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10] : <type 'list'>
=> heap1 = [3, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 48
ACTION: heaps.heappush(heap0,int1) 
int1 = 16 : <type 'int'>
heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 11, 10] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 11, 10, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [3, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10] : <type 'list'>
heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 11, 10, 16] : <type 'list'>
=> heap0 = [3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10, 14, 10] : <type 'list'>
==================================================
int1 = 10                                                               # STEP 50
ACTION: int1 = 10 
int1 = 16 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 51
ACTION: heap2 = heaps.heapnew() 
heap2 = [3, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 52
ACTION: heaps.heappush(heap2,int3) 
int3 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 53
ACTION: heaps.heappush(heap0,int1) 
int1 = 10 : <type 'int'>
heap0 = [3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10, 14, 10] : <type 'list'>
=> heap0 = [3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10, 14, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 54
ACTION: heap0 = heaps.heapnew() 
heap0 = [3, 3, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 10, 10, 10, 14, 10, 14, 10, 10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 55
ACTION: heaps.heappush(heap0,int4) 
int4 = 7 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 56
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [3, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10] : <type 'list'>
heap2 = [6] : <type 'list'>
heap0 = [7] : <type 'list'>
=> heap0 = [3, 5, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 57
ACTION: int1 = 12 
int1 = 10 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 58
ACTION: heaps.heappush(heap0,int0) 
int0 = 15 : <type 'int'>
heap0 = [3, 5, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10] : <type 'list'>
=> heap0 = [3, 5, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 5, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10, 15] : <type 'list'>
=> heap0 = [5, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 60
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [6] : <type 'list'>
heap0 = [5, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
heap1 = [3, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 11, 10, 14, 10] : <type 'list'>
=> heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [6] : <type 'list'>
heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
=> heap2 = [5, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
int3 = 11                                                               # STEP 62
ACTION: int3 = 11 
int3 = 6 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 63
ACTION: heaps.heappush(heap1,int2) 
int2 = 19 : <type 'int'>
heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
=> heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10, 19] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 64
ACTION: int0 = 20 
int0 = 15 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int4 = 9                                                                # STEP 65
ACTION: int4 = 9 
int4 = 7 : <type 'int'>
=> int4 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 66
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10, 19] : <type 'list'>
heap2 = [5, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
heap0 = [5, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
=> heap0 = [5, 5, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 11, 15, 11, 10, 14, 10, 15, 11, 10, 14, 10, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 11, 15, 11, 10, 14, 10, 15, 11, 10, 14, 10, 19] : <type 'list'>
=> heap0 = [5, 6, 6, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 10, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 11, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 11, 15, 11, 10, 14, 10, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 68
ACTION: heaps.heappop(heap1) 
heap1 = [5, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10, 19] : <type 'list'>
=> heap1 = [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 69
ACTION: heap0 = heaps.heapnew() 
heap0 = [5, 6, 6, 7, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 10, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 11, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 11, 15, 11, 10, 14, 10, 15, 11, 10, 14, 10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 70
ACTION: heaps.heappop(heap2) 
heap2 = [5, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 10] : <type 'list'>
=> heap2 = [6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14] : <type 'list'>
==================================================
int2 = 16                                                               # STEP 71
ACTION: int2 = 16 
int2 = 19 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 15, 11, 10, 14, 10] : <type 'list'>
heap2 = [6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 19, 15, 11, 10, 14, 10] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 73
ACTION: heaps.heappush(heap1,int2) 
int2 = 16 : <type 'int'>
heap1 = [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 15, 11, 10, 14, 10] : <type 'list'>
=> heap1 = [6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 19, 15, 11, 10, 14, 10, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 19, 15, 11, 10, 14, 10] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [6, 6, 6, 7, 6, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 10, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 10, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 7, 10, 10, 7, 10, 7, 10, 10, 10, 10, 10, 10, 7, 10, 10, 8, 10, 7, 10, 10, 10, 10, 10, 10, 10, 11, 15, 11, 10, 14, 19, 15, 11, 10, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dcc098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 99
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0435140133 TOTAL RUNTIME
23 EXECUTED
2274 TOTAL TEST OPERATIONS
29.725605011 TIME SPENT EXECUTING TEST OPERATIONS
0.080242395401 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1411771774 TIME SPENT CHECKING PROPERTIES
58.8667821884 TOTAL TIME SPENT RUNNING SUT
0.0121767520905 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 7                                                                 # STEP 0
int2 = 7                                                                 # STEP 1
int1 = 11                                                                # STEP 2
int0 = 8                                                                 # STEP 3
int3 = 10                                                                # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
heap1 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
heaps.heappush(heap0,int3)                                              # STEP 10
int3 = 4                                                                # STEP 11
heaps.heappush(heap1,int3)                                              # STEP 12
int3 = 3                                                                # STEP 13
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
heaps.heappush(heap0,int2)                                              # STEP 15
int2 = 4                                                                # STEP 16
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heap1 = heaps.heapnew()                                                 # STEP 19
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 21
heaps.heappush(heap2,int4)                                              # STEP 22
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 23
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 24
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 26
heaps.heappush(heap1,int0)                                              # STEP 27
int4 = 5                                                                # STEP 28
int0 = 15                                                               # STEP 29
heaps.heappush(heap1,int1)                                              # STEP 30
heaps.heappop(heap2)                                                    # STEP 31
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
heaps.heappush(heap1,int4)                                              # STEP 33
int1 = 14                                                               # STEP 34
int4 = 7                                                                # STEP 35
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 37
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 38
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 39
heaps.heappush(heap1,int2)                                              # STEP 40
int2 = 19                                                               # STEP 41
heaps.heappush(heap2,int1)                                              # STEP 42
heaps.heappush(heap2,int3)                                              # STEP 43
int3 = 6                                                                # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
int1 = 16                                                               # STEP 46
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 47
heaps.heappush(heap0,int1)                                              # STEP 48
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
int1 = 10                                                               # STEP 50
heap2 = heaps.heapnew()                                                 # STEP 51
heaps.heappush(heap2,int3)                                              # STEP 52
heaps.heappush(heap0,int1)                                              # STEP 53
heap0 = heaps.heapnew()                                                 # STEP 54
heaps.heappush(heap0,int4)                                              # STEP 55
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 56
int1 = 12                                                               # STEP 57
heaps.heappush(heap0,int0)                                              # STEP 58
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 60
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
int3 = 11                                                               # STEP 62
heaps.heappush(heap1,int2)                                              # STEP 63
int0 = 20                                                               # STEP 64
int4 = 9                                                                # STEP 65
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 66
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
heaps.heappop(heap1)                                                    # STEP 68
heap0 = heaps.heapnew()                                                 # STEP 69
heaps.heappop(heap2)                                                    # STEP 70
int2 = 16                                                               # STEP 71
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
heaps.heappush(heap1,int2)                                              # STEP 73
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dcc098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

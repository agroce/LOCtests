Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.813.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103dbe488>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 85 steps

SAVING TEST AS failure.813.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 7                                                                 # STEP 0
ACTION: int4 = 7 
int4 = None : <type 'NoneType'>
=> int4 = 7 : <type 'int'>
==================================================
int0 = 20                                                                # STEP 1
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 3
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 19                                                                # STEP 4
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 6
ACTION: heaps.heappush(heap1,int1) 
int1 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 11
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int1 = 11                                                               # STEP 12
ACTION: int1 = 11 
int1 = 19 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 13
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 14
ACTION: heaps.heappush(heap0,int4) 
int4 = 7 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [7] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 5                                                                # STEP 16
ACTION: int4 = 5 
int4 = 7 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 18
ACTION: heaps.heappush(heap0,int0) 
int0 = 20 : <type 'int'>
heap0 = [7] : <type 'list'>
=> heap0 = [7, 20] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 19
ACTION: int0 = 1 
int0 = 20 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 20
ACTION: heaps.heappush(heap1,int0) 
int0 = 1 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [1] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 21
ACTION: heaps.heappush(heap1,int1) 
int1 = 11 : <type 'int'>
heap1 = [1] : <type 'list'>
=> heap1 = [1, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 22
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 11] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [11] : <type 'list'>
heap0 = [7, 20] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [7, 11, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 24
ACTION: heaps.heappush(heap1,int0) 
int0 = 1 : <type 'int'>
heap1 = [11] : <type 'list'>
=> heap1 = [1, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 25
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [7, 11, 20] : <type 'list'>
heap1 = [1, 11] : <type 'list'>
heap0 = [7, 20] : <type 'list'>
=> heap0 = [1, 7, 11, 11, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [7, 11, 20] : <type 'list'>
=> heap2 = [11, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 28
ACTION: heap2 = heaps.heapnew() 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 29
ACTION: int0 = 9 
int0 = 1 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 7, 11, 11, 20] : <type 'list'>
heap1 = [1, 11] : <type 'list'>
=> heap1 = [1, 1, 7, 11, 11, 11, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 31
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 1, 7, 11, 11, 11, 20] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [1, 7, 11, 11, 20] : <type 'list'>
=> heap0 = [1, 1, 7, 11, 11, 11, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 7, 11, 11, 11, 20] : <type 'list'>
=> heap0 = [1, 11, 7, 20, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 7, 11, 11, 11, 20] : <type 'list'>
=> heap1 = [1, 11, 7, 20, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [1, 11, 7, 20, 11, 11] : <type 'list'>
heap0 = [1, 11, 7, 20, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 36
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 8                                                                # STEP 37
ACTION: int1 = 8 
int1 = 11 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 38
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 1, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 39
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [1, 7, 11, 11, 11, 7, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 40
ACTION: heaps.heappop(heap1) 
heap1 = [1, 11, 7, 20, 11, 11] : <type 'list'>
=> heap1 = [7, 11, 11, 20, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 41
ACTION: heaps.heappop(heap0) 
heap0 = [1, 7, 11, 11, 11, 7, 20, 11, 11, 20, 11] : <type 'list'>
=> heap0 = [7, 11, 11, 11, 11, 7, 20, 11, 11, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 11, 11, 11, 11, 7, 20, 11, 11, 20] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11, 7, 20, 20, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 11, 11, 11, 7, 20, 20, 11] : <type 'list'>
heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 1, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 1, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 45
ACTION: heaps.heappush(heap2,int0) 
int0 = 9 : <type 'int'>
heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 46
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
=> heap0 = [1, 11, 1, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 11, 11, 20, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 48
ACTION: heaps.heappop(heap0) 
heap0 = [1, 11, 1, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20] : <type 'list'>
=> heap0 = [1, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 49
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [11, 11, 11, 20] : <type 'list'>
=> heap1 = [8, 11, 11, 20, 11] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 50
ACTION: int1 = 14 
int1 = 8 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
int0 = 9                                                                # STEP 51
ACTION: int0 = 9 
int0 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [8, 11, 11, 20, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [11, 11, 11, 20] : <type 'list'>
=> heap1 = [11, 20, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 54
ACTION: heaps.heappush(heap1,int0) 
int0 = 9 : <type 'int'>
heap1 = [11, 20, 11] : <type 'list'>
=> heap1 = [9, 11, 11, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 11, 11, 20] : <type 'list'>
=> heap1 = [11, 20, 11] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 57
ACTION: int0 = 13 
int0 = 9 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11] : <type 'list'>
heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 59
ACTION: heaps.heappush(heap1,int0) 
int0 = 13 : <type 'int'>
heap1 = [11, 20, 11] : <type 'list'>
=> heap1 = [11, 13, 11, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [11, 13, 11, 20] : <type 'list'>
=> heap1 = [11, 13, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 61
ACTION: heaps.heappush(heap2,int0) 
int0 = 13 : <type 'int'>
heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 13, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9, 20] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 62
ACTION: int0 = 13 
int0 = 13 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 1, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9] : <type 'list'>
=> heap0 = [1, 1, 1, 9, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 13, 20] : <type 'list'>
=> heap1 = [13, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [13, 20] : <type 'list'>
heap0 = [1, 1, 1, 9, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
heap2 = [1, 1, 1, 1, 11, 7, 11, 7, 11, 7, 11, 7, 13, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 9, 20] : <type 'list'>
=> heap2 = [1, 1, 1, 9, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 9, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 67
ACTION: heaps.heappush(heap0,int3) 
int3 = 13 : <type 'int'>
heap0 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
=> heap0 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 68
ACTION: heaps.heappop(heap1) 
heap1 = [13, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 69
ACTION: int3 = 8 
int3 = 13 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 70
ACTION: heap1 = heaps.heapnew() 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 1, 9, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 72
ACTION: heaps.heappush(heap2,int0) 
int0 = 13 : <type 'int'>
heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
=> heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 73
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 74
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
=> heap0 = [1, 1, 9, 1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 75
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 76
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 9, 1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
=> heap0 = [1, 1, 9, 11, 9, 1, 11, 7, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 77
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 9, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13] : <type 'list'>
=> heap2 = [1, 9, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 13, 11, 20, 11, 11, 20, 11] : <type 'list'>
==================================================
int0 = 5                                                                # STEP 78
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 79
ACTION: heap2 = heaps.heapnew() 
heap2 = [1, 9, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 13, 11, 20, 11, 11, 20, 11] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 80
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 9, 11, 9, 1, 11, 7, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11] : <type 'list'>
=> heap0 = [1, 9, 9, 11, 11, 1, 11, 7, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 9, 9, 11, 11, 1, 11, 7, 11, 11, 11, 11, 7, 11, 11, 11, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 11, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20] : <type 'list'>
=> heap0 = [9, 11, 9, 7, 11, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 7, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 20, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 83
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [9, 11, 9, 7, 11, 1, 11, 11, 11, 11, 11, 11, 7, 11, 11, 7, 11, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 20, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
=> heap0 = [9, 11, 9, 7, 11, 1, 11, 11, 11, 11, 11, 11, 5, 11, 11, 7, 11, 11, 11, 11, 7, 11, 7, 11, 7, 7, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 20, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 11, 9, 7, 11, 1, 11, 11, 11, 11, 11, 11, 5, 11, 11, 7, 11, 11, 11, 11, 7, 11, 7, 11, 7, 7, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 20, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [9, 11, 1, 7, 11, 5, 11, 11, 11, 11, 11, 11, 7, 11, 11, 7, 11, 11, 11, 11, 7, 11, 7, 11, 7, 7, 7, 11, 7, 11, 7, 11, 11, 11, 11, 11, 11, 11, 11, 7, 11, 11, 11, 7, 11, 11, 11, 7, 11, 7, 11, 11, 11, 7, 11, 7, 11, 7, 11, 7, 13, 20, 20, 11, 20, 20, 20, 20, 13, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11, 20, 11, 13, 20, 20, 20, 11, 20, 11, 20, 20, 11, 11, 20, 11, 20, 11, 11, 20, 11, 11, 20, 11, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d5c878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #45 (0:00:30.021937) Fri Apr 28 07:22:00 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 21
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0501151085 TOTAL RUNTIME
24 EXECUTED
2306 TOTAL TEST OPERATIONS
29.2911508083 TIME SPENT EXECUTING TEST OPERATIONS
0.316520690918 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3358297348 TIME SPENT CHECKING PROPERTIES
58.6269805431 TOTAL TIME SPENT RUNNING SUT
0.011340379715 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 7                                                                 # STEP 0
int0 = 20                                                                # STEP 1
int2 = 15                                                                # STEP 2
heap0 = heaps.heapnew()                                                  # STEP 3
int1 = 19                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap1,int1)                                               # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heap1 = heaps.heapmerge(heap0,heap1)                                     # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 10
int3 = 13                                                               # STEP 11
int1 = 11                                                               # STEP 12
heaps.heappop(heap1)                                                    # STEP 13
heaps.heappush(heap0,int4)                                              # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
int4 = 5                                                                # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappush(heap0,int0)                                              # STEP 18
int0 = 1                                                                # STEP 19
heaps.heappush(heap1,int0)                                              # STEP 20
heaps.heappush(heap1,int1)                                              # STEP 21
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 22
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
heaps.heappush(heap1,int0)                                              # STEP 24
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
heap2 = heaps.heapnew()                                                 # STEP 28
int0 = 9                                                                # STEP 29
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 31
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
heaps.heappop(heap2)                                                    # STEP 36
int1 = 8                                                                # STEP 37
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 38
heaps.heappop(heap0)                                                    # STEP 39
heaps.heappop(heap1)                                                    # STEP 40
heaps.heappop(heap0)                                                    # STEP 41
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
heaps.heappush(heap2,int0)                                              # STEP 45
heaps.heappop(heap0)                                                    # STEP 46
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
heaps.heappop(heap0)                                                    # STEP 48
heaps.heappush(heap1,int1)                                              # STEP 49
int1 = 14                                                               # STEP 50
int0 = 9                                                                # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
heaps.heappush(heap1,int0)                                              # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
int0 = 13                                                               # STEP 57
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
heaps.heappush(heap1,int0)                                              # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
heaps.heappush(heap2,int0)                                              # STEP 61
int0 = 13                                                               # STEP 62
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
heaps.heappush(heap0,int3)                                              # STEP 67
heaps.heappop(heap1)                                                    # STEP 68
int3 = 8                                                                # STEP 69
heap1 = heaps.heapnew()                                                 # STEP 70
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
heaps.heappush(heap2,int0)                                              # STEP 72
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 73
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 74
heaps.heappop(heap1)                                                    # STEP 75
heaps.heappop(heap0)                                                    # STEP 76
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 77
int0 = 5                                                                # STEP 78
heap2 = heaps.heapnew()                                                 # STEP 79
heaps.heappop(heap1)                                                    # STEP 80
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heaps.heappush(heap0,int4)                                              # STEP 83
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d5c878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

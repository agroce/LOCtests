Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.956.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #12 STEP #48 (0:00:30.007582) Fri Apr 28 07:46:09 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045b73b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 92 steps

SAVING TEST AS failure.956.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap0 = heaps.heapnew()                                                  # STEP 0
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 1
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 2
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 3
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 4
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 5
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 13                                                                # STEP 6
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 5                                                                 # STEP 7
ACTION: int0 = 5 
int0 = None : <type 'NoneType'>
=> int0 = 5 : <type 'int'>
==================================================
int4 = 19                                                                # STEP 8
ACTION: int4 = 19 
int4 = None : <type 'NoneType'>
=> int4 = 19 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 10
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 11                                                               # STEP 11
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 13
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 14
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 15
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 16
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 20
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 21
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 24
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 25
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 26
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 27
ACTION: heaps.heappush(heap0,int1) 
int1 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 29
ACTION: heaps.heappush(heap1,int3) 
int3 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 31
ACTION: int1 = 3 
int1 = 15 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 32
ACTION: heaps.heappush(heap1,int4) 
int4 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 34
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 35
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 20                                                               # STEP 36
ACTION: int3 = 20 
int3 = 11 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
int4 = 7                                                                # STEP 37
ACTION: int4 = 7 
int4 = 19 : <type 'int'>
=> int4 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 38
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 40
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 42
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 45
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 47
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 48
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 49
ACTION: heaps.heappush(heap0,int0) 
int0 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
int0 = 14                                                               # STEP 50
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 51
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [5] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [5] : <type 'list'>
=> heap0 = [5, 5] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [5, 5] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [5, 5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 56
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [5, 5] : <type 'list'>
=> heap0 = [3, 5, 5] : <type 'list'>
==================================================
int1 = 19                                                               # STEP 57
ACTION: int1 = 19 
int1 = 3 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 5, 5] : <type 'list'>
=> heap0 = [5, 5] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [5] : <type 'list'>
heap0 = [5, 5] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 60
ACTION: heaps.heappush(heap0,int1) 
int1 = 19 : <type 'int'>
heap0 = [5, 5] : <type 'list'>
=> heap0 = [5, 5, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 62
ACTION: heaps.heappush(heap2,int2) 
int2 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 63
ACTION: int2 = 5 
int2 = 13 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 64
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [13] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 65
ACTION: heaps.heappush(heap1,int3) 
int3 = 20 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 66
ACTION: heaps.heappush(heap2,int4) 
int4 = 7 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [7, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 13] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
int1 = 20                                                               # STEP 68
ACTION: int1 = 20 
int1 = 19 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 69
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 5, 19] : <type 'list'>
heap1 = [20] : <type 'list'>
heap2 = [13] : <type 'list'>
=> heap2 = [5, 5, 19, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 19, 20] : <type 'list'>
=> heap2 = [5, 20, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 71
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [5, 5, 19] : <type 'list'>
heap2 = [5, 20, 19] : <type 'list'>
heap1 = [20] : <type 'list'>
=> heap1 = [5, 5, 5, 19, 20, 19] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 72
ACTION: heap0 = heaps.heapnew() 
heap0 = [5, 5, 19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [5, 20, 19] : <type 'list'>
=> heap2 = [19, 20] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 74
ACTION: int4 = 17 
int4 = 7 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 75
ACTION: int3 = 7 
int3 = 20 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 76
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = [19, 20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 77
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5, 19, 20, 19] : <type 'list'>
=> heap1 = [5, 19, 5, 19, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 78
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 79
ACTION: heaps.heappush(heap1,int3) 
int3 = 7 : <type 'int'>
heap1 = [5, 19, 5, 19, 20] : <type 'list'>
=> heap1 = [5, 19, 5, 19, 20, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 80
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 19, 5, 19, 20, 7] : <type 'list'>
=> heap1 = [5, 19, 7, 19, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 81
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 19, 7, 19, 20] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [5, 19, 7, 19, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 82
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [5, 19, 7, 19, 20] : <type 'list'>
=> heap0 = [5, 19, 7, 19, 20] : <type 'list'>
==================================================
int3 = 2                                                                # STEP 83
ACTION: int3 = 2 
int3 = 7 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 84
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [5, 19, 7, 19, 20] : <type 'list'>
heap0 = [5, 19, 7, 19, 20] : <type 'list'>
heap1 = [5, 19, 7, 19, 20] : <type 'list'>
=> heap1 = [5, 5, 19, 7, 19, 19, 7, 19, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 19, 7, 19, 20] : <type 'list'>
=> heap0 = [7, 19, 20, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 86
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 19, 20, 19] : <type 'list'>
=> heap0 = [19, 19, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 87
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 19, 7, 19, 19, 7, 19, 20, 20] : <type 'list'>
=> heap1 = [5, 7, 19, 19, 19, 19, 7, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 19, 19, 19, 19, 7, 20, 20] : <type 'list'>
=> heap1 = [7, 19, 19, 20, 19, 19, 7, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 89
ACTION: heaps.heappop(heap1) 
heap1 = [7, 19, 19, 20, 19, 19, 7, 20] : <type 'list'>
=> heap1 = [19, 19, 19, 20, 20, 19, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 90
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [19, 19, 19, 20, 20, 19, 7] : <type 'list'>
heap2 = [5, 19, 7, 19, 20] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19, 20, 20, 19, 7, 20, 20, 19, 7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 91
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19, 19, 19, 19, 19, 19, 20, 20, 19, 7, 20, 20, 19, 7] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [7, 19, 19, 19, 19, 19, 20, 20, 19, 7, 20, 20, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045c8b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 67
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0551190376 TOTAL RUNTIME
23 EXECUTED
2259 TOTAL TEST OPERATIONS
29.1937105656 TIME SPENT EXECUTING TEST OPERATIONS
0.329713821411 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2021415234 TIME SPENT CHECKING PROPERTIES
58.3958520889 TOTAL TIME SPENT RUNNING SUT
0.0110280513763 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap0 = heaps.heapnew()                                                  # STEP 0
heaps.heappop(heap0)                                                     # STEP 1
heaps.heappop(heap0)                                                     # STEP 2
heaps.heappop(heap0)                                                     # STEP 3
heaps.heappop(heap0)                                                     # STEP 4
heaps.heappop(heap0)                                                     # STEP 5
int2 = 13                                                                # STEP 6
int0 = 5                                                                 # STEP 7
int4 = 19                                                                # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
int1 = 15                                                               # STEP 10
int3 = 11                                                               # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 13
heaps.heappop(heap0)                                                    # STEP 14
heaps.heappop(heap0)                                                    # STEP 15
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 16
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 17
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 18
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 19
heaps.heappop(heap0)                                                    # STEP 20
heaps.heappop(heap1)                                                    # STEP 21
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
heaps.heappush(heap2,int1)                                              # STEP 24
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 25
heap1 = heaps.heapnew()                                                 # STEP 26
heaps.heappush(heap0,int1)                                              # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
heaps.heappush(heap1,int3)                                              # STEP 29
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
int1 = 3                                                                # STEP 31
heaps.heappush(heap1,int4)                                              # STEP 32
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
heaps.heappop(heap2)                                                    # STEP 34
heaps.heappop(heap2)                                                    # STEP 35
int3 = 20                                                               # STEP 36
int4 = 7                                                                # STEP 37
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 38
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 39
heaps.heappop(heap0)                                                    # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heaps.heappop(heap1)                                                    # STEP 42
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 43
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 45
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
heaps.heappop(heap0)                                                    # STEP 47
heaps.heappop(heap1)                                                    # STEP 48
heaps.heappush(heap0,int0)                                              # STEP 49
int0 = 14                                                               # STEP 50
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
heaps.heappush(heap0,int1)                                              # STEP 56
int1 = 19                                                               # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 59
heaps.heappush(heap0,int1)                                              # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
heaps.heappush(heap2,int2)                                              # STEP 62
int2 = 5                                                                # STEP 63
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 64
heaps.heappush(heap1,int3)                                              # STEP 65
heaps.heappush(heap2,int4)                                              # STEP 66
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
int1 = 20                                                               # STEP 68
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 69
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 71
heap0 = heaps.heapnew()                                                 # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
int4 = 17                                                               # STEP 74
int3 = 7                                                                # STEP 75
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 76
heaps.heappop(heap1)                                                    # STEP 77
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 78
heaps.heappush(heap1,int3)                                              # STEP 79
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 80
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 81
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 82
int3 = 2                                                                # STEP 83
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 84
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 86
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 87
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
heaps.heappop(heap1)                                                    # STEP 89
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 90
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045c8b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

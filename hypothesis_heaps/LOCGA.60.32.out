Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69389.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #91 (0:00:30.000545) Tue May  2 19:22:19 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d7d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 71 steps

SAVING TEST AS failure.69389.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 1
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 2
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 4
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 5
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 5                                                                 # STEP 6
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 8
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 8                                                                 # STEP 9
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 10
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                 # STEP 12
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 13
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 14
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 15
ACTION: int3 = 13 
int3 = 14 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 16
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [14] : <type 'list'>
=> heap2 = [5, 14] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 17
ACTION: int4 = 16 
int4 = 5 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 18
ACTION: heaps.heappush(heap2,int1) 
int1 = 9 : <type 'int'>
heap2 = [5, 14] : <type 'list'>
=> heap2 = [5, 14, 9] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [5, 14, 9] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [5, 14, 9] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 14, 9] : <type 'list'>
=> heap2 = [9, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 21
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [5, 14, 9] : <type 'list'>
heap2 = [9, 14] : <type 'list'>
=> heap2 = [5, 14, 9] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 23
ACTION: int1 = 7 
int1 = 9 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 14, 9] : <type 'list'>
=> heap1 = [9, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 25
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [9, 14] : <type 'list'>
=> heap0 = [9, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 14] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 27
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [14] : <type 'list'>
=> heap1 = [14, 14] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 28
ACTION: heaps.heappush(heap0,int1) 
int1 = 7 : <type 'int'>
heap0 = [9, 14] : <type 'list'>
=> heap0 = [7, 14, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 29
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 14] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [14] : <type 'list'>
heap2 = [5, 14, 9] : <type 'list'>
=> heap1 = [5, 14, 14, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [5, 14, 14, 9] : <type 'list'>
=> heap1 = [9, 14, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 14, 14] : <type 'list'>
heap2 = [5, 14, 9] : <type 'list'>
=> heap2 = [5, 9, 14, 14, 14, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 14, 14] : <type 'list'>
=> heap1 = [14, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 34
ACTION: heaps.heappop(heap0) 
heap0 = [7, 14, 9] : <type 'list'>
=> heap0 = [9, 14] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 35
ACTION: heap1 = heaps.heapnew() 
heap1 = [14, 14] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 36
ACTION: heaps.heappush(heap2,int2) 
int2 = 8 : <type 'int'>
heap2 = [5, 9, 14, 14, 14, 9] : <type 'list'>
=> heap2 = [5, 9, 8, 14, 14, 9, 14] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 37
ACTION: int1 = 14 
int1 = 7 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 14] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 9, 8, 14, 14, 9, 14] : <type 'list'>
=> heap2 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
heap0 = [14] : <type 'list'>
=> heap0 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
==================================================
int2 = 8                                                                # STEP 41
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
=> heap2 = [5, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
heap2 = [5, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap2 = [5, 5, 5, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 9, 8, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14] : <type 'list'>
=> heap0 = [5, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap0 = [8, 9, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [8, 9, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14] : <type 'list'>
heap2 = [5, 5, 5, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 9, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [9, 9, 9, 14, 9, 8, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 48
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [9, 9, 9, 14, 9, 8, 14, 14, 14, 14, 14] : <type 'list'>
heap1 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap0 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 49
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [5, 5, 5, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
heap0 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
heap1 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap1 = [5, 5, 5, 5, 5, 5, 8, 8, 8, 9, 8, 9, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 50
ACTION: heaps.heappush(heap0,int0) 
int0 = 13 : <type 'int'>
heap0 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap0 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 51
ACTION: int0 = 18 
int0 = 13 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 52
ACTION: heap2 = heaps.heapnew() 
heap2 = [5, 5, 5, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5, 5, 5, 5, 8, 8, 8, 9, 8, 9, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap1 = [5, 5, 5, 8, 5, 5, 8, 8, 8, 9, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 54
ACTION: heaps.heappush(heap2,int2) 
int2 = 8 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5, 8, 5, 5, 8, 8, 8, 9, 8, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [5, 5, 5, 8, 8, 5, 8, 8, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14] : <type 'list'>
=> heap0 = [5, 8, 5, 9, 8, 9, 9, 8, 9, 9, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [8] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 58
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [5, 5, 5, 8, 8, 5, 8, 8, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [5, 8, 5, 9, 8, 9, 9, 8, 9, 9, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9] : <type 'list'>
=> heap0 = [5, 8, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 8, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 8, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [8, 8, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 61
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 9                                                                # STEP 62
ACTION: int2 = 9 
int2 = 8 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [8, 8, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
heap1 = [5, 5, 5, 8, 8, 5, 8, 8, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [5, 5, 5, 8, 8, 8, 8, 5, 8, 8, 8, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5, 8, 8, 5, 8, 8, 8, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [5, 8, 5, 8, 8, 5, 8, 9, 8, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 5, 8, 8, 8, 8, 5, 8, 8, 8, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [5, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 66
ACTION: heaps.heappop(heap2) 
heap2 = [5, 8, 5, 5, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 8, 9, 9, 9, 9, 8, 9, 9, 9, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [5, 8, 8, 5, 8, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 14, 9, 9, 9, 9, 8, 9, 9, 9, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 67
ACTION: heaps.heappop(heap1) 
heap1 = [5, 8, 5, 8, 8, 5, 8, 9, 8, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [5, 8, 5, 8, 8, 8, 8, 9, 8, 9, 9, 9, 8, 9, 9, 8, 9, 9, 9, 9, 9, 14, 9, 9, 8, 9, 14, 9, 8, 9, 9, 9, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8, 9, 9, 9, 9, 9, 8, 9, 8, 9, 9, 8, 9, 8, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [8, 9, 9, 8, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 8, 14, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 8, 8, 5, 8, 9, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 14, 9, 9, 9, 9, 8, 9, 9, 9, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [8, 5, 8, 8, 8, 9, 8, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 14, 9, 9, 9, 9, 8, 9, 9, 14, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 5, 8, 8, 8, 9, 8, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 9, 9, 8, 9, 14, 9, 9, 9, 9, 8, 9, 9, 14, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 9, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [5, 8, 8, 8, 8, 9, 8, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 9, 14, 9, 9, 9, 9, 8, 9, 9, 14, 9, 14, 9, 9, 9, 14, 9, 9, 9, 9, 14, 9, 8, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 9, 8, 9, 8, 9, 8, 14, 9, 9, 8, 14, 14, 9, 14, 14, 14, 9, 14, 14, 14, 14, 14, 14, 14, 9, 14, 9, 8, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 14, 14, 14, 9, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d4758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 76
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0649299622 TOTAL RUNTIME
20 EXECUTED
1947 TOTAL TEST OPERATIONS
29.2998487949 TIME SPENT EXECUTING TEST OPERATIONS
0.241299390793 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.292617321 TIME SPENT CHECKING PROPERTIES
58.592466116 TOTAL TIME SPENT RUNNING SUT
0.0115258693695 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int0 = 13                                                                # STEP 1
heap2 = heaps.heapnew()                                                  # STEP 2
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
heaps.heappop(heap1)                                                     # STEP 4
heaps.heappop(heap2)                                                     # STEP 5
int4 = 5                                                                 # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heaps.heappop(heap2)                                                     # STEP 8
int2 = 8                                                                 # STEP 9
int3 = 14                                                               # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
heap2 = heaps.heapnew()                                                 # STEP 12
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 13
heaps.heappush(heap2,int3)                                              # STEP 14
int3 = 13                                                               # STEP 15
heaps.heappush(heap2,int4)                                              # STEP 16
int4 = 16                                                               # STEP 17
heaps.heappush(heap2,int1)                                              # STEP 18
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
heaps.heappop(heap0)                                                    # STEP 21
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
int1 = 7                                                                # STEP 23
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 25
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 27
heaps.heappush(heap0,int1)                                              # STEP 28
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 29
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
heaps.heappop(heap0)                                                    # STEP 34
heap1 = heaps.heapnew()                                                 # STEP 35
heaps.heappush(heap2,int2)                                              # STEP 36
int1 = 14                                                               # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 39
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
int2 = 8                                                                # STEP 41
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 48
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 49
heaps.heappush(heap0,int0)                                              # STEP 50
int0 = 18                                                               # STEP 51
heap2 = heaps.heapnew()                                                 # STEP 52
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
heaps.heappush(heap2,int2)                                              # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
heaps.heappop(heap2)                                                    # STEP 61
int2 = 9                                                                # STEP 62
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
heaps.heappop(heap2)                                                    # STEP 66
heaps.heappop(heap1)                                                    # STEP 67
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d4758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

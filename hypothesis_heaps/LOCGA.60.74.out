Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69631.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10346e7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 39 steps

SAVING TEST AS failure.69631.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 6                                                                 # STEP 0
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 1
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int4 = 20                                                                # STEP 2
ACTION: int4 = 20 
int4 = None : <type 'NoneType'>
=> int4 = 20 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 3
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 4
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 6
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 9
ACTION: heaps.heappush(heap1,int2) 
int2 = 6 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
int2 = 20                                                               # STEP 10
ACTION: int2 = 20 
int2 = 6 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 11
ACTION: heaps.heappush(heap2,int4) 
int4 = 20 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 12
ACTION: heaps.heappush(heap1,int1) 
int1 = 15 : <type 'int'>
heap1 = [6] : <type 'list'>
=> heap1 = [6, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 13
ACTION: heaps.heappop(heap2) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 14
ACTION: heaps.heappush(heap2,int4) 
int4 = 20 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 15
ACTION: heaps.heappop(heap2) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 17
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [15] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [15, 15] : <type 'list'>
heap1 = [15] : <type 'list'>
=> heap1 = [15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 20
ACTION: heaps.heappush(heap2,int3) 
int3 = 10 : <type 'int'>
heap2 = [15, 15] : <type 'list'>
=> heap2 = [10, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 21
ACTION: heaps.heappush(heap1,int4) 
int4 = 20 : <type 'int'>
heap1 = [15, 15, 15, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [10, 15, 15] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [10, 10, 15, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 10, 15, 15, 15, 15] : <type 'list'>
heap1 = [15, 15, 15, 15, 20] : <type 'list'>
heap2 = [10, 15, 15] : <type 'list'>
=> heap2 = [10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 24
ACTION: int4 = 6 
int4 = 20 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
int3 = 13                                                               # STEP 25
ACTION: int3 = 13 
int3 = 10 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 26
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [10, 10, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [6, 10, 10, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [6, 10, 10, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [10, 15, 10, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20] : <type 'list'>
=> heap2 = [10, 15, 15, 15, 15, 15, 15, 20, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [15, 15, 15, 15, 20] : <type 'list'>
heap0 = [10, 15, 10, 15, 15, 15] : <type 'list'>
=> heap0 = [10, 15, 15, 15, 15, 15, 10, 15, 15, 15, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 30
ACTION: heaps.heappop(heap2) 
heap2 = [10, 15, 15, 15, 15, 15, 15, 20, 15, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 20, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 15, 20] : <type 'list'>
=> heap1 = [15, 15, 15, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 32
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 20] : <type 'list'>
=> heap1 = [15, 20, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 33
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [15, 20, 15] : <type 'list'>
heap2 = [15, 15, 15, 15, 15, 15, 15, 20, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 20, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 34
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 15, 15, 15, 15, 20, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 15, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 20, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 36
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 15, 15, 15, 15, 15, 10, 15, 15, 15, 20] : <type 'list'>
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 20] : <type 'list'>
heap2 = [15, 15, 15, 15, 15, 15, 15, 20] : <type 'list'>
=> heap2 = [10, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 15, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [10, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 15, 20] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 15, 20, 20, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 15, 20, 20, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 15, 15, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103494638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #11 STEP #0 (0:00:30.285388) Tue May  2 20:04:36 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 45
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.058052063 TOTAL RUNTIME
20 EXECUTED
1884 TOTAL TEST OPERATIONS
29.5690839291 TIME SPENT EXECUTING TEST OPERATIONS
0.249323368073 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.5139842033 TIME SPENT CHECKING PROPERTIES
59.0830681324 TOTAL TIME SPENT RUNNING SUT
0.0115129947662 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 6                                                                 # STEP 0
int3 = 10                                                                # STEP 1
int4 = 20                                                                # STEP 2
int0 = 9                                                                 # STEP 3
int1 = 15                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap1)                                                     # STEP 6
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
heaps.heappush(heap1,int2)                                               # STEP 9
int2 = 20                                                               # STEP 10
heaps.heappush(heap2,int4)                                              # STEP 11
heaps.heappush(heap1,int1)                                              # STEP 12
heaps.heappop(heap2)                                                    # STEP 13
heaps.heappush(heap2,int4)                                              # STEP 14
heaps.heappop(heap2)                                                    # STEP 15
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
int1 = 13                                                               # STEP 17
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
heaps.heappush(heap2,int3)                                              # STEP 20
heaps.heappush(heap1,int4)                                              # STEP 21
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 22
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
int4 = 6                                                                # STEP 24
int3 = 13                                                               # STEP 25
heaps.heappush(heap0,int4)                                              # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 29
heaps.heappop(heap2)                                                    # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heaps.heappop(heap1)                                                    # STEP 32
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 33
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103494638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

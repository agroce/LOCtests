Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1076.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #12 STEP #63 (0:00:30.018185) Fri Apr 28 08:07:17 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104625710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 98 steps

SAVING TEST AS failure.1076.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 5                                                                 # STEP 0
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 3
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 6
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                  # STEP 7
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
int2 = 6                                                                 # STEP 8
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 9
ACTION: heaps.heappush(heap0,int2) 
int2 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 10
ACTION: int2 = 9 
int2 = 6 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 13
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 14
ACTION: heaps.heappush(heap0,int0) 
int0 = 14 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 15
ACTION: heaps.heappop(heap0) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 17
ACTION: heaps.heappush(heap1,int0) 
int0 = 14 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [14] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 19
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [14] : <type 'list'>
=> heap1 = [5, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 21
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 14] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 22
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 23
ACTION: int0 = 7 
int0 = 14 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 24
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int4)                                              # STEP 25
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
int4 = 8                                                                # STEP 26
ACTION: int4 = 8 
int4 = 5 : <type 'int'>
=> int4 = 8 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int3)                                              # STEP 29
ACTION: heaps.heappush(heap0,int3) 
int3 = 19 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 30
ACTION: heaps.heappush(heap0,int1) 
int1 = 12 : <type 'int'>
heap0 = [19] : <type 'list'>
=> heap0 = [12, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 31
ACTION: heaps.heappush(heap2,int3) 
int3 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
int3 = 12                                                               # STEP 32
ACTION: int3 = 12 
int3 = 19 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 33
ACTION: heaps.heappush(heap0,int0) 
int0 = 7 : <type 'int'>
heap0 = [12, 19] : <type 'list'>
=> heap0 = [7, 19, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 19, 12] : <type 'list'>
=> heap0 = [12, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 35
ACTION: heaps.heappop(heap0) 
heap0 = [12, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 36
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [19] : <type 'list'>
heap0 = [19] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 39
ACTION: int0 = 9 
int0 = 7 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 40
ACTION: int1 = 4 
int1 = 12 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 41
ACTION: heaps.heappush(heap2,int0) 
int0 = 9 : <type 'int'>
heap2 = [19] : <type 'list'>
=> heap2 = [9, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [9, 19] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [9, 9, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [9, 19] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [9, 9, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 19] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 46
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 19, 19] : <type 'list'>
=> heap0 = [9, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 9, 19, 19] : <type 'list'>
heap0 = [9, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 48
ACTION: heaps.heappush(heap2,int2) 
int2 = 9 : <type 'int'>
heap2 = [19] : <type 'list'>
=> heap2 = [9, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 49
ACTION: heaps.heappop(heap1) 
heap1 = [9, 9, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 19] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 50
ACTION: int0 = 6 
int0 = 9 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 51
ACTION: int2 = 16 
int2 = 9 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 19, 19] : <type 'list'>
=> heap1 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 53
ACTION: heaps.heappop(heap2) 
heap2 = [9, 19] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [19] : <type 'list'>
heap0 = [9, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 55
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [9, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [19, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 57
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [6, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 58
ACTION: int0 = 7 
int0 = 6 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 59
ACTION: heaps.heappush(heap0,int0) 
int0 = 7 : <type 'int'>
heap0 = [9, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [7, 9, 9, 9, 19, 19, 19, 19, 9] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 9, 9, 9, 19, 19, 19, 19, 9] : <type 'list'>
heap2 = [6, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [6, 7, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 61
ACTION: heaps.heappop(heap0) 
heap0 = [6, 7, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [7, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
int0 = 11                                                               # STEP 62
ACTION: int0 = 11 
int0 = 7 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 63
ACTION: heaps.heappop(heap2) 
heap2 = [6, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 64
ACTION: heaps.heappush(heap2,int1) 
int1 = 4 : <type 'int'>
heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [4, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 65
ACTION: heaps.heappop(heap0) 
heap0 = [7, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 67
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap0 = [9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap2 = [9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 69
ACTION: int1 = 12 
int1 = 4 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 70
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 71
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 72
ACTION: heaps.heappush(heap1,int1) 
int1 = 12 : <type 'int'>
heap1 = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 12, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 12, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9, 12, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 75
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9, 9, 9, 12, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9, 12, 19, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 77
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9, 19] : <type 'list'>
=> heap0 = [9, 19, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 78
ACTION: heap2 = heaps.heapnew() 
heap2 = [9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int1 = 6                                                                # STEP 79
ACTION: int1 = 6 
int1 = 12 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 80
ACTION: heaps.heappush(heap1,int1) 
int1 = 6 : <type 'int'>
heap1 = [9, 9, 9, 9, 9, 9, 9, 12, 19, 9, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [6, 9, 9, 9, 9, 9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 12, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 81
ACTION: heaps.heappush(heap1,int1) 
int1 = 6 : <type 'int'>
heap1 = [6, 9, 9, 9, 9, 9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 12, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [6, 6, 9, 9, 9, 9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 12, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 19, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19, 9] : <type 'list'>
=> heap0 = [9, 19, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 83
ACTION: heaps.heappop(heap0) 
heap0 = [9, 19, 9, 19, 19, 9, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 19, 9, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 84
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 19, 9, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [6, 6, 9, 9, 9, 9, 9, 9, 19, 9, 9, 9, 19, 19, 19, 12, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 9, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 85
ACTION: heaps.heappop(heap0) 
heap0 = [9, 19, 9, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [9, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 87
ACTION: int1 = 15 
int1 = 6 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 19, 9, 19, 19, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 89
ACTION: heaps.heappop(heap1) 
heap1 = [9, 19, 9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 90
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
=> heap2 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 91
ACTION: heaps.heappush(heap1,int2) 
int2 = 16 : <type 'int'>
heap1 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
=> heap1 = [9, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 93
ACTION: heaps.heappop(heap0) 
heap0 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 94
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 95
ACTION: heaps.heappush(heap1,int1) 
int1 = 15 : <type 'int'>
heap1 = [9, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19] : <type 'list'>
=> heap1 = [9, 15, 19, 19, 16, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
int1 = 20                                                               # STEP 96
ACTION: int1 = 20 
int1 = 15 : <type 'int'>
=> int1 = 20 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 97
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9, 9] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [9, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 9, 9] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104603e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 75
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0585029125 TOTAL RUNTIME
23 EXECUTED
2273 TOTAL TEST OPERATIONS
29.2422058582 TIME SPENT EXECUTING TEST OPERATIONS
0.310868263245 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1873817444 TIME SPENT CHECKING PROPERTIES
58.4295876026 TOTAL TIME SPENT RUNNING SUT
0.0110340118408 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 5                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int0 = 14                                                                # STEP 2
heap1 = heaps.heapnew()                                                  # STEP 3
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap0)                                                     # STEP 6
heap0 = heaps.heapnew()                                                  # STEP 7
int2 = 6                                                                 # STEP 8
heaps.heappush(heap0,int2)                                               # STEP 9
int2 = 9                                                                # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
int3 = 19                                                               # STEP 13
heaps.heappush(heap0,int0)                                              # STEP 14
heaps.heappop(heap0)                                                    # STEP 15
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
heaps.heappush(heap1,int0)                                              # STEP 17
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 18
heaps.heappush(heap1,int4)                                              # STEP 19
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 21
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 22
int0 = 7                                                                # STEP 23
heaps.heappop(heap1)                                                    # STEP 24
heaps.heappush(heap1,int4)                                              # STEP 25
int4 = 8                                                                # STEP 26
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heaps.heappush(heap0,int3)                                              # STEP 29
heaps.heappush(heap0,int1)                                              # STEP 30
heaps.heappush(heap2,int3)                                              # STEP 31
int3 = 12                                                               # STEP 32
heaps.heappush(heap0,int0)                                              # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
heaps.heappop(heap0)                                                    # STEP 35
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
int0 = 9                                                                # STEP 39
int1 = 4                                                                # STEP 40
heaps.heappush(heap2,int0)                                              # STEP 41
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 46
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
heaps.heappush(heap2,int2)                                              # STEP 48
heaps.heappop(heap1)                                                    # STEP 49
int0 = 6                                                                # STEP 50
int2 = 16                                                               # STEP 51
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
heaps.heappop(heap2)                                                    # STEP 53
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heaps.heappush(heap2,int0)                                              # STEP 57
int0 = 7                                                                # STEP 58
heaps.heappush(heap0,int0)                                              # STEP 59
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
heaps.heappop(heap0)                                                    # STEP 61
int0 = 11                                                               # STEP 62
heaps.heappop(heap2)                                                    # STEP 63
heaps.heappush(heap2,int1)                                              # STEP 64
heaps.heappop(heap0)                                                    # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 67
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
int1 = 12                                                               # STEP 69
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 70
heaps.heappop(heap0)                                                    # STEP 71
heaps.heappush(heap1,int1)                                              # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
heaps.heappop(heap0)                                                    # STEP 75
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 76
heaps.heappop(heap0)                                                    # STEP 77
heap2 = heaps.heapnew()                                                 # STEP 78
int1 = 6                                                                # STEP 79
heaps.heappush(heap1,int1)                                              # STEP 80
heaps.heappush(heap1,int1)                                              # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heaps.heappop(heap0)                                                    # STEP 83
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 84
heaps.heappop(heap0)                                                    # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
int1 = 15                                                               # STEP 87
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
heaps.heappop(heap1)                                                    # STEP 89
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 90
heaps.heappush(heap1,int2)                                              # STEP 91
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
heaps.heappop(heap0)                                                    # STEP 93
heaps.heappop(heap0)                                                    # STEP 94
heaps.heappush(heap1,int1)                                              # STEP 95
int1 = 20                                                               # STEP 96
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 97
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104603e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

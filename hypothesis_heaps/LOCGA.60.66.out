Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69586.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cd1680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 86 steps

SAVING TEST AS failure.69586.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int4 = 10                                                                # STEP 1
ACTION: int4 = 10 
int4 = None : <type 'NoneType'>
=> int4 = 10 : <type 'int'>
==================================================
int2 = 19                                                                # STEP 2
ACTION: int2 = 19 
int2 = None : <type 'NoneType'>
=> int2 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 3
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 11                                                                # STEP 4
ACTION: int0 = 11 
int0 = None : <type 'NoneType'>
=> int0 = 11 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                     # STEP 5
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 8
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 11                                                                # STEP 9
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 10
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 13
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 14
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 15
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 17
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 18
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 20
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 21
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 22
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 23
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 24
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 25
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 26
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 27
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 28
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int2)                                              # STEP 29
ACTION: heaps.heappush(heap1,int2) 
int2 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 30
ACTION: heaps.heappush(heap0,int3) 
int3 = 11 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 31
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [19] : <type 'list'>
=> heap1 = [19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 33
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 11                                                               # STEP 34
ACTION: int3 = 11 
int3 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [19, 19] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 36
ACTION: int2 = 3 
int2 = 19 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19, 19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 39
ACTION: heaps.heappush(heap0,int0) 
int0 = 11 : <type 'int'>
heap0 = [19] : <type 'list'>
=> heap0 = [11, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 40
ACTION: heaps.heappush(heap1,int3) 
int3 = 11 : <type 'int'>
heap1 = [19] : <type 'list'>
=> heap1 = [11, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 41
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [11, 19] : <type 'list'>
=> heap0 = [11, 11, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [11, 19] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 43
ACTION: heaps.heappop(heap1) 
heap1 = [11, 19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 11, 19, 19] : <type 'list'>
=> heap0 = [11, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 46
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [19] : <type 'list'>
heap0 = [11, 19, 19] : <type 'list'>
=> heap0 = [11, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [19] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int0 = 17                                                               # STEP 48
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 49
ACTION: int3 = 3 
int3 = 11 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 50
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [19] : <type 'list'>
heap0 = [11, 19, 19, 19] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [11, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [11, 19, 19, 19, 19] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [11, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [11, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [19, 19, 19] : <type 'list'>
heap1 = [11, 19, 19, 19, 19] : <type 'list'>
heap2 = [19, 19, 19, 19] : <type 'list'>
=> heap2 = [11, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [11, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 57
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19, 19] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 58
ACTION: heaps.heappop(heap1) 
heap1 = [11, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 60
ACTION: heaps.heappush(heap2,int4) 
int4 = 10 : <type 'int'>
heap2 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [10, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 62
ACTION: int4 = 14 
int4 = 10 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 63
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [14, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 64
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [19] : <type 'list'>
heap2 = [14, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 65
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [14, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [19, 19, 19, 19] : <type 'list'>
=> heap1 = [14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 66
ACTION: heap2 = heaps.heapnew() 
heap2 = [14, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int4 = 1                                                                # STEP 67
ACTION: int4 = 1 
int4 = 14 : <type 'int'>
=> int4 = 1 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 68
ACTION: heaps.heappush(heap1,int3) 
int3 = 3 : <type 'int'>
heap1 = [14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [3, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [3, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [14, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 72
ACTION: heaps.heappush(heap2,int2) 
int2 = 3 : <type 'int'>
heap2 = [14, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [3, 14, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 73
ACTION: int3 = 13 
int3 = 3 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 74
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap2 = [3, 14, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [3, 14, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 75
ACTION: heaps.heappop(heap2) 
heap2 = [3, 14, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [14, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 76
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int2 = 13                                                               # STEP 77
ACTION: int2 = 13 
int2 = 3 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 78
ACTION: heaps.heappop(heap0) 
heap0 = [14, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 80
ACTION: heaps.heappush(heap1,int0) 
int0 = 17 : <type 'int'>
heap1 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [17, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 81
ACTION: heaps.heappop(heap1) 
heap1 = [17, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 84
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cd9638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #27 (0:00:30.018006) Tue May  2 19:56:33 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 89
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0635318756 TOTAL RUNTIME
19 EXECUTED
1875 TOTAL TEST OPERATIONS
29.2132012844 TIME SPENT EXECUTING TEST OPERATIONS
0.253713607788 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1764214039 TIME SPENT CHECKING PROPERTIES
58.3896226883 TOTAL TIME SPENT RUNNING SUT
0.0105016231537 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int4 = 10                                                                # STEP 1
int2 = 19                                                                # STEP 2
heap2 = heaps.heapnew()                                                  # STEP 3
int0 = 11                                                                # STEP 4
heaps.heappop(heap2)                                                     # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 7
heaps.heappop(heap0)                                                     # STEP 8
int3 = 11                                                                # STEP 9
heaps.heappop(heap0)                                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 13
heaps.heappop(heap1)                                                    # STEP 14
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heaps.heappop(heap0)                                                    # STEP 17
heaps.heappop(heap2)                                                    # STEP 18
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 19
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 20
heap2 = heaps.heapnew()                                                 # STEP 21
heaps.heappop(heap2)                                                    # STEP 22
heaps.heappop(heap1)                                                    # STEP 23
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 24
heap2 = heaps.heapnew()                                                 # STEP 25
heaps.heappop(heap1)                                                    # STEP 26
heap1 = heaps.heapnew()                                                 # STEP 27
heaps.heappop(heap0)                                                    # STEP 28
heaps.heappush(heap1,int2)                                              # STEP 29
heaps.heappush(heap0,int3)                                              # STEP 30
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 31
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
heaps.heappop(heap0)                                                    # STEP 33
int3 = 11                                                               # STEP 34
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
int2 = 3                                                                # STEP 36
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
heaps.heappush(heap0,int0)                                              # STEP 39
heaps.heappush(heap1,int3)                                              # STEP 40
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 41
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
heaps.heappop(heap1)                                                    # STEP 43
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 46
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 47
int0 = 17                                                               # STEP 48
int3 = 3                                                                # STEP 49
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 50
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heaps.heappop(heap0)                                                    # STEP 57
heaps.heappop(heap1)                                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
heaps.heappush(heap2,int4)                                              # STEP 60
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
int4 = 14                                                               # STEP 62
heaps.heappush(heap2,int4)                                              # STEP 63
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 64
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 65
heap2 = heaps.heapnew()                                                 # STEP 66
int4 = 1                                                                # STEP 67
heaps.heappush(heap1,int3)                                              # STEP 68
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
heaps.heappush(heap2,int2)                                              # STEP 72
int3 = 13                                                               # STEP 73
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 74
heaps.heappop(heap2)                                                    # STEP 75
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 76
int2 = 13                                                               # STEP 77
heaps.heappop(heap0)                                                    # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
heaps.heappush(heap1,int0)                                              # STEP 80
heaps.heappop(heap1)                                                    # STEP 81
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
heaps.heappop(heap0)                                                    # STEP 84
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cd9638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

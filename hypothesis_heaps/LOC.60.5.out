Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99233.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #14 STEP #37 (0:00:30.007650) Fri Apr 28 03:26:31 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e6d7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 58 steps

SAVING TEST AS failure.99233.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 4                                                                 # STEP 0
ACTION: int4 = 4 
int4 = None : <type 'NoneType'>
=> int4 = 4 : <type 'int'>
==================================================
int1 = 10                                                                # STEP 1
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 2
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 3
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int2 = 1                                                                 # STEP 4
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 6
ACTION: heaps.heappush(heap1,int2) 
int2 = 1 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [1] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                               # STEP 7
ACTION: heaps.heappush(heap1,int4) 
int4 = 4 : <type 'int'>
heap1 = [1] : <type 'list'>
=> heap1 = [1, 4] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [1, 4] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [1, 1, 4, 4] : <type 'list'>
==================================================
int4 = 10                                                                # STEP 9
ACTION: int4 = 10 
int4 = 4 : <type 'int'>
=> int4 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [1, 4] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [1, 1, 4, 4] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 11
ACTION: heaps.heappush(heap2,int2) 
int2 = 1 : <type 'int'>
heap2 = [1, 1, 4, 4] : <type 'list'>
=> heap2 = [1, 1, 4, 4, 1] : <type 'list'>
==================================================
int2 = 17                                                               # STEP 12
ACTION: int2 = 17 
int2 = 1 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [1, 1, 4, 4, 1] : <type 'list'>
heap1 = [1, 4] : <type 'list'>
=> heap1 = [1, 1, 1, 1, 4, 4, 1, 4, 4, 1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 14
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 4, 4, 1] : <type 'list'>
=> heap2 = [1, 1, 4, 4] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 15
ACTION: heaps.heappush(heap2,int0) 
int0 = 2 : <type 'int'>
heap2 = [1, 1, 4, 4] : <type 'list'>
=> heap2 = [1, 1, 4, 4, 2] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 4, 4] : <type 'list'>
=> heap0 = [1, 4, 4] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 17
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 4, 4] : <type 'list'>
heap1 = [1, 1, 1, 1, 4, 4, 1, 4, 4, 1] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 4, 4, 1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 4, 4, 2] : <type 'list'>
=> heap2 = [1, 2, 4, 4] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 20
ACTION: heap1 = heaps.heapnew() 
heap1 = [1, 1, 1, 1, 4, 4, 1, 4, 4, 1] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 2, 4, 4] : <type 'list'>
=> heap2 = [2, 4, 4] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 22
ACTION: heap2 = heaps.heapnew() 
heap2 = [2, 4, 4] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 23
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 4, 4, 1] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 4, 4] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 24
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 1, 1, 4, 4, 4, 4, 1, 4, 4] : <type 'list'>
=> heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 1, 4] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 1, 4] : <type 'list'>
=> heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 4] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 26
ACTION: heaps.heappush(heap0,int2) 
int2 = 17 : <type 'int'>
heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 4] : <type 'list'>
=> heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 27
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 28
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 29
ACTION: heaps.heappush(heap1,int4) 
int4 = 10 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 17] : <type 'list'>
=> heap0 = [1, 1, 1, 4, 4, 4, 4, 4, 4, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 32
ACTION: heaps.heappush(heap1,int2) 
int2 = 17 : <type 'int'>
heap1 = [10] : <type 'list'>
=> heap1 = [10, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 33
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [10, 17] : <type 'list'>
=> heap1 = [10, 17, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 4, 4, 4, 4, 4, 4, 17] : <type 'list'>
=> heap0 = [1, 4, 1, 4, 4, 4, 4, 17, 4] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 35
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [10, 17, 19] : <type 'list'>
=> heap1 = [10, 17, 19, 19] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 36
ACTION: int2 = 5 
int2 = 17 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 37
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 1, 4, 4, 4, 4, 17, 4] : <type 'list'>
=> heap0 = [1, 4, 4, 4, 4, 4, 4, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 38
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 4, 4, 4, 4, 4, 17] : <type 'list'>
=> heap0 = [4, 4, 4, 17, 4, 4, 4] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [10, 17, 19, 19] : <type 'list'>
=> heap1 = [17, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 40
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 41
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [17, 19, 19] : <type 'list'>
=> heap1 = [5, 17, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 42
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 17, 19, 19] : <type 'list'>
heap0 = [4, 4, 4, 17, 4, 4, 4] : <type 'list'>
=> heap0 = [4, 4, 4, 5, 17, 17, 4, 4, 4, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 43
ACTION: heaps.heappop(heap0) 
heap0 = [4, 4, 4, 5, 17, 17, 4, 4, 4, 19, 19] : <type 'list'>
=> heap0 = [4, 5, 4, 4, 17, 17, 4, 19, 4, 19] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 44
ACTION: int4 = 16 
int4 = 10 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [5, 17, 19, 19] : <type 'list'>
=> heap1 = [17, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 46
ACTION: heaps.heappop(heap0) 
heap0 = [4, 5, 4, 4, 17, 17, 4, 19, 4, 19] : <type 'list'>
=> heap0 = [4, 5, 4, 4, 17, 17, 19, 19, 4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 19, 19] : <type 'list'>
=> heap1 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 48
ACTION: heaps.heappop(heap0) 
heap0 = [4, 5, 4, 4, 17, 17, 19, 19, 4] : <type 'list'>
=> heap0 = [4, 5, 4, 4, 17, 17, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 49
ACTION: heaps.heappop(heap1) 
heap1 = [19, 19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 50
ACTION: int0 = 6 
int0 = 19 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 51
ACTION: heaps.heappop(heap1) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 52
ACTION: heaps.heappop(heap0) 
heap0 = [4, 5, 4, 4, 17, 17, 19, 19] : <type 'list'>
=> heap0 = [4, 5, 17, 4, 17, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 5, 17, 4, 17, 19, 19] : <type 'list'>
heap2 = [3] : <type 'list'>
=> heap2 = [4, 4, 5, 5, 17, 4, 17, 17, 4, 17, 19, 19, 19, 19] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 54
ACTION: int2 = 3 
int2 = 5 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 55
ACTION: heaps.heappop(heap0) 
heap0 = [4, 5, 17, 4, 17, 19, 19] : <type 'list'>
=> heap0 = [5, 4, 17, 19, 17, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 56
ACTION: heaps.heappush(heap1,int4) 
int4 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 4, 17, 19, 17, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [4, 17, 17, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e49950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 24
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0678341389 TOTAL RUNTIME
28 EXECUTED
2682 TOTAL TEST OPERATIONS
29.4126369953 TIME SPENT EXECUTING TEST OPERATIONS
0.377364873886 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.5492610931 TIME SPENT CHECKING PROPERTIES
58.9618980885 TOTAL TIME SPENT RUNNING SUT
0.0124595165253 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 4                                                                 # STEP 0
int1 = 10                                                                # STEP 1
int0 = 2                                                                 # STEP 2
int3 = 3                                                                 # STEP 3
int2 = 1                                                                 # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap1,int2)                                               # STEP 6
heaps.heappush(heap1,int4)                                               # STEP 7
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
int4 = 10                                                                # STEP 9
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
heaps.heappush(heap2,int2)                                              # STEP 11
int2 = 17                                                               # STEP 12
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
heaps.heappop(heap2)                                                    # STEP 14
heaps.heappush(heap2,int0)                                              # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
int0 = 19                                                               # STEP 17
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heap1 = heaps.heapnew()                                                 # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heap2 = heaps.heapnew()                                                 # STEP 22
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 23
heaps.heappop(heap0)                                                    # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
heaps.heappush(heap0,int2)                                              # STEP 26
heaps.heappop(heap1)                                                    # STEP 27
heaps.heappush(heap2,int3)                                              # STEP 28
heaps.heappush(heap1,int4)                                              # STEP 29
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
heaps.heappush(heap1,int2)                                              # STEP 32
heaps.heappush(heap1,int0)                                              # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
heaps.heappush(heap1,int0)                                              # STEP 35
int2 = 5                                                                # STEP 36
heaps.heappop(heap0)                                                    # STEP 37
heaps.heappop(heap0)                                                    # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
heaps.heappush(heap2,int3)                                              # STEP 40
heaps.heappush(heap1,int2)                                              # STEP 41
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 42
heaps.heappop(heap0)                                                    # STEP 43
int4 = 16                                                               # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
heaps.heappop(heap0)                                                    # STEP 46
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
heaps.heappop(heap0)                                                    # STEP 48
heaps.heappop(heap1)                                                    # STEP 49
int0 = 6                                                                # STEP 50
heaps.heappop(heap1)                                                    # STEP 51
heaps.heappop(heap0)                                                    # STEP 52
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
int2 = 3                                                                # STEP 54
heaps.heappop(heap0)                                                    # STEP 55
heaps.heappush(heap1,int4)                                              # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e49950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

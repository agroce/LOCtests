Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.44256.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #13 STEP #96 (0:00:30.008070) Mon May  1 03:01:16 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032d23f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 79 steps

SAVING TEST AS failure.44256.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 15                                                                # STEP 0
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 3
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 4
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 5
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 8
ACTION: heaps.heappush(heap0,int0) 
int0 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                     # STEP 9
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 5                                                                # STEP 13
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 14
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 15
ACTION: int0 = 13 
int0 = 15 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 18
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 20
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 21
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 22
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 1                                                                # STEP 25
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 26
ACTION: heaps.heappush(heap1,int3) 
int3 = 1 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [1] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 27
ACTION: heaps.heappush(heap2,int1) 
int1 = 5 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 30
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 32
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 5                                                                # STEP 33
ACTION: int3 = 5 
int3 = 1 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 34
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 35
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 37
ACTION: heaps.heappush(heap0,int0) 
int0 = 13 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 38
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [13] : <type 'list'>
=> heap0 = [5, 13] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 39
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
int4 = 6                                                                # STEP 40
ACTION: int4 = 6 
int4 = 5 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 41
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 13] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [5, 5, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 42
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 13, 13] : <type 'list'>
=> heap2 = [5, 13, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [5, 13, 13] : <type 'list'>
heap0 = [5, 13] : <type 'list'>
=> heap0 = [5, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 44
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 45
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [5, 13, 13] : <type 'list'>
heap0 = [5, 13, 13] : <type 'list'>
=> heap2 = [5, 5, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 13, 13] : <type 'list'>
=> heap0 = [13, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 5, 13, 13, 13, 13] : <type 'list'>
heap0 = [13, 13] : <type 'list'>
=> heap0 = [5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 50
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 51
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 52
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
heap1 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 54
ACTION: int0 = 18 
int0 = 13 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
heap2 = [5, 5, 13, 13, 13, 13] : <type 'list'>
=> heap2 = [5, 5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 57
ACTION: heaps.heappush(heap2,int0) 
int0 = 18 : <type 'int'>
heap2 = [5, 5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap2 = [5, 5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 58
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 60
ACTION: int0 = 1 
int0 = 18 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 62
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 13, 5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18] : <type 'list'>
=> heap2 = [5, 5, 5, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 64
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap2 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 13, 5, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13, 13] : <type 'list'>
=> heap2 = [5, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13, 13] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 67
ACTION: heaps.heappop(heap0) 
heap0 = [5, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13, 13] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 69
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 70
ACTION: heaps.heappop(heap1) 
heap1 = [13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13] : <type 'list'>
heap0 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13] : <type 'list'>
heap1 = [13, 13, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 18, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13, 13] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18, 13] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 75
ACTION: heaps.heappop(heap1) 
heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 18, 13, 13] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 18, 13] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 76
ACTION: heaps.heappush(heap0,int0) 
int0 = 1 : <type 'int'>
heap0 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [1, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
int0 = 14                                                               # STEP 77
ACTION: int0 = 14 
int0 = 1 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 18, 13] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 5, 13, 13, 13, 13, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032efa70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 59
STOPPING TESTING DUE TO TIMEOUT
16.1524500907 PERCENT COVERED
60.0521090031 TOTAL RUNTIME
26 EXECUTED
2165 TOTAL TEST OPERATIONS
29.2915892601 TIME SPENT EXECUTING TEST OPERATIONS
0.256395339966 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2736411095 TIME SPENT CHECKING PROPERTIES
58.5652303696 TOTAL TIME SPENT RUNNING SUT
0.0122497081757 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 15                                                                # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 3
heap1 = heaps.heapnew()                                                  # STEP 4
heaps.heappop(heap1)                                                     # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heaps.heappush(heap0,int0)                                               # STEP 8
heap1 = heaps.heapmerge(heap1,heap2)                                     # STEP 9
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
int1 = 5                                                                # STEP 13
heap2 = heaps.heapnew()                                                 # STEP 14
int0 = 13                                                               # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 17
heaps.heappop(heap0)                                                    # STEP 18
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
int4 = 5                                                                # STEP 20
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 21
heaps.heappop(heap2)                                                    # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
int3 = 1                                                                # STEP 25
heaps.heappush(heap1,int3)                                              # STEP 26
heaps.heappush(heap2,int1)                                              # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
heaps.heappop(heap0)                                                    # STEP 32
int3 = 5                                                                # STEP 33
heap2 = heaps.heapnew()                                                 # STEP 34
int2 = 10                                                               # STEP 35
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
heaps.heappush(heap0,int0)                                              # STEP 37
heaps.heappush(heap0,int4)                                              # STEP 38
int1 = 8                                                                # STEP 39
int4 = 6                                                                # STEP 40
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 41
heaps.heappop(heap2)                                                    # STEP 42
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 43
heaps.heappop(heap1)                                                    # STEP 44
heap1 = heaps.heapnew()                                                 # STEP 45
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
heaps.heappop(heap0)                                                    # STEP 50
heaps.heappop(heap0)                                                    # STEP 51
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 52
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 53
int0 = 18                                                               # STEP 54
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 55
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
heaps.heappush(heap2,int0)                                              # STEP 57
heaps.heappop(heap0)                                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
int0 = 1                                                                # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
heaps.heappop(heap2)                                                    # STEP 62
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
heaps.heappop(heap2)                                                    # STEP 64
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
heaps.heappop(heap0)                                                    # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 69
heaps.heappop(heap1)                                                    # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
heaps.heappop(heap1)                                                    # STEP 75
heaps.heappush(heap0,int0)                                              # STEP 76
int0 = 14                                                               # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032efa70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

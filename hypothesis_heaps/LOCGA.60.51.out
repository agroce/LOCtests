Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69501.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #82 (0:00:30.004724) Tue May  2 19:41:27 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103df67e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 91 steps

SAVING TEST AS failure.69501.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 9                                                                 # STEP 0
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int4 = 5                                                                 # STEP 1
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 2
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 19                                                                # STEP 3
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 4
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 5
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                  # STEP 6
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int3 = 7                                                                 # STEP 7
ACTION: int3 = 7 
int3 = None : <type 'NoneType'>
=> int3 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 8
ACTION: heaps.heappush(heap0,int2) 
int2 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
int2 = 9                                                                 # STEP 9
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 10
ACTION: heaps.heappop(heap0) 
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                 # STEP 13
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 14
ACTION: heaps.heappush(heap2,int1) 
int1 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 15
ACTION: heaps.heappush(heap2,int1) 
int1 = 9 : <type 'int'>
heap2 = [9] : <type 'list'>
=> heap2 = [9, 9] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [9, 9] : <type 'list'>
=> heap2 = [9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 17
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 18
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [9, 9, 9, 9] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [9, 9, 9, 9] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 20
ACTION: int1 = 11 
int1 = 9 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 21
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 9, 9, 9] : <type 'list'>
heap2 = [9, 9, 9, 9] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 9] : <type 'list'>
=> heap2 = [9, 9, 9] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 24
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 9, 9, 9] : <type 'list'>
heap2 = [9, 9, 9] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [9, 9, 9, 9, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 26
ACTION: heaps.heappush(heap2,int0) 
int0 = 19 : <type 'int'>
heap2 = [9, 9, 9] : <type 'list'>
=> heap2 = [9, 9, 9, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 28
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 29
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 19] : <type 'list'>
=> heap2 = [9, 19, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 9, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 9, 9, 9, 9, 9] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 9, 9] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 19, 9] : <type 'list'>
=> heap2 = [9, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 33
ACTION: heaps.heappush(heap2,int1) 
int1 = 11 : <type 'int'>
heap2 = [9, 19] : <type 'list'>
=> heap2 = [9, 19, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 9, 9, 9, 9, 9] : <type 'list'>
heap2 = [9, 19, 11] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 9, 9, 9, 19, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 9, 9, 9, 9, 9, 19, 11] : <type 'list'>
=> heap0 = [9, 9, 9, 11, 9, 9, 9, 19] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 36
ACTION: int0 = 19 
int0 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 37
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 9, 9, 9] : <type 'list'>
heap2 = [9, 19, 11] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 19, 11] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 38
ACTION: int1 = 15 
int1 = 11 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 39
ACTION: heaps.heappop(heap2) 
heap2 = [9, 19, 11] : <type 'list'>
=> heap2 = [11, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 40
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [11, 19] : <type 'list'>
=> heap2 = [11, 19, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 41
ACTION: heaps.heappush(heap0,int0) 
int0 = 19 : <type 'int'>
heap0 = [9, 9, 9, 11, 9, 9, 9, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 11, 9, 9, 9, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 9, 9, 19, 11] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 9, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 43
ACTION: heaps.heappush(heap1,int1) 
int1 = 15 : <type 'int'>
heap1 = [9, 9, 9, 11, 9, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 9, 19, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9, 9, 11, 9, 9, 9, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 9, 11, 19, 9, 9, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 45
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [9, 9, 9, 11, 9, 19, 15] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 9, 19, 15, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 9, 9, 11, 19, 9, 9, 19] : <type 'list'>
heap2 = [11, 19, 15] : <type 'list'>
heap1 = [9, 9, 9, 11, 9, 19, 15, 19] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 11, 19, 9, 9, 19, 19, 15] : <type 'list'>
==================================================
int0 = 3                                                                # STEP 47
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 19, 15] : <type 'list'>
=> heap2 = [15, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 11, 11, 19, 9, 9, 19, 19, 15] : <type 'list'>
=> heap1 = [9, 11, 9, 9, 11, 19, 9, 15, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 50
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 9, 11, 19, 9, 9, 19] : <type 'list'>
=> heap0 = [9, 11, 9, 19, 19, 9, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 51
ACTION: heaps.heappush(heap1,int3) 
int3 = 7 : <type 'int'>
heap1 = [9, 11, 9, 9, 11, 19, 9, 15, 19, 19] : <type 'list'>
=> heap1 = [7, 9, 9, 9, 11, 19, 9, 15, 19, 19, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [15, 19] : <type 'list'>
=> heap2 = [15, 15, 19, 19] : <type 'list'>
==================================================
int1 = 6                                                                # STEP 53
ACTION: int1 = 6 
int1 = 15 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 54
ACTION: int3 = 3 
int3 = 7 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 11, 9, 19, 19, 9, 9] : <type 'list'>
=> heap0 = [9, 11, 9, 19, 19, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 56
ACTION: heaps.heappop(heap1) 
heap1 = [7, 9, 9, 9, 11, 19, 9, 15, 19, 19, 11] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 11, 19, 9, 15, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 57
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [9, 11, 9, 19, 19, 9] : <type 'list'>
=> heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 9, 19, 19, 9] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 58
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 9, 19, 19, 9] : <type 'list'>
=> heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 9, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 19, 19] : <type 'list'>
=> heap2 = [15, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 19, 19] : <type 'list'>
=> heap2 = [19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 9, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 62
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 9, 9, 11, 11, 19, 9, 15, 19, 19] : <type 'list'>
heap2 = [19, 19] : <type 'list'>
=> heap2 = [9, 9, 9, 11, 11, 19, 9, 15, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 63
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 11, 11, 19, 9, 15, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 11, 9, 15, 11, 19, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 64
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [9, 9, 9, 11, 11, 19, 9, 15, 19, 19] : <type 'list'>
=> heap1 = [3, 9, 9, 11, 9, 19, 9, 15, 19, 19, 11] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 65
ACTION: int0 = 13 
int0 = 3 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 66
ACTION: heaps.heappush(heap0,int1) 
int1 = 6 : <type 'int'>
heap0 = [9, 9, 11, 9, 11, 9, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [6, 9, 11, 9, 9, 9, 19, 19, 19, 19, 11] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 67
ACTION: heap1 = heaps.heapnew() 
heap1 = [3, 9, 9, 11, 9, 19, 9, 15, 19, 19, 11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 68
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 11, 9, 15, 11, 19, 9, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 11, 9, 15, 11, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 70
ACTION: heaps.heappop(heap2) 
heap2 = [9, 11, 9, 15, 11, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [9, 11, 19, 15, 11, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 11, 19, 15, 11, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [11, 11, 19, 15, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 72
ACTION: heaps.heappop(heap1) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [11, 11, 19, 15, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [11, 15, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
int1 = 2                                                                # STEP 74
ACTION: int1 = 2 
int1 = 6 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 75
ACTION: heaps.heappop(heap0) 
heap0 = [6, 9, 11, 9, 9, 9, 19, 19, 19, 19, 11] : <type 'list'>
=> heap0 = [9, 9, 11, 11, 9, 9, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                 # STEP 77
ACTION: heap2 = heaps.heapnew() 
heap2 = [11, 15, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 11, 11, 9, 9, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 9, 11, 11, 19, 9, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 79
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int4 = 4                                                                # STEP 80
ACTION: int4 = 4 
int4 = 5 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 11, 11, 19, 9, 19, 19, 19] : <type 'list'>
=> heap0 = [9, 11, 11, 19, 19, 9, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 11, 11, 19, 19, 9, 19, 19] : <type 'list'>
=> heap0 = [11, 19, 11, 19, 19, 9, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 83
ACTION: heaps.heappush(heap1,int4) 
int4 = 4 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 84
ACTION: int4 = 17 
int4 = 4 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 85
ACTION: heaps.heappush(heap1,int4) 
int4 = 17 : <type 'int'>
heap1 = [4] : <type 'list'>
=> heap1 = [4, 17] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 86
ACTION: heaps.heappush(heap0,int1) 
int1 = 2 : <type 'int'>
heap0 = [11, 19, 11, 19, 19, 9, 19] : <type 'list'>
=> heap0 = [2, 11, 11, 19, 19, 9, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 87
ACTION: heaps.heappop(heap0) 
heap0 = [2, 11, 11, 19, 19, 9, 19, 19] : <type 'list'>
=> heap0 = [11, 19, 11, 19, 19, 9, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 88
ACTION: heaps.heappop(heap1) 
heap1 = [4, 17] : <type 'list'>
=> heap1 = [17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 89
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 90
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 19, 11, 19, 19, 9, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [11, 19, 9, 19, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103de0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 30
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0814628601 TOTAL RUNTIME
20 EXECUTED
1921 TOTAL TEST OPERATIONS
29.1842346191 TIME SPENT EXECUTING TEST OPERATIONS
0.245037555695 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.0916318893 TIME SPENT CHECKING PROPERTIES
58.2758665085 TOTAL TIME SPENT RUNNING SUT
0.0113639831543 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 9                                                                 # STEP 0
int4 = 5                                                                 # STEP 1
heap0 = heaps.heapnew()                                                  # STEP 2
int0 = 19                                                                # STEP 3
int2 = 9                                                                 # STEP 4
heaps.heappop(heap0)                                                     # STEP 5
heap2 = heaps.heapnew()                                                  # STEP 6
int3 = 7                                                                 # STEP 7
heaps.heappush(heap0,int2)                                               # STEP 8
int2 = 9                                                                 # STEP 9
heaps.heappop(heap0)                                                    # STEP 10
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heap0 = heaps.heapnew()                                                 # STEP 13
heaps.heappush(heap2,int1)                                              # STEP 14
heaps.heappush(heap2,int1)                                              # STEP 15
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
heaps.heappop(heap0)                                                    # STEP 17
heap1 = heaps.heapnew()                                                 # STEP 18
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
int1 = 11                                                               # STEP 20
heaps.heappush(heap1,int0)                                              # STEP 21
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
heaps.heappush(heap2,int0)                                              # STEP 26
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 28
heaps.heappop(heap2)                                                    # STEP 29
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
heaps.heappush(heap2,int1)                                              # STEP 33
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 34
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
int0 = 19                                                               # STEP 36
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 37
int1 = 15                                                               # STEP 38
heaps.heappop(heap2)                                                    # STEP 39
heaps.heappush(heap2,int1)                                              # STEP 40
heaps.heappush(heap0,int0)                                              # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
heaps.heappush(heap1,int1)                                              # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
heaps.heappush(heap1,int0)                                              # STEP 45
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
int0 = 3                                                                # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 50
heaps.heappush(heap1,int3)                                              # STEP 51
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
int1 = 6                                                                # STEP 53
int3 = 3                                                                # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
heaps.heappop(heap1)                                                    # STEP 56
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 57
heaps.heappop(heap0)                                                    # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 62
heaps.heappop(heap2)                                                    # STEP 63
heaps.heappush(heap1,int0)                                              # STEP 64
int0 = 13                                                               # STEP 65
heaps.heappush(heap0,int1)                                              # STEP 66
heap1 = heaps.heapnew()                                                 # STEP 67
heaps.heappush(heap1,int4)                                              # STEP 68
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
heaps.heappop(heap2)                                                    # STEP 70
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
heaps.heappop(heap1)                                                    # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
int1 = 2                                                                # STEP 74
heaps.heappop(heap0)                                                    # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
heap2 = heaps.heapnew()                                                 # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 79
int4 = 4                                                                # STEP 80
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heaps.heappush(heap1,int4)                                              # STEP 83
int4 = 17                                                               # STEP 84
heaps.heappush(heap1,int4)                                              # STEP 85
heaps.heappush(heap0,int1)                                              # STEP 86
heaps.heappop(heap0)                                                    # STEP 87
heaps.heappop(heap1)                                                    # STEP 88
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 89
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 90
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103de0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

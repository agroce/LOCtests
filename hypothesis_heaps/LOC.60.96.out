Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1039.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105566368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 87 steps

SAVING TEST AS failure.1039.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 18                                                                # STEP 0
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 1
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 2
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int4 = 6                                                                 # STEP 3
ACTION: int4 = 6 
int4 = None : <type 'NoneType'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 4
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 5
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 8
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 5                                                                 # STEP 9
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 17                                                               # STEP 10
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 11
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 12
ACTION: heaps.heappush(heap1,int0) 
int0 = 17 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [17] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 13
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 14
ACTION: heap2 = heaps.heapnew() 
heap2 = [6] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [17] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 15                                                               # STEP 16
ACTION: int0 = 15 
int0 = 17 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 18
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapnew()                                                 # STEP 19
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 20
ACTION: heaps.heappush(heap2,int0) 
int0 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 21
ACTION: heaps.heappush(heap2,int2) 
int2 = 18 : <type 'int'>
heap2 = [15] : <type 'list'>
=> heap2 = [15, 18] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 22
ACTION: int0 = 19 
int0 = 15 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 23
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 24
ACTION: heaps.heappush(heap0,int4) 
int4 = 6 : <type 'int'>
heap0 = [6] : <type 'list'>
=> heap0 = [6, 6] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 26
ACTION: int2 = 12 
int2 = 18 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [6] : <type 'list'>
heap2 = [15, 18] : <type 'list'>
=> heap2 = [6, 15, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [6, 15, 18] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [6] : <type 'list'>
=> heap0 = [6, 15, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [6, 15, 18] : <type 'list'>
heap2 = [6, 15, 18] : <type 'list'>
=> heap2 = [6, 6, 15, 15, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 15, 18] : <type 'list'>
=> heap0 = [15, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 31
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 32
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 6, 15, 15, 18, 18] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 6, 6, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 35
ACTION: heaps.heappush(heap1,int4) 
int4 = 6 : <type 'int'>
heap1 = [6, 6, 6, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 15, 6, 15, 18, 18, 18, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 6, 15, 15, 6, 15, 18, 18, 18, 18, 15] : <type 'list'>
=> heap1 = [6, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 15, 15, 18, 18] : <type 'list'>
=> heap2 = [6, 15, 15, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18] : <type 'list'>
heap2 = [6, 15, 15, 18, 18] : <type 'list'>
heap0 = [15, 18] : <type 'list'>
=> heap0 = [6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 15, 15, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 15, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap2 = [15, 18, 15, 18] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 41
ACTION: int0 = 18 
int0 = 19 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 42
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap1 = [6, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [6, 6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 43
ACTION: int4 = 13 
int4 = 6 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 44
ACTION: heaps.heappop(heap1) 
heap1 = [6, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 15, 6, 15, 15, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 15, 6, 15, 15, 18, 15, 18, 18, 18] : <type 'list'>
heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 6, 6, 6, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 48
ACTION: heaps.heappush(heap0,int4) 
int4 = 13 : <type 'int'>
heap0 = [6, 6, 6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [6, 6, 6, 15, 6, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 49
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 6, 15, 6, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15] : <type 'list'>
=> heap0 = [6, 6, 6, 15, 15, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 6, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 18, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 6, 15, 15, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 6, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [6, 15, 6, 6, 15, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 52
ACTION: int4 = 16 
int4 = 13 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 53
ACTION: heaps.heappush(heap2,int0) 
int0 = 18 : <type 'int'>
heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 54
ACTION: int0 = 7 
int0 = 18 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 55
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 6, 6, 15, 15, 6, 15, 6, 15, 15, 15, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 56
ACTION: heaps.heappop(heap0) 
heap0 = [6, 15, 6, 6, 15, 15, 13, 6, 15, 15, 15, 15, 6, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [6, 15, 13, 6, 15, 15, 15, 6, 15, 15, 15, 15, 6, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 15, 15, 6, 15, 6, 15, 15, 15, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 15, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 15, 13, 6, 15, 15, 15, 6, 15, 15, 15, 15, 6, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [13, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 6, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 18, 15, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 15, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 61
ACTION: heaps.heappush(heap2,int4) 
int4 = 16 : <type 'int'>
heap2 = [6, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [6, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 62
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [13, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [13, 13, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 63
ACTION: int4 = 2 
int4 = 16 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 18, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap2 = [6, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 65
ACTION: heaps.heappop(heap0) 
heap0 = [13, 13, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 6, 15, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [13, 6, 15, 15, 15, 15, 6, 15, 6, 6, 15, 15, 15, 15, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 66
ACTION: heaps.heappush(heap2,int3) 
int3 = 5 : <type 'int'>
heap2 = [6, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap2 = [5, 15, 6, 6, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 67
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 6, 6, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 15, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 16, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 68
ACTION: heaps.heappush(heap2,int3) 
int3 = 5 : <type 'int'>
heap2 = [5, 15, 6, 6, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
=> heap2 = [5, 5, 6, 15, 15, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 69
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 5, 6, 15, 15, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18] : <type 'list'>
heap0 = [13, 6, 15, 15, 15, 15, 6, 15, 6, 6, 15, 15, 15, 15, 15, 6, 15, 6, 15, 15, 15, 15, 15, 15, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [5, 5, 5, 5, 6, 6, 15, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 70
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 5, 6, 6, 15, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18] : <type 'list'>
=> heap0 = [5, 5, 5, 15, 6, 6, 15, 15, 15, 6, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 71
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 15, 6, 6, 15, 15, 15, 6, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
=> heap0 = [5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 6, 6, 6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 15, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 16, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 6, 6, 15, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 6, 15, 15, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18] : <type 'list'>
=> heap2 = [5, 15, 6, 6, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 74
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 6, 15, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 15, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 75
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
heap2 = [5, 15, 6, 6, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
=> heap2 = [5, 5, 6, 5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [6, 15, 6, 15, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 15, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 77
ACTION: heaps.heappop(heap1) 
heap1 = [6, 15, 6, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 18, 15, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [6, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 78
ACTION: heaps.heappush(heap0,int2) 
int2 = 12 : <type 'int'>
heap0 = [5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap0 = [5, 6, 5, 15, 6, 6, 12, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 6, 5, 15, 6, 6, 12, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15] : <type 'list'>
=> heap0 = [5, 6, 6, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
int3 = 18                                                               # STEP 80
ACTION: int3 = 18 
int3 = 5 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 81
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [5, 6, 6, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
heap2 = [5, 5, 6, 5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap0 = [5, 5, 5, 6, 6, 6, 5, 6, 5, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
int2 = 6                                                                # STEP 82
ACTION: int2 = 6 
int2 = 12 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 83
ACTION: heaps.heappop(heap1) 
heap1 = [6, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 15, 6, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 18, 6, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 84
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 5, 5, 6, 6, 6, 5, 6, 5, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
heap2 = [5, 5, 6, 5, 6, 5, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 5, 5, 6, 6, 6, 5, 6, 5, 6, 6, 6, 5, 6, 5, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 85
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 6, 6, 6, 5, 6, 5, 15, 6, 15, 12, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16] : <type 'list'>
=> heap0 = [5, 6, 5, 5, 6, 6, 5, 6, 15, 15, 6, 15, 12, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 6, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 15, 15, 15, 15, 15, 6, 15, 15, 15, 15, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 15, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 18, 15, 6, 6, 16, 15, 15, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 15, 18, 18, 15, 6, 15, 15, 18, 18, 15, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 6, 16, 18, 6, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 15, 15, 6, 18, 18, 6, 6, 15, 15, 15, 15, 18, 18, 15, 18, 15, 15, 6, 15, 18, 18, 18, 18, 15, 18, 15, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15, 6, 15, 18, 18, 18, 15, 15, 18, 18, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105582c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #12 STEP #24 (0:00:30.022338) Fri Apr 28 08:01:15 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0387260914 TOTAL RUNTIME
24 EXECUTED
2327 TOTAL TEST OPERATIONS
29.2513706684 TIME SPENT EXECUTING TEST OPERATIONS
0.328540086746 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2360377312 TIME SPENT CHECKING PROPERTIES
58.4874083996 TOTAL TIME SPENT RUNNING SUT
0.011079788208 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 18                                                                # STEP 0
int0 = 17                                                                # STEP 1
heap0 = heaps.heapnew()                                                  # STEP 2
int4 = 6                                                                 # STEP 3
heaps.heappop(heap0)                                                     # STEP 4
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 5
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heaps.heappop(heap0)                                                     # STEP 8
int3 = 5                                                                 # STEP 9
int1 = 17                                                               # STEP 10
heaps.heappush(heap2,int4)                                              # STEP 11
heaps.heappush(heap1,int0)                                              # STEP 12
heaps.heappush(heap0,int4)                                              # STEP 13
heap2 = heaps.heapnew()                                                 # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
int0 = 15                                                               # STEP 16
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
heaps.heappop(heap0)                                                    # STEP 18
heap1 = heaps.heapnew()                                                 # STEP 19
heaps.heappush(heap2,int0)                                              # STEP 20
heaps.heappush(heap2,int2)                                              # STEP 21
int0 = 19                                                               # STEP 22
heaps.heappush(heap0,int4)                                              # STEP 23
heaps.heappush(heap0,int4)                                              # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
int2 = 12                                                               # STEP 26
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 29
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 31
heaps.heappush(heap1,int0)                                              # STEP 32
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heaps.heappush(heap1,int4)                                              # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 38
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
int0 = 18                                                               # STEP 41
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 42
int4 = 13                                                               # STEP 43
heaps.heappop(heap1)                                                    # STEP 44
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 45
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
heaps.heappush(heap0,int4)                                              # STEP 48
heaps.heappop(heap0)                                                    # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
int4 = 16                                                               # STEP 52
heaps.heappush(heap2,int0)                                              # STEP 53
int0 = 7                                                                # STEP 54
heaps.heappop(heap2)                                                    # STEP 55
heaps.heappop(heap0)                                                    # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
heaps.heappush(heap2,int4)                                              # STEP 61
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 62
int4 = 2                                                                # STEP 63
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
heaps.heappop(heap0)                                                    # STEP 65
heaps.heappush(heap2,int3)                                              # STEP 66
heaps.heappop(heap1)                                                    # STEP 67
heaps.heappush(heap2,int3)                                              # STEP 68
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 69
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 70
heaps.heappop(heap0)                                                    # STEP 71
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
heaps.heappop(heap1)                                                    # STEP 74
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
heaps.heappop(heap1)                                                    # STEP 77
heaps.heappush(heap0,int2)                                              # STEP 78
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
int3 = 18                                                               # STEP 80
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 81
int2 = 6                                                                # STEP 82
heaps.heappop(heap1)                                                    # STEP 83
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 84
heaps.heappop(heap0)                                                    # STEP 85
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x105582c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

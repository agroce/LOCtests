Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.39991.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1031efa28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 46 steps

SAVING TEST AS failure.39991.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 9                                                                 # STEP 0
ACTION: int4 = 9 
int4 = None : <type 'NoneType'>
=> int4 = 9 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 1
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int3 = 17                                                                # STEP 2
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 4
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
int2 = 20                                                                # STEP 5
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                               # STEP 6
ACTION: heaps.heappush(heap2,int3) 
int3 = 17 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [17] : <type 'list'>
==================================================
int3 = 13                                                                # STEP 7
ACTION: int3 = 13 
int3 = 17 : <type 'int'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 8
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 10
ACTION: heaps.heappush(heap1,int3) 
int3 = 13 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 11
ACTION: heaps.heappush(heap1,int3) 
int3 = 13 : <type 'int'>
heap1 = [13] : <type 'list'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 12
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 13
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [13] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 14
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [13] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 15
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [13] : <type 'list'>
heap0 = [13] : <type 'list'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
int3 = 15                                                               # STEP 16
ACTION: int3 = 15 
int3 = 13 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 17
ACTION: heaps.heappush(heap0,int4) 
int4 = 9 : <type 'int'>
heap0 = [13] : <type 'list'>
=> heap0 = [9, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [13, 13] : <type 'list'>
heap2 = [13] : <type 'list'>
heap0 = [9, 13] : <type 'list'>
=> heap0 = [13, 13, 13] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 19
ACTION: heaps.heappush(heap0,int2) 
int2 = 20 : <type 'int'>
heap0 = [13, 13, 13] : <type 'list'>
=> heap0 = [13, 13, 13, 20] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 20
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 21
ACTION: heaps.heappush(heap2,int1) 
int1 = 1 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [1, 13] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 22
ACTION: heaps.heappush(heap1,int3) 
int3 = 15 : <type 'int'>
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13, 13, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [1, 13] : <type 'list'>
heap1 = [13, 13, 15] : <type 'list'>
heap0 = [13, 13, 13, 20] : <type 'list'>
=> heap0 = [1, 13, 13, 13, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 13, 13, 13, 15] : <type 'list'>
heap1 = [13, 13, 15] : <type 'list'>
=> heap1 = [1, 13, 13, 13, 13, 13, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 13, 13, 13, 13, 13, 15, 15] : <type 'list'>
=> heap1 = [13, 13, 13, 15, 13, 13, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 26
ACTION: heaps.heappush(heap0,int1) 
int1 = 1 : <type 'int'>
heap0 = [1, 13, 13, 13, 15] : <type 'list'>
=> heap0 = [1, 13, 1, 13, 15, 13] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 27
ACTION: heaps.heappush(heap1,int4) 
int4 = 9 : <type 'int'>
heap1 = [13, 13, 13, 15, 13, 13, 15] : <type 'list'>
=> heap1 = [9, 13, 13, 13, 13, 13, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 28
ACTION: heaps.heappush(heap2,int2) 
int2 = 20 : <type 'int'>
heap2 = [1, 13] : <type 'list'>
=> heap2 = [1, 13, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 13, 1, 13, 15, 13] : <type 'list'>
heap1 = [9, 13, 13, 13, 13, 13, 15, 15] : <type 'list'>
=> heap0 = [1, 9, 13, 1, 13, 13, 13, 13, 13, 13, 15, 13, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 30
ACTION: heaps.heappush(heap2,int3) 
int3 = 15 : <type 'int'>
heap2 = [1, 13, 20] : <type 'list'>
=> heap2 = [1, 13, 20, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 13, 20, 15] : <type 'list'>
=> heap2 = [13, 15, 20] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 32
ACTION: int1 = 11 
int1 = 1 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 9, 13, 1, 13, 13, 13, 13, 13, 13, 15, 13, 15, 15] : <type 'list'>
=> heap0 = [9, 1, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 34
ACTION: int2 = 10 
int2 = 20 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 35
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [9, 1, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15] : <type 'list'>
heap2 = [13, 15, 20] : <type 'list'>
=> heap0 = [9, 1, 13, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15, 15, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [13, 15, 20] : <type 'list'>
heap1 = [9, 13, 13, 13, 13, 13, 15, 15] : <type 'list'>
=> heap1 = [9, 13, 13, 13, 13, 13, 13, 15, 15, 15, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 13, 13, 13, 13, 13, 13, 15, 15, 15, 20] : <type 'list'>
heap2 = [13, 15, 20] : <type 'list'>
=> heap2 = [9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 38
ACTION: int3 = 3 
int3 = 15 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 39
ACTION: heaps.heappush(heap1,int2) 
int2 = 10 : <type 'int'>
heap1 = [9, 13, 13, 13, 13, 13, 13, 15, 15, 15, 20] : <type 'list'>
=> heap1 = [9, 13, 10, 13, 13, 13, 13, 15, 15, 15, 20, 13] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 40
ACTION: heaps.heappush(heap0,int0) 
int0 = 18 : <type 'int'>
heap0 = [9, 1, 13, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15, 15, 20] : <type 'list'>
=> heap0 = [9, 1, 13, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15, 15, 20, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 41
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20] : <type 'list'>
heap1 = [9, 13, 10, 13, 13, 13, 13, 15, 15, 15, 20, 13] : <type 'list'>
=> heap1 = [9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 13] : <type 'list'>
=> heap1 = [9, 13, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 10, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 43
ACTION: int0 = 6 
int0 = 18 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 15, 15, 15, 15, 15, 15, 20, 20] : <type 'list'>
=> heap2 = [9, 13, 13, 13, 13, 13, 13, 15, 13, 13, 13, 13, 13, 13, 15, 20, 15, 15, 15, 15, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 1, 13, 13, 13, 13, 13, 13, 15, 13, 13, 15, 13, 15, 15, 20, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [1, 13, 13, 13, 13, 13, 13, 18, 15, 13, 13, 15, 13, 15, 15, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035fff38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #79 (0:00:30.016279) Mon May  1 02:03:53 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
16.3003663004 PERCENT COVERED
60.057653904 TOTAL RUNTIME
26 EXECUTED
2073 TOTAL TEST OPERATIONS
29.5084750652 TIME SPENT EXECUTING TEST OPERATIONS
0.2678399086 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4784224033 TIME SPENT CHECKING PROPERTIES
58.9868974686 TOTAL TIME SPENT RUNNING SUT
0.0131945610046 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 9                                                                 # STEP 0
heap2 = heaps.heapnew()                                                  # STEP 1
int3 = 17                                                                # STEP 2
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 3
heap2 = heaps.heapnew()                                                  # STEP 4
int2 = 20                                                                # STEP 5
heaps.heappush(heap2,int3)                                               # STEP 6
int3 = 13                                                                # STEP 7
int0 = 18                                                                # STEP 8
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
heaps.heappush(heap1,int3)                                              # STEP 10
heaps.heappush(heap1,int3)                                              # STEP 11
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 12
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 13
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 14
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 15
int3 = 15                                                               # STEP 16
heaps.heappush(heap0,int4)                                              # STEP 17
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 18
heaps.heappush(heap0,int2)                                              # STEP 19
int1 = 1                                                                # STEP 20
heaps.heappush(heap2,int1)                                              # STEP 21
heaps.heappush(heap1,int3)                                              # STEP 22
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 23
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
heaps.heappush(heap0,int1)                                              # STEP 26
heaps.heappush(heap1,int4)                                              # STEP 27
heaps.heappush(heap2,int2)                                              # STEP 28
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
heaps.heappush(heap2,int3)                                              # STEP 30
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
int1 = 11                                                               # STEP 32
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
int2 = 10                                                               # STEP 34
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 35
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 37
int3 = 3                                                                # STEP 38
heaps.heappush(heap1,int2)                                              # STEP 39
heaps.heappush(heap0,int0)                                              # STEP 40
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
int0 = 6                                                                # STEP 43
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 45
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035fff38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

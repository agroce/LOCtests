Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.40717.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103cfd290>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 83 steps

SAVING TEST AS failure.40717.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 12                                                                # STEP 0
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 1
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 2                                                                 # STEP 4
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 5
ACTION: heaps.heappush(heap0,int0) 
int0 = 13 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
int4 = 8                                                                 # STEP 6
ACTION: int4 = 8 
int4 = None : <type 'NoneType'>
=> int4 = 8 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 5                                                                 # STEP 8
ACTION: int0 = 5 
int0 = 13 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 10
ACTION: heaps.heappush(heap1,int2) 
int2 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 11
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [2] : <type 'list'>
=> heap1 = [2, 2] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 12
ACTION: heaps.heappush(heap0,int3) 
int3 = 12 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [12] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 13
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
int2 = 7                                                                # STEP 14
ACTION: int2 = 7 
int2 = 2 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 2] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [12] : <type 'list'>
heap1 = [2] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [2, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [2] : <type 'list'>
heap2 = [2, 12] : <type 'list'>
=> heap1 = [2, 2, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [2, 2, 12] : <type 'list'>
heap0 = [12] : <type 'list'>
=> heap0 = [2, 2, 2, 2, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 19
ACTION: heaps.heappush(heap1,int3) 
int3 = 12 : <type 'int'>
heap1 = [2, 2, 12] : <type 'list'>
=> heap1 = [2, 2, 12, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 2, 2, 2, 12, 12] : <type 'list'>
=> heap0 = [2, 2, 2, 12, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [2, 12] : <type 'list'>
heap1 = [2, 2, 12, 12] : <type 'list'>
heap0 = [2, 2, 2, 12, 12] : <type 'list'>
=> heap0 = [2, 2, 2, 12, 12, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [2, 2, 2, 12, 12, 12] : <type 'list'>
heap2 = [2, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 2, 2, 2, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 24
ACTION: heaps.heappush(heap0,int2) 
int2 = 7 : <type 'int'>
heap0 = [2, 2, 2, 12, 12, 12] : <type 'list'>
=> heap0 = [2, 2, 2, 12, 12, 12, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 25
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 26
ACTION: heaps.heappush(heap0,int1) 
int1 = 5 : <type 'int'>
heap0 = [2, 2, 2, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [2, 2, 2, 5, 12, 12, 7, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 27
ACTION: heaps.heappush(heap1,int2) 
int2 = 7 : <type 'int'>
heap1 = [2, 2, 12, 12] : <type 'list'>
=> heap1 = [2, 2, 12, 12, 7] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 2, 2, 5, 12, 12, 7, 12] : <type 'list'>
=> heap0 = [2, 5, 2, 12, 12, 12, 7] : <type 'list'>
==================================================
int2 = 14                                                               # STEP 29
ACTION: int2 = 14 
int2 = 7 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 2, 12, 12, 12, 12] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 31
ACTION: int1 = 5 
int1 = 5 : <type 'int'>
==================================================
int3 = 15                                                               # STEP 32
ACTION: int3 = 15 
int3 = 12 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 5, 2, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [2, 5, 7, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 34
ACTION: heaps.heappush(heap0,int0) 
int0 = 5 : <type 'int'>
heap0 = [2, 5, 7, 12, 12, 12] : <type 'list'>
=> heap0 = [2, 5, 5, 12, 12, 12, 7] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 35
ACTION: heaps.heappush(heap0,int1) 
int1 = 5 : <type 'int'>
heap0 = [2, 5, 5, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [2, 5, 5, 5, 12, 12, 7, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 36
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [2, 2, 12, 12, 7] : <type 'list'>
heap0 = [2, 5, 5, 5, 12, 12, 7, 12] : <type 'list'>
=> heap1 = [2, 2, 2, 5, 5, 5, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 5, 5, 5, 12, 12, 7, 12] : <type 'list'>
=> heap0 = [5, 5, 5, 12, 12, 12, 7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 2, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 39
ACTION: int1 = 1 
int1 = 5 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 2, 2, 5, 5, 5, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
=> heap1 = [2, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7] : <type 'list'>
==================================================
int0 = 14                                                               # STEP 41
ACTION: int0 = 14 
int0 = 5 : <type 'int'>
=> int0 = 14 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7] : <type 'list'>
=> heap1 = [2, 5, 5, 7, 5, 7, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 43
ACTION: heaps.heappush(heap1,int1) 
int1 = 1 : <type 'int'>
heap1 = [2, 5, 5, 7, 5, 7, 12, 12, 12, 12, 12] : <type 'list'>
=> heap1 = [1, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7] : <type 'list'>
heap2 = [2, 2, 2, 2, 2, 2, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [1, 2, 2, 2, 2, 2, 2, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 45
ACTION: heaps.heappush(heap0,int4) 
int4 = 8 : <type 'int'>
heap0 = [5, 5, 5, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [5, 5, 5, 8, 12, 12, 7, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 2, 2, 2, 2, 2, 2, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 2, 5, 7, 7, 5, 5, 12, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
int4 = 12                                                               # STEP 47
ACTION: int4 = 12 
int4 = 8 : <type 'int'>
=> int4 = 12 : <type 'int'>
==================================================
int1 = 2                                                                # STEP 48
ACTION: int1 = 2 
int1 = 1 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [1, 5, 2, 7, 5, 5, 12, 12, 12, 12, 12, 7] : <type 'list'>
heap0 = [5, 5, 5, 8, 12, 12, 7, 12] : <type 'list'>
=> heap1 = [1, 5, 2, 5, 5, 5, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 50
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [2, 2, 2, 2, 2, 2, 2, 5, 7, 7, 5, 5, 12, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 2, 2, 2, 5, 7, 7, 5, 5, 12, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 51
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 5, 5, 8, 12, 12, 7, 12] : <type 'list'>
heap1 = [1, 5, 2, 5, 5, 5, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
heap2 = [2, 2, 2, 2, 2, 2, 2, 5, 7, 7, 5, 5, 12, 12, 12, 12, 12, 12, 12, 2, 2, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [1, 5, 5, 5, 5, 2, 5, 5, 5, 7, 5, 5, 8, 8, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 8, 12, 12, 7, 12] : <type 'list'>
=> heap0 = [5, 8, 5, 12, 12, 12, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 5, 2, 5, 5, 5, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
heap2 = [1, 5, 5, 5, 5, 2, 5, 5, 5, 7, 5, 5, 8, 8, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
heap0 = [5, 8, 5, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [1, 1, 5, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 7, 5, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 5, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 7, 5, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
=> heap0 = [1, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 5, 2, 5, 5, 5, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
=> heap1 = [2, 5, 5, 5, 5, 12, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 56
ACTION: heap1 = heaps.heapnew() 
heap1 = [2, 5, 5, 5, 5, 12, 7, 5, 5, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7] : <type 'list'>
=> heap0 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 58
ACTION: heaps.heappush(heap2,int1) 
int1 = 2 : <type 'int'>
heap2 = [1, 5, 5, 5, 5, 2, 5, 5, 5, 7, 5, 5, 8, 8, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12] : <type 'list'>
=> heap2 = [1, 5, 2, 5, 5, 2, 5, 5, 5, 7, 5, 5, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 8] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 5, 2, 5, 5, 2, 5, 5, 5, 7, 5, 5, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 8] : <type 'list'>
=> heap2 = [2, 5, 2, 5, 5, 5, 5, 5, 5, 7, 5, 7, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 8, 12, 12, 7, 12] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 60
ACTION: int4 = 11 
int4 = 12 : <type 'int'>
=> int4 = 11 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 5, 2, 5, 5, 5, 5, 5, 5, 7, 5, 7, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 8, 12, 12, 7, 12] : <type 'list'>
=> heap2 = [2, 5, 5, 5, 5, 7, 5, 5, 5, 7, 5, 8, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 62
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [2, 5, 5, 5, 5, 7, 5, 5, 5, 7, 5, 8, 8, 5, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
=> heap2 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 63
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 7, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
heap2 = [5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 7, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
=> heap2 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 66
ACTION: heaps.heappush(heap1,int4) 
int4 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 67
ACTION: heaps.heappush(heap1,int2) 
int2 = 14 : <type 'int'>
heap1 = [11] : <type 'list'>
=> heap1 = [11, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
=> heap2 = [2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 69
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
heap2 = [2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
heap1 = [11, 14] : <type 'list'>
=> heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 70
ACTION: heaps.heappush(heap1,int3) 
int3 = 15 : <type 'int'>
heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
=> heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 72
ACTION: int3 = 1 
int3 = 15 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 14                                                               # STEP 73
ACTION: int2 = 14 
int2 = 14 : <type 'int'>
==================================================
int4 = 4                                                                # STEP 74
ACTION: int4 = 4 
int4 = 11 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 75
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12] : <type 'list'>
=> heap0 = [5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 7, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 76
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 12, 7, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
=> heap0 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 7, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 7, 12, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 77
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 15] : <type 'list'>
=> heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 15] : <type 'list'>
=> heap1 = [2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 7, 7, 7, 7, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 15, 12, 12, 12, 12, 12, 12, 7, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 5, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 79
ACTION: heaps.heappush(heap2,int0) 
int0 = 14 : <type 'int'>
heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 80
ACTION: heaps.heappush(heap2,int0) 
int0 = 14 : <type 'int'>
heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14] : <type 'list'>
=> heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 81
ACTION: heaps.heappush(heap2,int4) 
int4 = 4 : <type 'int'>
heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 7, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14, 14] : <type 'list'>
=> heap2 = [4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14, 14, 7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14, 14, 7] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 7, 5, 2, 5, 5, 5, 5, 7, 5, 5, 5, 2, 5, 5, 5, 5, 12, 8, 7, 5, 5, 8, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 12, 12, 12, 12, 7, 5, 5, 12, 8, 8, 12, 12, 12, 12, 12, 7, 12, 12, 7, 12, 12, 12, 7, 12, 12, 12, 12, 12, 12, 7, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103db9f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #11 STEP #79 (0:00:30.014898) Mon May  1 02:38:07 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 4
STOPPING TESTING DUE TO TIMEOUT
16.1524500907 PERCENT COVERED
60.0493040085 TOTAL RUNTIME
25 EXECUTED
2015 TOTAL TEST OPERATIONS
29.2198445797 TIME SPENT EXECUTING TEST OPERATIONS
0.246187448502 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2621028423 TIME SPENT CHECKING PROPERTIES
58.481947422 TOTAL TIME SPENT RUNNING SUT
0.0127484798431 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 12                                                                # STEP 0
heap0 = heaps.heapnew()                                                  # STEP 1
int0 = 13                                                                # STEP 2
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
int2 = 2                                                                 # STEP 4
heaps.heappush(heap0,int0)                                               # STEP 5
int4 = 8                                                                 # STEP 6
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
int0 = 5                                                                 # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
heaps.heappush(heap1,int2)                                              # STEP 10
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 11
heaps.heappush(heap0,int3)                                              # STEP 12
int1 = 5                                                                # STEP 13
int2 = 7                                                                # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 16
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
heaps.heappush(heap1,int3)                                              # STEP 19
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
heaps.heappush(heap0,int2)                                              # STEP 24
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 25
heaps.heappush(heap0,int1)                                              # STEP 26
heaps.heappush(heap1,int2)                                              # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
int2 = 14                                                               # STEP 29
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
int1 = 5                                                                # STEP 31
int3 = 15                                                               # STEP 32
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
heaps.heappush(heap0,int0)                                              # STEP 34
heaps.heappush(heap0,int1)                                              # STEP 35
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 36
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
int1 = 1                                                                # STEP 39
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
int0 = 14                                                               # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
heaps.heappush(heap1,int1)                                              # STEP 43
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
heaps.heappush(heap0,int4)                                              # STEP 45
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
int4 = 12                                                               # STEP 47
int1 = 2                                                                # STEP 48
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
heaps.heappush(heap2,int4)                                              # STEP 50
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 51
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
heap1 = heaps.heapnew()                                                 # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
heaps.heappush(heap2,int1)                                              # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
int4 = 11                                                               # STEP 60
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 62
int1 = 1                                                                # STEP 63
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
heaps.heappush(heap1,int4)                                              # STEP 66
heaps.heappush(heap1,int2)                                              # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 69
heaps.heappush(heap1,int3)                                              # STEP 70
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 71
int3 = 1                                                                # STEP 72
int2 = 14                                                               # STEP 73
int4 = 4                                                                # STEP 74
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 75
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 76
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
heaps.heappush(heap2,int0)                                              # STEP 79
heaps.heappush(heap2,int0)                                              # STEP 80
heaps.heappush(heap2,int4)                                              # STEP 81
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103db9f80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

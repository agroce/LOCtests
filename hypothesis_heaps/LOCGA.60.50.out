Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69497.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #53 (0:00:30.006511) Tue May  2 19:40:26 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104644440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 69 steps

SAVING TEST AS failure.69497.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap2 = heaps.heapnew()                                                  # STEP 0
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 1
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                  # STEP 2
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int1 = 9                                                                 # STEP 4
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                     # STEP 5
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                  # STEP 6
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 9
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 11
ACTION: int4 = 6 
int4 = None : <type 'NoneType'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 13
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int2 = 20                                                               # STEP 14
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 15
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 18
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int4)                                              # STEP 20
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 21
ACTION: int4 = 14 
int4 = 6 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 22
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 23
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [6] : <type 'list'>
=> heap2 = [6, 6] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 24
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [6, 6] : <type 'list'>
=> heap2 = [6, 6, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 26
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 14] : <type 'list'>
=> heap2 = [6, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 28
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [6, 14] : <type 'list'>
=> heap2 = [6, 14, 6] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 12                                                               # STEP 30
ACTION: int4 = 12 
int4 = 14 : <type 'int'>
=> int4 = 12 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 31
ACTION: heaps.heappush(heap0,int2) 
int2 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 32
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 14, 6] : <type 'list'>
heap0 = [20] : <type 'list'>
=> heap0 = [6, 6, 14, 6, 14, 6] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 33
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 14, 6, 14, 6] : <type 'list'>
=> heap0 = [6, 6, 14, 6, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 6, 14, 6, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 6, 14, 6, 14, 14, 6, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 6, 6, 6, 14, 6, 14, 14, 6, 14] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 14, 6, 14, 14, 6, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 36
ACTION: heaps.heappush(heap1,int4) 
int4 = 12 : <type 'int'>
heap1 = [6, 6, 6, 6, 14, 6, 14, 14, 6, 14] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 12, 6, 14, 14, 6, 14, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 37
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 6, 6, 6, 14, 6, 14, 14, 6, 14] : <type 'list'>
heap1 = [6, 6, 6, 6, 12, 6, 14, 14, 6, 14, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 6, 6, 6, 6, 6, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 38
ACTION: heaps.heappush(heap1,int0) 
int0 = 6 : <type 'int'>
heap1 = [6, 6, 6, 6, 12, 6, 14, 14, 6, 14, 14] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 12, 6, 14, 14, 6, 14, 14, 6] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 14, 6] : <type 'list'>
=> heap2 = [6, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 6, 6, 6, 6, 6, 6, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 6, 6, 6, 6, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 14] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [14] : <type 'list'>
heap0 = [6, 6, 6, 6, 6, 6, 6, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
heap1 = [6, 6, 6, 6, 12, 6, 14, 14, 6, 14, 14, 6] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 43
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 6, 6, 6, 6, 6, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 12, 6, 6, 6, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 45
ACTION: heaps.heappush(heap1,int4) 
int4 = 12 : <type 'int'>
heap1 = [6, 6, 6, 6, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 46
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 6, 6, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 12] : <type 'list'>
=> heap1 = [6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14] : <type 'list'>
heap0 = [6, 6, 6, 12, 6, 6, 6, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 6, 6, 12, 6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 48
ACTION: heaps.heappush(heap1,int4) 
int4 = 12 : <type 'int'>
heap1 = [6, 6, 6, 6, 6, 6, 12, 6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [6, 6, 6, 6, 6, 6, 12, 6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [6, 6, 6, 6, 6, 6, 12, 6, 6, 6, 12, 6, 6, 6, 14, 14, 12, 6, 14, 6, 14, 14, 6, 14, 14, 14, 6, 14, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14, 12] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 50
ACTION: int4 = 2 
int4 = 12 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 6, 12, 6, 6, 6, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 12, 6, 6, 6, 14, 6, 14, 14, 6, 14, 14, 6, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 52
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 6, 12, 6, 6, 6, 14, 6, 14, 14, 6, 14, 14, 6, 14, 14, 14] : <type 'list'>
=> heap0 = [6, 6, 6, 12, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 6, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 3                                                                # STEP 55
ACTION: int2 = 3 
int2 = 20 : <type 'int'>
=> int2 = 3 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 6, 12, 14, 6, 6, 14, 6, 14, 14, 6, 14, 14, 6, 14, 14] : <type 'list'>
=> heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 6, 14, 14, 6, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 6, 14, 14, 6, 14] : <type 'list'>
=> heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 14, 14, 14, 6] : <type 'list'>
==================================================
int3 = 17                                                               # STEP 58
ACTION: int3 = 17 
int3 = None : <type 'NoneType'>
=> int3 = 17 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 59
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 14, 14, 14, 6] : <type 'list'>
=> heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 61
ACTION: int0 = 19 
int0 = 6 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 62
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 63
ACTION: heaps.heappop(heap0) 
heap0 = [6, 12, 6, 6, 14, 6, 6, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [6, 12, 6, 6, 14, 14, 6, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 64
ACTION: heaps.heappop(heap0) 
heap0 = [6, 12, 6, 6, 14, 14, 6, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [6, 12, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 12, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [6, 12, 14, 6, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 67
ACTION: heaps.heappop(heap0) 
heap0 = [6, 12, 14, 6, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap0 = [12, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [12, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046548c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 27
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0458340645 TOTAL RUNTIME
20 EXECUTED
1896 TOTAL TEST OPERATIONS
29.3096671104 TIME SPENT EXECUTING TEST OPERATIONS
0.245454072952 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2731852531 TIME SPENT CHECKING PROPERTIES
58.5828523636 TOTAL TIME SPENT RUNNING SUT
0.0110614299774 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap2 = heaps.heapnew()                                                  # STEP 0
heaps.heappop(heap2)                                                     # STEP 1
heap0 = heaps.heapnew()                                                  # STEP 2
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
int1 = 9                                                                 # STEP 4
heaps.heappop(heap2)                                                     # STEP 5
heap2 = heaps.heapnew()                                                  # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
heap2 = heaps.heapnew()                                                  # STEP 9
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
int4 = 6                                                                # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 13
int2 = 20                                                               # STEP 14
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappop(heap2)                                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heaps.heappush(heap2,int4)                                              # STEP 20
int4 = 14                                                               # STEP 21
int0 = 6                                                                # STEP 22
heaps.heappush(heap2,int0)                                              # STEP 23
heaps.heappush(heap2,int4)                                              # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
heaps.heappop(heap0)                                                    # STEP 26
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
heaps.heappush(heap2,int0)                                              # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
int4 = 12                                                               # STEP 30
heaps.heappush(heap0,int2)                                              # STEP 31
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 32
heaps.heappop(heap0)                                                    # STEP 33
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 34
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 35
heaps.heappush(heap1,int4)                                              # STEP 36
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 37
heaps.heappush(heap1,int0)                                              # STEP 38
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
heaps.heappush(heap1,int4)                                              # STEP 45
heaps.heappop(heap1)                                                    # STEP 46
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 47
heaps.heappush(heap1,int4)                                              # STEP 48
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 49
int4 = 2                                                                # STEP 50
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
heaps.heappop(heap2)                                                    # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
int2 = 3                                                                # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
int3 = 17                                                               # STEP 58
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 59
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
int0 = 19                                                               # STEP 61
heaps.heappop(heap2)                                                    # STEP 62
heaps.heappop(heap0)                                                    # STEP 63
heaps.heappop(heap0)                                                    # STEP 64
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
heaps.heappop(heap0)                                                    # STEP 67
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046548c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

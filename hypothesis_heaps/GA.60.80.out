Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.14804.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103afd170>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 43 steps

SAVING TEST AS failure.14804.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 1                                                                 # STEP 0
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int4 = 12                                                                # STEP 1
ACTION: int4 = 12 
int4 = None : <type 'NoneType'>
=> int4 = 12 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 2
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 3
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
int2 = 7                                                                 # STEP 4
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                               # STEP 7
ACTION: heaps.heappush(heap2,int1) 
int1 = 2 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [2] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                               # STEP 8
ACTION: heaps.heappush(heap2,int2) 
int2 = 7 : <type 'int'>
heap2 = [2] : <type 'list'>
=> heap2 = [2, 7] : <type 'list'>
==================================================
int1 = 2                                                                 # STEP 9
ACTION: int1 = 2 
int1 = 2 : <type 'int'>
==================================================
int2 = 18                                                               # STEP 10
ACTION: int2 = 18 
int2 = 7 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 12
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 13
ACTION: heaps.heappush(heap1,int2) 
int2 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 14
ACTION: int2 = 10 
int2 = 18 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 15
ACTION: heaps.heappush(heap1,int3) 
int3 = 18 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
int3 = 5                                                                # STEP 16
ACTION: int3 = 5 
int3 = 18 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [2, 7] : <type 'list'>
=> heap2 = [2, 2, 7, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [18, 18] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 19
ACTION: heaps.heappush(heap2,int0) 
int0 = 1 : <type 'int'>
heap2 = [2, 2, 7, 7] : <type 'list'>
=> heap2 = [1, 2, 7, 7, 2] : <type 'list'>
==================================================
int0 = 2                                                                # STEP 20
ACTION: int0 = 2 
int0 = 1 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 21
ACTION: heaps.heappush(heap1,int3) 
int3 = 5 : <type 'int'>
heap1 = [18, 18] : <type 'list'>
=> heap1 = [5, 18, 18] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 22
ACTION: int3 = 19 
int3 = 5 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [5, 18, 18] : <type 'list'>
heap2 = [1, 2, 7, 7, 2] : <type 'list'>
=> heap2 = [5, 5, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 24
ACTION: heaps.heappush(heap1,int2) 
int2 = 10 : <type 'int'>
heap1 = [5, 18, 18] : <type 'list'>
=> heap1 = [5, 10, 18, 18] : <type 'list'>
==================================================
int2 = 14                                                               # STEP 25
ACTION: int2 = 14 
int2 = 10 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 26
ACTION: heaps.heappush(heap0,int4) 
int4 = 12 : <type 'int'>
heap0 = [18, 18, 18, 18] : <type 'list'>
=> heap0 = [12, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 27
ACTION: heaps.heappush(heap1,int2) 
int2 = 14 : <type 'int'>
heap1 = [5, 10, 18, 18] : <type 'list'>
=> heap1 = [5, 10, 18, 18, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 28
ACTION: heaps.heappush(heap2,int3) 
int3 = 19 : <type 'int'>
heap2 = [5, 5, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [5, 5, 18, 18, 18, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 29
ACTION: heaps.heappop(heap1) 
heap1 = [5, 10, 18, 18, 14] : <type 'list'>
=> heap1 = [10, 14, 18, 18] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 30
ACTION: int3 = 9 
int3 = 19 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
int2 = 2                                                                # STEP 31
ACTION: int2 = 2 
int2 = 14 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 32
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [5, 5, 18, 18, 18, 18, 19] : <type 'list'>
=> heap2 = [5, 5, 18, 12, 18, 18, 19, 18] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 33
ACTION: int4 = 2 
int4 = 12 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 34
ACTION: heaps.heappush(heap0,int0) 
int0 = 2 : <type 'int'>
heap0 = [12, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [2, 18, 12, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 35
ACTION: heaps.heappush(heap0,int3) 
int3 = 9 : <type 'int'>
heap0 = [2, 18, 12, 18, 18, 18] : <type 'list'>
=> heap0 = [2, 18, 9, 18, 18, 18, 12] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 36
ACTION: heaps.heappush(heap2,int1) 
int1 = 2 : <type 'int'>
heap2 = [5, 5, 18, 12, 18, 18, 19, 18] : <type 'list'>
=> heap2 = [2, 5, 18, 5, 18, 18, 19, 18, 12] : <type 'list'>
==================================================
int3 = 18                                                               # STEP 37
ACTION: int3 = 18 
int3 = 9 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [2, 18, 9, 18, 18, 18, 12] : <type 'list'>
heap1 = [10, 14, 18, 18] : <type 'list'>
=> heap0 = [2, 10, 14, 18, 9, 18, 18, 18, 12, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 39
ACTION: heap1 = heaps.heapnew() 
heap1 = [10, 14, 18, 18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 10, 14, 18, 9, 18, 18, 18, 12, 18, 18] : <type 'list'>
=> heap0 = [10, 9, 14, 18, 18, 18, 18, 18, 12, 18] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 41
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 9, 14, 18, 18, 18, 18, 18, 12, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [9, 18, 14, 18, 18, 18, 18, 18, 12] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c4cc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #27 (0:00:30.000164) Sun Apr 30 05:03:06 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 60
STOPPING TESTING DUE TO TIMEOUT
15.6186612576 PERCENT COVERED
60.0476520061 TOTAL RUNTIME
19 EXECUTED
1803 TOTAL TEST OPERATIONS
30.2798888683 TIME SPENT EXECUTING TEST OPERATIONS
0.0683312416077 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8511695862 TIME SPENT CHECKING PROPERTIES
59.1310584545 TOTAL TIME SPENT RUNNING SUT
0.015305519104 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 1                                                                 # STEP 0
int4 = 12                                                                # STEP 1
int1 = 2                                                                 # STEP 2
int3 = 18                                                                # STEP 3
int2 = 7                                                                 # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
heaps.heappush(heap2,int1)                                               # STEP 7
heaps.heappush(heap2,int2)                                               # STEP 8
int1 = 2                                                                 # STEP 9
int2 = 18                                                               # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 12
heaps.heappush(heap1,int2)                                              # STEP 13
int2 = 10                                                               # STEP 14
heaps.heappush(heap1,int3)                                              # STEP 15
int3 = 5                                                                # STEP 16
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
heaps.heappush(heap2,int0)                                              # STEP 19
int0 = 2                                                                # STEP 20
heaps.heappush(heap1,int3)                                              # STEP 21
int3 = 19                                                               # STEP 22
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
heaps.heappush(heap1,int2)                                              # STEP 24
int2 = 14                                                               # STEP 25
heaps.heappush(heap0,int4)                                              # STEP 26
heaps.heappush(heap1,int2)                                              # STEP 27
heaps.heappush(heap2,int3)                                              # STEP 28
heaps.heappop(heap1)                                                    # STEP 29
int3 = 9                                                                # STEP 30
int2 = 2                                                                # STEP 31
heaps.heappush(heap2,int4)                                              # STEP 32
int4 = 2                                                                # STEP 33
heaps.heappush(heap0,int0)                                              # STEP 34
heaps.heappush(heap0,int3)                                              # STEP 35
heaps.heappush(heap2,int1)                                              # STEP 36
int3 = 18                                                               # STEP 37
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 38
heap1 = heaps.heapnew()                                                 # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
int0 = 20                                                               # STEP 41
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c4cc68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.560.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #13 STEP #3 (0:00:30.018435) Fri Apr 28 06:39:45 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d6368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 66 steps

SAVING TEST AS failure.560.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 10                                                                # STEP 0
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int0 = 12                                                                # STEP 1
ACTION: int0 = 12 
int0 = None : <type 'NoneType'>
=> int0 = 12 : <type 'int'>
==================================================
int4 = 16                                                                # STEP 2
ACTION: int4 = 16 
int4 = None : <type 'NoneType'>
=> int4 = 16 : <type 'int'>
==================================================
int3 = 15                                                                # STEP 3
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 4
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 9
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 11
ACTION: heaps.heappush(heap0,int1) 
int1 = 2 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [2] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 12
ACTION: heaps.heappush(heap0,int3) 
int3 = 15 : <type 'int'>
heap0 = [2] : <type 'list'>
=> heap0 = [2, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 13
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 14
ACTION: heaps.heappush(heap0,int3) 
int3 = 15 : <type 'int'>
heap0 = [15] : <type 'list'>
=> heap0 = [15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 15
ACTION: heaps.heappush(heap2,int0) 
int0 = 12 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 16
ACTION: int0 = 9 
int0 = 12 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 17
ACTION: heaps.heappush(heap0,int4) 
int4 = 16 : <type 'int'>
heap0 = [15, 15] : <type 'list'>
=> heap0 = [15, 15, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 18
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [15, 15, 16] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 20
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 15, 16, 16] : <type 'list'>
=> heap1 = [15, 15, 15, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 21
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 16] : <type 'list'>
=> heap0 = [15, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 22
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 16, 16] : <type 'list'>
=> heap1 = [15, 16, 15, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 24
ACTION: heaps.heappush(heap2,int2) 
int2 = 10 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 25
ACTION: heaps.heappush(heap2,int4) 
int4 = 16 : <type 'int'>
heap2 = [10] : <type 'list'>
=> heap2 = [10, 16] : <type 'list'>
==================================================
int3 = 15                                                               # STEP 26
ACTION: int3 = 15 
int3 = 15 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [15, 16] : <type 'list'>
heap2 = [10, 16] : <type 'list'>
=> heap2 = [10, 15, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 28
ACTION: heaps.heappush(heap1,int2) 
int2 = 10 : <type 'int'>
heap1 = [15, 16, 15, 16] : <type 'list'>
=> heap1 = [10, 15, 15, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [10, 15, 15, 16, 16] : <type 'list'>
=> heap1 = [10, 10, 15, 15, 15, 15, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 15, 16, 16] : <type 'list'>
=> heap2 = [15, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 31
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [15, 16] : <type 'list'>
heap2 = [15, 16, 16] : <type 'list'>
=> heap0 = [15, 15, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 32
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 16, 16, 16] : <type 'list'>
=> heap0 = [15, 16, 16, 16] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 33
ACTION: int1 = 16 
int1 = 2 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
int2 = 20                                                               # STEP 34
ACTION: int2 = 20 
int2 = 10 : <type 'int'>
=> int2 = 20 : <type 'int'>
==================================================
int4 = 4                                                                # STEP 35
ACTION: int4 = 4 
int4 = 16 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10, 15, 15, 15, 15, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [10, 15, 15, 16, 15, 15, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 37
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 15, 15, 16, 15, 15, 16, 16, 16] : <type 'list'>
=> heap1 = [15, 15, 15, 16, 16, 15, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 38
ACTION: heaps.heappop(heap2) 
heap2 = [15, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 39
ACTION: heaps.heappush(heap2,int1) 
int1 = 16 : <type 'int'>
heap2 = [16, 16] : <type 'list'>
=> heap2 = [16, 16, 16] : <type 'list'>
==================================================
int1 = 18                                                               # STEP 40
ACTION: int1 = 18 
int1 = 16 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 41
ACTION: heaps.heappush(heap1,int2) 
int2 = 20 : <type 'int'>
heap1 = [15, 15, 15, 16, 16, 15, 16, 16] : <type 'list'>
=> heap1 = [15, 15, 15, 16, 16, 15, 16, 16, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 42
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [16, 16, 16] : <type 'list'>
heap1 = [15, 15, 15, 16, 16, 15, 16, 16, 20] : <type 'list'>
heap0 = [15, 16, 16, 16] : <type 'list'>
=> heap0 = [15, 15, 15, 16, 16, 16, 16, 16, 15, 16, 16, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [16, 16, 16] : <type 'list'>
heap1 = [15, 15, 15, 16, 16, 15, 16, 16, 20] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 16, 16, 16, 16, 16, 15, 16, 16, 20] : <type 'list'>
=> heap0 = [15, 16, 15, 15, 16, 16, 16, 16, 20, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 45
ACTION: heaps.heappop(heap0) 
heap0 = [15, 16, 15, 15, 16, 16, 16, 16, 20, 16, 16] : <type 'list'>
=> heap0 = [15, 16, 16, 15, 16, 16, 16, 16, 20, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16] : <type 'list'>
==================================================
int2 = 8                                                                # STEP 47
ACTION: int2 = 8 
int2 = 20 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16, 16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 49
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 52
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap2 = [16, 16] : <type 'list'>
=> heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 55
ACTION: heaps.heappush(heap1,int1) 
int1 = 18 : <type 'int'>
heap1 = [16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 18] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 56
ACTION: int1 = 16 
int1 = 18 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 16, 16, 16, 18] : <type 'list'>
=> heap1 = [16, 16, 16, 18, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 58
ACTION: heaps.heappop(heap2) 
heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [16, 16, 16, 18, 16, 16] : <type 'list'>
heap0 = [15, 16, 16, 15, 16, 16, 16, 16, 20, 16] : <type 'list'>
=> heap0 = [15, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 20, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 60
ACTION: heaps.heappop(heap0) 
heap0 = [15, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 20, 16] : <type 'list'>
=> heap0 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 18, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 18, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 62
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 20] : <type 'list'>
heap1 = [16, 16, 16, 18, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap1 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20, 20] : <type 'list'>
=> heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20, 20] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 20, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 16, 16, 18, 16, 16, 20, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 15, 16, 16, 16, 16, 18, 20, 16, 18, 16, 16, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047a0cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 67
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0534322262 TOTAL RUNTIME
25 EXECUTED
2433 TOTAL TEST OPERATIONS
29.4054894447 TIME SPENT EXECUTING TEST OPERATIONS
0.317826509476 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.443870306 TIME SPENT CHECKING PROPERTIES
58.8493597507 TOTAL TIME SPENT RUNNING SUT
0.0119476318359 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 10                                                                # STEP 0
int0 = 12                                                                # STEP 1
int4 = 16                                                                # STEP 2
int3 = 15                                                                # STEP 3
int1 = 2                                                                 # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 8
heap2 = heaps.heapnew()                                                  # STEP 9
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 10
heaps.heappush(heap0,int1)                                              # STEP 11
heaps.heappush(heap0,int3)                                              # STEP 12
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 13
heaps.heappush(heap0,int3)                                              # STEP 14
heaps.heappush(heap2,int0)                                              # STEP 15
int0 = 9                                                                # STEP 16
heaps.heappush(heap0,int4)                                              # STEP 17
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 18
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
heaps.heappop(heap1)                                                    # STEP 20
heaps.heappop(heap0)                                                    # STEP 21
heaps.heappop(heap2)                                                    # STEP 22
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
heaps.heappush(heap2,int2)                                              # STEP 24
heaps.heappush(heap2,int4)                                              # STEP 25
int3 = 15                                                               # STEP 26
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
heaps.heappush(heap1,int2)                                              # STEP 28
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 31
heaps.heappop(heap0)                                                    # STEP 32
int1 = 16                                                               # STEP 33
int2 = 20                                                               # STEP 34
int4 = 4                                                                # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 37
heaps.heappop(heap2)                                                    # STEP 38
heaps.heappush(heap2,int1)                                              # STEP 39
int1 = 18                                                               # STEP 40
heaps.heappush(heap1,int2)                                              # STEP 41
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 42
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
heaps.heappop(heap0)                                                    # STEP 45
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
int2 = 8                                                                # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 52
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
heaps.heappush(heap1,int1)                                              # STEP 55
int1 = 16                                                               # STEP 56
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
heaps.heappop(heap2)                                                    # STEP 58
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 59
heaps.heappop(heap0)                                                    # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 62
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047a0cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

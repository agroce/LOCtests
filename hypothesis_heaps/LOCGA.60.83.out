Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69681.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #41 (0:00:30.027540) Tue May  2 20:13:40 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104decb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 93 steps

SAVING TEST AS failure.69681.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 2                                                                 # STEP 0
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 2
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 4
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 10                                                                # STEP 5
ACTION: int4 = 10 
int4 = None : <type 'NoneType'>
=> int4 = 10 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                     # STEP 6
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                  # STEP 7
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int0 = 1                                                                 # STEP 9
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
int2 = 8                                                                # STEP 10
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 13
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 14
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 17
ACTION: heaps.heappush(heap2,int0) 
int0 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 18
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int2)                                              # STEP 20
ACTION: heaps.heappush(heap0,int2) 
int2 = 8 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [8] : <type 'list'>
=> heap0 = [8, 8] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 22
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 23
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [8, 8] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [8, 8] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 24
ACTION: int0 = 16 
int0 = 1 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [8] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 27
ACTION: heaps.heappush(heap1,int3) 
int3 = 20 : <type 'int'>
heap1 = [8, 8] : <type 'list'>
=> heap1 = [8, 8, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 28
ACTION: heaps.heappop(heap0) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [8, 8, 20] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 8, 20] : <type 'list'>
=> heap1 = [8, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 31
ACTION: heaps.heappush(heap1,int3) 
int3 = 20 : <type 'int'>
heap1 = [8, 20] : <type 'list'>
=> heap1 = [8, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 32
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 20                                                               # STEP 33
ACTION: int3 = 20 
int3 = 20 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [8, 8, 8, 8, 20, 20] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 35
ACTION: heaps.heappush(heap1,int3) 
int3 = 20 : <type 'int'>
heap1 = [8, 20, 20] : <type 'list'>
=> heap1 = [8, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [8, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20] : <type 'list'>
heap2 = [8, 8, 8, 8, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [20, 20, 20] : <type 'list'>
heap0 = [8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 39
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 40
ACTION: heaps.heappop(heap2) 
heap2 = [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 41
ACTION: heaps.heappop(heap0) 
heap0 = [8, 8, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
int2 = 6                                                                # STEP 42
ACTION: int2 = 6 
int2 = 8 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap1 = [20, 20, 20] : <type 'list'>
=> heap0 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 44
ACTION: heaps.heappush(heap1,int1) 
int1 = 2 : <type 'int'>
heap1 = [20, 20, 20] : <type 'list'>
=> heap1 = [2, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 45
ACTION: heaps.heappush(heap2,int2) 
int2 = 6 : <type 'int'>
heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [6, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20, 8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 46
ACTION: heaps.heappop(heap2) 
heap2 = [6, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20, 8] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [2, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 48
ACTION: heap1 = heaps.heapnew() 
heap1 = [20, 20, 20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 49
ACTION: int3 = 3 
int3 = 20 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 50
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [3, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20, 8] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 51
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20, 8] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 52
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 8, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 20, 8, 8, 8, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 56
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8, 8, 8, 8, 8, 8, 20, 20, 8, 8, 8, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 8, 8, 8, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 58
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 8, 8, 8, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 8, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8, 8, 8, 8, 8, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 20, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 62
ACTION: heaps.heappop(heap2) 
heap2 = [8, 8, 8, 8, 8, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
int2 = 14                                                               # STEP 63
ACTION: int2 = 14 
int2 = 6 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
int3 = 14                                                               # STEP 64
ACTION: int3 = 14 
int3 = 3 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 65
ACTION: heaps.heappop(heap0) 
heap0 = [8, 20, 8, 20, 20, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 20, 8, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 66
ACTION: heaps.heappush(heap2,int0) 
int0 = 16 : <type 'int'>
heap2 = [8, 8, 8, 8, 8, 8, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 8, 8, 8, 16, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 67
ACTION: int0 = 18 
int0 = 16 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 68
ACTION: heaps.heappush(heap1,int2) 
int2 = 14 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [14] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 69
ACTION: int2 = 18 
int2 = 14 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 20, 8, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 72
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [8, 8, 8, 8, 8, 8, 16, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 8, 8, 20, 8, 8, 16, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 74
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [8, 8, 8, 20, 8, 8, 16, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 75
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 77
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 79
ACTION: heaps.heappush(heap1,int3) 
int3 = 14 : <type 'int'>
heap1 = [8, 8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [8, 8, 14, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 81
ACTION: heaps.heappush(heap1,int4) 
int4 = 10 : <type 'int'>
heap1 = [8, 8, 14, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [8, 8, 10, 8, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 83
ACTION: heaps.heappush(heap1,int4) 
int4 = 10 : <type 'int'>
heap1 = [8, 8, 10, 8, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [8, 8, 10, 8, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 84
ACTION: heaps.heappop(heap1) 
heap1 = [8, 8, 10, 8, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [8, 8, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 8, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [8, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 87
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap1 = [8, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 88
ACTION: heaps.heappop(heap1) 
heap1 = [8, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 20, 10, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 20, 20, 10, 20, 20, 20, 20, 20, 20, 14, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 90
ACTION: heaps.heappop(heap0) 
heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
int3 = 20                                                               # STEP 91
ACTION: int3 = 20 
int3 = 14 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 20, 10, 20, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [10, 20, 14, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 8, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104deb638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 39
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0547618866 TOTAL RUNTIME
19 EXECUTED
1832 TOTAL TEST OPERATIONS
29.0903587341 TIME SPENT EXECUTING TEST OPERATIONS
0.238801717758 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.0815286636 TIME SPENT CHECKING PROPERTIES
58.1718873978 TOTAL TIME SPENT RUNNING SUT
0.0117042064667 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 2                                                                 # STEP 0
int3 = 20                                                                # STEP 1
heap1 = heaps.heapnew()                                                  # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
heaps.heappop(heap1)                                                     # STEP 4
int4 = 10                                                                # STEP 5
heaps.heappop(heap1)                                                     # STEP 6
heap0 = heaps.heapnew()                                                  # STEP 7
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
int0 = 1                                                                 # STEP 9
int2 = 8                                                                # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
heaps.heappop(heap1)                                                    # STEP 13
heaps.heappop(heap1)                                                    # STEP 14
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heaps.heappush(heap2,int0)                                              # STEP 17
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heaps.heappush(heap0,int2)                                              # STEP 20
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 21
heaps.heappop(heap1)                                                    # STEP 22
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 23
int0 = 16                                                               # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 26
heaps.heappush(heap1,int3)                                              # STEP 27
heaps.heappop(heap0)                                                    # STEP 28
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
heaps.heappush(heap1,int3)                                              # STEP 31
heaps.heappop(heap0)                                                    # STEP 32
int3 = 20                                                               # STEP 33
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 34
heaps.heappush(heap1,int3)                                              # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 37
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 38
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 39
heaps.heappop(heap2)                                                    # STEP 40
heaps.heappop(heap0)                                                    # STEP 41
int2 = 6                                                                # STEP 42
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 43
heaps.heappush(heap1,int1)                                              # STEP 44
heaps.heappush(heap2,int2)                                              # STEP 45
heaps.heappop(heap2)                                                    # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
heap1 = heaps.heapnew()                                                 # STEP 48
int3 = 3                                                                # STEP 49
heaps.heappush(heap2,int3)                                              # STEP 50
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 51
int1 = 1                                                                # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
heaps.heappop(heap1)                                                    # STEP 56
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 58
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
heaps.heappop(heap2)                                                    # STEP 62
int2 = 14                                                               # STEP 63
int3 = 14                                                               # STEP 64
heaps.heappop(heap0)                                                    # STEP 65
heaps.heappush(heap2,int0)                                              # STEP 66
int0 = 18                                                               # STEP 67
heaps.heappush(heap1,int2)                                              # STEP 68
int2 = 18                                                               # STEP 69
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
heaps.heappop(heap1)                                                    # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 74
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
heaps.heappush(heap1,int3)                                              # STEP 79
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
heaps.heappush(heap1,int4)                                              # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heaps.heappush(heap1,int4)                                              # STEP 83
heaps.heappop(heap1)                                                    # STEP 84
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 87
heaps.heappop(heap1)                                                    # STEP 88
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
heaps.heappop(heap0)                                                    # STEP 90
int3 = 20                                                               # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104deb638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

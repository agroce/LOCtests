Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99601.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044de368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 100 steps

SAVING TEST AS failure.99601.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int3 = 4                                                                 # STEP 1
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 2
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int1 = 15                                                                # STEP 3
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int4 = 18                                                                # STEP 4
ACTION: int4 = 18 
int4 = None : <type 'NoneType'>
=> int4 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 7
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [4] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 8
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                 # STEP 10
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 17                                                               # STEP 13
ACTION: int3 = 17 
int3 = 4 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 14
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                 # STEP 17
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 20
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int2)                                              # STEP 21
ACTION: heaps.heappush(heap2,int2) 
int2 = 5 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 22
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 23
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 24
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 14                                                               # STEP 25
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [5] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 29
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 32
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 37
ACTION: heaps.heappush(heap2,int3) 
int3 = 17 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [17] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 38
ACTION: heaps.heappush(heap0,int3) 
int3 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 40
ACTION: heaps.heappush(heap0,int0) 
int0 = 14 : <type 'int'>
heap0 = [17] : <type 'list'>
=> heap0 = [14, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 42
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [14, 17] : <type 'list'>
heap2 = [15] : <type 'list'>
=> heap2 = [14, 15, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 44
ACTION: heaps.heappop(heap2) 
heap2 = [14, 15, 17] : <type 'list'>
=> heap2 = [15, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 45
ACTION: heaps.heappop(heap0) 
heap0 = [14, 17] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 46
ACTION: heaps.heappop(heap0) 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 47
ACTION: int1 = 13 
int1 = 15 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 48
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 49
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 17                                                               # STEP 51
ACTION: int3 = 17 
int3 = 17 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 52
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 19                                                               # STEP 53
ACTION: int0 = 19 
int0 = 14 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 54
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [15, 17] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 55
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [15, 17] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15, 17] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 56
ACTION: heaps.heappush(heap2,int2) 
int2 = 14 : <type 'int'>
heap2 = [15, 17] : <type 'list'>
=> heap2 = [14, 17, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 17] : <type 'list'>
=> heap1 = [17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 58
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [17] : <type 'list'>
heap0 = [15, 17] : <type 'list'>
=> heap1 = [15, 17, 17] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 59
ACTION: int2 = 11 
int2 = 14 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 60
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [15, 17, 17] : <type 'list'>
=> heap1 = [15, 17, 17, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [14, 17, 15] : <type 'list'>
heap1 = [15, 17, 17, 19] : <type 'list'>
=> heap2 = [14, 15, 17, 15, 17, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 62
ACTION: heaps.heappop(heap0) 
heap0 = [15, 17] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 63
ACTION: int0 = 6 
int0 = 19 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 64
ACTION: heaps.heappush(heap2,int4) 
int4 = 18 : <type 'int'>
heap2 = [14, 15, 17, 15, 17, 17, 19] : <type 'list'>
=> heap2 = [14, 15, 17, 15, 17, 17, 19, 18] : <type 'list'>
==================================================
int4 = 1                                                                # STEP 65
ACTION: int4 = 1 
int4 = 18 : <type 'int'>
=> int4 = 1 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 66
ACTION: heaps.heappop(heap0) 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 67
ACTION: heaps.heappush(heap1,int0) 
int0 = 6 : <type 'int'>
heap1 = [15, 17, 17, 19] : <type 'list'>
=> heap1 = [6, 15, 17, 19, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 68
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [14, 15, 17, 15, 17, 17, 19, 18] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [14, 14, 15, 15, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 69
ACTION: heaps.heappop(heap1) 
heap1 = [6, 15, 17, 19, 17] : <type 'list'>
=> heap1 = [15, 17, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 70
ACTION: heaps.heappop(heap2) 
heap2 = [14, 15, 17, 15, 17, 17, 19, 18] : <type 'list'>
=> heap2 = [15, 15, 17, 18, 17, 17, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 71
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [15, 17, 17, 19] : <type 'list'>
heap2 = [15, 15, 17, 18, 17, 17, 19] : <type 'list'>
=> heap1 = [15, 15, 15, 17, 17, 17, 18, 17, 17, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 72
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [14, 14, 15, 15, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18] : <type 'list'>
heap2 = [15, 15, 17, 18, 17, 17, 19] : <type 'list'>
=> heap2 = [14, 14, 14, 14, 15, 15, 15, 15, 17, 15, 17, 17, 17, 15, 17, 17, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18, 19, 18, 19, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 73
ACTION: heaps.heappop(heap0) 
heap0 = [14, 14, 15, 15, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18] : <type 'list'>
=> heap0 = [14, 15, 15, 17, 17, 15, 17, 18, 17, 15, 17, 17, 19, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 74
ACTION: heaps.heappop(heap2) 
heap2 = [14, 14, 14, 14, 15, 15, 15, 15, 17, 15, 17, 17, 17, 15, 17, 17, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18, 19, 18, 19, 18] : <type 'list'>
=> heap2 = [14, 14, 14, 15, 15, 15, 15, 17, 17, 15, 17, 17, 17, 15, 17, 18, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18, 19, 18, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 75
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [14, 15, 15, 17, 17, 15, 17, 18, 17, 15, 17, 17, 19, 18, 19] : <type 'list'>
heap2 = [14, 14, 14, 15, 15, 15, 15, 17, 17, 15, 17, 17, 17, 15, 17, 18, 17, 15, 17, 17, 17, 15, 17, 17, 19, 18, 19, 18, 19, 18, 19] : <type 'list'>
=> heap2 = [14, 14, 15, 15, 15, 15, 17, 17, 15, 17, 17, 17, 15, 17, 18, 17, 15, 17, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19, 18, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 76
ACTION: heaps.heappush(heap1,int4) 
int4 = 1 : <type 'int'>
heap1 = [15, 15, 15, 17, 17, 17, 18, 17, 17, 19, 19] : <type 'list'>
=> heap1 = [1, 15, 15, 17, 17, 15, 18, 17, 17, 19, 19, 17] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 77
ACTION: int4 = 13 
int4 = 1 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 15, 15, 17, 17, 15, 18, 17, 17, 19, 19, 17] : <type 'list'>
=> heap1 = [15, 17, 15, 17, 17, 15, 18, 17, 17, 19, 19] : <type 'list'>
==================================================
int0 = 15                                                               # STEP 79
ACTION: int0 = 15 
int0 = 6 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 80
ACTION: heaps.heappop(heap1) 
heap1 = [15, 17, 15, 17, 17, 15, 18, 17, 17, 19, 19] : <type 'list'>
=> heap1 = [15, 17, 15, 17, 17, 19, 18, 17, 17, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 15, 15, 17, 17, 15, 17, 18, 17, 15, 17, 17, 19, 18, 19] : <type 'list'>
=> heap0 = [15, 17, 15, 17, 17, 15, 17, 18, 19, 15, 17, 17, 19, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 17, 15, 17, 17, 15, 17, 18, 19, 15, 17, 17, 19, 18] : <type 'list'>
=> heap0 = [15, 17, 15, 17, 17, 17, 17, 18, 19, 15, 17, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 83
ACTION: heaps.heappop(heap0) 
heap0 = [15, 17, 15, 17, 17, 17, 17, 18, 19, 15, 17, 18, 19] : <type 'list'>
=> heap0 = [15, 17, 17, 17, 17, 18, 17, 18, 19, 15, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 84
ACTION: heaps.heappop(heap2) 
heap2 = [14, 14, 15, 15, 15, 15, 17, 17, 15, 17, 17, 17, 15, 17, 18, 17, 15, 17, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19, 18, 19] : <type 'list'>
=> heap2 = [14, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 15, 17, 18, 17, 15, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14, 15, 15, 15, 15, 15, 17, 17, 17, 17, 17, 17, 15, 17, 18, 17, 15, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19, 18] : <type 'list'>
=> heap2 = [15, 15, 15, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [15, 17, 17, 17, 17, 18, 17, 18, 19, 15, 17, 19] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 17, 18, 17, 19, 19, 15, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 87
ACTION: heaps.heappop(heap0) 
heap0 = [17, 17, 17, 18, 17, 18, 17, 19, 19, 15, 17] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 17, 18, 17, 19, 19, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 88
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [17, 17, 17, 18, 17, 18, 17, 19, 19, 15] : <type 'list'>
heap2 = [15, 15, 15, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19] : <type 'list'>
heap1 = [15, 17, 15, 17, 17, 19, 18, 17, 17, 19] : <type 'list'>
=> heap1 = [15, 15, 15, 17, 17, 17, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 18, 19, 19, 15, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 89
ACTION: heaps.heappop(heap0) 
heap0 = [17, 17, 17, 18, 17, 18, 17, 19, 19, 15] : <type 'list'>
=> heap0 = [15, 17, 17, 18, 17, 18, 17, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 90
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 17, 17, 17, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 18, 19, 19, 15, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19] : <type 'list'>
=> heap1 = [15, 17, 15, 15, 17, 17, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 18, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 91
ACTION: heaps.heappop(heap1) 
heap1 = [15, 17, 15, 15, 17, 17, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 18, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18, 19] : <type 'list'>
=> heap1 = [15, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 17, 15, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 19, 17, 18, 17, 15, 17, 17, 19, 18, 19, 19] : <type 'list'>
=> heap2 = [15, 15, 15, 17, 17, 15, 17, 15, 17, 17, 17, 17, 15, 17, 18, 17, 18, 19, 17, 18, 19, 15, 17, 17, 19, 18, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 93
ACTION: heaps.heappush(heap1,int3) 
int3 = 17 : <type 'int'>
heap1 = [15, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 15, 17, 18, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18] : <type 'list'>
=> heap1 = [15, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 15, 17, 17, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 94
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 15, 17, 17, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 17, 17, 19, 18, 18] : <type 'list'>
=> heap1 = [17, 15, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 95
ACTION: heaps.heappop(heap0) 
heap0 = [15, 17, 17, 18, 17, 18, 17, 19, 19] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 19, 18, 17, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 96
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17, 17, 17, 18, 19, 18, 17, 19] : <type 'list'>
=> heap0 = [17, 18, 17, 19, 19, 18, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 97
ACTION: heaps.heappush(heap1,int2) 
int2 = 11 : <type 'int'>
heap1 = [17, 15, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 17, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18] : <type 'list'>
=> heap1 = [11, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 17, 17, 15, 17, 17, 17, 15, 15, 17, 15, 18, 17, 17, 17, 17, 17, 15, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [17, 15, 17, 15, 17, 17, 17, 17, 15, 17, 15, 18, 17, 17, 17, 18, 17, 15, 17, 18, 17, 18, 17, 19, 19, 19, 15, 19, 17, 18, 17, 19, 18, 17, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044e0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #14 STEP #27 (0:00:30.005854) Fri Apr 28 04:23:52 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 28
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0591461658 TOTAL RUNTIME
27 EXECUTED
2628 TOTAL TEST OPERATIONS
29.2835741043 TIME SPENT EXECUTING TEST OPERATIONS
0.372319221497 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2783148289 TIME SPENT CHECKING PROPERTIES
58.5618889332 TOTAL TIME SPENT RUNNING SUT
0.0114030838013 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 5                                                                 # STEP 0
int3 = 4                                                                 # STEP 1
int0 = 14                                                                # STEP 2
int1 = 15                                                                # STEP 3
int4 = 18                                                                # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
heaps.heappush(heap1,int3)                                               # STEP 7
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heap2 = heaps.heapnew()                                                 # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
int3 = 17                                                               # STEP 13
heap0 = heaps.heapnew()                                                 # STEP 14
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heap0 = heaps.heapnew()                                                 # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 19
heaps.heappop(heap2)                                                    # STEP 20
heaps.heappush(heap2,int2)                                              # STEP 21
heaps.heappop(heap1)                                                    # STEP 22
heaps.heappop(heap1)                                                    # STEP 23
heaps.heappop(heap0)                                                    # STEP 24
int2 = 14                                                               # STEP 25
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 27
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
heaps.heappop(heap1)                                                    # STEP 29
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heaps.heappop(heap2)                                                    # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
heaps.heappush(heap2,int3)                                              # STEP 37
heaps.heappush(heap0,int3)                                              # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
heaps.heappush(heap0,int0)                                              # STEP 40
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 41
heaps.heappush(heap2,int1)                                              # STEP 42
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 43
heaps.heappop(heap2)                                                    # STEP 44
heaps.heappop(heap0)                                                    # STEP 45
heaps.heappop(heap0)                                                    # STEP 46
int1 = 13                                                               # STEP 47
heaps.heappop(heap0)                                                    # STEP 48
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
int3 = 17                                                               # STEP 51
heaps.heappop(heap0)                                                    # STEP 52
int0 = 19                                                               # STEP 53
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 54
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 55
heaps.heappush(heap2,int2)                                              # STEP 56
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 58
int2 = 11                                                               # STEP 59
heaps.heappush(heap1,int0)                                              # STEP 60
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
heaps.heappop(heap0)                                                    # STEP 62
int0 = 6                                                                # STEP 63
heaps.heappush(heap2,int4)                                              # STEP 64
int4 = 1                                                                # STEP 65
heaps.heappop(heap0)                                                    # STEP 66
heaps.heappush(heap1,int0)                                              # STEP 67
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 68
heaps.heappop(heap1)                                                    # STEP 69
heaps.heappop(heap2)                                                    # STEP 70
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 71
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 72
heaps.heappop(heap0)                                                    # STEP 73
heaps.heappop(heap2)                                                    # STEP 74
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 75
heaps.heappush(heap1,int4)                                              # STEP 76
int4 = 13                                                               # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
int0 = 15                                                               # STEP 79
heaps.heappop(heap1)                                                    # STEP 80
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heaps.heappop(heap0)                                                    # STEP 83
heaps.heappop(heap2)                                                    # STEP 84
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
heaps.heappop(heap0)                                                    # STEP 87
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 88
heaps.heappop(heap0)                                                    # STEP 89
heaps.heappop(heap1)                                                    # STEP 90
heaps.heappop(heap1)                                                    # STEP 91
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 92
heaps.heappush(heap1,int3)                                              # STEP 93
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 94
heaps.heappop(heap0)                                                    # STEP 95
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 96
heaps.heappush(heap1,int2)                                              # STEP 97
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044e0ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

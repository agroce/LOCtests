Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69533.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #58 (0:00:30.019207) Tue May  2 19:47:29 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10266bfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 93 steps

SAVING TEST AS failure.69533.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 18                                                                # STEP 0
ACTION: int4 = 18 
int4 = None : <type 'NoneType'>
=> int4 = 18 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 1
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 2
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 3
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 10                                                                # STEP 4
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 5
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 6
ACTION: heaps.heappush(heap0,int0) 
int0 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 8
ACTION: heaps.heappush(heap0,int0) 
int0 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
int0 = 19                                                                # STEP 9
ACTION: int0 = 19 
int0 = 10 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                              # STEP 13
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [3] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 14
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 15
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 17
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 18
ACTION: heaps.heappush(heap0,int2) 
int2 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [15] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 20
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 23
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 24
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 26
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 27
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int2)                                              # STEP 28
ACTION: heaps.heappush(heap0,int2) 
int2 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int2 = 1                                                                # STEP 30
ACTION: int2 = 1 
int2 = 15 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 31
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int2)                                              # STEP 32
ACTION: heaps.heappush(heap2,int2) 
int2 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [1] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int2 = 13                                                               # STEP 34
ACTION: int2 = 13 
int2 = 1 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 35
ACTION: heaps.heappush(heap0,int4) 
int4 = 18 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 36
ACTION: int4 = 5 
int4 = 18 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 38
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 39
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 40
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
int4 = 4                                                                # STEP 41
ACTION: int4 = 4 
int4 = 5 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 42
ACTION: heaps.heappush(heap2,int1) 
int1 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 43
ACTION: heaps.heappush(heap0,int4) 
int4 = 4 : <type 'int'>
heap0 = [5] : <type 'list'>
=> heap0 = [4, 5] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [4, 5] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [7] : <type 'list'>
=> heap2 = [4, 5] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 45
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [4, 5] : <type 'list'>
heap1 = [7] : <type 'list'>
=> heap1 = [4, 5, 7] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [4, 5, 7] : <type 'list'>
=> heap1 = [5, 7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 48
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 5] : <type 'list'>
heap1 = [5, 7] : <type 'list'>
=> heap1 = [4, 4, 5, 5] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 49
ACTION: heaps.heappush(heap2,int1) 
int1 = 7 : <type 'int'>
heap2 = [4, 5] : <type 'list'>
=> heap2 = [4, 5, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 5, 5] : <type 'list'>
=> heap1 = [4, 5, 5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 5, 5] : <type 'list'>
=> heap1 = [5, 5] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 52
ACTION: int1 = 12 
int1 = 7 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 5, 7] : <type 'list'>
=> heap2 = [5, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 54
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 7] : <type 'list'>
heap0 = [4, 5] : <type 'list'>
=> heap0 = [5, 5, 7, 7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 7] : <type 'list'>
=> heap2 = [5, 5, 7, 7] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 7, 7] : <type 'list'>
=> heap2 = [5, 7, 7] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 57
ACTION: int4 = 17 
int4 = 4 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 7, 7] : <type 'list'>
=> heap0 = [5, 7, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 7, 7] : <type 'list'>
heap1 = [5, 5] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 60
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 7, 7] : <type 'list'>
heap1 = [5, 5] : <type 'list'>
=> heap1 = [5, 5, 7, 7, 7, 7] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 61
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 7, 7] : <type 'list'>
=> heap0 = [5, 7, 5, 7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 7, 7] : <type 'list'>
=> heap2 = [7, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 5, 7, 7, 7, 7] : <type 'list'>
heap0 = [5, 7, 5, 7] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 5, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 7, 7, 7, 7] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 65
ACTION: heap2 = heaps.heapnew() 
heap2 = [7, 7] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 66
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 7, 7, 7, 7, 7, 5, 7] : <type 'list'>
=> heap0 = [5, 7, 5, 7, 7, 7, 7, 7, 5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 68
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 69
ACTION: heaps.heappush(heap2,int3) 
int3 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 70
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 71
ACTION: heaps.heappop(heap2) 
heap2 = [9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 7, 5, 7, 7, 7, 7, 7, 5] : <type 'list'>
=> heap0 = [5, 7, 5, 7, 7, 7, 7, 7] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 73
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [5, 7, 7, 7, 7] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7, 19] : <type 'list'>
==================================================
int0 = 5                                                                # STEP 74
ACTION: int0 = 5 
int0 = 19 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 75
ACTION: heaps.heappush(heap1,int0) 
int0 = 5 : <type 'int'>
heap1 = [5, 7, 7, 7, 7, 19] : <type 'list'>
=> heap1 = [5, 7, 5, 7, 7, 19, 7] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 76
ACTION: int0 = 1 
int0 = 5 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 77
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 5, 7, 7, 19, 7] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 78
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 7, 5, 7, 7, 7, 7, 7] : <type 'list'>
heap1 = [5, 7, 7, 7, 7, 19] : <type 'list'>
=> heap1 = [5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 7, 5, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7, 7] : <type 'list'>
=> heap1 = [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 80
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7, 7] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 81
ACTION: heaps.heappush(heap2,int2) 
int2 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 82
ACTION: heaps.heappop(heap2) 
heap2 = [13] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7, 7] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 84
ACTION: heaps.heappush(heap2,int1) 
int1 = 12 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 85
ACTION: int1 = 14 
int1 = 12 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 86
ACTION: heaps.heappop(heap2) 
heap2 = [12] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 87
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 7, 5, 7, 7, 7, 7, 7] : <type 'list'>
heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7] : <type 'list'>
=> heap1 = [5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7, 7] : <type 'list'>
=> heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 89
ACTION: int2 = 11 
int2 = 13 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 90
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5, 7] : <type 'list'>
=> heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 91
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 5] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10265fe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 90
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0521850586 TOTAL RUNTIME
19 EXECUTED
1883 TOTAL TEST OPERATIONS
29.1214206219 TIME SPENT EXECUTING TEST OPERATIONS
0.245413303375 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1008610725 TIME SPENT CHECKING PROPERTIES
58.2222816944 TOTAL TIME SPENT RUNNING SUT
0.010645866394 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 18                                                                # STEP 0
int2 = 15                                                                # STEP 1
int1 = 3                                                                 # STEP 2
heap0 = heaps.heapnew()                                                  # STEP 3
int0 = 10                                                                # STEP 4
int3 = 9                                                                 # STEP 5
heaps.heappush(heap0,int0)                                               # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heaps.heappush(heap0,int0)                                               # STEP 8
int0 = 19                                                                # STEP 9
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heaps.heappush(heap0,int1)                                              # STEP 13
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 14
heaps.heappop(heap0)                                                    # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 17
heaps.heappush(heap0,int2)                                              # STEP 18
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 20
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 21
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
int1 = 7                                                                # STEP 23
heaps.heappop(heap0)                                                    # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
heaps.heappop(heap1)                                                    # STEP 26
heaps.heappop(heap2)                                                    # STEP 27
heaps.heappush(heap0,int2)                                              # STEP 28
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
int2 = 1                                                                # STEP 30
heaps.heappop(heap2)                                                    # STEP 31
heaps.heappush(heap2,int2)                                              # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
int2 = 13                                                               # STEP 34
heaps.heappush(heap0,int4)                                              # STEP 35
int4 = 5                                                                # STEP 36
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 37
heap1 = heaps.heapnew()                                                 # STEP 38
heaps.heappop(heap0)                                                    # STEP 39
heaps.heappush(heap0,int4)                                              # STEP 40
int4 = 4                                                                # STEP 41
heaps.heappush(heap2,int1)                                              # STEP 42
heaps.heappush(heap0,int4)                                              # STEP 43
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 44
heaps.heappush(heap1,int1)                                              # STEP 45
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 48
heaps.heappush(heap2,int1)                                              # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
int1 = 12                                                               # STEP 52
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 54
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
int4 = 17                                                               # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 59
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 60
heaps.heappop(heap0)                                                    # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
heap2 = heaps.heapnew()                                                 # STEP 65
heaps.heappop(heap2)                                                    # STEP 66
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 67
heaps.heappop(heap2)                                                    # STEP 68
heaps.heappush(heap2,int3)                                              # STEP 69
int3 = 14                                                               # STEP 70
heaps.heappop(heap2)                                                    # STEP 71
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
heaps.heappush(heap1,int0)                                              # STEP 73
int0 = 5                                                                # STEP 74
heaps.heappush(heap1,int0)                                              # STEP 75
int0 = 1                                                                # STEP 76
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 77
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
heaps.heappop(heap1)                                                    # STEP 80
heaps.heappush(heap2,int2)                                              # STEP 81
heaps.heappop(heap2)                                                    # STEP 82
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 83
heaps.heappush(heap2,int1)                                              # STEP 84
int1 = 14                                                               # STEP 85
heaps.heappop(heap2)                                                    # STEP 86
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 87
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 88
int2 = 11                                                               # STEP 89
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 90
heaps.heappop(heap2)                                                    # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10265fe60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.39952.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d4050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 99 steps

SAVING TEST AS failure.39952.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap1 = heaps.heapnew()                                                  # STEP 0
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 1
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int4 = 9                                                                 # STEP 2
ACTION: int4 = 9 
int4 = None : <type 'NoneType'>
=> int4 = 9 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                               # STEP 3
ACTION: heaps.heappush(heap1,int4) 
int4 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 4
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 5
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [9] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 6
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
int2 = 3                                                                # STEP 10
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 11
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 12
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
int4 = 1                                                                # STEP 13
ACTION: int4 = 1 
int4 = 9 : <type 'int'>
=> int4 = 1 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 14
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 15
ACTION: heaps.heappush(heap2,int4) 
int4 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 17
ACTION: int0 = 20 
int0 = None : <type 'NoneType'>
=> int0 = 20 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 19
ACTION: heaps.heappush(heap0,int1) 
int1 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 21
ACTION: heaps.heappush(heap2,int4) 
int4 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 24
ACTION: int1 = 15 
int1 = 5 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
int3 = 6                                                                # STEP 25
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 27
ACTION: int4 = 17 
int4 = 1 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 28
ACTION: heaps.heappush(heap0,int1) 
int1 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 30
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 31
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int1 = 2                                                                # STEP 32
ACTION: int1 = 2 
int1 = 15 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 33
ACTION: heaps.heappush(heap1,int3) 
int3 = 6 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 34
ACTION: heaps.heappush(heap0,int4) 
int4 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 35
ACTION: heaps.heappush(heap1,int1) 
int1 = 2 : <type 'int'>
heap1 = [6] : <type 'list'>
=> heap1 = [2, 6] : <type 'list'>
==================================================
int4 = 12                                                               # STEP 36
ACTION: int4 = 12 
int4 = 17 : <type 'int'>
=> int4 = 12 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 37
ACTION: int3 = 7 
int3 = 6 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 38
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [17] : <type 'list'>
heap1 = [2, 6] : <type 'list'>
=> heap1 = [17, 17] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 39
ACTION: heap0 = heaps.heapnew() 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 40
ACTION: int1 = 1 
int1 = 2 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 41
ACTION: heaps.heappush(heap0,int1) 
int1 = 1 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [1] : <type 'list'>
==================================================
int1 = 10                                                               # STEP 42
ACTION: int1 = 10 
int1 = 1 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [17, 17] : <type 'list'>
heap0 = [1] : <type 'list'>
=> heap0 = [1, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 44
ACTION: heaps.heappush(heap2,int3) 
int3 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 45
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [7] : <type 'list'>
heap0 = [1, 17, 17] : <type 'list'>
=> heap2 = [1, 7, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 7, 17, 17] : <type 'list'>
=> heap2 = [7, 17, 17] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 47
ACTION: int3 = 9 
int3 = 7 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 48
ACTION: heaps.heappush(heap2,int0) 
int0 = 20 : <type 'int'>
heap2 = [7, 17, 17] : <type 'list'>
=> heap2 = [7, 17, 17, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 49
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 17, 17] : <type 'list'>
heap1 = [17, 17] : <type 'list'>
=> heap0 = [1, 17, 17, 17, 17] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 50
ACTION: int0 = 6 
int0 = 20 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 51
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [7, 17, 17, 20] : <type 'list'>
=> heap2 = [7, 12, 17, 20, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 12, 17, 20, 17] : <type 'list'>
=> heap2 = [12, 17, 17, 20] : <type 'list'>
==================================================
int4 = 19                                                               # STEP 53
ACTION: int4 = 19 
int4 = 12 : <type 'int'>
=> int4 = 19 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 17, 17, 17, 17] : <type 'list'>
=> heap0 = [17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12, 17, 17, 20] : <type 'list'>
=> heap2 = [17, 20, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 56
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [17, 17] : <type 'list'>
heap0 = [17, 17, 17, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17, 17, 17, 17] : <type 'list'>
=> heap0 = [17, 17, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [17, 17, 17] : <type 'list'>
heap2 = [17, 20, 17] : <type 'list'>
=> heap2 = [17, 17, 17, 17, 20, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17, 17, 17] : <type 'list'>
=> heap0 = [17, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 60
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [9, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 61
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 17, 17, 17, 17, 17, 17] : <type 'list'>
=> heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
int3 = 2                                                                # STEP 62
ACTION: int3 = 2 
int3 = 9 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [17, 17, 17, 17, 20, 17] : <type 'list'>
heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
heap0 = [17, 17] : <type 'list'>
=> heap0 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17] : <type 'list'>
heap2 = [17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap2 = [17, 17, 17, 17, 20] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 66
ACTION: heap2 = heaps.heapnew() 
heap2 = [17, 17, 17, 17, 20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 67
ACTION: heaps.heappush(heap2,int4) 
int4 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
heap2 = [19] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17] : <type 'list'>
heap0 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
heap1 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 70
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
heap0 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
heap2 = [9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 71
ACTION: int4 = 11 
int4 = 19 : <type 'int'>
=> int4 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 72
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap0 = [9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 73
ACTION: heap1 = heaps.heapnew() 
heap1 = [9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 74
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17] : <type 'list'>
=> heap0 = [9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
=> heap2 = [9, 9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20] : <type 'list'>
=> heap0 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 77
ACTION: heaps.heappush(heap0,int2) 
int2 = 3 : <type 'int'>
heap0 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap0 = [3, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17, 17] : <type 'list'>
==================================================
int2 = 8                                                                # STEP 78
ACTION: int2 = 8 
int2 = 3 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17, 17] : <type 'list'>
=> heap0 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20, 17] : <type 'list'>
=> heap0 = [9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 9, 9, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
=> heap2 = [9, 9, 9, 17, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 20] : <type 'list'>
=> heap0 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 83
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 84
ACTION: heaps.heappush(heap1,int3) 
int3 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 85
ACTION: int3 = 3 
int3 = 2 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 87
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [9, 9, 9, 17, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
heap0 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17] : <type 'list'>
=> heap2 = [9, 9, 9, 17, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 88
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 9, 17, 9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17, 17] : <type 'list'>
=> heap2 = [9, 9, 9, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 89
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17] : <type 'list'>
heap2 = [9, 9, 9, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 90
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 9, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17] : <type 'list'>
=> heap2 = [9, 17, 9, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 91
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17, 17] : <type 'list'>
=> heap1 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17] : <type 'list'>
=> heap1 = [9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 93
ACTION: heap0 = heaps.heapnew() 
heap0 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 94
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20] : <type 'list'>
=> heap1 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 17, 9, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 17] : <type 'list'>
=> heap2 = [9, 17, 9, 17, 17, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 96
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
=> heap1 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 97
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 17, 9, 17, 17, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20] : <type 'list'>
=> heap2 = [9, 17, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 20, 20, 20, 17, 17, 20, 20, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17, 20, 20, 20, 20, 17, 17, 20, 17, 17, 17, 17, 17, 17, 17, 17, 20, 17, 20, 17, 20, 17] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045929e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #12 STEP #4 (0:00:30.023617) Mon May  1 02:02:52 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d2a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 49 steps

SAVING TEST AS failure.39952.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 8                                                                 # STEP 0
ACTION: int4 = 8 
int4 = None : <type 'NoneType'>
=> int4 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 1
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 11                                                                # STEP 3
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                     # STEP 4
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                     # STEP 5
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int3 = 1                                                                 # STEP 6
ACTION: int3 = 1 
int3 = None : <type 'NoneType'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 14                                                                # STEP 7
ACTION: int2 = 14 
int2 = None : <type 'NoneType'>
=> int2 = 14 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 8
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 11
ACTION: heaps.heappush(heap0,int4) 
int4 = 8 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 12
ACTION: heaps.heappush(heap0,int4) 
int4 = 8 : <type 'int'>
heap0 = [8] : <type 'list'>
=> heap0 = [8, 8] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 13
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 8] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
int4 = 15                                                               # STEP 14
ACTION: int4 = 15 
int4 = 8 : <type 'int'>
=> int4 = 15 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 15
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 16
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 17
ACTION: heaps.heappush(heap2,int3) 
int3 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 18
ACTION: heaps.heappush(heap0,int1) 
int1 = 11 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [11] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 19
ACTION: heaps.heappush(heap0,int2) 
int2 = 14 : <type 'int'>
heap0 = [11] : <type 'list'>
=> heap0 = [11, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 20
ACTION: heaps.heappush(heap1,int1) 
int1 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 21
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [1] : <type 'list'>
heap0 = [11, 14] : <type 'list'>
=> heap0 = [1, 11, 14] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 22
ACTION: int3 = 4 
int3 = 1 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 23
ACTION: heaps.heappush(heap0,int3) 
int3 = 4 : <type 'int'>
heap0 = [1, 11, 14] : <type 'list'>
=> heap0 = [1, 4, 14, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [11] : <type 'list'>
=> heap1 = [11, 11] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 25
ACTION: int2 = 7 
int2 = 14 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 4, 14, 11] : <type 'list'>
heap2 = [1] : <type 'list'>
=> heap2 = [1, 1, 4, 4, 14, 11, 14, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 4, 4, 14, 11, 14, 11] : <type 'list'>
=> heap2 = [1, 4, 4, 11, 14, 11, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 4, 4, 11, 14, 11, 14] : <type 'list'>
=> heap2 = [4, 11, 4, 14, 14, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [4, 11, 4, 14, 14, 11] : <type 'list'>
=> heap2 = [4, 4, 11, 4, 11, 4, 14, 14, 11, 14, 14, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 4, 14, 11] : <type 'list'>
=> heap0 = [4, 11, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 4, 11, 4, 11, 4, 14, 14, 11, 14, 14, 11] : <type 'list'>
=> heap2 = [4, 4, 11, 11, 11, 4, 14, 14, 11, 14, 14] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 32
ACTION: int1 = 16 
int1 = 11 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 33
ACTION: heaps.heappush(heap0,int2) 
int2 = 7 : <type 'int'>
heap0 = [4, 11, 14] : <type 'list'>
=> heap0 = [4, 7, 14, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 34
ACTION: heaps.heappush(heap1,int2) 
int2 = 7 : <type 'int'>
heap1 = [11, 11] : <type 'list'>
=> heap1 = [7, 11, 11] : <type 'list'>
==================================================
int3 = 20                                                               # STEP 35
ACTION: int3 = 20 
int3 = 4 : <type 'int'>
=> int3 = 20 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 36
ACTION: heaps.heappush(heap2,int4) 
int4 = 15 : <type 'int'>
heap2 = [4, 4, 11, 11, 11, 4, 14, 14, 11, 14, 14] : <type 'list'>
=> heap2 = [4, 4, 11, 11, 11, 4, 14, 14, 11, 14, 14, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [4, 4, 11, 11, 11, 4, 14, 14, 11, 14, 14, 15] : <type 'list'>
heap1 = [7, 11, 11] : <type 'list'>
=> heap2 = [4, 4, 7, 11, 11, 11, 4, 11, 11, 14, 14, 11, 14, 14, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 7, 14, 11] : <type 'list'>
=> heap0 = [7, 11, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 39
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 11, 14] : <type 'list'>
=> heap0 = [11, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 14] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 41
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 42
ACTION: int2 = 2 
int2 = 7 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
int4 = 14                                                               # STEP 43
ACTION: int4 = 14 
int4 = 15 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 4, 7, 11, 11, 11, 4, 11, 11, 14, 14, 11, 14, 14, 15] : <type 'list'>
=> heap2 = [4, 11, 7, 11, 11, 11, 4, 15, 11, 14, 14, 11, 14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 45
ACTION: heap1 = heaps.heapnew() 
heap1 = [7, 11, 11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [4, 11, 7, 11, 11, 11, 4, 15, 11, 14, 14, 11, 14, 14] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [4, 11, 7, 11, 11, 11, 4, 15, 11, 14, 14, 11, 14, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 11, 7, 11, 11, 11, 4, 15, 11, 14, 14, 11, 14, 14] : <type 'list'>
=> heap0 = [7, 11, 4, 11, 11, 11, 14, 15, 11, 14, 14, 11, 14] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 11, 4, 11, 11, 11, 14, 15, 11, 14, 14, 11, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [4, 11, 11, 11, 11, 11, 14, 15, 11, 14, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10472abd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 90
STOPPING TESTING DUE TO TIMEOUT
16.3003663004 PERCENT COVERED
60.0774068832 TOTAL RUNTIME
24 EXECUTED
2050 TOTAL TEST OPERATIONS
28.8036856651 TIME SPENT EXECUTING TEST OPERATIONS
0.313243865967 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.6908526421 TIME SPENT CHECKING PROPERTIES
57.4945383072 TOTAL TIME SPENT RUNNING SUT
0.0122559070587 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
heap1 = heaps.heapnew()                                                  # STEP 0
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 1
int4 = 9                                                                 # STEP 2
heaps.heappush(heap1,int4)                                               # STEP 3
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 4
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 5
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 6
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
heap1 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
int2 = 3                                                                # STEP 10
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 11
heap0 = heaps.heapnew()                                                 # STEP 12
int4 = 1                                                                # STEP 13
int1 = 5                                                                # STEP 14
heaps.heappush(heap2,int4)                                              # STEP 15
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
int0 = 20                                                               # STEP 17
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 18
heaps.heappush(heap0,int1)                                              # STEP 19
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
heaps.heappush(heap2,int4)                                              # STEP 21
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 23
int1 = 15                                                               # STEP 24
int3 = 6                                                                # STEP 25
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 26
int4 = 17                                                               # STEP 27
heaps.heappush(heap0,int1)                                              # STEP 28
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 29
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 30
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 31
int1 = 2                                                                # STEP 32
heaps.heappush(heap1,int3)                                              # STEP 33
heaps.heappush(heap0,int4)                                              # STEP 34
heaps.heappush(heap1,int1)                                              # STEP 35
int4 = 12                                                               # STEP 36
int3 = 7                                                                # STEP 37
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 38
heap0 = heaps.heapnew()                                                 # STEP 39
int1 = 1                                                                # STEP 40
heaps.heappush(heap0,int1)                                              # STEP 41
int1 = 10                                                               # STEP 42
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 43
heaps.heappush(heap2,int3)                                              # STEP 44
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 45
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
int3 = 9                                                                # STEP 47
heaps.heappush(heap2,int0)                                              # STEP 48
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 49
int0 = 6                                                                # STEP 50
heaps.heappush(heap2,int4)                                              # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
int4 = 19                                                               # STEP 53
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 54
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 58
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
heaps.heappush(heap1,int3)                                              # STEP 60
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 61
int3 = 2                                                                # STEP 62
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 65
heap2 = heaps.heapnew()                                                 # STEP 66
heaps.heappush(heap2,int4)                                              # STEP 67
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 68
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 70
int4 = 11                                                               # STEP 71
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 72
heap1 = heaps.heapnew()                                                 # STEP 73
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 74
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
heaps.heappush(heap0,int2)                                              # STEP 77
int2 = 8                                                                # STEP 78
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 82
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 83
heaps.heappush(heap1,int3)                                              # STEP 84
int3 = 3                                                                # STEP 85
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 86
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 87
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 88
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 89
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 90
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
heap0 = heaps.heapnew()                                                 # STEP 93
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 94
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 95
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 96
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 97
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 98
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045929e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE 1
int4 = 8                                                                 # STEP 0
heap2 = heaps.heapnew()                                                  # STEP 1
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
int1 = 11                                                                # STEP 3
heap1 = heaps.heapmerge(heap2,heap0)                                     # STEP 4
heap2 = heaps.heapmerge(heap1,heap0)                                     # STEP 5
int3 = 1                                                                 # STEP 6
int2 = 14                                                                # STEP 7
int0 = 16                                                                # STEP 8
heap0 = heaps.heapmerge(heap2,heap0)                                     # STEP 9
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
heaps.heappush(heap0,int4)                                              # STEP 11
heaps.heappush(heap0,int4)                                              # STEP 12
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 13
int4 = 15                                                               # STEP 14
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 15
heap0 = heaps.heapnew()                                                 # STEP 16
heaps.heappush(heap2,int3)                                              # STEP 17
heaps.heappush(heap0,int1)                                              # STEP 18
heaps.heappush(heap0,int2)                                              # STEP 19
heaps.heappush(heap1,int1)                                              # STEP 20
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 21
int3 = 4                                                                # STEP 22
heaps.heappush(heap0,int3)                                              # STEP 23
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 24
int2 = 7                                                                # STEP 25
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 26
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 29
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
int1 = 16                                                               # STEP 32
heaps.heappush(heap0,int2)                                              # STEP 33
heaps.heappush(heap1,int2)                                              # STEP 34
int3 = 20                                                               # STEP 35
heaps.heappush(heap2,int4)                                              # STEP 36
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 41
int2 = 2                                                                # STEP 42
int4 = 14                                                               # STEP 43
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
heap1 = heaps.heapnew()                                                 # STEP 45
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10472abd8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

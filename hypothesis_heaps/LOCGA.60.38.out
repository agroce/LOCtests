Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69422.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039dc3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 92 steps

SAVING TEST AS failure.69422.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 15                                                                # STEP 0
ACTION: int3 = 15 
int3 = None : <type 'NoneType'>
=> int3 = 15 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 1
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int2 = 3                                                                 # STEP 2
ACTION: int2 = 3 
int2 = None : <type 'NoneType'>
=> int2 = 3 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 4
ACTION: heaps.heappush(heap0,int2) 
int2 = 3 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [3] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 5
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [3] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int1 = 17                                                                # STEP 6
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 8
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
int4 = 9                                                                 # STEP 9
ACTION: int4 = 9 
int4 = None : <type 'NoneType'>
=> int4 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 10
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int1)                                              # STEP 12
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 13
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 14
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 15
ACTION: int1 = 3 
int1 = 17 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 18
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 20
ACTION: heaps.heappush(heap0,int4) 
int4 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 21
ACTION: heaps.heappop(heap0) 
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 22
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 23
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 5                                                                # STEP 24
ACTION: int4 = 5 
int4 = 9 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 3                                                                # STEP 26
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 28
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 29
ACTION: heaps.heappush(heap2,int1) 
int1 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 30
ACTION: int2 = 5 
int2 = 3 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 31
ACTION: heaps.heappush(heap0,int0) 
int0 = 3 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [3] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 32
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [3] : <type 'list'>
=> heap0 = [3, 5] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 33
ACTION: heaps.heappop(heap0) 
heap0 = [3, 5] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
int0 = 6                                                                # STEP 34
ACTION: int0 = 6 
int0 = 3 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [3] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 37
ACTION: heaps.heappop(heap0) 
heap0 = [5] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 38
ACTION: int1 = 14 
int1 = 3 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 1                                                                # STEP 42
ACTION: int4 = 1 
int4 = 5 : <type 'int'>
=> int4 = 1 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 43
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 45
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 46
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 48
ACTION: heaps.heappush(heap2,int3) 
int3 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 49
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 17                                                               # STEP 51
ACTION: int3 = 17 
int3 = 15 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 52
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [15] : <type 'list'>
=> heap2 = [6, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [6, 6, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 15] : <type 'list'>
=> heap2 = [6, 6, 15, 15] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 56
ACTION: int0 = 16 
int0 = 6 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 57
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [6, 6, 15, 15] : <type 'list'>
=> heap1 = [6, 6, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 58
ACTION: heaps.heappush(heap1,int1) 
int1 = 14 : <type 'int'>
heap1 = [6, 6, 15, 15] : <type 'list'>
=> heap1 = [6, 6, 15, 15, 14] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 59
ACTION: int1 = 3 
int1 = 14 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [6, 6, 15, 15] : <type 'list'>
heap2 = [6, 6, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 61
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 15, 15] : <type 'list'>
=> heap0 = [6, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 62
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [6, 6, 15, 15, 14] : <type 'list'>
=> heap1 = [5, 6, 6, 15, 14, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 6, 6, 15, 14, 15] : <type 'list'>
=> heap1 = [6, 14, 6, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 64
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [6, 14, 6, 15, 15] : <type 'list'>
heap0 = [6, 15, 15] : <type 'list'>
=> heap0 = [6, 6, 14, 6, 14, 6, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 14, 6, 15, 15] : <type 'list'>
=> heap1 = [6, 14, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 66
ACTION: heaps.heappop(heap0) 
heap0 = [6, 6, 14, 6, 14, 6, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [6, 6, 14, 15, 14, 6, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 67
ACTION: heaps.heappush(heap0,int4) 
int4 = 1 : <type 'int'>
heap0 = [6, 6, 14, 15, 14, 6, 15, 15, 15] : <type 'list'>
=> heap0 = [1, 6, 14, 15, 6, 6, 15, 15, 15, 14] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 68
ACTION: int4 = 13 
int4 = 1 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 6, 14, 15, 6, 6, 15, 15, 15, 14] : <type 'list'>
=> heap0 = [6, 6, 14, 15, 14, 6, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 70
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 6, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 71
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 6, 14, 15, 14, 6, 15, 15, 15] : <type 'list'>
heap1 = [6, 14, 15, 15] : <type 'list'>
=> heap0 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 72
ACTION: heaps.heappush(heap2,int3) 
int3 = 17 : <type 'int'>
heap2 = [6, 6, 6, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 15, 15, 15, 15, 17] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 73
ACTION: heap1 = heaps.heapnew() 
heap1 = [6, 14, 15, 15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 74
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [6, 6, 6, 15, 15, 15, 15, 17] : <type 'list'>
=> heap2 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 14, 6, 6, 14, 15, 14, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 76
ACTION: int2 = 2 
int2 = 5 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 77
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [6, 14, 6, 6, 14, 15, 14, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 14, 6, 6, 14, 13, 14, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 78
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
heap2 = [6, 14, 6, 6, 14, 13, 14, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 6, 6, 14, 14, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 79
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 6, 6, 6, 14, 14, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 14, 6, 6, 14, 15, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15, 15, 14, 6, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 80
ACTION: heaps.heappush(heap0,int2) 
int2 = 2 : <type 'int'>
heap0 = [6, 6, 6, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [2, 6, 6, 14, 14, 15, 6, 6, 15, 15, 15, 15, 15, 14] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 81
ACTION: int4 = 13 
int4 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 82
ACTION: heap2 = heaps.heapnew() 
heap2 = [6, 6, 6, 14, 6, 6, 14, 15, 14, 14, 15, 14, 6, 15, 15, 15, 15, 15, 15, 14, 6, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 83
ACTION: heaps.heappop(heap0) 
heap0 = [2, 6, 6, 14, 14, 15, 6, 6, 15, 15, 15, 15, 15, 14] : <type 'list'>
=> heap0 = [6, 14, 6, 14, 14, 15, 6, 6, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 84
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 14, 6, 14, 14, 15, 6, 6, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [6, 14, 6, 14, 14, 15, 15, 6, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [6, 14, 6, 14, 14, 15, 15, 6, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [6, 14, 15, 14, 14, 15, 15, 6, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 87
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 14, 15, 14, 14, 15, 15, 6, 15, 15, 15] : <type 'list'>
=> heap0 = [14, 14, 15, 6, 14, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 88
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int2 = 8                                                                # STEP 90
ACTION: int2 = 8 
int2 = 2 : <type 'int'>
=> int2 = 8 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 91
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 14, 15, 6, 14, 15, 15, 15, 15, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [14, 6, 15, 15, 14, 15, 15, 15, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039ef5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #46 (0:00:30.006127) Tue May  2 19:28:21 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.059980154 TOTAL RUNTIME
20 EXECUTED
1932 TOTAL TEST OPERATIONS
29.2051222324 TIME SPENT EXECUTING TEST OPERATIONS
0.248492479324 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.141736269 TIME SPENT CHECKING PROPERTIES
58.3468585014 TOTAL TIME SPENT RUNNING SUT
0.011378288269 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 15                                                                # STEP 0
heap0 = heaps.heapnew()                                                  # STEP 1
int2 = 3                                                                 # STEP 2
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 3
heaps.heappush(heap0,int2)                                               # STEP 4
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 5
int1 = 17                                                                # STEP 6
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 7
heap0 = heaps.heapnew()                                                  # STEP 8
int4 = 9                                                                 # STEP 9
heaps.heappop(heap1)                                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heaps.heappush(heap1,int1)                                              # STEP 12
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 13
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 14
int1 = 3                                                                # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappop(heap0)                                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heaps.heappush(heap0,int4)                                              # STEP 20
heaps.heappop(heap0)                                                    # STEP 21
heaps.heappop(heap0)                                                    # STEP 22
heaps.heappop(heap1)                                                    # STEP 23
int4 = 5                                                                # STEP 24
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
int0 = 3                                                                # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
heaps.heappop(heap0)                                                    # STEP 28
heaps.heappush(heap2,int1)                                              # STEP 29
int2 = 5                                                                # STEP 30
heaps.heappush(heap0,int0)                                              # STEP 31
heaps.heappush(heap0,int4)                                              # STEP 32
heaps.heappop(heap0)                                                    # STEP 33
int0 = 6                                                                # STEP 34
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heaps.heappop(heap0)                                                    # STEP 37
int1 = 14                                                               # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
int4 = 1                                                                # STEP 42
heaps.heappop(heap1)                                                    # STEP 43
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 44
heaps.heappop(heap2)                                                    # STEP 45
heaps.heappop(heap0)                                                    # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
heaps.heappush(heap2,int3)                                              # STEP 48
heaps.heappop(heap1)                                                    # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
int3 = 17                                                               # STEP 51
heaps.heappush(heap2,int0)                                              # STEP 52
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
int0 = 16                                                               # STEP 56
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 57
heaps.heappush(heap1,int1)                                              # STEP 58
int1 = 3                                                                # STEP 59
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
heaps.heappop(heap0)                                                    # STEP 61
heaps.heappush(heap1,int2)                                              # STEP 62
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 64
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
heaps.heappop(heap0)                                                    # STEP 66
heaps.heappush(heap0,int4)                                              # STEP 67
int4 = 13                                                               # STEP 68
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
heaps.heappop(heap2)                                                    # STEP 70
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 71
heaps.heappush(heap2,int3)                                              # STEP 72
heap1 = heaps.heapnew()                                                 # STEP 73
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 74
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
int2 = 2                                                                # STEP 76
heaps.heappush(heap2,int4)                                              # STEP 77
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 78
heaps.heappop(heap2)                                                    # STEP 79
heaps.heappush(heap0,int2)                                              # STEP 80
int4 = 13                                                               # STEP 81
heap2 = heaps.heapnew()                                                 # STEP 82
heaps.heappop(heap0)                                                    # STEP 83
heaps.heappop(heap2)                                                    # STEP 84
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 87
heaps.heappush(heap2,int4)                                              # STEP 88
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
int2 = 8                                                                # STEP 90
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 91
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1039ef5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

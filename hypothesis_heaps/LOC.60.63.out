Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.433.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d4d758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 62 steps

SAVING TEST AS failure.433.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 3                                                                 # STEP 0
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int3 = 8                                                                 # STEP 1
ACTION: int3 = 8 
int3 = None : <type 'NoneType'>
=> int3 = 8 : <type 'int'>
==================================================
int2 = 4                                                                 # STEP 2
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int4 = 9                                                                 # STEP 3
ACTION: int4 = 9 
int4 = None : <type 'NoneType'>
=> int4 = 9 : <type 'int'>
==================================================
int1 = 1                                                                 # STEP 4
ACTION: int1 = 1 
int1 = None : <type 'NoneType'>
=> int1 = 1 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                               # STEP 6
ACTION: heaps.heappush(heap0,int1) 
int1 = 1 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [1] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [1] : <type 'list'>
=> heap0 = [1, 1] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 1] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [1, 1, 1, 1] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 9
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1, 1] : <type 'list'>
=> heap2 = [1, 1, 1] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 10
ACTION: heaps.heappush(heap0,int2) 
int2 = 4 : <type 'int'>
heap0 = [1, 1] : <type 'list'>
=> heap0 = [1, 1, 4] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 11
ACTION: int1 = 7 
int1 = 1 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 12
ACTION: heaps.heappush(heap0,int1) 
int1 = 7 : <type 'int'>
heap0 = [1, 1, 4] : <type 'list'>
=> heap0 = [1, 1, 4, 7] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 13
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1] : <type 'list'>
=> heap2 = [1, 1] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 14
ACTION: heaps.heappush(heap2,int2) 
int2 = 4 : <type 'int'>
heap2 = [1, 1] : <type 'list'>
=> heap2 = [1, 1, 4] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 15
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 1, 4, 7] : <type 'list'>
heap2 = [1, 1, 4] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 4, 4, 7] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 16
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 1, 4, 4, 7] : <type 'list'>
=> heap0 = [1, 1, 1, 7, 4, 4] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 17
ACTION: int1 = 17 
int1 = 7 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 7, 4, 4] : <type 'list'>
=> heap0 = [1, 4, 1, 7, 4] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 19
ACTION: heaps.heappush(heap2,int3) 
int3 = 8 : <type 'int'>
heap2 = [1, 1, 4] : <type 'list'>
=> heap2 = [1, 1, 4, 8] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 20
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 4, 1, 7, 4] : <type 'list'>
heap2 = [1, 1, 4, 8] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [1, 1, 1, 4, 1, 4, 7, 4, 8] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 21
ACTION: int2 = 11 
int2 = 4 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 22
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 1, 4, 1, 4, 7, 4, 8] : <type 'list'>
=> heap1 = [1, 1, 1, 4, 8, 4, 7, 4] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 1, 7, 4] : <type 'list'>
=> heap0 = [1, 4, 4, 7] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 4, 8] : <type 'list'>
=> heap2 = [1, 8, 4] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 25
ACTION: int3 = 16 
int3 = 8 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 26
ACTION: heap2 = heaps.heapnew() 
heap2 = [1, 8, 4] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 27
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [1, 1, 1, 4, 8, 4, 7, 4] : <type 'list'>
=> heap1 = [1, 1, 1, 4, 8, 4, 7, 4, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 11                                                               # STEP 29
ACTION: int1 = 11 
int1 = 17 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 30
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 1, 4, 8, 4, 7, 4, 17] : <type 'list'>
=> heap1 = [1, 4, 1, 4, 8, 4, 7, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 4, 1, 4, 8, 4, 7, 17] : <type 'list'>
=> heap1 = [1, 4, 4, 4, 8, 17, 7] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 32
ACTION: heaps.heappush(heap0,int1) 
int1 = 11 : <type 'int'>
heap0 = [1, 4, 4, 7] : <type 'list'>
=> heap0 = [1, 4, 4, 7, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 33
ACTION: heaps.heappop(heap1) 
heap1 = [1, 4, 4, 4, 8, 17, 7] : <type 'list'>
=> heap1 = [4, 4, 4, 7, 8, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 4, 7, 8, 17] : <type 'list'>
=> heap1 = [4, 7, 4, 17, 8] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 7, 4, 17, 8] : <type 'list'>
=> heap1 = [4, 7, 8, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 4, 7, 11] : <type 'list'>
=> heap0 = [4, 7, 4, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 37
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 7, 8, 17] : <type 'list'>
=> heap1 = [7, 17, 8] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 38
ACTION: int1 = 15 
int1 = 11 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 39
ACTION: heaps.heappush(heap2,int4) 
int4 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [7, 17, 8] : <type 'list'>
heap2 = [9] : <type 'list'>
=> heap2 = [7, 9, 17, 8] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 41
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [7, 17, 8] : <type 'list'>
=> heap1 = [3, 7, 8, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [4, 7, 4, 11] : <type 'list'>
=> heap0 = [4, 7, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 43
ACTION: heaps.heappop(heap0) 
heap0 = [4, 7, 11] : <type 'list'>
=> heap0 = [7, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [3, 7, 8, 17] : <type 'list'>
heap0 = [7, 11] : <type 'list'>
=> heap1 = [3, 7, 7, 8, 11, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 45
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 7, 7, 8, 11, 17] : <type 'list'>
heap0 = [7, 11] : <type 'list'>
=> heap0 = [3, 3, 7, 7, 7, 7, 8, 8, 11, 11, 17, 17] : <type 'list'>
==================================================
int4 = 15                                                               # STEP 46
ACTION: int4 = 15 
int4 = 9 : <type 'int'>
=> int4 = 15 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [3, 7, 7, 8, 11, 17] : <type 'list'>
=> heap1 = [7, 8, 7, 17, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 48
ACTION: heaps.heappop(heap0) 
heap0 = [3, 3, 7, 7, 7, 7, 8, 8, 11, 11, 17, 17] : <type 'list'>
=> heap0 = [3, 7, 7, 8, 7, 7, 8, 17, 11, 11, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 9, 17, 8] : <type 'list'>
=> heap2 = [8, 9, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 9, 17] : <type 'list'>
=> heap2 = [9, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [7, 8, 7, 17, 11] : <type 'list'>
=> heap1 = [7, 7, 8, 7, 8, 7, 17, 11, 17, 11] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 52
ACTION: int0 = 9 
int0 = 3 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [7, 7, 8, 7, 8, 7, 17, 11, 17, 11] : <type 'list'>
=> heap1 = [7, 7, 8, 11, 8, 7, 17, 11, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [9, 17] : <type 'list'>
heap0 = [3, 7, 7, 8, 7, 7, 8, 17, 11, 11, 17] : <type 'list'>
=> heap2 = [3, 7, 7, 8, 7, 7, 8, 9, 17, 17, 11, 11, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [7, 7, 8, 11, 8, 7, 17, 11, 17] : <type 'list'>
=> heap1 = [7, 8, 8, 11, 17, 7, 17, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 56
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 7, 7, 8, 7, 7, 8, 9, 17, 17, 11, 11, 17] : <type 'list'>
=> heap2 = [7, 7, 7, 8, 11, 7, 8, 9, 17, 17, 17, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 57
ACTION: heaps.heappush(heap2,int0) 
int0 = 9 : <type 'int'>
heap2 = [7, 7, 7, 8, 11, 7, 8, 9, 17, 17, 17, 11] : <type 'list'>
=> heap2 = [7, 7, 7, 8, 11, 7, 8, 9, 17, 17, 17, 11, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 7, 7, 8, 7, 7, 8, 17, 11, 11, 17] : <type 'list'>
=> heap0 = [7, 7, 7, 8, 11, 7, 8, 17, 11, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 8, 8, 11, 17, 7, 17, 11] : <type 'list'>
=> heap1 = [8, 11, 8, 11, 17, 7, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [8, 11, 8, 11, 17, 7, 17] : <type 'list'>
=> heap1 = [8, 11, 7, 11, 17, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 11, 7, 11, 17, 17] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [7, 11, 17, 11, 17] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e21ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #21 (0:00:30.002659) Fri Apr 28 06:21:38 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 49
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0416779518 TOTAL RUNTIME
25 EXECUTED
2411 TOTAL TEST OPERATIONS
29.4450101852 TIME SPENT EXECUTING TEST OPERATIONS
0.333540201187 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3830280304 TIME SPENT CHECKING PROPERTIES
58.8280382156 TOTAL TIME SPENT RUNNING SUT
0.0115420818329 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 3                                                                 # STEP 0
int3 = 8                                                                 # STEP 1
int2 = 4                                                                 # STEP 2
int4 = 9                                                                 # STEP 3
int1 = 1                                                                 # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap0,int1)                                               # STEP 6
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
heap2 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
heaps.heappop(heap2)                                                     # STEP 9
heaps.heappush(heap0,int2)                                              # STEP 10
int1 = 7                                                                # STEP 11
heaps.heappush(heap0,int1)                                              # STEP 12
heaps.heappop(heap2)                                                    # STEP 13
heaps.heappush(heap2,int2)                                              # STEP 14
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 15
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 16
int1 = 17                                                               # STEP 17
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
heaps.heappush(heap2,int3)                                              # STEP 19
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 20
int2 = 11                                                               # STEP 21
heaps.heappop(heap1)                                                    # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
int3 = 16                                                               # STEP 25
heap2 = heaps.heapnew()                                                 # STEP 26
heaps.heappush(heap1,int1)                                              # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
int1 = 11                                                               # STEP 29
heaps.heappop(heap1)                                                    # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
heaps.heappush(heap0,int1)                                              # STEP 32
heaps.heappop(heap1)                                                    # STEP 33
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 37
int1 = 15                                                               # STEP 38
heaps.heappush(heap2,int4)                                              # STEP 39
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
heaps.heappush(heap1,int0)                                              # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
heaps.heappop(heap0)                                                    # STEP 43
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 45
int4 = 15                                                               # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
heaps.heappop(heap0)                                                    # STEP 48
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 51
int0 = 9                                                                # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 56
heaps.heappush(heap2,int0)                                              # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e21ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

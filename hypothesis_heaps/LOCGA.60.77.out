Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69648.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #52 (0:00:30.024183) Tue May  2 20:07:37 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10358c368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 79 steps

SAVING TEST AS failure.69648.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 10                                                                # STEP 0
ACTION: int1 = 10 
int1 = None : <type 'NoneType'>
=> int1 = 10 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 1
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 13                                                                # STEP 2
ACTION: int0 = 13 
int0 = None : <type 'NoneType'>
=> int0 = 13 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 3
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 4
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 3                                                                 # STEP 5
ACTION: int4 = 3 
int4 = None : <type 'NoneType'>
=> int4 = 3 : <type 'int'>
==================================================
int2 = 11                                                                # STEP 6
ACTION: int2 = 11 
int2 = None : <type 'NoneType'>
=> int2 = 11 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                               # STEP 8
ACTION: heaps.heappush(heap1,int0) 
int0 = 13 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 9
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [13] : <type 'list'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 11
ACTION: int0 = 13 
int0 = 13 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 12
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [13] : <type 'list'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 13
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [13] : <type 'list'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 17
ACTION: heaps.heappush(heap1,int0) 
int0 = 13 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [13] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [13, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [13] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 20
ACTION: heaps.heappop(heap0) 
heap0 = [13, 13] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 21
ACTION: heaps.heappop(heap0) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 23
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int3)                                              # STEP 24
ACTION: heaps.heappush(heap0,int3) 
int3 = 2 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [2] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 26
ACTION: int0 = 1 
int0 = 13 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 28
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 30
ACTION: heaps.heappush(heap0,int2) 
int2 = 11 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [11] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 31
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 32
ACTION: heaps.heappush(heap2,int2) 
int2 = 11 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [11] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 33
ACTION: heaps.heappush(heap0,int0) 
int0 = 1 : <type 'int'>
heap0 = [11] : <type 'list'>
=> heap0 = [1, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [11] : <type 'list'>
heap0 = [1, 11] : <type 'list'>
=> heap0 = [1, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [1, 11, 11] : <type 'list'>
heap2 = [11] : <type 'list'>
=> heap2 = [1, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 11, 11] : <type 'list'>
=> heap2 = [11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 11, 11] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [1, 1, 11, 11, 11, 11] : <type 'list'>
==================================================
int3 = 9                                                                # STEP 38
ACTION: int3 = 9 
int3 = 2 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [11, 11] : <type 'list'>
heap0 = [1, 11, 11] : <type 'list'>
=> heap0 = [1, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 11, 11, 11, 11] : <type 'list'>
heap2 = [11, 11] : <type 'list'>
=> heap2 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [1, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 42
ACTION: heaps.heappop(heap1) 
heap1 = [1, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [11, 11, 11] : <type 'list'>
heap2 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 11, 11, 11, 11] : <type 'list'>
heap2 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 46
ACTION: heaps.heappush(heap2,int1) 
int1 = 10 : <type 'int'>
heap2 = [1, 1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 47
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 11, 11, 11, 11] : <type 'list'>
heap2 = [1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 48
ACTION: heaps.heappush(heap2,int0) 
int0 = 1 : <type 'int'>
heap2 = [1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 49
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1, 1, 11, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 50
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap1 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 51
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 11, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 52
ACTION: heaps.heappop(heap2) 
heap2 = [1, 1, 1, 11, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 1, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 54
ACTION: heaps.heappop(heap0) 
heap0 = [1, 1, 1, 1, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 1, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 1, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [1, 10, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 56
ACTION: int0 = 16 
int0 = 1 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 58
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap2 = [1, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap0 = [1, 10, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 62
ACTION: heaps.heappush(heap2,int1) 
int1 = 10 : <type 'int'>
heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 63
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 67
ACTION: int1 = 8 
int1 = 10 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 69
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap1 = [9, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 72
ACTION: int2 = 12 
int2 = 11 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 73
ACTION: int3 = 17 
int3 = 9 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 74
ACTION: heap1 = heaps.heapnew() 
heap1 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 75
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
heap2 = [10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 76
ACTION: heaps.heappop(heap0) 
heap0 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 77
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 1, 11, 11, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035b3908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 67
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0517439842 TOTAL RUNTIME
19 EXECUTED
1846 TOTAL TEST OPERATIONS
29.2238252163 TIME SPENT EXECUTING TEST OPERATIONS
0.238649129868 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.241748333 TIME SPENT CHECKING PROPERTIES
58.4655735493 TOTAL TIME SPENT RUNNING SUT
0.0108177661896 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 10                                                                # STEP 0
int3 = 2                                                                 # STEP 1
int0 = 13                                                                # STEP 2
heap1 = heaps.heapnew()                                                  # STEP 3
heaps.heappop(heap1)                                                     # STEP 4
int4 = 3                                                                 # STEP 5
int2 = 11                                                                # STEP 6
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heaps.heappush(heap1,int0)                                               # STEP 8
heap1 = heaps.heapmerge(heap1,heap1)                                     # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
int0 = 13                                                               # STEP 11
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 12
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 13
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 16
heaps.heappush(heap1,int0)                                              # STEP 17
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heaps.heappop(heap0)                                                    # STEP 20
heaps.heappop(heap0)                                                    # STEP 21
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 22
heaps.heappop(heap1)                                                    # STEP 23
heaps.heappush(heap0,int3)                                              # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
int0 = 1                                                                # STEP 26
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
heaps.heappop(heap0)                                                    # STEP 28
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 29
heaps.heappush(heap0,int2)                                              # STEP 30
heap2 = heaps.heapnew()                                                 # STEP 31
heaps.heappush(heap2,int2)                                              # STEP 32
heaps.heappush(heap0,int0)                                              # STEP 33
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 34
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
int3 = 9                                                                # STEP 38
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heaps.heappop(heap1)                                                    # STEP 42
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 45
heaps.heappush(heap2,int1)                                              # STEP 46
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 47
heaps.heappush(heap2,int0)                                              # STEP 48
heaps.heappop(heap2)                                                    # STEP 49
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 50
heaps.heappop(heap2)                                                    # STEP 51
heaps.heappop(heap2)                                                    # STEP 52
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 53
heaps.heappop(heap0)                                                    # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
int0 = 16                                                               # STEP 56
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
heaps.heappush(heap2,int1)                                              # STEP 62
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
int1 = 8                                                                # STEP 67
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 68
heaps.heappush(heap1,int3)                                              # STEP 69
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
int2 = 12                                                               # STEP 72
int3 = 17                                                               # STEP 73
heap1 = heaps.heapnew()                                                 # STEP 74
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 75
heaps.heappop(heap0)                                                    # STEP 76
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 77
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035b3908>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

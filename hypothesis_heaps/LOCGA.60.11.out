Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69264.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #92 (0:00:30.019977) Tue May  2 19:02:06 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104546998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 66 steps

SAVING TEST AS failure.69264.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap0 = heaps.heapnew()                                                  # STEP 0
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 1
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 2
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                               # STEP 4
ACTION: heaps.heappush(heap0,int3) 
int3 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 5
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [10] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 6
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [10, 10] : <type 'list'>
=> heap0 = [10, 10] : <type 'list'>
==================================================
int2 = 2                                                                 # STEP 8
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 2                                                                 # STEP 9
ACTION: int1 = 2 
int1 = None : <type 'NoneType'>
=> int1 = 2 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10] : <type 'list'>
=> heap1 = [10] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 11
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 10] : <type 'list'>
heap1 = [10] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [10, 10, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 12
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [10] : <type 'list'>
heap0 = [10, 10] : <type 'list'>
=> heap0 = [10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 13
ACTION: heaps.heappush(heap0,int2) 
int2 = 2 : <type 'int'>
heap0 = [10, 10, 10] : <type 'list'>
=> heap0 = [2, 10, 10, 10] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 14
ACTION: heap1 = heaps.heapnew() 
heap1 = [10] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 14                                                               # STEP 15
ACTION: int2 = 14 
int2 = 2 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 16
ACTION: heaps.heappush(heap1,int3) 
int3 = 10 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 17
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10, 10] : <type 'list'>
=> heap2 = [10, 10] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 18
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [10] : <type 'list'>
=> heap1 = [10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 10, 10, 10] : <type 'list'>
=> heap0 = [10, 10, 10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [10, 10, 10] : <type 'list'>
heap2 = [10] : <type 'list'>
=> heap0 = [10, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 24
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10] : <type 'list'>
=> heap1 = [10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 25
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 26
ACTION: heaps.heappush(heap2,int3) 
int3 = 10 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 10, 10, 10] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [10, 10, 10, 10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [10, 10, 10, 10] : <type 'list'>
=> heap0 = [10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 30
ACTION: heaps.heappush(heap0,int2) 
int2 = 14 : <type 'int'>
heap0 = [10, 10, 10] : <type 'list'>
=> heap0 = [10, 10, 10, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 32
ACTION: heaps.heappop(heap0) 
heap0 = [10, 10, 10, 14] : <type 'list'>
=> heap0 = [10, 14, 10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 10] : <type 'list'>
=> heap1 = [10, 10, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 35
ACTION: heaps.heappush(heap0,int3) 
int3 = 10 : <type 'int'>
heap0 = [10, 14, 10] : <type 'list'>
=> heap0 = [10, 10, 10, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 36
ACTION: heaps.heappush(heap2,int3) 
int3 = 10 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [10] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [10] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 38
ACTION: heaps.heappush(heap2,int2) 
int2 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
int2 = 17                                                               # STEP 39
ACTION: int2 = 17 
int2 = 14 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 40
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [10, 10, 10, 14] : <type 'list'>
heap2 = [14] : <type 'list'>
=> heap0 = [10, 10, 10, 14, 14] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 41
ACTION: int4 = 16 
int4 = None : <type 'NoneType'>
=> int4 = 16 : <type 'int'>
==================================================
int3 = 3                                                                # STEP 42
ACTION: int3 = 3 
int3 = 10 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 43
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 10, 10, 14, 14] : <type 'list'>
=> heap0 = [10, 14, 10, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [10, 14, 10, 14] : <type 'list'>
=> heap0 = [10, 14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 14, 14] : <type 'list'>
heap1 = [10, 10, 10] : <type 'list'>
=> heap1 = [10, 10, 10, 10, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 10, 14, 14] : <type 'list'>
=> heap1 = [10, 10, 10, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 47
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10, 10, 14, 14] : <type 'list'>
=> heap1 = [10, 14, 10, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 48
ACTION: heaps.heappush(heap1,int2) 
int2 = 17 : <type 'int'>
heap1 = [10, 14, 10, 14] : <type 'list'>
=> heap1 = [10, 14, 10, 14, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 49
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [10, 14, 10, 14, 17] : <type 'list'>
heap0 = [10, 14, 14] : <type 'list'>
=> heap0 = [10, 10, 14, 10, 14, 14, 10, 14, 17, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 50
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [10, 14, 10, 14, 17] : <type 'list'>
heap0 = [10, 10, 14, 10, 14, 14, 10, 14, 17, 17] : <type 'list'>
heap2 = [14] : <type 'list'>
=> heap2 = [10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 10, 14, 17, 17, 17] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 51
ACTION: int2 = 7 
int2 = 17 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 10, 14, 17, 17, 17] : <type 'list'>
=> heap2 = [10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 17, 14, 17, 17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 17, 14, 17, 17] : <type 'list'>
heap1 = [10, 14, 10, 14, 17] : <type 'list'>
=> heap1 = [10, 10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 17, 14, 17, 17] : <type 'list'>
=> heap2 = [10, 10, 10, 14, 14, 14, 14, 10, 14, 17, 17, 14, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [10, 10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17] : <type 'list'>
heap2 = [10, 10, 10, 14, 14, 14, 14, 10, 14, 17, 17, 14, 17] : <type 'list'>
=> heap2 = [10, 10, 10, 10, 10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 14, 10, 14, 14, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17, 14, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17] : <type 'list'>
=> heap1 = [10, 10, 10, 10, 14, 10, 14, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 57
ACTION: heaps.heappop(heap0) 
heap0 = [10, 10, 14, 10, 14, 14, 10, 14, 17, 17] : <type 'list'>
=> heap0 = [10, 10, 14, 14, 14, 14, 10, 17, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 10, 14, 14, 14, 14, 10, 17, 17] : <type 'list'>
=> heap0 = [10, 14, 14, 17, 14, 14, 10, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 10, 14, 10, 14, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17] : <type 'list'>
=> heap1 = [10, 10, 10, 14, 14, 10, 14, 14, 17, 14, 14, 14, 10, 14, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10, 10, 14, 14, 10, 14, 14, 17, 14, 14, 14, 10, 14, 17, 17, 17] : <type 'list'>
=> heap1 = [10, 14, 10, 14, 14, 10, 14, 17, 17, 14, 14, 14, 10, 14, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 61
ACTION: heaps.heappop(heap2) 
heap2 = [10, 10, 10, 10, 10, 10, 10, 14, 10, 14, 14, 10, 14, 14, 14, 10, 14, 14, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17, 14, 17] : <type 'list'>
=> heap2 = [10, 10, 10, 10, 10, 10, 10, 14, 14, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10, 10, 10, 10, 10, 10, 14, 14, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17, 14] : <type 'list'>
=> heap2 = [10, 10, 10, 14, 10, 10, 10, 14, 14, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 63
ACTION: heaps.heappop(heap0) 
heap0 = [10, 14, 14, 17, 14, 14, 10, 17] : <type 'list'>
=> heap0 = [14, 14, 14, 17, 17, 14, 10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10, 10, 14, 10, 10, 10, 14, 14, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 14, 14, 10, 14, 17, 14, 17, 17, 17, 17, 17] : <type 'list'>
=> heap2 = [10, 10, 10, 14, 14, 10, 10, 14, 14, 14, 14, 10, 14, 14, 14, 10, 14, 17, 14, 17, 14, 10, 14, 17, 14, 17, 17, 17, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 14, 14, 17, 17, 14, 10] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [10, 14, 14, 17, 17, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10463bf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 63
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.090831995 TOTAL RUNTIME
20 EXECUTED
1929 TOTAL TEST OPERATIONS
29.3556866646 TIME SPENT EXECUTING TEST OPERATIONS
0.26704120636 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3115427494 TIME SPENT CHECKING PROPERTIES
58.667229414 TOTAL TIME SPENT RUNNING SUT
0.0109429359436 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap0 = heaps.heapnew()                                                  # STEP 0
heaps.heappop(heap0)                                                     # STEP 1
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 2
int3 = 10                                                                # STEP 3
heaps.heappush(heap0,int3)                                               # STEP 4
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 5
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 6
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 7
int2 = 2                                                                 # STEP 8
int1 = 2                                                                 # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 11
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 12
heaps.heappush(heap0,int2)                                              # STEP 13
heap1 = heaps.heapnew()                                                 # STEP 14
int2 = 14                                                               # STEP 15
heaps.heappush(heap1,int3)                                              # STEP 16
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 17
int0 = 19                                                               # STEP 18
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 19
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
heaps.heappop(heap1)                                                    # STEP 24
heaps.heappop(heap2)                                                    # STEP 25
heaps.heappush(heap2,int3)                                              # STEP 26
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 27
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heaps.heappush(heap0,int2)                                              # STEP 30
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
heaps.heappop(heap0)                                                    # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 34
heaps.heappush(heap0,int3)                                              # STEP 35
heaps.heappush(heap2,int3)                                              # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heaps.heappush(heap2,int2)                                              # STEP 38
int2 = 17                                                               # STEP 39
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 40
int4 = 16                                                               # STEP 41
int3 = 3                                                                # STEP 42
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 46
heaps.heappop(heap1)                                                    # STEP 47
heaps.heappush(heap1,int2)                                              # STEP 48
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 49
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 50
int2 = 7                                                                # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 55
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
heaps.heappop(heap0)                                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
heaps.heappop(heap2)                                                    # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
heaps.heappop(heap0)                                                    # STEP 63
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10463bf80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

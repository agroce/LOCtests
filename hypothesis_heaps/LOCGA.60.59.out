Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69549.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103293950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 100 steps

SAVING TEST AS failure.69549.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 9                                                                 # STEP 0
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 5
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                               # STEP 6
ACTION: heaps.heappush(heap0,int3) 
int3 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 7
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 8
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [9] : <type 'list'>
heap1 = [9] : <type 'list'>
=> heap0 = [9, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [9, 9] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 8                                                                # STEP 13
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 14
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                 # STEP 15
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int1 = 15                                                               # STEP 17
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 18
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 20
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 21
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 22
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 23
ACTION: heaps.heappush(heap0,int1) 
int1 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 24
ACTION: int1 = 16 
int1 = 15 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 25
ACTION: heaps.heappush(heap2,int3) 
int3 = 9 : <type 'int'>
heap2 = [15] : <type 'list'>
=> heap2 = [9, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [9, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 30
ACTION: heaps.heappush(heap0,int0) 
int0 = 8 : <type 'int'>
heap0 = [15] : <type 'list'>
=> heap0 = [8, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 31
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [15] : <type 'list'>
heap0 = [8, 15] : <type 'list'>
=> heap0 = [8, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 32
ACTION: heaps.heappush(heap0,int3) 
int3 = 9 : <type 'int'>
heap0 = [8, 15, 15] : <type 'list'>
=> heap0 = [8, 9, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 33
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [8, 9, 15, 15] : <type 'list'>
=> heap0 = [8, 8, 9, 9, 15, 15, 15, 15] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 34
ACTION: int2 = 18 
int2 = None : <type 'NoneType'>
=> int2 = 18 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [8, 8, 9, 9, 15, 15, 15, 15] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [15] : <type 'list'>
=> heap1 = [8, 8, 9, 9, 15, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 36
ACTION: heaps.heappush(heap2,int2) 
int2 = 18 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [8, 8, 9, 9, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [8, 9, 9, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 9, 9, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 9, 15, 15, 15] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 39
ACTION: int4 = 14 
int4 = None : <type 'NoneType'>
=> int4 = 14 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 40
ACTION: heaps.heappop(heap0) 
heap0 = [8, 8, 9, 9, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [8, 9, 9, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 41
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [8, 9, 9, 15, 15, 15, 15] : <type 'list'>
heap2 = [18] : <type 'list'>
=> heap0 = [8, 9, 9, 15, 15, 15, 15, 18] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 42
ACTION: int3 = 16 
int3 = 9 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
int0 = 6                                                                # STEP 43
ACTION: int0 = 6 
int0 = 8 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 15, 9, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15, 15, 15] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 45
ACTION: int2 = 12 
int2 = 18 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [18] : <type 'list'>
heap0 = [8, 9, 9, 15, 15, 15, 15, 18] : <type 'list'>
heap1 = [9, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [8, 9, 9, 15, 15, 15, 15, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 9, 9, 15, 15, 15, 15, 18, 18] : <type 'list'>
=> heap1 = [9, 15, 9, 18, 15, 15, 15, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 15, 9, 18, 15, 15, 15, 18] : <type 'list'>
=> heap1 = [9, 15, 15, 18, 15, 18, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 50
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 9, 9, 15, 15, 15, 15, 18] : <type 'list'>
=> heap0 = [9, 15, 9, 18, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 51
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 15, 18, 15, 18, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 18, 15, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 15, 9, 18, 15, 15, 15] : <type 'list'>
=> heap0 = [9, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [9, 15, 15, 18, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 18, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 18, 15, 18] : <type 'list'>
=> heap1 = [15, 15, 15, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 55
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [15, 15, 15, 18, 18] : <type 'list'>
=> heap2 = [15, 15, 15, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 56
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [15, 15, 15, 18, 18] : <type 'list'>
heap1 = [15, 15, 15, 18, 18] : <type 'list'>
=> heap1 = [15, 15, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 18, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 58
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 18] : <type 'list'>
=> heap0 = [15, 18, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [15, 15, 15, 18, 18] : <type 'list'>
heap0 = [15, 18, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 18, 18, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 60
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 18, 18, 18, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 61
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [15, 15, 15, 18, 18] : <type 'list'>
heap0 = [15, 15, 15, 15, 18, 18, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 15, 15, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 15, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 63
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 18, 15, 18] : <type 'list'>
=> heap2 = [15, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 15, 15, 18, 15, 15, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 15, 15, 15, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 18, 15, 15, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 66
ACTION: heap2 = heaps.heapnew() 
heap2 = [15, 18, 18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 67
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 68
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 18, 15, 15, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 15, 15, 18, 18, 15, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 69
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 18, 15, 15, 18, 18, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 18, 18, 15, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 70
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 71
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 18, 18, 15, 18, 18] : <type 'list'>
=> heap1 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 72
ACTION: heaps.heappop(heap2) 
heap2 = [14] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
=> heap1 = [15, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 74
ACTION: heaps.heappop(heap1) 
heap1 = [15, 18, 15, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 75
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 18, 18, 15, 18, 18] : <type 'list'>
=> heap0 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 77
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
=> heap2 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
=> heap0 = [15, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 80
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18, 18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 81
ACTION: heaps.heappop(heap2) 
heap2 = [15, 18, 15, 18, 18, 15, 18] : <type 'list'>
=> heap2 = [15, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 82
ACTION: int4 = 5 
int4 = 14 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 83
ACTION: heaps.heappop(heap2) 
heap2 = [15, 18, 15, 18, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 18, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 84
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [15, 18, 18, 18, 18] : <type 'list'>
heap0 = [15, 18, 15, 18, 18, 18] : <type 'list'>
heap1 = [18, 18] : <type 'list'>
=> heap1 = [15, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 85
ACTION: heaps.heappush(heap2,int2) 
int2 = 12 : <type 'int'>
heap2 = [15, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [12, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 86
ACTION: heaps.heappop(heap2) 
heap2 = [12, 18, 15, 18, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 18, 18, 18] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 87
ACTION: int2 = 18 
int2 = 12 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 88
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [15, 18, 18, 18, 18] : <type 'list'>
heap0 = [15, 18, 15, 18, 18, 18] : <type 'list'>
=> heap2 = [15, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 89
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 18, 15, 18, 18, 18] : <type 'list'>
=> heap0 = [15, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 90
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 91
ACTION: heaps.heappop(heap0) 
heap0 = [15, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 93
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
=> heap2 = [6, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 94
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [18, 18, 18, 18] : <type 'list'>
=> heap0 = [18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 95
ACTION: heaps.heappop(heap2) 
heap2 = [6, 15, 18, 18, 18, 18, 18, 15, 18, 18, 18] : <type 'list'>
=> heap2 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 96
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
=> heap2 = [18, 18, 18, 18, 18, 18, 18, 15, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 97
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 18, 18, 18, 18, 18, 18, 15, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18, 18, 18, 18, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 98
ACTION: heaps.heappop(heap0) 
heap0 = [18, 18, 18] : <type 'list'>
=> heap0 = [18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18, 18, 18, 18, 18, 18, 15, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [18, 18, 18, 18, 18, 18, 18, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10325bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036bff80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 73 steps

SAVING TEST AS failure.69549.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
int3 = 20                                                                # STEP 1
ACTION: int3 = 20 
int3 = None : <type 'NoneType'>
=> int3 = 20 : <type 'int'>
==================================================
int1 = 17                                                                # STEP 2
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
int4 = 11                                                                # STEP 3
ACTION: int4 = 11 
int4 = None : <type 'NoneType'>
=> int4 = 11 : <type 'int'>
==================================================
int2 = 5                                                                 # STEP 4
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                               # STEP 6
ACTION: heaps.heappush(heap2,int2) 
int2 = 5 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                               # STEP 8
ACTION: heaps.heappush(heap2,int3) 
int3 = 20 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 11
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 12
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 13
ACTION: heaps.heappush(heap2,int3) 
int3 = 20 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 14
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [20] : <type 'list'>
=> heap2 = [20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [20] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [20] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 18
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [20, 20] : <type 'list'>
heap2 = [20] : <type 'list'>
=> heap2 = [20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 21
ACTION: int3 = 3 
int3 = 20 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20] : <type 'list'>
=> heap2 = [20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 24
ACTION: heaps.heappush(heap1,int3) 
int3 = 3 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [3, 20] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 25
ACTION: int2 = 7 
int2 = 5 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [20] : <type 'list'>
heap0 = [20, 20] : <type 'list'>
=> heap2 = [20, 20, 20] : <type 'list'>
==================================================
int3 = 4                                                                # STEP 27
ACTION: int3 = 4 
int3 = 3 : <type 'int'>
=> int3 = 4 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 20] : <type 'list'>
=> heap1 = [3, 3, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 29
ACTION: heaps.heappush(heap0,int2) 
int2 = 7 : <type 'int'>
heap0 = [20, 20] : <type 'list'>
=> heap0 = [7, 20, 20] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 30
ACTION: int2 = 5 
int2 = 7 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 31
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [20, 20, 20] : <type 'list'>
heap1 = [3, 3, 20, 20] : <type 'list'>
heap0 = [7, 20, 20] : <type 'list'>
=> heap0 = [3, 3, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [3, 3, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [20, 20, 20] : <type 'list'>
=> heap2 = [3, 3, 3, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [3, 3, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [3, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [3, 20, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 37
ACTION: heaps.heappush(heap1,int1) 
int1 = 17 : <type 'int'>
heap1 = [3, 3, 20, 20] : <type 'list'>
=> heap1 = [3, 3, 20, 20, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 3, 20, 20, 17] : <type 'list'>
=> heap1 = [3, 17, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 17, 20, 20] : <type 'list'>
heap0 = [20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [3, 3, 17, 17, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 17, 17, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [3, 17, 17, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 41
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 17, 20, 20] : <type 'list'>
=> heap1 = [17, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 20, 20] : <type 'list'>
=> heap1 = [20, 20] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 43
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 17, 17, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [17, 20, 17, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 20, 3, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [17, 20, 17, 20, 20, 20] : <type 'list'>
heap1 = [20, 20] : <type 'list'>
=> heap1 = [17, 20, 17, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 48
ACTION: heaps.heappop(heap1) 
heap1 = [17, 20, 17, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [17, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [17, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap0 = [17, 20, 17, 20, 20, 20] : <type 'list'>
=> heap0 = [17, 17, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [17, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 52
ACTION: heaps.heappop(heap0) 
heap0 = [17, 17, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20] : <type 'list'>
=> heap0 = [17, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 54
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 55
ACTION: heaps.heappush(heap0,int1) 
int1 = 4 : <type 'int'>
heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20] : <type 'list'>
=> heap0 = [4, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 56
ACTION: int1 = 11 
int1 = 4 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 58
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 60
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
=> heap0 = [4, 4, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 61
ACTION: heaps.heappop(heap0) 
heap0 = [4, 4, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20] : <type 'list'>
=> heap0 = [4, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 62
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 64
ACTION: heaps.heappop(heap2) 
heap2 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 65
ACTION: heaps.heappush(heap1,int4) 
int4 = 11 : <type 'int'>
heap1 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [11, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 67
ACTION: heaps.heappop(heap2) 
heap2 = [20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20, 20] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 68
ACTION: int4 = 18 
int4 = 11 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 71
ACTION: heaps.heappush(heap1,int3) 
int3 = 4 : <type 'int'>
heap1 = [20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [4, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 17, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036bbb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #9 STEP #93 (0:00:30.004901) Tue May  2 19:49:30 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 66
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0811109543 TOTAL RUNTIME
19 EXECUTED
1839 TOTAL TEST OPERATIONS
28.517635107 TIME SPENT EXECUTING TEST OPERATIONS
0.253483057022 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.4475829601 TIME SPENT CHECKING PROPERTIES
56.9652180672 TOTAL TIME SPENT RUNNING SUT
0.0110991001129 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 9                                                                 # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 4
heaps.heappush(heap1,int3)                                               # STEP 5
heaps.heappush(heap0,int3)                                               # STEP 6
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 7
heaps.heappush(heap1,int3)                                               # STEP 8
heap0 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
int0 = 8                                                                # STEP 13
heaps.heappop(heap1)                                                    # STEP 14
heap0 = heaps.heapnew()                                                 # STEP 15
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 16
int1 = 15                                                               # STEP 17
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heaps.heappop(heap2)                                                    # STEP 20
heaps.heappop(heap1)                                                    # STEP 21
heaps.heappush(heap2,int1)                                              # STEP 22
heaps.heappush(heap0,int1)                                              # STEP 23
int1 = 16                                                               # STEP 24
heaps.heappush(heap2,int3)                                              # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
heaps.heappush(heap0,int0)                                              # STEP 30
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 31
heaps.heappush(heap0,int3)                                              # STEP 32
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 33
int2 = 18                                                               # STEP 34
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 35
heaps.heappush(heap2,int2)                                              # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
int4 = 14                                                               # STEP 39
heaps.heappop(heap0)                                                    # STEP 40
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 41
int3 = 16                                                               # STEP 42
int0 = 6                                                                # STEP 43
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
int2 = 12                                                               # STEP 45
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 46
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 50
heaps.heappop(heap1)                                                    # STEP 51
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 55
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
heaps.heappop(heap0)                                                    # STEP 58
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 59
heaps.heappop(heap0)                                                    # STEP 60
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
heap2 = heaps.heapnew()                                                 # STEP 66
heaps.heappop(heap2)                                                    # STEP 67
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 68
heaps.heappop(heap0)                                                    # STEP 69
heaps.heappush(heap2,int4)                                              # STEP 70
heaps.heappop(heap1)                                                    # STEP 71
heaps.heappop(heap2)                                                    # STEP 72
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
heaps.heappop(heap1)                                                    # STEP 74
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
heaps.heappop(heap1)                                                    # STEP 80
heaps.heappop(heap2)                                                    # STEP 81
int4 = 5                                                                # STEP 82
heaps.heappop(heap2)                                                    # STEP 83
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 84
heaps.heappush(heap2,int2)                                              # STEP 85
heaps.heappop(heap2)                                                    # STEP 86
int2 = 18                                                               # STEP 87
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 88
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 89
heaps.heappop(heap2)                                                    # STEP 90
heaps.heappop(heap0)                                                    # STEP 91
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 92
heaps.heappush(heap2,int0)                                              # STEP 93
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 94
heaps.heappop(heap2)                                                    # STEP 95
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 96
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 97
heaps.heappop(heap0)                                                    # STEP 98
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 99
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10325bd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE 1
int0 = 8                                                                 # STEP 0
int3 = 20                                                                # STEP 1
int1 = 17                                                                # STEP 2
int4 = 11                                                                # STEP 3
int2 = 5                                                                 # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap2,int2)                                               # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
heaps.heappush(heap2,int3)                                               # STEP 8
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 10
heaps.heappop(heap2)                                                    # STEP 11
heaps.heappop(heap2)                                                    # STEP 12
heaps.heappush(heap2,int3)                                              # STEP 13
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 14
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 16
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 18
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 19
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
int3 = 3                                                                # STEP 21
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
heaps.heappush(heap1,int3)                                              # STEP 24
int2 = 7                                                                # STEP 25
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
int3 = 4                                                                # STEP 27
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
heaps.heappush(heap0,int2)                                              # STEP 29
int2 = 5                                                                # STEP 30
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 31
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 32
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
heaps.heappush(heap1,int1)                                              # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
int1 = 4                                                                # STEP 43
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 47
heaps.heappop(heap1)                                                    # STEP 48
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heaps.heappop(heap0)                                                    # STEP 52
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 53
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 54
heaps.heappush(heap0,int1)                                              # STEP 55
int1 = 11                                                               # STEP 56
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 57
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 58
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 59
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 60
heaps.heappop(heap0)                                                    # STEP 61
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 62
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
heaps.heappop(heap2)                                                    # STEP 64
heaps.heappush(heap1,int4)                                              # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
heaps.heappop(heap2)                                                    # STEP 67
int4 = 18                                                               # STEP 68
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 70
heaps.heappush(heap1,int3)                                              # STEP 71
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1036bbb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

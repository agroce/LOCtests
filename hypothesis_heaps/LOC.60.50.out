Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.173.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #13 STEP #35 (0:00:30.006574) Fri Apr 28 05:42:23 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035f7368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 90 steps

SAVING TEST AS failure.173.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 15                                                                # STEP 0
ACTION: int1 = 15 
int1 = None : <type 'NoneType'>
=> int1 = 15 : <type 'int'>
==================================================
int2 = 20                                                                # STEP 1
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
int4 = 15                                                                # STEP 2
ACTION: int4 = 15 
int4 = None : <type 'NoneType'>
=> int4 = 15 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 3
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 4
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 5
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 6
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 1                                                                 # STEP 7
ACTION: int0 = 1 
int0 = None : <type 'NoneType'>
=> int0 = 1 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 8
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                  # STEP 9
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 10
ACTION: heaps.heappush(heap0,int0) 
int0 = 1 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [1] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [1, 1] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 13
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 14
ACTION: heaps.heappush(heap2,int2) 
int2 = 20 : <type 'int'>
heap2 = [1, 1] : <type 'list'>
=> heap2 = [1, 1, 20] : <type 'list'>
==================================================
int2 = 11                                                               # STEP 15
ACTION: int2 = 11 
int2 = 20 : <type 'int'>
=> int2 = 11 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 1, 20] : <type 'list'>
=> heap2 = [1, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 17
ACTION: heaps.heappop(heap2) 
heap2 = [1, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 18
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [20] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 6                                                                # STEP 25
ACTION: int0 = 6 
int0 = 1 : <type 'int'>
=> int0 = 6 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 26
ACTION: heaps.heappush(heap2,int4) 
int4 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [15, 15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 30
ACTION: heaps.heappop(heap2) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 31
ACTION: heaps.heappush(heap2,int4) 
int4 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 32
ACTION: heaps.heappop(heap0) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 33
ACTION: int4 = 16 
int4 = 15 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 35
ACTION: heaps.heappop(heap2) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 36
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 38
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 41
ACTION: heaps.heappush(heap0,int4) 
int4 = 16 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
int4 = 15                                                               # STEP 42
ACTION: int4 = 15 
int4 = 16 : <type 'int'>
=> int4 = 15 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 43
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [16] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 44
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 45
ACTION: heaps.heappush(heap1,int2) 
int2 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 46
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [6] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 47
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [6] : <type 'list'>
=> heap0 = [6, 6] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 48
ACTION: heaps.heappush(heap1,int4) 
int4 = 15 : <type 'int'>
heap1 = [11] : <type 'list'>
=> heap1 = [11, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 49
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [11, 15] : <type 'list'>
=> heap2 = [11, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [6, 6] : <type 'list'>
heap2 = [11, 15] : <type 'list'>
heap1 = [15] : <type 'list'>
=> heap1 = [6, 6, 11, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 53
ACTION: heaps.heappush(heap2,int2) 
int2 = 11 : <type 'int'>
heap2 = [15] : <type 'list'>
=> heap2 = [11, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 54
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 6, 11, 15] : <type 'list'>
heap2 = [11, 15] : <type 'list'>
heap0 = [6, 6] : <type 'list'>
=> heap0 = [6, 6, 11, 11, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 55
ACTION: heaps.heappush(heap0,int0) 
int0 = 6 : <type 'int'>
heap0 = [6, 6, 11, 11, 15, 15] : <type 'list'>
=> heap0 = [6, 6, 6, 11, 15, 15, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 6, 11, 15, 15, 11] : <type 'list'>
=> heap0 = [6, 11, 6, 11, 15, 15] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 57
ACTION: int4 = 17 
int4 = 15 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 58
ACTION: heaps.heappop(heap2) 
heap2 = [11, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [6, 11, 6, 11, 15, 15] : <type 'list'>
=> heap0 = [6, 11, 15, 11, 15] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 60
ACTION: int0 = 9 
int0 = 6 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [15] : <type 'list'>
heap1 = [6, 6, 11, 15] : <type 'list'>
heap0 = [6, 11, 15, 11, 15] : <type 'list'>
=> heap0 = [6, 6, 11, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 62
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [6, 6, 11, 15] : <type 'list'>
heap2 = [15] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 11, 11, 15, 15] : <type 'list'>
==================================================
int2 = 16                                                               # STEP 63
ACTION: int2 = 16 
int2 = 11 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 64
ACTION: heaps.heappush(heap2,int3) 
int3 = 9 : <type 'int'>
heap2 = [6, 6, 6, 6, 11, 11, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 11, 11, 15, 15, 9] : <type 'list'>
==================================================
int3 = 5                                                                # STEP 65
ACTION: int3 = 5 
int3 = 9 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 66
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 6, 11, 15] : <type 'list'>
heap2 = [6, 6, 6, 6, 11, 11, 15, 15, 9] : <type 'list'>
=> heap2 = [6, 6, 6, 6, 6, 6, 11, 11, 11, 15, 15, 15, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 67
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 11, 15] : <type 'list'>
=> heap1 = [6, 15, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 6, 6, 6, 11, 11, 11, 15, 15, 15, 9] : <type 'list'>
=> heap2 = [6, 6, 6, 9, 6, 6, 11, 11, 11, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 69
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 6, 9, 6, 6, 11, 11, 11, 15, 15, 15] : <type 'list'>
=> heap2 = [6, 6, 6, 9, 15, 6, 11, 11, 11, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 9, 15, 6, 11, 11, 11, 15, 15] : <type 'list'>
=> heap2 = [6, 9, 6, 11, 15, 6, 11, 15, 11, 15] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 71
ACTION: heap1 = heaps.heapnew() 
heap1 = [6, 15, 11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 6, 11, 15, 15] : <type 'list'>
=> heap0 = [6, 15, 11, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 73
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                              # STEP 74
ACTION: heaps.heappush(heap0,int1) 
int1 = 15 : <type 'int'>
heap0 = [6, 15, 11, 15] : <type 'list'>
=> heap0 = [6, 15, 11, 15, 15] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 75
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 76
ACTION: heaps.heappop(heap0) 
heap0 = [6, 15, 11, 15, 15] : <type 'list'>
=> heap0 = [11, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 77
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 15, 15, 15] : <type 'list'>
=> heap0 = [15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 78
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 79
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [15, 15, 15] : <type 'list'>
heap2 = [6, 9, 6, 11, 15, 6, 11, 15, 11, 15] : <type 'list'>
=> heap0 = [6, 9, 6, 11, 15, 15, 15, 15, 6, 11, 15, 11, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 9, 6, 11, 15, 15, 15, 15, 6, 11, 15, 11, 15] : <type 'list'>
=> heap0 = [6, 9, 15, 11, 15, 15, 15, 15, 6, 11, 15, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 81
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 9, 6, 11, 15, 6, 11, 15, 11, 15] : <type 'list'>
=> heap2 = [6, 9, 6, 11, 15, 15, 11, 15, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 83
ACTION: heaps.heappop(heap2) 
heap2 = [6, 9, 6, 11, 15, 15, 11, 15, 11] : <type 'list'>
=> heap2 = [6, 9, 11, 11, 15, 15, 11, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 9, 15, 11, 15, 15, 15, 15, 6, 11, 15, 11] : <type 'list'>
=> heap0 = [9, 11, 15, 11, 15, 15, 15, 15, 6, 11, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 85
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 86
ACTION: heaps.heappop(heap0) 
heap0 = [9, 11, 15, 11, 15, 15, 15, 15, 6, 11, 15] : <type 'list'>
=> heap0 = [11, 11, 15, 6, 15, 15, 15, 15, 15, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 87
ACTION: heaps.heappush(heap0,int1) 
int1 = 8 : <type 'int'>
heap0 = [11, 11, 15, 6, 15, 15, 15, 15, 15, 11] : <type 'list'>
=> heap0 = [8, 11, 15, 6, 11, 15, 15, 15, 15, 11, 15] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 88
ACTION: int1 = 4 
int1 = 8 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 89
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 11, 15, 6, 11, 15, 15, 15, 15, 11, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [11, 6, 15, 15, 11, 15, 15, 15, 15, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035fdd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 69
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0677628517 TOTAL RUNTIME
25 EXECUTED
2459 TOTAL TEST OPERATIONS
29.2226629257 TIME SPENT EXECUTING TEST OPERATIONS
0.363356113434 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3082852364 TIME SPENT CHECKING PROPERTIES
58.5309481621 TOTAL TIME SPENT RUNNING SUT
0.0118432044983 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 15                                                                # STEP 0
int2 = 20                                                                # STEP 1
int4 = 15                                                                # STEP 2
int3 = 9                                                                 # STEP 3
heap0 = heaps.heapnew()                                                  # STEP 4
heaps.heappop(heap0)                                                     # STEP 5
heaps.heappop(heap0)                                                     # STEP 6
int0 = 1                                                                 # STEP 7
heaps.heappop(heap0)                                                     # STEP 8
heap0 = heaps.heapnew()                                                  # STEP 9
heaps.heappush(heap0,int0)                                              # STEP 10
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 11
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 13
heaps.heappush(heap2,int2)                                              # STEP 14
int2 = 11                                                               # STEP 15
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
heaps.heappop(heap2)                                                    # STEP 17
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
int0 = 6                                                                # STEP 25
heaps.heappush(heap2,int4)                                              # STEP 26
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 27
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heaps.heappop(heap2)                                                    # STEP 30
heaps.heappush(heap2,int4)                                              # STEP 31
heaps.heappop(heap0)                                                    # STEP 32
int4 = 16                                                               # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heaps.heappop(heap2)                                                    # STEP 35
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heaps.heappop(heap2)                                                    # STEP 38
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 40
heaps.heappush(heap0,int4)                                              # STEP 41
int4 = 15                                                               # STEP 42
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 43
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 44
heaps.heappush(heap1,int2)                                              # STEP 45
heaps.heappush(heap0,int0)                                              # STEP 46
heaps.heappush(heap0,int0)                                              # STEP 47
heaps.heappush(heap1,int4)                                              # STEP 48
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
heaps.heappush(heap2,int2)                                              # STEP 53
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 54
heaps.heappush(heap0,int0)                                              # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
int4 = 17                                                               # STEP 57
heaps.heappop(heap2)                                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
int0 = 9                                                                # STEP 60
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 61
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 62
int2 = 16                                                               # STEP 63
heaps.heappush(heap2,int3)                                              # STEP 64
int3 = 5                                                                # STEP 65
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 66
heaps.heappop(heap1)                                                    # STEP 67
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 68
heaps.heappop(heap2)                                                    # STEP 69
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
heap1 = heaps.heapnew()                                                 # STEP 71
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
heaps.heappop(heap1)                                                    # STEP 73
heaps.heappush(heap0,int1)                                              # STEP 74
int1 = 8                                                                # STEP 75
heaps.heappop(heap0)                                                    # STEP 76
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 77
heap1 = heaps.heapnew()                                                 # STEP 78
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 79
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
heaps.heappop(heap1)                                                    # STEP 81
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
heaps.heappop(heap2)                                                    # STEP 83
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 84
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 85
heaps.heappop(heap0)                                                    # STEP 86
heaps.heappush(heap0,int1)                                              # STEP 87
int1 = 4                                                                # STEP 88
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 89
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1035fdd88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

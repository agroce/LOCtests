Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69519.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #62 (0:00:30.003462) Tue May  2 19:44:28 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e77a28>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 73 steps

SAVING TEST AS failure.69519.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 20                                                                # STEP 0
ACTION: int4 = 20 
int4 = None : <type 'NoneType'>
=> int4 = 20 : <type 'int'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
int2 = 10                                                                # STEP 2
ACTION: int2 = 10 
int2 = None : <type 'NoneType'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 16                                                                # STEP 3
ACTION: int3 = 16 
int3 = None : <type 'NoneType'>
=> int3 = 16 : <type 'int'>
==================================================
int1 = 4                                                                 # STEP 4
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 6
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                               # STEP 8
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 9
ACTION: heaps.heappush(heap0,int2) 
int2 = 10 : <type 'int'>
heap0 = [20] : <type 'list'>
=> heap0 = [10, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [10, 20] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [10, 10, 20, 20] : <type 'list'>
==================================================
int2 = 6                                                                # STEP 11
ACTION: int2 = 6 
int2 = 10 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 12
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [10, 10, 20, 20] : <type 'list'>
heap0 = [10, 20] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [10, 10, 10, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 13
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 10, 20, 20] : <type 'list'>
=> heap2 = [10, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 14
ACTION: heaps.heappush(heap1,int2) 
int2 = 6 : <type 'int'>
heap1 = [10, 10, 10, 20, 20, 20] : <type 'list'>
=> heap1 = [6, 10, 10, 20, 20, 20, 10] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 15
ACTION: heaps.heappush(heap2,int0) 
int0 = 14 : <type 'int'>
heap2 = [10, 20, 20] : <type 'list'>
=> heap2 = [10, 14, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 16
ACTION: heaps.heappush(heap0,int1) 
int1 = 4 : <type 'int'>
heap0 = [10, 20] : <type 'list'>
=> heap0 = [4, 20, 10] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [4, 20, 10] : <type 'list'>
heap1 = [6, 10, 10, 20, 20, 20, 10] : <type 'list'>
=> heap0 = [4, 6, 10, 10, 20, 10, 20, 20, 20, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 6, 10, 10, 20, 10, 20, 20, 20, 10] : <type 'list'>
=> heap0 = [6, 10, 10, 10, 20, 10, 20, 20, 20] : <type 'list'>
==================================================
int0 = 3                                                                # STEP 19
ACTION: int0 = 3 
int0 = 14 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 10, 10, 10, 20, 10, 20, 20, 20] : <type 'list'>
=> heap0 = [10, 10, 10, 20, 20, 10, 20, 20] : <type 'list'>
==================================================
int1 = 1                                                                # STEP 21
ACTION: int1 = 1 
int1 = 4 : <type 'int'>
=> int1 = 1 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 22
ACTION: int2 = 15 
int2 = 6 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 23
ACTION: heaps.heappush(heap1,int2) 
int2 = 15 : <type 'int'>
heap1 = [6, 10, 10, 20, 20, 20, 10] : <type 'list'>
=> heap1 = [6, 10, 10, 15, 20, 20, 10, 20] : <type 'list'>
==================================================
int4 = 19                                                               # STEP 24
ACTION: int4 = 19 
int4 = 20 : <type 'int'>
=> int4 = 19 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 25
ACTION: heaps.heappop(heap2) 
heap2 = [10, 14, 20, 20] : <type 'list'>
=> heap2 = [14, 20, 20] : <type 'list'>
==================================================
int2 = 4                                                                # STEP 26
ACTION: int2 = 4 
int2 = 15 : <type 'int'>
=> int2 = 4 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 27
ACTION: heaps.heappush(heap0,int3) 
int3 = 16 : <type 'int'>
heap0 = [10, 10, 10, 20, 20, 10, 20, 20] : <type 'list'>
=> heap0 = [10, 10, 10, 16, 20, 10, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 28
ACTION: heaps.heappop(heap1) 
heap1 = [6, 10, 10, 15, 20, 20, 10, 20] : <type 'list'>
=> heap1 = [10, 15, 10, 20, 20, 20, 10] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 29
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [14, 20, 20] : <type 'list'>
=> heap2 = [20, 20] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 30
ACTION: int3 = 3 
int3 = 16 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20, 20] : <type 'list'>
=> heap2 = [20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 15, 10, 20, 20, 20, 10] : <type 'list'>
=> heap1 = [10, 15, 10, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 10, 10, 16, 20, 10, 20, 20, 20] : <type 'list'>
=> heap0 = [10, 16, 10, 20, 20, 10, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 15, 10, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 15, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [10, 16, 10, 20, 20, 10, 20, 20] : <type 'list'>
=> heap0 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [10, 15, 20, 20, 20] : <type 'list'>
=> heap1 = [15, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 38
ACTION: heaps.heappop(heap1) 
heap1 = [15, 20, 20, 20] : <type 'list'>
=> heap1 = [20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 39
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 40
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 41
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20, 20] : <type 'list'>
=> heap1 = [20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 42
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 43
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
heap1 = [20, 20] : <type 'list'>
=> heap1 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
heap1 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 46
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 16, 10, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 16, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 16, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [16, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 49
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 50
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [16, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 10, 16, 20, 16, 10, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
heap1 = [10, 10, 16, 20, 16, 10, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 10, 10, 10, 16, 10, 16, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 54
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [10, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 10, 16, 10, 16, 10, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 10, 10, 10, 16, 10, 16, 20, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 57
ACTION: heaps.heappush(heap2,int1) 
int1 = 1 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [1] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 58
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 60
ACTION: int1 = 5 
int1 = 1 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10, 10, 10, 16, 10, 16, 20, 16, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 10, 10, 16, 16, 10, 16, 20, 20, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 62
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 10, 16, 16, 10, 16, 20, 20, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 16, 10, 20, 16, 10, 16, 20, 20, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 16, 10, 20, 16, 10, 16, 20, 20, 10, 16, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 16, 10, 20, 16, 10, 16, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 16, 10, 20, 16, 10, 16, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 16, 10, 20, 16, 20, 16, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 66
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 16, 10, 20, 16, 20, 16, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [10, 16, 16, 20, 16, 20, 20, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 67
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 68
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [10, 16, 16, 20, 16, 20, 20, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [10, 16, 16, 20, 16, 20, 20, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 69
ACTION: heaps.heappop(heap2) 
heap2 = [10, 16, 16, 20, 16, 20, 20, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [16, 16, 16, 20, 10, 20, 20, 20, 20, 20, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 70
ACTION: heaps.heappop(heap1) 
heap1 = [10, 16, 16, 20, 16, 20, 20, 20, 20, 10, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [16, 16, 16, 20, 10, 20, 20, 20, 20, 20, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 71
ACTION: heaps.heappush(heap2,int2) 
int2 = 4 : <type 'int'>
heap2 = [16, 16, 16, 20, 10, 20, 20, 20, 20, 20, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
=> heap2 = [4, 16, 16, 20, 16, 20, 20, 20, 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 16, 16, 20, 10, 20, 20, 20, 20, 20, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [16, 10, 16, 20, 16, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e47e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.05519104 TOTAL RUNTIME
20 EXECUTED
1890 TOTAL TEST OPERATIONS
29.2949547768 TIME SPENT EXECUTING TEST OPERATIONS
0.259548425674 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2889750004 TIME SPENT CHECKING PROPERTIES
58.5839297771 TOTAL TIME SPENT RUNNING SUT
0.0113825798035 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 20                                                                # STEP 0
int0 = 14                                                                # STEP 1
int2 = 10                                                                # STEP 2
int3 = 16                                                                # STEP 3
int1 = 4                                                                 # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap0)                                                     # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heaps.heappush(heap0,int4)                                               # STEP 8
heaps.heappush(heap0,int2)                                               # STEP 9
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 10
int2 = 6                                                                # STEP 11
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 12
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 13
heaps.heappush(heap1,int2)                                              # STEP 14
heaps.heappush(heap2,int0)                                              # STEP 15
heaps.heappush(heap0,int1)                                              # STEP 16
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
int0 = 3                                                                # STEP 19
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 20
int1 = 1                                                                # STEP 21
int2 = 15                                                               # STEP 22
heaps.heappush(heap1,int2)                                              # STEP 23
int4 = 19                                                               # STEP 24
heaps.heappop(heap2)                                                    # STEP 25
int2 = 4                                                                # STEP 26
heaps.heappush(heap0,int3)                                              # STEP 27
heaps.heappop(heap1)                                                    # STEP 28
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 29
int3 = 3                                                                # STEP 30
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 31
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 32
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
heaps.heappop(heap1)                                                    # STEP 38
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 39
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 40
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 41
heap2 = heaps.heapnew()                                                 # STEP 42
heaps.heappop(heap2)                                                    # STEP 43
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 44
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
heaps.heappop(heap2)                                                    # STEP 46
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 47
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 48
heaps.heappop(heap2)                                                    # STEP 49
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 50
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 51
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 52
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
heap2 = heaps.heapnew()                                                 # STEP 54
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 55
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
heaps.heappush(heap2,int1)                                              # STEP 57
heaps.heappop(heap0)                                                    # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
int1 = 5                                                                # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 62
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 65
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 66
heaps.heappop(heap2)                                                    # STEP 67
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 68
heaps.heappop(heap2)                                                    # STEP 69
heaps.heappop(heap1)                                                    # STEP 70
heaps.heappush(heap2,int2)                                              # STEP 71
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 72
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e47e18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

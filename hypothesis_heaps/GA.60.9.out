Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.13835.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102ce8cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 68 steps

SAVING TEST AS failure.13835.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 4                                                                 # STEP 0
ACTION: int4 = 4 
int4 = None : <type 'NoneType'>
=> int4 = 4 : <type 'int'>
==================================================
int3 = 3                                                                 # STEP 1
ACTION: int3 = 3 
int3 = None : <type 'NoneType'>
=> int3 = 3 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 2
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 2                                                                 # STEP 3
ACTION: int0 = 2 
int0 = None : <type 'NoneType'>
=> int0 = 2 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 4
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int2 = 15                                                                # STEP 5
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                               # STEP 6
ACTION: heaps.heappush(heap2,int1) 
int1 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
int1 = 12                                                                # STEP 7
ACTION: int1 = 12 
int1 = 9 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 8
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                               # STEP 9
ACTION: heaps.heappush(heap2,int4) 
int4 = 4 : <type 'int'>
heap2 = [9] : <type 'list'>
=> heap2 = [4, 9] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 9] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 11
ACTION: int4 = 16 
int4 = 4 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 12
ACTION: heap2 = heaps.heapnew() 
heap2 = [9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 13
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 14
ACTION: heaps.heappush(heap1,int4) 
int4 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 15
ACTION: heaps.heappush(heap1,int3) 
int3 = 3 : <type 'int'>
heap1 = [16] : <type 'list'>
=> heap1 = [3, 16] : <type 'list'>
==================================================
int4 = 10                                                               # STEP 16
ACTION: int4 = 10 
int4 = 16 : <type 'int'>
=> int4 = 10 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 17
ACTION: int3 = 9 
int3 = 3 : <type 'int'>
=> int3 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 18
ACTION: heap1 = heaps.heapnew() 
heap1 = [3, 16] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 19
ACTION: heaps.heappush(heap0,int4) 
int4 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 20
ACTION: heaps.heappush(heap2,int2) 
int2 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 21
ACTION: int2 = 18 
int2 = 15 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int4 = 20                                                               # STEP 23
ACTION: int4 = 20 
int4 = 10 : <type 'int'>
=> int4 = 20 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 24
ACTION: heaps.heappush(heap0,int2) 
int2 = 18 : <type 'int'>
heap0 = [10] : <type 'list'>
=> heap0 = [10, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 18] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 26
ACTION: int2 = 5 
int2 = 18 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 27
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = [18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 30
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 32
ACTION: int2 = 9 
int2 = 5 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 33
ACTION: heaps.heappush(heap0,int3) 
int3 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 34
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [9] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [9, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [9, 9] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 37
ACTION: heap1 = heaps.heapnew() 
heap1 = [9] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [9] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 39
ACTION: heaps.heappush(heap0,int3) 
int3 = 14 : <type 'int'>
heap0 = [9] : <type 'list'>
=> heap0 = [9, 14] : <type 'list'>
==================================================
int3 = 16                                                               # STEP 40
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 41
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [9, 14] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [9, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 42
ACTION: heaps.heappush(heap1,int3) 
int3 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
int3 = 15                                                               # STEP 43
ACTION: int3 = 15 
int3 = 16 : <type 'int'>
=> int3 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [9, 14] : <type 'list'>
heap1 = [16] : <type 'list'>
=> heap1 = [9, 9, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 45
ACTION: heaps.heappush(heap1,int4) 
int4 = 20 : <type 'int'>
heap1 = [9, 9, 14, 14] : <type 'list'>
=> heap1 = [9, 9, 14, 14, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 46
ACTION: heaps.heappush(heap2,int4) 
int4 = 20 : <type 'int'>
heap2 = [9, 14] : <type 'list'>
=> heap2 = [9, 14, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [9, 9, 14, 14, 20] : <type 'list'>
heap2 = [9, 14, 20] : <type 'list'>
=> heap1 = [9, 9, 9, 14, 14, 14, 20, 20] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 48
ACTION: int4 = 11 
int4 = 20 : <type 'int'>
=> int4 = 11 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 49
ACTION: heaps.heappush(heap1,int4) 
int4 = 11 : <type 'int'>
heap1 = [9, 9, 9, 14, 14, 14, 20, 20] : <type 'list'>
=> heap1 = [9, 9, 9, 11, 14, 14, 20, 20, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 14, 20] : <type 'list'>
=> heap2 = [14, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 51
ACTION: heaps.heappush(heap1,int0) 
int0 = 2 : <type 'int'>
heap1 = [9, 9, 9, 11, 14, 14, 20, 20, 14] : <type 'list'>
=> heap1 = [2, 9, 9, 11, 9, 14, 20, 20, 14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [14, 20] : <type 'list'>
heap1 = [2, 9, 9, 11, 9, 14, 20, 20, 14, 14] : <type 'list'>
=> heap1 = [14, 14, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 53
ACTION: heaps.heappush(heap0,int1) 
int1 = 12 : <type 'int'>
heap0 = [9, 14] : <type 'list'>
=> heap0 = [9, 14, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 54
ACTION: heaps.heappush(heap1,int3) 
int3 = 15 : <type 'int'>
heap1 = [14, 14, 20, 20] : <type 'list'>
=> heap1 = [14, 14, 20, 20, 15] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 55
ACTION: int4 = 14 
int4 = 11 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 56
ACTION: heaps.heappush(heap2,int4) 
int4 = 14 : <type 'int'>
heap2 = [14, 20] : <type 'list'>
=> heap2 = [14, 20, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 57
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [14, 20, 14] : <type 'list'>
heap0 = [9, 14, 12] : <type 'list'>
heap1 = [14, 14, 20, 20, 15] : <type 'list'>
=> heap1 = [9, 14, 14, 12, 20, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 58
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 14, 14, 12, 20, 14] : <type 'list'>
heap2 = [14, 20, 14] : <type 'list'>
=> heap2 = [9, 9, 14, 14, 12, 14, 14, 12, 20, 14, 20, 14] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 14, 14, 12, 20, 14] : <type 'list'>
heap0 = [9, 14, 12] : <type 'list'>
=> heap0 = [9, 9, 14, 14, 12, 14, 14, 12, 20, 14, 20, 14] : <type 'list'>
==================================================
int1 = 19                                                               # STEP 60
ACTION: int1 = 19 
int1 = 12 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [9, 14, 14, 12, 20, 14] : <type 'list'>
=> heap1 = [14, 14, 14, 12, 20] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 62
ACTION: int0 = 19 
int0 = 2 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 14, 14, 12, 14, 14, 12, 20, 14, 20, 14] : <type 'list'>
=> heap0 = [9, 12, 14, 14, 14, 14, 14, 12, 20, 14, 20] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 64
ACTION: int3 = 14 
int3 = 15 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
int4 = 17                                                               # STEP 65
ACTION: int4 = 17 
int4 = 14 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 66
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [14, 14, 14, 12, 20] : <type 'list'>
heap0 = [9, 12, 14, 14, 14, 14, 14, 12, 20, 14, 20] : <type 'list'>
=> heap0 = [14, 14, 14, 12, 14, 14, 14, 12, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 67
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 14, 14, 12, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [14, 12, 14, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d43248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #62 (0:00:30.024345) Sun Apr 30 02:39:57 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 29
STOPPING TESTING DUE TO TIMEOUT
15.6186612576 PERCENT COVERED
60.0649690628 TOTAL RUNTIME
20 EXECUTED
1897 TOTAL TEST OPERATIONS
29.7252588272 TIME SPENT EXECUTING TEST OPERATIONS
0.074369430542 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.0937502384 TIME SPENT CHECKING PROPERTIES
58.8190090656 TOTAL TIME SPENT RUNNING SUT
0.0129797458649 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 4                                                                 # STEP 0
int3 = 3                                                                 # STEP 1
int1 = 9                                                                 # STEP 2
int0 = 2                                                                 # STEP 3
heap2 = heaps.heapnew()                                                  # STEP 4
int2 = 15                                                                # STEP 5
heaps.heappush(heap2,int1)                                               # STEP 6
int1 = 12                                                                # STEP 7
heap1 = heaps.heapnew()                                                  # STEP 8
heaps.heappush(heap2,int4)                                               # STEP 9
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
int4 = 16                                                               # STEP 11
heap2 = heaps.heapnew()                                                 # STEP 12
heap0 = heaps.heapnew()                                                 # STEP 13
heaps.heappush(heap1,int4)                                              # STEP 14
heaps.heappush(heap1,int3)                                              # STEP 15
int4 = 10                                                               # STEP 16
int3 = 9                                                                # STEP 17
heap1 = heaps.heapnew()                                                 # STEP 18
heaps.heappush(heap0,int4)                                              # STEP 19
heaps.heappush(heap2,int2)                                              # STEP 20
int2 = 18                                                               # STEP 21
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 22
int4 = 20                                                               # STEP 23
heaps.heappush(heap0,int2)                                              # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
int2 = 5                                                                # STEP 26
heap2 = heaps.heapnew()                                                 # STEP 27
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 28
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
heaps.heappush(heap1,int2)                                              # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
int2 = 9                                                                # STEP 32
heaps.heappush(heap0,int3)                                              # STEP 33
int3 = 14                                                               # STEP 34
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heap1 = heaps.heapnew()                                                 # STEP 37
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 38
heaps.heappush(heap0,int3)                                              # STEP 39
int3 = 16                                                               # STEP 40
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 41
heaps.heappush(heap1,int3)                                              # STEP 42
int3 = 15                                                               # STEP 43
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
heaps.heappush(heap1,int4)                                              # STEP 45
heaps.heappush(heap2,int4)                                              # STEP 46
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 47
int4 = 11                                                               # STEP 48
heaps.heappush(heap1,int4)                                              # STEP 49
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
heaps.heappush(heap1,int0)                                              # STEP 51
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
heaps.heappush(heap0,int1)                                              # STEP 53
heaps.heappush(heap1,int3)                                              # STEP 54
int4 = 14                                                               # STEP 55
heaps.heappush(heap2,int4)                                              # STEP 56
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 57
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 58
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 59
int1 = 19                                                               # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
int0 = 19                                                               # STEP 62
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
int3 = 14                                                               # STEP 64
int4 = 17                                                               # STEP 65
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 66
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 67
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102d43248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

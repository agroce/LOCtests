Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.261.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #13 STEP #47 (0:00:30.014897) Fri Apr 28 05:54:28 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1046d84d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 91 steps

SAVING TEST AS failure.261.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 7                                                                 # STEP 0
ACTION: int2 = 7 
int2 = None : <type 'NoneType'>
=> int2 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 1
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                     # STEP 3
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 4
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 4                                                                 # STEP 5
ACTION: int3 = 4 
int3 = None : <type 'NoneType'>
=> int3 = 4 : <type 'int'>
==================================================
int0 = 4                                                                 # STEP 6
ACTION: int0 = 4 
int0 = None : <type 'NoneType'>
=> int0 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 8
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                     # STEP 9
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 10
ACTION: heaps.heappush(heap2,int2) 
int2 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 11
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 12
ACTION: int4 = 2 
int4 = None : <type 'NoneType'>
=> int4 = 2 : <type 'int'>
==================================================
int2 = 16                                                               # STEP 13
ACTION: int2 = 16 
int2 = 7 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
int1 = 5                                                                # STEP 14
ACTION: int1 = 5 
int1 = None : <type 'NoneType'>
=> int1 = 5 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 15
ACTION: heaps.heappush(heap2,int4) 
int4 = 2 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [2] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 17
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int0)                                              # STEP 18
ACTION: heaps.heappush(heap0,int0) 
int0 = 4 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [4] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 19
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 20
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 12                                                               # STEP 22
ACTION: int0 = 12 
int0 = 4 : <type 'int'>
=> int0 = 12 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 23
ACTION: heaps.heappush(heap1,int2) 
int2 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 25
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [16] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 26
ACTION: heaps.heappop(heap2) 
heap2 = [16] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 27
ACTION: heaps.heappush(heap0,int1) 
int1 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [16] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 29
ACTION: int4 = 18 
int4 = 2 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 30
ACTION: heaps.heappush(heap1,int4) 
int4 = 18 : <type 'int'>
heap1 = [16] : <type 'list'>
=> heap1 = [16, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int2 = 13                                                               # STEP 32
ACTION: int2 = 13 
int2 = 16 : <type 'int'>
=> int2 = 13 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 33
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [18] : <type 'list'>
heap0 = [5] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 34
ACTION: heaps.heappush(heap2,int2) 
int2 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
int4 = 12                                                               # STEP 35
ACTION: int4 = 12 
int4 = 18 : <type 'int'>
=> int4 = 12 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [18] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 38
ACTION: heaps.heappush(heap2,int1) 
int1 = 5 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [5, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 13] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 40
ACTION: int1 = 8 
int1 = 5 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 41
ACTION: heaps.heappush(heap2,int2) 
int2 = 13 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [13, 13] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 42
ACTION: int2 = 9 
int2 = 13 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 43
ACTION: heaps.heappush(heap0,int4) 
int4 = 12 : <type 'int'>
heap0 = [18] : <type 'list'>
=> heap0 = [12, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [18, 18] : <type 'list'>
heap0 = [12, 18] : <type 'list'>
heap2 = [13, 13] : <type 'list'>
=> heap2 = [12, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 45
ACTION: heaps.heappop(heap0) 
heap0 = [12, 18] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 46
ACTION: heaps.heappop(heap2) 
heap2 = [12, 18, 18, 18] : <type 'list'>
=> heap2 = [18, 18, 18] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 47
ACTION: int4 = 5 
int4 = 12 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 48
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [18, 18, 18] : <type 'list'>
heap0 = [18] : <type 'list'>
=> heap0 = [18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 50
ACTION: heaps.heappush(heap2,int0) 
int0 = 12 : <type 'int'>
heap2 = [18, 18, 18] : <type 'list'>
=> heap2 = [12, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 51
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12, 18, 18, 18] : <type 'list'>
=> heap2 = [18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18, 18, 18] : <type 'list'>
=> heap2 = [18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [18, 18] : <type 'list'>
heap0 = [18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [18, 18] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 57
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap0 = [18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 59
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 60
ACTION: heaps.heappop(heap0) 
heap0 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 61
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 62
ACTION: heaps.heappop(heap1) 
heap1 = [18, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 63
ACTION: heaps.heappush(heap2,int3) 
int3 = 4 : <type 'int'>
heap2 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 65
ACTION: heaps.heappush(heap2,int0) 
int0 = 12 : <type 'int'>
heap2 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 66
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap0 = [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 67
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [5, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 68
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [18, 18, 18, 18] : <type 'list'>
=> heap1 = [8, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 69
ACTION: heaps.heappop(heap1) 
heap1 = [8, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 70
ACTION: heaps.heappush(heap0,int4) 
int4 = 5 : <type 'int'>
heap0 = [5, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [5, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 71
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [5, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap2 = [12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [5, 5, 12, 5, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [5, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 73
ACTION: int0 = 13 
int0 = 12 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 74
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [18, 18, 18, 18] : <type 'list'>
=> heap1 = [9, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 75
ACTION: heaps.heappush(heap0,int2) 
int2 = 9 : <type 'int'>
heap0 = [5, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [5, 12, 9, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 76
ACTION: heaps.heappop(heap1) 
heap1 = [9, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 77
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 12, 5, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [5, 5, 12, 18, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 12, 18, 12, 5, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [5, 12, 12, 18, 12, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 12, 9, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [9, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 80
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 12, 12, 18, 12, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [12, 12, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 81
ACTION: heaps.heappush(heap0,int2) 
int2 = 9 : <type 'int'>
heap0 = [9, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [9, 12, 9, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 82
ACTION: int3 = 19 
int3 = 4 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 83
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [12, 12, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap0 = [9, 12, 9, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap1 = [18, 18, 18, 18] : <type 'list'>
=> heap1 = [9, 12, 12, 12, 12, 9, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 84
ACTION: int4 = 16 
int4 = 5 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 85
ACTION: heaps.heappop(heap0) 
heap0 = [9, 12, 9, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [9, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 86
ACTION: heaps.heappop(heap2) 
heap2 = [12, 12, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [12, 18, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 87
ACTION: int1 = 13 
int1 = 8 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 88
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [12, 18, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap0 = [9, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap2 = [9, 12, 12, 12, 18, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 89
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [9, 12, 12, 12, 18, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
heap0 = [9, 12, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [9, 9, 12, 12, 12, 12, 12, 18, 12, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 90
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 12, 12, 12, 12, 9, 18, 18, 5, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [12, 12, 12, 5, 12, 9, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047aaef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.2023670673 TOTAL RUNTIME
26 EXECUTED
2491 TOTAL TEST OPERATIONS
29.3350646496 TIME SPENT EXECUTING TEST OPERATIONS
0.348261833191 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3327059746 TIME SPENT CHECKING PROPERTIES
58.6677706242 TOTAL TIME SPENT RUNNING SUT
0.0119140148163 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 7                                                                 # STEP 0
heap2 = heaps.heapnew()                                                  # STEP 1
heap1 = heaps.heapmerge(heap2,heap2)                                     # STEP 2
heap2 = heaps.heapmerge(heap1,heap2)                                     # STEP 3
heaps.heappop(heap2)                                                     # STEP 4
int3 = 4                                                                 # STEP 5
int0 = 4                                                                 # STEP 6
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heaps.heappop(heap2)                                                     # STEP 8
heap2 = heaps.heapmerge(heap0,heap2)                                     # STEP 9
heaps.heappush(heap2,int2)                                              # STEP 10
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 11
int4 = 2                                                                # STEP 12
int2 = 16                                                               # STEP 13
int1 = 5                                                                # STEP 14
heaps.heappush(heap2,int4)                                              # STEP 15
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
heaps.heappop(heap0)                                                    # STEP 17
heaps.heappush(heap0,int0)                                              # STEP 18
heaps.heappop(heap2)                                                    # STEP 19
heaps.heappop(heap2)                                                    # STEP 20
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
int0 = 12                                                               # STEP 22
heaps.heappush(heap1,int2)                                              # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 25
heaps.heappop(heap2)                                                    # STEP 26
heaps.heappush(heap0,int1)                                              # STEP 27
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 28
int4 = 18                                                               # STEP 29
heaps.heappush(heap1,int4)                                              # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
int2 = 13                                                               # STEP 32
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 33
heaps.heappush(heap2,int2)                                              # STEP 34
int4 = 12                                                               # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 37
heaps.heappush(heap2,int1)                                              # STEP 38
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
int1 = 8                                                                # STEP 40
heaps.heappush(heap2,int2)                                              # STEP 41
int2 = 9                                                                # STEP 42
heaps.heappush(heap0,int4)                                              # STEP 43
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 44
heaps.heappop(heap0)                                                    # STEP 45
heaps.heappop(heap2)                                                    # STEP 46
int4 = 5                                                                # STEP 47
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 48
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
heaps.heappush(heap2,int0)                                              # STEP 50
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 57
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
heaps.heappop(heap1)                                                    # STEP 59
heaps.heappop(heap0)                                                    # STEP 60
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 61
heaps.heappop(heap1)                                                    # STEP 62
heaps.heappush(heap2,int3)                                              # STEP 63
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 64
heaps.heappush(heap2,int0)                                              # STEP 65
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 66
heaps.heappush(heap0,int4)                                              # STEP 67
heaps.heappush(heap1,int1)                                              # STEP 68
heaps.heappop(heap1)                                                    # STEP 69
heaps.heappush(heap0,int4)                                              # STEP 70
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 71
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 72
int0 = 13                                                               # STEP 73
heaps.heappush(heap1,int2)                                              # STEP 74
heaps.heappush(heap0,int2)                                              # STEP 75
heaps.heappop(heap1)                                                    # STEP 76
heaps.heappop(heap2)                                                    # STEP 77
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 78
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 79
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 80
heaps.heappush(heap0,int2)                                              # STEP 81
int3 = 19                                                               # STEP 82
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 83
int4 = 16                                                               # STEP 84
heaps.heappop(heap0)                                                    # STEP 85
heaps.heappop(heap2)                                                    # STEP 86
int1 = 13                                                               # STEP 87
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 88
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 89
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 90
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1047aaef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.354.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044f6680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 67 steps

SAVING TEST AS failure.354.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 7                                                                 # STEP 0
ACTION: int4 = 7 
int4 = None : <type 'NoneType'>
=> int4 = 7 : <type 'int'>
==================================================
int1 = 11                                                                # STEP 1
ACTION: int1 = 11 
int1 = None : <type 'NoneType'>
=> int1 = 11 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 2
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 5                                                                 # STEP 3
ACTION: int3 = 5 
int3 = None : <type 'NoneType'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 4
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 6
ACTION: heaps.heappush(heap1,int3) 
int3 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [5] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [5, 5] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [5, 5] : <type 'list'>
heap1 = [5] : <type 'list'>
=> heap1 = [5, 5, 5] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 9
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5] : <type 'list'>
=> heap1 = [5, 5] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 5] : <type 'list'>
heap2 = [5, 5] : <type 'list'>
=> heap1 = [5, 5, 5, 5] : <type 'list'>
==================================================
int3 = 10                                                               # STEP 11
ACTION: int3 = 10 
int3 = 5 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 12
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 13
ACTION: heaps.heappop(heap2) 
heap2 = [5] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5, 5] : <type 'list'>
=> heap1 = [5, 5, 5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5] : <type 'list'>
=> heap1 = [5, 5] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 5] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [5, 5] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 17
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5] : <type 'list'>
=> heap2 = [5] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 18
ACTION: heaps.heappush(heap2,int2) 
int2 = 15 : <type 'int'>
heap2 = [5] : <type 'list'>
=> heap2 = [5, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 5] : <type 'list'>
heap2 = [5, 15] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [5, 5, 5, 15] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 20
ACTION: heaps.heappush(heap0,int1) 
int1 = 11 : <type 'int'>
heap0 = [5, 5, 5, 15] : <type 'list'>
=> heap0 = [5, 5, 5, 15, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 22
ACTION: heaps.heappush(heap0,int4) 
int4 = 7 : <type 'int'>
heap0 = [5, 5, 5, 15, 11] : <type 'list'>
=> heap0 = [5, 5, 5, 15, 11, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 5] : <type 'list'>
heap0 = [5, 5, 5, 15, 11, 7] : <type 'list'>
=> heap0 = [5, 5, 5, 5, 5, 15, 11, 7] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [15] : <type 'list'>
heap1 = [5, 5] : <type 'list'>
=> heap1 = [15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15] : <type 'list'>
=> heap1 = [15] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 26
ACTION: heap2 = heaps.heapnew() 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 5, 5, 5, 15, 11, 7] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 5, 15, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 7, 5, 15, 11] : <type 'list'>
=> heap0 = [5, 5, 5, 7, 11, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 5, 5, 7, 11, 15] : <type 'list'>
heap1 = [15] : <type 'list'>
=> heap1 = [5, 5, 5, 7, 11, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 30
ACTION: heaps.heappush(heap1,int3) 
int3 = 10 : <type 'int'>
heap1 = [5, 5, 5, 7, 11, 15, 15] : <type 'list'>
=> heap1 = [5, 5, 5, 7, 11, 15, 15, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 5, 7, 11, 15] : <type 'list'>
=> heap0 = [5, 7, 5, 15, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 32
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5, 7, 11, 15, 15, 10] : <type 'list'>
=> heap1 = [5, 7, 5, 10, 11, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 33
ACTION: heaps.heappush(heap2,int2) 
int2 = 15 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 34
ACTION: int4 = 17 
int4 = 7 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 35
ACTION: heaps.heappush(heap0,int0) 
int0 = 18 : <type 'int'>
heap0 = [5, 7, 5, 15, 11] : <type 'list'>
=> heap0 = [5, 7, 5, 15, 11, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 36
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 7, 5, 10, 11, 15, 15] : <type 'list'>
=> heap1 = [5, 7, 15, 10, 11, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 37
ACTION: heaps.heappop(heap0) 
heap0 = [5, 7, 5, 15, 11, 18] : <type 'list'>
=> heap0 = [5, 7, 18, 15, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 38
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [5, 7, 18, 15, 11] : <type 'list'>
heap1 = [5, 7, 15, 10, 11, 15] : <type 'list'>
=> heap1 = [5, 5, 7, 7, 15, 10, 11, 15, 18, 15, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 39
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 5, 7, 7, 15, 10, 11, 15, 18, 15, 11] : <type 'list'>
heap2 = [15] : <type 'list'>
heap0 = [5, 7, 18, 15, 11] : <type 'list'>
=> heap0 = [5, 5, 7, 7, 15, 10, 11, 15, 15, 18, 15, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 41
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 7, 7, 15, 10, 11, 15, 15, 18, 15, 11] : <type 'list'>
=> heap0 = [5, 7, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 7, 7, 15, 10, 11, 15, 18, 15, 11] : <type 'list'>
=> heap1 = [5, 7, 7, 11, 15, 10, 11, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 43
ACTION: heaps.heappush(heap2,int0) 
int0 = 18 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 44
ACTION: heap1 = heaps.heapnew() 
heap1 = [5, 7, 7, 11, 15, 10, 11, 15, 18, 15] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 46
ACTION: heaps.heappush(heap0,int1) 
int1 = 11 : <type 'int'>
heap0 = [5, 7, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
=> heap0 = [5, 7, 7, 11, 15, 10, 11, 15, 15, 18, 15, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 47
ACTION: heaps.heappop(heap0) 
heap0 = [5, 7, 7, 11, 15, 10, 11, 15, 15, 18, 15, 11] : <type 'list'>
=> heap0 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 48
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 1                                                                # STEP 49
ACTION: int3 = 1 
int3 = 10 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 50
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
heap0 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
=> heap0 = [7, 7, 11, 7, 11, 11, 7, 11, 15, 10, 11, 15, 15, 15, 10, 11, 15, 15, 18, 15, 18, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 11, 7, 11, 15, 10, 11, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [7, 11, 10, 11, 15, 15, 11, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 1                                                                # STEP 54
ACTION: int2 = 1 
int2 = 15 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 7, 11, 7, 11, 11, 7, 11, 15, 10, 11, 15, 15, 15, 10, 11, 15, 15, 18, 15, 18, 15] : <type 'list'>
=> heap0 = [7, 7, 11, 11, 11, 11, 7, 11, 15, 10, 11, 15, 15, 15, 10, 15, 15, 15, 18, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [7, 11, 10, 11, 15, 15, 11, 15, 15, 18] : <type 'list'>
=> heap2 = [10, 11, 11, 11, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 57
ACTION: int1 = 5 
int1 = 11 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 7, 11, 11, 11, 11, 7, 11, 15, 10, 11, 15, 15, 15, 10, 15, 15, 15, 18, 15, 18] : <type 'list'>
=> heap0 = [7, 11, 11, 11, 11, 11, 7, 15, 15, 10, 11, 15, 15, 15, 10, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 59
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [7, 11, 11, 11, 11, 11, 7, 15, 15, 10, 11, 15, 15, 15, 10, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 60
ACTION: heaps.heappop(heap2) 
heap2 = [10, 11, 11, 11, 15, 15, 18, 15, 15] : <type 'list'>
=> heap2 = [11, 11, 11, 15, 15, 15, 18, 15] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 61
ACTION: int0 = 1 
int0 = 18 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 11, 11, 15, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [11, 15, 11, 15, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 63
ACTION: heaps.heappush(heap2,int3) 
int3 = 1 : <type 'int'>
heap2 = [11, 15, 11, 15, 15, 15, 18] : <type 'list'>
=> heap2 = [1, 11, 11, 15, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [7, 11, 11, 11, 11, 11, 7, 15, 15, 10, 11, 15, 15, 15, 10, 18, 15, 15, 18, 15] : <type 'list'>
=> heap0 = [11, 11, 11, 15, 11, 11, 7, 15, 15, 10, 11, 15, 15, 15, 10, 18, 15, 15, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [11, 11, 11, 15, 11, 11, 7, 15, 15, 10, 11, 15, 15, 15, 10, 18, 15, 15, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [11, 11, 11, 15, 10, 11, 7, 15, 15, 18, 11, 15, 15, 15, 10, 18, 15, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044d6d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #18 (0:00:30.021337) Fri Apr 28 06:09:33 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 53
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.039180994 TOTAL RUNTIME
25 EXECUTED
2420 TOTAL TEST OPERATIONS
29.3820595741 TIME SPENT EXECUTING TEST OPERATIONS
0.343863487244 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4015367031 TIME SPENT CHECKING PROPERTIES
58.7835962772 TOTAL TIME SPENT RUNNING SUT
0.0117146968842 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 7                                                                 # STEP 0
int1 = 11                                                                # STEP 1
int2 = 15                                                                # STEP 2
int3 = 5                                                                 # STEP 3
int0 = 18                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap1,int3)                                               # STEP 6
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heap1 = heaps.heapmerge(heap2,heap1)                                     # STEP 8
heaps.heappop(heap1)                                                     # STEP 9
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 10
int3 = 10                                                               # STEP 11
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 12
heaps.heappop(heap2)                                                    # STEP 13
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 16
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 17
heaps.heappush(heap2,int2)                                              # STEP 18
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 19
heaps.heappush(heap0,int1)                                              # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heaps.heappush(heap0,int4)                                              # STEP 22
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
heap2 = heaps.heapnew()                                                 # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
heaps.heappush(heap1,int3)                                              # STEP 30
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
heaps.heappop(heap1)                                                    # STEP 32
heaps.heappush(heap2,int2)                                              # STEP 33
int4 = 17                                                               # STEP 34
heaps.heappush(heap0,int0)                                              # STEP 35
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 36
heaps.heappop(heap0)                                                    # STEP 37
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 38
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 39
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
heaps.heappush(heap2,int0)                                              # STEP 43
heap1 = heaps.heapnew()                                                 # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
heaps.heappush(heap0,int1)                                              # STEP 46
heaps.heappop(heap0)                                                    # STEP 47
heaps.heappop(heap2)                                                    # STEP 48
int3 = 1                                                                # STEP 49
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 50
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 51
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
int2 = 1                                                                # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
int1 = 5                                                                # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 59
heaps.heappop(heap2)                                                    # STEP 60
int0 = 1                                                                # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
heaps.heappush(heap2,int3)                                              # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1044d6d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99464.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #14 STEP #63 (0:00:30.008798) Fri Apr 28 04:02:44 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045954d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 70 steps

SAVING TEST AS failure.99464.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 5                                                                 # STEP 0
ACTION: int2 = 5 
int2 = None : <type 'NoneType'>
=> int2 = 5 : <type 'int'>
==================================================
int1 = 12                                                                # STEP 1
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
int4 = 12                                                                # STEP 2
ACTION: int4 = 12 
int4 = None : <type 'NoneType'>
=> int4 = 12 : <type 'int'>
==================================================
int3 = 19                                                                # STEP 3
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 4
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 6
ACTION: heaps.heappush(heap0,int2) 
int2 = 5 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [5] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                               # STEP 7
ACTION: heaps.heappush(heap0,int2) 
int2 = 5 : <type 'int'>
heap0 = [5] : <type 'list'>
=> heap0 = [5, 5] : <type 'list'>
==================================================
int2 = 14                                                                # STEP 8
ACTION: int2 = 14 
int2 = 5 : <type 'int'>
=> int2 = 14 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                               # STEP 9
ACTION: heaps.heappush(heap0,int3) 
int3 = 19 : <type 'int'>
heap0 = [5, 5] : <type 'list'>
=> heap0 = [5, 5, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 10
ACTION: heaps.heappop(heap0) 
heap0 = [5, 5, 19] : <type 'list'>
=> heap0 = [5, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 11
ACTION: heaps.heappop(heap0) 
heap0 = [5, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 12
ACTION: heaps.heappop(heap0) 
heap0 = [19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 14
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 15
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                              # STEP 17
ACTION: heaps.heappush(heap0,int1) 
int1 = 12 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [12] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 18
ACTION: heaps.heappush(heap0,int3) 
int3 = 19 : <type 'int'>
heap0 = [12] : <type 'list'>
=> heap0 = [12, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 19
ACTION: heaps.heappush(heap0,int0) 
int0 = 17 : <type 'int'>
heap0 = [12, 19] : <type 'list'>
=> heap0 = [12, 19, 17] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [12, 19, 17] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [12, 12, 19, 17, 19, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [12, 19, 17] : <type 'list'>
=> heap0 = [17, 19] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 22
ACTION: int0 = 16 
int0 = 17 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [17, 19] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 24
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 5                                                                # STEP 25
ACTION: int3 = 5 
int3 = 19 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 26
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [17, 19] : <type 'list'>
heap2 = [12, 12, 19, 17, 19, 17] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [12, 12, 17, 19, 19, 17, 19, 17] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 28
ACTION: heap0 = heaps.heapnew() 
heap0 = [17, 19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12, 12, 17, 19, 19, 17, 19, 17] : <type 'list'>
=> heap1 = [12, 17, 17, 19, 19, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 31
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 32
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12, 17, 17, 19, 19, 17, 19] : <type 'list'>
=> heap1 = [17, 19, 17, 19, 19, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 19, 17, 19, 19, 17] : <type 'list'>
=> heap1 = [17, 19, 17, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 34
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [12, 12, 19, 17, 19, 17] : <type 'list'>
heap1 = [17, 19, 17, 19, 19] : <type 'list'>
=> heap1 = [12, 12, 17, 19, 17, 19, 17, 19, 17, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [12, 12, 19, 17, 19, 17] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 38
ACTION: heaps.heappush(heap1,int1) 
int1 = 15 : <type 'int'>
heap1 = [12, 12, 17, 19, 17, 19, 17, 19, 17, 19, 19] : <type 'list'>
=> heap1 = [12, 12, 15, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 39
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [12, 12, 19, 17, 19, 17] : <type 'list'>
=> heap2 = [12, 12, 12, 17, 19, 17, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 41
ACTION: heaps.heappush(heap0,int0) 
int0 = 16 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 42
ACTION: int1 = 14 
int1 = 15 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 43
ACTION: heaps.heappush(heap0,int1) 
int1 = 14 : <type 'int'>
heap0 = [16] : <type 'list'>
=> heap0 = [14, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 44
ACTION: heaps.heappush(heap2,int4) 
int4 = 12 : <type 'int'>
heap2 = [12, 12, 12, 17, 19, 17, 19] : <type 'list'>
=> heap2 = [12, 12, 12, 12, 19, 17, 19, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12, 12, 12, 12, 19, 17, 19, 17] : <type 'list'>
=> heap2 = [12, 12, 12, 17, 19, 17, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [12, 12, 12, 17, 19, 17, 19] : <type 'list'>
heap1 = [12, 12, 15, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
=> heap2 = [12, 12, 12, 12, 12, 15, 17, 19, 17, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [14, 16] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 48
ACTION: heaps.heappop(heap0) 
heap0 = [16] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 49
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 14                                                               # STEP 50
ACTION: int1 = 14 
int1 = 14 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 51
ACTION: heaps.heappop(heap2) 
heap2 = [12, 12, 12, 12, 12, 15, 17, 19, 17, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
=> heap2 = [12, 12, 12, 17, 12, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 52
ACTION: int4 = 2 
int4 = 12 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [12, 12, 15, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
=> heap1 = [12, 17, 15, 19, 19, 17, 17, 19, 17, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12, 17, 15, 19, 19, 17, 17, 19, 17, 19, 19] : <type 'list'>
=> heap1 = [15, 17, 17, 19, 19, 19, 17, 19, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 56
ACTION: heaps.heappop(heap1) 
heap1 = [15, 17, 17, 19, 19, 19, 17, 19, 17, 19] : <type 'list'>
=> heap1 = [17, 19, 17, 19, 19, 19, 17, 19, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 19, 17, 19, 19, 19, 17, 19, 17] : <type 'list'>
=> heap1 = [17, 19, 17, 19, 19, 19, 17, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 58
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [12, 12, 12, 17, 12, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19] : <type 'list'>
=> heap2 = [12, 12, 12, 17, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 59
ACTION: heaps.heappop(heap2) 
heap2 = [12, 12, 12, 17, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19] : <type 'list'>
=> heap2 = [12, 17, 12, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17] : <type 'list'>
==================================================
int0 = 7                                                                # STEP 60
ACTION: int0 = 7 
int0 = 16 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 61
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [17, 19, 17, 19, 19, 19, 17, 19] : <type 'list'>
heap2 = [12, 17, 12, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17] : <type 'list'>
=> heap2 = [12, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 62
ACTION: heaps.heappop(heap1) 
heap1 = [17, 19, 17, 19, 19, 19, 17, 19] : <type 'list'>
=> heap1 = [17, 19, 17, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 63
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [17, 19, 17, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [17, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 66
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [12, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17] : <type 'list'>
heap1 = [19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [12, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 67
ACTION: heaps.heappop(heap1) 
heap1 = [12, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [17, 12, 17, 19, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 68
ACTION: heaps.heappop(heap2) 
heap2 = [12, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17] : <type 'list'>
=> heap2 = [17, 17, 17, 12, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 69
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 12, 17, 19, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [12, 19, 17, 19, 19, 17, 19, 19, 19, 17, 19, 19, 19, 15, 17, 19, 19, 19, 19, 17, 17, 17, 19, 17, 19, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104679cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 86
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0372960567 TOTAL RUNTIME
28 EXECUTED
2756 TOTAL TEST OPERATIONS
29.3586120605 TIME SPENT EXECUTING TEST OPERATIONS
0.38278055191 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4412961006 TIME SPENT CHECKING PROPERTIES
58.7999081612 TOTAL TIME SPENT RUNNING SUT
0.0118885040283 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 5                                                                 # STEP 0
int1 = 12                                                                # STEP 1
int4 = 12                                                                # STEP 2
int3 = 19                                                                # STEP 3
int0 = 17                                                                # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap0,int2)                                               # STEP 6
heaps.heappush(heap0,int2)                                               # STEP 7
int2 = 14                                                                # STEP 8
heaps.heappush(heap0,int3)                                               # STEP 9
heaps.heappop(heap0)                                                    # STEP 10
heaps.heappop(heap0)                                                    # STEP 11
heaps.heappop(heap0)                                                    # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
heaps.heappop(heap0)                                                    # STEP 14
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heaps.heappush(heap0,int1)                                              # STEP 17
heaps.heappush(heap0,int3)                                              # STEP 18
heaps.heappush(heap0,int0)                                              # STEP 19
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 20
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 21
int0 = 16                                                               # STEP 22
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 23
heaps.heappop(heap1)                                                    # STEP 24
int3 = 5                                                                # STEP 25
int1 = 15                                                               # STEP 26
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 27
heap0 = heaps.heapnew()                                                 # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 30
heaps.heappop(heap0)                                                    # STEP 31
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 32
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 33
heaps.heappop(heap0)                                                    # STEP 34
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 37
heaps.heappush(heap1,int1)                                              # STEP 38
heaps.heappush(heap2,int4)                                              # STEP 39
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 40
heaps.heappush(heap0,int0)                                              # STEP 41
int1 = 14                                                               # STEP 42
heaps.heappush(heap0,int1)                                              # STEP 43
heaps.heappush(heap2,int4)                                              # STEP 44
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 45
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 47
heaps.heappop(heap0)                                                    # STEP 48
heaps.heappop(heap0)                                                    # STEP 49
int1 = 14                                                               # STEP 50
heaps.heappop(heap2)                                                    # STEP 51
int4 = 2                                                                # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 55
heaps.heappop(heap1)                                                    # STEP 56
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 58
heaps.heappop(heap2)                                                    # STEP 59
int0 = 7                                                                # STEP 60
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 61
heaps.heappop(heap1)                                                    # STEP 62
heaps.heappop(heap0)                                                    # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 65
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 66
heaps.heappop(heap1)                                                    # STEP 67
heaps.heappop(heap2)                                                    # STEP 68
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 69
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104679cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

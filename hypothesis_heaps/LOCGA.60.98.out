Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69779.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #38 (0:00:30.023017) Tue May  2 20:28:46 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1055a6b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 84 steps

SAVING TEST AS failure.69779.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int0 = 8                                                                 # STEP 0
ACTION: int0 = 8 
int0 = None : <type 'NoneType'>
=> int0 = 8 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 1
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 2
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 3
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 4
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 13                                                                # STEP 5
ACTION: int4 = 13 
int4 = None : <type 'NoneType'>
=> int4 = 13 : <type 'int'>
==================================================
int3 = 9                                                                 # STEP 6
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                               # STEP 7
ACTION: heaps.heappush(heap0,int4) 
int4 = 13 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [13] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [13, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [13, 13] : <type 'list'>
heap0 = [13] : <type 'list'>
=> heap0 = [13, 13, 13] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13, 13, 13] : <type 'list'>
=> heap0 = [13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13, 13] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
int4 = 20                                                               # STEP 13
ACTION: int4 = 20 
int4 = 13 : <type 'int'>
=> int4 = 20 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 14
ACTION: heaps.heappush(heap0,int0) 
int0 = 8 : <type 'int'>
heap0 = [13] : <type 'list'>
=> heap0 = [8, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 15
ACTION: heaps.heappop(heap0) 
heap0 = [8, 13] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 16
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [13] : <type 'list'>
=> heap1 = [9, 13] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 18
ACTION: heaps.heappush(heap1,int4) 
int4 = 20 : <type 'int'>
heap1 = [9, 13] : <type 'list'>
=> heap1 = [9, 13, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [9, 13, 20] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [9, 13, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 20
ACTION: heaps.heappop(heap1) 
heap1 = [9, 13, 20] : <type 'list'>
=> heap1 = [13, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 21
ACTION: heaps.heappush(heap2,int3) 
int3 = 9 : <type 'int'>
heap2 = [9, 13, 20] : <type 'list'>
=> heap2 = [9, 9, 20, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 22
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [13, 20] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [13, 20] : <type 'list'>
heap2 = [9, 9, 20, 13] : <type 'list'>
=> heap2 = [13, 13, 20, 20] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 27
ACTION: int3 = 14 
int3 = 9 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 28
ACTION: heaps.heappush(heap1,int3) 
int3 = 14 : <type 'int'>
heap1 = [13, 20] : <type 'list'>
=> heap1 = [13, 20, 14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 30
ACTION: heaps.heappop(heap2) 
heap2 = [13, 13, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 31
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 32
ACTION: heap2 = heaps.heapnew() 
heap2 = [13, 20, 20] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 34
ACTION: heaps.heappop(heap1) 
heap1 = [13, 20, 14] : <type 'list'>
=> heap1 = [14, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 35
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [14, 20] : <type 'list'>
=> heap1 = [14, 14, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 36
ACTION: heaps.heappop(heap1) 
heap1 = [14, 14, 20, 20] : <type 'list'>
=> heap1 = [14, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 38
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [14, 20, 20] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int3 = 2                                                                # STEP 40
ACTION: int3 = 2 
int3 = 14 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [14, 20, 20] : <type 'list'>
=> heap1 = [20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 43
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 44
ACTION: heaps.heappop(heap0) 
heap0 = [20] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 45
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 46
ACTION: heaps.heappush(heap1,int0) 
int0 = 8 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [8, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 47
ACTION: heaps.heappush(heap1,int4) 
int4 = 20 : <type 'int'>
heap1 = [8, 20] : <type 'list'>
=> heap1 = [8, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 48
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [8, 20, 20] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [8, 20, 20] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 49
ACTION: int2 = 12 
int2 = None : <type 'NoneType'>
=> int2 = 12 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 50
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 51
ACTION: int4 = 13 
int4 = 20 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 52
ACTION: heaps.heappush(heap2,int3) 
int3 = 2 : <type 'int'>
heap2 = [8, 20, 20] : <type 'list'>
=> heap2 = [2, 8, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [8, 20, 20] : <type 'list'>
=> heap1 = [20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [2, 8, 20, 20] : <type 'list'>
=> heap2 = [8, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 20, 20] : <type 'list'>
=> heap2 = [20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 56
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [20, 20] : <type 'list'>
heap2 = [20, 20] : <type 'list'>
=> heap2 = [20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [20, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 58
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [20, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 20, 20] : <type 'list'>
==================================================
int3 = 3                                                                # STEP 59
ACTION: int3 = 3 
int3 = 2 : <type 'int'>
=> int3 = 3 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 60
ACTION: heaps.heappush(heap2,int3) 
int3 = 3 : <type 'int'>
heap2 = [13, 20, 20, 20] : <type 'list'>
=> heap2 = [3, 13, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 61
ACTION: heaps.heappop(heap1) 
heap1 = [20, 20] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 62
ACTION: heaps.heappush(heap1,int4) 
int4 = 13 : <type 'int'>
heap1 = [20] : <type 'list'>
=> heap1 = [13, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [3, 13, 20, 20, 20] : <type 'list'>
heap1 = [13, 20] : <type 'list'>
=> heap1 = [3, 13, 13, 20, 20, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 64
ACTION: heaps.heappop(heap1) 
heap1 = [3, 13, 13, 20, 20, 20, 20] : <type 'list'>
=> heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 65
ACTION: int3 = 19 
int3 = 3 : <type 'int'>
=> int3 = 19 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 13, 20, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 20, 20] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 67
ACTION: int4 = 13 
int4 = 13 : <type 'int'>
==================================================
int1 = 4                                                                # STEP 68
ACTION: int1 = 4 
int1 = None : <type 'NoneType'>
=> int1 = 4 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 20, 20, 20] : <type 'list'>
=> heap2 = [20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 71
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [20, 20, 20] : <type 'list'>
heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 73
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 74
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [13, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 75
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [13, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
heap2 = [13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
=> heap2 = [13, 13, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
=> heap0 = [13, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 77
ACTION: heaps.heappop(heap0) 
heap0 = [13, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20] : <type 'list'>
==================================================
int0 = 8                                                                # STEP 78
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 79
ACTION: heaps.heappop(heap0) 
heap0 = [20, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20] : <type 'list'>
=> heap0 = [20, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 80
ACTION: heaps.heappop(heap2) 
heap2 = [13, 13, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 81
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 20, 13, 20, 20, 20] : <type 'list'>
=> heap1 = [13, 20, 20, 20, 20] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20] : <type 'list'>
=> heap2 = [13, 20, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20, 13] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [13, 20, 20, 20, 20, 20, 13, 20, 20, 20, 20] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056745a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 45
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0561029911 TOTAL RUNTIME
19 EXECUTED
1829 TOTAL TEST OPERATIONS
29.2091782093 TIME SPENT EXECUTING TEST OPERATIONS
0.230021476746 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1137008667 TIME SPENT CHECKING PROPERTIES
58.322879076 TOTAL TIME SPENT RUNNING SUT
0.0113661289215 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int0 = 8                                                                 # STEP 0
heap0 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap0)                                                     # STEP 2
heaps.heappop(heap0)                                                     # STEP 3
heaps.heappop(heap0)                                                     # STEP 4
int4 = 13                                                                # STEP 5
int3 = 9                                                                 # STEP 6
heaps.heappush(heap0,int4)                                               # STEP 7
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
heap0 = heaps.heapmerge(heap1,heap0)                                     # STEP 9
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 12
int4 = 20                                                               # STEP 13
heaps.heappush(heap0,int0)                                              # STEP 14
heaps.heappop(heap0)                                                    # STEP 15
heaps.heappush(heap1,int3)                                              # STEP 16
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 17
heaps.heappush(heap1,int4)                                              # STEP 18
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 19
heaps.heappop(heap1)                                                    # STEP 20
heaps.heappush(heap2,int3)                                              # STEP 21
heaps.heappop(heap0)                                                    # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
int3 = 14                                                               # STEP 27
heaps.heappush(heap1,int3)                                              # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heaps.heappop(heap2)                                                    # STEP 30
heaps.heappush(heap0,int4)                                              # STEP 31
heap2 = heaps.heapnew()                                                 # STEP 32
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 33
heaps.heappop(heap1)                                                    # STEP 34
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 35
heaps.heappop(heap1)                                                    # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heaps.heappop(heap0)                                                    # STEP 38
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 39
int3 = 2                                                                # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
heaps.heappush(heap0,int4)                                              # STEP 43
heaps.heappop(heap0)                                                    # STEP 44
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 45
heaps.heappush(heap1,int0)                                              # STEP 46
heaps.heappush(heap1,int4)                                              # STEP 47
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 48
int2 = 12                                                               # STEP 49
heaps.heappush(heap0,int4)                                              # STEP 50
int4 = 13                                                               # STEP 51
heaps.heappush(heap2,int3)                                              # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
heaps.heappush(heap2,int4)                                              # STEP 58
int3 = 3                                                                # STEP 59
heaps.heappush(heap2,int3)                                              # STEP 60
heaps.heappop(heap1)                                                    # STEP 61
heaps.heappush(heap1,int4)                                              # STEP 62
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 63
heaps.heappop(heap1)                                                    # STEP 64
int3 = 19                                                               # STEP 65
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 66
int4 = 13                                                               # STEP 67
int1 = 4                                                                # STEP 68
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 70
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 71
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 72
heaps.heappop(heap0)                                                    # STEP 73
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 74
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 75
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
heaps.heappop(heap0)                                                    # STEP 77
int0 = 8                                                                # STEP 78
heaps.heappop(heap0)                                                    # STEP 79
heaps.heappop(heap2)                                                    # STEP 80
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 81
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 82
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 83
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1056745a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

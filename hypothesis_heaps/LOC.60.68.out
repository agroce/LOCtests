Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.540.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #13 STEP #9 (0:00:30.005023) Fri Apr 28 06:36:44 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e32d40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 61 steps

SAVING TEST AS failure.540.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 8                                                                 # STEP 0
ACTION: int4 = 8 
int4 = None : <type 'NoneType'>
=> int4 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 10                                                                # STEP 4
ACTION: int0 = 10 
int0 = None : <type 'NoneType'>
=> int0 = 10 : <type 'int'>
==================================================
int1 = 7                                                                 # STEP 5
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 6
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                               # STEP 9
ACTION: heaps.heappush(heap2,int4) 
int4 = 8 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 10
ACTION: heaps.heappush(heap0,int4) 
int4 = 8 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 11
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 12
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 14
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 16
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 18
ACTION: heaps.heappush(heap2,int2) 
int2 = 9 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [9] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 20
ACTION: heaps.heappush(heap0,int0) 
int0 = 10 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [10] : <type 'list'>
==================================================
int0 = 8                                                                # STEP 21
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [9] : <type 'list'>
heap0 = [10] : <type 'list'>
heap2 = [9] : <type 'list'>
=> heap2 = [9, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [9] : <type 'list'>
=> heap1 = [9, 9] : <type 'list'>
==================================================
int3 = 13                                                               # STEP 24
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 25
ACTION: heaps.heappush(heap0,int3) 
int3 = 13 : <type 'int'>
heap0 = [10] : <type 'list'>
=> heap0 = [10, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [9, 10] : <type 'list'>
heap0 = [10, 13] : <type 'list'>
=> heap0 = [9, 10, 10, 13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [9, 10, 10, 13] : <type 'list'>
heap1 = [9, 9] : <type 'list'>
heap2 = [9, 10] : <type 'list'>
=> heap2 = [9, 9, 9, 10, 10, 13] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 10, 10, 13] : <type 'list'>
=> heap0 = [10, 13, 10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 29
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [9, 9, 9, 10, 10, 13] : <type 'list'>
heap1 = [9] : <type 'list'>
=> heap1 = [9, 9, 9, 9, 10, 10, 13] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [9, 9, 9, 9, 10, 10, 13] : <type 'list'>
=> heap1 = [9, 9, 9, 13, 10, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 13, 10] : <type 'list'>
=> heap0 = [10, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 10, 10, 13] : <type 'list'>
=> heap2 = [9, 10, 9, 13, 10] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 34
ACTION: int4 = 11 
int4 = 8 : <type 'int'>
=> int4 = 11 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 9, 13, 10, 10] : <type 'list'>
=> heap1 = [9, 10, 9, 13, 10] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [10, 13] : <type 'list'>
heap2 = [9, 10, 9, 13, 10] : <type 'list'>
=> heap2 = [9, 10, 10, 9, 13, 13, 10] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 37
ACTION: heaps.heappush(heap2,int4) 
int4 = 11 : <type 'int'>
heap2 = [9, 10, 10, 9, 13, 13, 10] : <type 'list'>
=> heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 13] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 39
ACTION: heaps.heappush(heap2,int2) 
int2 = 9 : <type 'int'>
heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
=> heap2 = [9, 10, 10, 9, 13, 13, 10, 11, 9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 41
ACTION: heaps.heappop(heap1) 
heap1 = [9, 10, 9, 13, 10] : <type 'list'>
=> heap1 = [9, 10, 10, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                 # STEP 43
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 10, 10, 9, 13, 13, 10, 11, 9] : <type 'list'>
=> heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [9, 10, 10, 13] : <type 'list'>
=> heap1 = [10, 13, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
heap1 = [10, 13, 10] : <type 'list'>
=> heap1 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
==================================================
int4 = 16                                                               # STEP 47
ACTION: int4 = 16 
int4 = 11 : <type 'int'>
=> int4 = 16 : <type 'int'>
==================================================
int2 = 17                                                               # STEP 48
ACTION: int2 = 17 
int2 = 9 : <type 'int'>
=> int2 = 17 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
=> heap1 = [10, 9, 10, 11, 13, 13, 10] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 50
ACTION: int3 = 14 
int3 = 13 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
heap1 = [10, 9, 10, 11, 13, 13, 10] : <type 'list'>
=> heap1 = [9, 10, 10, 9, 10, 9, 10, 11, 13, 13, 10, 11, 13, 13, 10] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 52
ACTION: heaps.heappush(heap0,int0) 
int0 = 8 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
int0 = 8                                                                # STEP 53
ACTION: int0 = 8 
int0 = 8 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [9, 10, 10, 9, 13, 13, 10, 11] : <type 'list'>
=> heap2 = [10, 9, 10, 11, 13, 13, 10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 55
ACTION: heaps.heappop(heap0) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 56
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [9, 10, 10, 9, 10, 9, 10, 11, 13, 13, 10, 11, 13, 13, 10] : <type 'list'>
=> heap1 = [7, 9, 10, 10, 10, 9, 10, 9, 13, 13, 10, 11, 13, 13, 10, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 9, 10, 10, 10, 9, 10, 9, 13, 13, 10, 11, 13, 13, 10, 11] : <type 'list'>
=> heap1 = [9, 10, 10, 9, 10, 9, 10, 11, 13, 13, 10, 11, 13, 13, 10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 58
ACTION: heaps.heappop(heap1) 
heap1 = [9, 10, 10, 9, 10, 9, 10, 11, 13, 13, 10, 11, 13, 13, 10] : <type 'list'>
=> heap1 = [10, 10, 10, 9, 10, 9, 10, 11, 13, 13, 10, 11, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [10, 9, 10, 11, 13, 13, 10] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [9, 10, 10, 11, 13, 13] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eee4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 7
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0504059792 TOTAL RUNTIME
25 EXECUTED
2368 TOTAL TEST OPERATIONS
29.4014480114 TIME SPENT EXECUTING TEST OPERATIONS
0.317893743515 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4878828526 TIME SPENT CHECKING PROPERTIES
58.889330864 TOTAL TIME SPENT RUNNING SUT
0.011677980423 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 8                                                                 # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
int0 = 10                                                                # STEP 4
int1 = 7                                                                 # STEP 5
heap1 = heaps.heapnew()                                                  # STEP 6
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 7
heap0 = heaps.heapmerge(heap1,heap2)                                     # STEP 8
heaps.heappush(heap2,int4)                                               # STEP 9
heaps.heappush(heap0,int4)                                              # STEP 10
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 11
int2 = 9                                                                # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
heaps.heappop(heap0)                                                    # STEP 14
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
heaps.heappop(heap0)                                                    # STEP 16
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 17
heaps.heappush(heap2,int2)                                              # STEP 18
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 19
heaps.heappush(heap0,int0)                                              # STEP 20
int0 = 8                                                                # STEP 21
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 23
int3 = 13                                                               # STEP 24
heaps.heappush(heap0,int3)                                              # STEP 25
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 26
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 27
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 28
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 29
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
int4 = 11                                                               # STEP 34
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 35
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
heaps.heappush(heap2,int4)                                              # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
heaps.heappush(heap2,int2)                                              # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
heaps.heappop(heap1)                                                    # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
heap0 = heaps.heapnew()                                                 # STEP 43
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 46
int4 = 16                                                               # STEP 47
int2 = 17                                                               # STEP 48
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
int3 = 14                                                               # STEP 50
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 51
heaps.heappush(heap0,int0)                                              # STEP 52
int0 = 8                                                                # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
heaps.heappop(heap0)                                                    # STEP 55
heaps.heappush(heap1,int1)                                              # STEP 56
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 57
heaps.heappop(heap1)                                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 60
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103eee4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

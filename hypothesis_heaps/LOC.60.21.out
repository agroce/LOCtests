Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99534.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #14 STEP #70 (0:00:30.009928) Fri Apr 28 04:14:49 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d37a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 85 steps

SAVING TEST AS failure.99534.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 5                                                                 # STEP 0
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
int1 = 3                                                                 # STEP 1
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int0 = 17                                                                # STEP 2
ACTION: int0 = 17 
int0 = None : <type 'NoneType'>
=> int0 = 17 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 3
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
int3 = 18                                                                # STEP 4
ACTION: int3 = 18 
int3 = None : <type 'NoneType'>
=> int3 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                               # STEP 6
ACTION: heaps.heappush(heap2,int1) 
int1 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [3] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int1 = 18                                                                # STEP 8
ACTION: int1 = 18 
int1 = 3 : <type 'int'>
=> int1 = 18 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                     # STEP 9
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 10
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 11
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 12
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 14
ACTION: heaps.heappush(heap2,int2) 
int2 = 8 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 15
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [8] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [8, 8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 16
ACTION: heaps.heappop(heap2) 
heap2 = [8] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 17
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [8, 8] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [8, 8, 8, 8] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8, 8, 8] : <type 'list'>
=> heap2 = [8, 8, 8] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 20
ACTION: heaps.heappush(heap1,int2) 
int2 = 8 : <type 'int'>
heap1 = [8, 8] : <type 'list'>
=> heap1 = [8, 8, 8] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8, 8] : <type 'list'>
=> heap2 = [8, 8] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 22
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [8, 8] : <type 'list'>
=> heap2 = [5, 8, 8] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 23
ACTION: heaps.heappop(heap2) 
heap2 = [5, 8, 8] : <type 'list'>
=> heap2 = [8, 8] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 24
ACTION: int4 = 18 
int4 = 5 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 25
ACTION: heaps.heappush(heap1,int0) 
int0 = 17 : <type 'int'>
heap1 = [8, 8, 8] : <type 'list'>
=> heap1 = [8, 8, 8, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 26
ACTION: heaps.heappush(heap1,int0) 
int0 = 17 : <type 'int'>
heap1 = [8, 8, 8, 17] : <type 'list'>
=> heap1 = [8, 8, 8, 17, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 27
ACTION: heaps.heappop(heap1) 
heap1 = [8, 8, 8, 17, 17] : <type 'list'>
=> heap1 = [8, 17, 8, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [8, 17, 8, 17] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [8, 8, 17, 8, 17, 17, 8, 17] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 29
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 8] : <type 'list'>
=> heap2 = [8] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 30
ACTION: heap1 = heaps.heapnew() 
heap1 = [8, 17, 8, 17] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 31
ACTION: heaps.heappush(heap2,int1) 
int1 = 18 : <type 'int'>
heap2 = [8] : <type 'list'>
=> heap2 = [8, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 32
ACTION: heaps.heappush(heap2,int0) 
int0 = 17 : <type 'int'>
heap2 = [8, 18] : <type 'list'>
=> heap2 = [8, 18, 17] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 33
ACTION: int1 = 3 
int1 = 18 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 34
ACTION: heaps.heappush(heap0,int0) 
int0 = 17 : <type 'int'>
heap0 = [8, 8, 17, 8, 17, 17, 8, 17] : <type 'list'>
=> heap0 = [8, 8, 17, 8, 17, 17, 8, 17, 17] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 35
ACTION: heaps.heappush(heap0,int0) 
int0 = 17 : <type 'int'>
heap0 = [8, 8, 17, 8, 17, 17, 8, 17, 17] : <type 'list'>
=> heap0 = [8, 8, 17, 8, 17, 17, 8, 17, 17, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [8, 18, 17] : <type 'list'>
heap1 = [] : <type 'list'>
heap0 = [8, 8, 17, 8, 17, 17, 8, 17, 17, 17] : <type 'list'>
=> heap0 = [8, 18, 17] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 37
ACTION: heaps.heappush(heap1,int3) 
int3 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int2 = 19                                                               # STEP 38
ACTION: int2 = 19 
int2 = 8 : <type 'int'>
=> int2 = 19 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [8, 18, 17] : <type 'list'>
=> heap2 = [17, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17, 18] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 41
ACTION: heaps.heappop(heap2) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [8, 18, 17] : <type 'list'>
=> heap2 = [8, 18, 17] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 43
ACTION: heaps.heappop(heap2) 
heap2 = [8, 18, 17] : <type 'list'>
=> heap2 = [17, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [18] : <type 'list'>
heap2 = [17, 18] : <type 'list'>
=> heap1 = [17, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 45
ACTION: heaps.heappop(heap2) 
heap2 = [17, 18] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 46
ACTION: heaps.heappush(heap0,int0) 
int0 = 17 : <type 'int'>
heap0 = [8, 18, 17] : <type 'list'>
=> heap0 = [8, 17, 17, 18] : <type 'list'>
==================================================
int0 = 11                                                               # STEP 47
ACTION: int0 = 11 
int0 = 17 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [8, 17, 17, 18] : <type 'list'>
=> heap0 = [17, 18, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 18, 18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 51
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [17, 18, 17] : <type 'list'>
heap1 = [18, 18] : <type 'list'>
=> heap1 = [17, 18, 17] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 52
ACTION: heaps.heappush(heap0,int3) 
int3 = 18 : <type 'int'>
heap0 = [17, 18, 17] : <type 'list'>
=> heap0 = [17, 18, 17, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 53
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 54
ACTION: heaps.heappop(heap0) 
heap0 = [17, 18, 17, 18] : <type 'list'>
=> heap0 = [17, 18, 18] : <type 'list'>
==================================================
int3 = 10                                                               # STEP 55
ACTION: int3 = 10 
int3 = 18 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 57
ACTION: heaps.heappop(heap0) 
heap0 = [17, 18, 18] : <type 'list'>
=> heap0 = [18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 58
ACTION: heaps.heappush(heap0,int3) 
int3 = 10 : <type 'int'>
heap0 = [18, 18] : <type 'list'>
=> heap0 = [10, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 59
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 18, 18] : <type 'list'>
heap1 = [17, 18, 17] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [10, 17, 18, 18, 18, 17] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 60
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [10, 18, 18] : <type 'list'>
heap1 = [17, 18, 17] : <type 'list'>
=> heap0 = [10, 17, 18, 18, 18, 17] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 18, 17] : <type 'list'>
=> heap1 = [17, 18] : <type 'list'>
==================================================
int3 = 5                                                                # STEP 62
ACTION: int3 = 5 
int3 = 10 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [17, 18] : <type 'list'>
heap0 = [10, 17, 18, 18, 18, 17] : <type 'list'>
=> heap1 = [10, 17, 17, 18, 18, 18, 18, 17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 64
ACTION: heaps.heappop(heap0) 
heap0 = [10, 17, 18, 18, 18, 17] : <type 'list'>
=> heap0 = [17, 17, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 65
ACTION: heap0 = heaps.heapnew() 
heap0 = [17, 17, 18, 18, 18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 66
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [10, 17, 17, 18, 18, 18, 18, 17] : <type 'list'>
=> heap0 = [10, 17, 17, 18, 18, 18, 18, 17] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 68
ACTION: heaps.heappush(heap2,int0) 
int0 = 11 : <type 'int'>
heap2 = [10, 17, 18, 18, 18, 17] : <type 'list'>
=> heap2 = [10, 17, 11, 18, 18, 17, 18] : <type 'list'>
==================================================
int0 = 5                                                                # STEP 69
ACTION: int0 = 5 
int0 = 11 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 70
ACTION: heaps.heappop(heap0) 
heap0 = [10, 17, 17, 18, 18, 18, 18, 17] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 71
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [17, 17, 17, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [10, 17, 17, 18, 18, 18, 18, 17] : <type 'list'>
heap2 = [10, 17, 11, 18, 18, 17, 18] : <type 'list'>
=> heap1 = [10, 10, 17, 17, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 73
ACTION: heaps.heappop(heap0) 
heap0 = [17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 17, 17, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 74
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [10, 17, 11, 18, 18, 17, 18] : <type 'list'>
heap0 = [17, 17, 17, 18, 17, 17, 18, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [10, 10, 17, 11, 17, 11, 18, 18, 17, 18, 18, 18, 17, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 75
ACTION: heaps.heappush(heap1,int4) 
int4 = 18 : <type 'int'>
heap1 = [10, 10, 17, 17, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
=> heap1 = [10, 10, 17, 17, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 10, 17, 11, 17, 11, 18, 18, 17, 18, 18, 18, 17, 18] : <type 'list'>
=> heap0 = [10, 11, 17, 17, 17, 11, 18, 18, 18, 18, 18, 18, 17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 77
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [10, 11, 17, 17, 17, 11, 18, 18, 18, 18, 18, 18, 17] : <type 'list'>
=> heap0 = [11, 17, 17, 17, 17, 11, 18, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 78
ACTION: heaps.heappop(heap0) 
heap0 = [11, 17, 17, 17, 17, 11, 18, 18, 18, 18, 18, 18] : <type 'list'>
=> heap0 = [17, 17, 17, 18, 17, 11, 18, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 79
ACTION: heaps.heappop(heap1) 
heap1 = [10, 10, 17, 17, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18] : <type 'list'>
=> heap1 = [10, 17, 17, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 80
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [10, 17, 17, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
=> heap1 = [10, 10, 17, 17, 17, 17, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 81
ACTION: heaps.heappop(heap2) 
heap2 = [10, 17, 11, 18, 18, 17, 18] : <type 'list'>
=> heap2 = [11, 17, 17, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 82
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 10, 17, 17, 17, 17, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17, 18] : <type 'list'>
=> heap1 = [10, 17, 17, 11, 17, 17, 18, 17, 18, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 83
ACTION: heaps.heappop(heap1) 
heap1 = [10, 17, 17, 11, 17, 17, 18, 17, 18, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18, 17] : <type 'list'>
=> heap1 = [17, 17, 17, 11, 17, 17, 18, 17, 18, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 84
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [17, 17, 17, 11, 17, 17, 18, 17, 18, 18, 18, 18, 18, 17, 18, 18, 17, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [17, 11, 17, 17, 17, 17, 18, 17, 18, 18, 18, 18, 18, 17, 18, 18, 18, 18, 18, 17, 11, 18, 18, 18, 18, 17, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d4d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 87
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0542941093 TOTAL RUNTIME
27 EXECUTED
2672 TOTAL TEST OPERATIONS
29.2986121178 TIME SPENT EXECUTING TEST OPERATIONS
0.35578083992 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.356367588 TIME SPENT CHECKING PROPERTIES
58.6549797058 TOTAL TIME SPENT RUNNING SUT
0.0120375156403 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 5                                                                 # STEP 0
int1 = 3                                                                 # STEP 1
int0 = 17                                                                # STEP 2
int2 = 8                                                                 # STEP 3
int3 = 18                                                                # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap2,int1)                                               # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
int1 = 18                                                                # STEP 8
heaps.heappop(heap2)                                                     # STEP 9
heaps.heappop(heap2)                                                    # STEP 10
heaps.heappop(heap2)                                                    # STEP 11
heaps.heappop(heap2)                                                    # STEP 12
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 13
heaps.heappush(heap2,int2)                                              # STEP 14
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 15
heaps.heappop(heap2)                                                    # STEP 16
heaps.heappop(heap2)                                                    # STEP 17
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
heaps.heappush(heap1,int2)                                              # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heaps.heappush(heap2,int4)                                              # STEP 22
heaps.heappop(heap2)                                                    # STEP 23
int4 = 18                                                               # STEP 24
heaps.heappush(heap1,int0)                                              # STEP 25
heaps.heappush(heap1,int0)                                              # STEP 26
heaps.heappop(heap1)                                                    # STEP 27
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 28
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 29
heap1 = heaps.heapnew()                                                 # STEP 30
heaps.heappush(heap2,int1)                                              # STEP 31
heaps.heappush(heap2,int0)                                              # STEP 32
int1 = 3                                                                # STEP 33
heaps.heappush(heap0,int0)                                              # STEP 34
heaps.heappush(heap0,int0)                                              # STEP 35
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
heaps.heappush(heap1,int3)                                              # STEP 37
int2 = 19                                                               # STEP 38
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 39
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
heaps.heappop(heap2)                                                    # STEP 41
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 42
heaps.heappop(heap2)                                                    # STEP 43
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 44
heaps.heappop(heap2)                                                    # STEP 45
heaps.heappush(heap0,int0)                                              # STEP 46
int0 = 11                                                               # STEP 47
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 48
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 51
heaps.heappush(heap0,int3)                                              # STEP 52
heaps.heappop(heap2)                                                    # STEP 53
heaps.heappop(heap0)                                                    # STEP 54
int3 = 10                                                               # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heaps.heappop(heap0)                                                    # STEP 57
heaps.heappush(heap0,int3)                                              # STEP 58
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 59
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
int3 = 5                                                                # STEP 62
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 63
heaps.heappop(heap0)                                                    # STEP 64
heap0 = heaps.heapnew()                                                 # STEP 65
heaps.heappop(heap0)                                                    # STEP 66
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
heaps.heappush(heap2,int0)                                              # STEP 68
int0 = 5                                                                # STEP 69
heaps.heappop(heap0)                                                    # STEP 70
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 71
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
heaps.heappop(heap0)                                                    # STEP 73
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 74
heaps.heappush(heap1,int4)                                              # STEP 75
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 76
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 77
heaps.heappop(heap0)                                                    # STEP 78
heaps.heappop(heap1)                                                    # STEP 79
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 80
heaps.heappop(heap2)                                                    # STEP 81
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 82
heaps.heappop(heap1)                                                    # STEP 83
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 84
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1045d4d88>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

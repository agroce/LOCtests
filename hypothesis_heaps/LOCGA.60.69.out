Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69605.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1030f8ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 27 steps

SAVING TEST AS failure.69605.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 20                                                                # STEP 0
ACTION: int4 = 20 
int4 = None : <type 'NoneType'>
=> int4 = 20 : <type 'int'>
==================================================
int1 = 20                                                                # STEP 1
ACTION: int1 = 20 
int1 = None : <type 'NoneType'>
=> int1 = 20 : <type 'int'>
==================================================
int2 = 6                                                                 # STEP 2
ACTION: int2 = 6 
int2 = None : <type 'NoneType'>
=> int2 = 6 : <type 'int'>
==================================================
int3 = 14                                                                # STEP 3
ACTION: int3 = 14 
int3 = None : <type 'NoneType'>
=> int3 = 14 : <type 'int'>
==================================================
int0 = 9                                                                 # STEP 4
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 6
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 7
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 8
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                               # STEP 9
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [14] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 10
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [14] : <type 'list'>
=> heap2 = [14, 14] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 11
ACTION: heaps.heappush(heap2,int2) 
int2 = 6 : <type 'int'>
heap2 = [14, 14] : <type 'list'>
=> heap2 = [6, 14, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 14, 14] : <type 'list'>
=> heap2 = [6, 6, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 13
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [6, 14, 14, 14, 14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 14
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [6, 14, 14, 14, 14] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [6, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 15
ACTION: int2 = 10 
int2 = 6 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
int3 = 16                                                               # STEP 16
ACTION: int3 = 16 
int3 = 14 : <type 'int'>
=> int3 = 16 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
heap2 = [6, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [6, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 18
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 6, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [6, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 20
ACTION: heaps.heappush(heap1,int0) 
int0 = 9 : <type 'int'>
heap1 = [6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [6, 9, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 21
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [6, 9, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
heap2 = [6, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [6, 6, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 22
ACTION: heaps.heappop(heap2) 
heap2 = [6, 6, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [6, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 9, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap1 = [9, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
int0 = 16                                                               # STEP 24
ACTION: int0 = 16 
int0 = 9 : <type 'int'>
=> int0 = 16 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 25
ACTION: heaps.heappop(heap2) 
heap2 = [6, 14, 9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
=> heap2 = [9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 26
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 14, 14, 14, 14, 14, 14, 14, 14] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103553ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103616cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 95 steps

SAVING TEST AS failure.69605.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 2                                                                 # STEP 0
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
int1 = 9                                                                 # STEP 1
ACTION: int1 = 9 
int1 = None : <type 'NoneType'>
=> int1 = 9 : <type 'int'>
==================================================
int0 = 16                                                                # STEP 2
ACTION: int0 = 16 
int0 = None : <type 'NoneType'>
=> int0 = 16 : <type 'int'>
==================================================
int3 = 10                                                                # STEP 3
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int4 = 19                                                                # STEP 4
ACTION: int4 = 19 
int4 = None : <type 'NoneType'>
=> int4 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                               # STEP 6
ACTION: heaps.heappush(heap2,int4) 
int4 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 7
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                     # STEP 8
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                     # STEP 9
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 10
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 11
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 13
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int4)                                              # STEP 14
ACTION: heaps.heappush(heap2,int4) 
int4 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 18
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 19
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 20
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 21
ACTION: heaps.heappush(heap0,int1) 
int1 = 9 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [9] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 22
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int4 = 4                                                                # STEP 24
ACTION: int4 = 4 
int4 = 19 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 26
ACTION: int1 = 3 
int1 = 9 : <type 'int'>
=> int1 = 3 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 27
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 29
ACTION: heaps.heappush(heap1,int0) 
int0 = 16 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 30
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [16] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 33
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 34
ACTION: heaps.heappush(heap2,int1) 
int1 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 35
ACTION: int0 = 13 
int0 = 16 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 40
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int4)                                              # STEP 41
ACTION: heaps.heappush(heap2,int4) 
int4 = 4 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [4] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 42
ACTION: int1 = 17 
int1 = 3 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 43
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 44
ACTION: int4 = 13 
int4 = 4 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 47
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 48
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int1)                                              # STEP 49
ACTION: heaps.heappush(heap0,int1) 
int1 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 50
ACTION: int1 = 8 
int1 = 17 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 53
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 54
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 55
ACTION: heaps.heappush(heap2,int0) 
int0 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 56
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 18                                                               # STEP 57
ACTION: int0 = 18 
int0 = 13 : <type 'int'>
=> int0 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 58
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 59
ACTION: heaps.heappush(heap1,int1) 
int1 = 8 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [8] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 61
ACTION: int1 = 16 
int1 = 8 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 62
ACTION: heaps.heappush(heap0,int0) 
int0 = 18 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
int0 = 2                                                                # STEP 63
ACTION: int0 = 2 
int0 = 18 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 64
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 65
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 66
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 68
ACTION: heaps.heappush(heap2,int4) 
int4 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 69
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [13] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 70
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [13] : <type 'list'>
=> heap2 = [13, 13] : <type 'list'>
==================================================
int4 = 8                                                                # STEP 71
ACTION: int4 = 8 
int4 = 13 : <type 'int'>
=> int4 = 8 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 72
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 73
ACTION: heaps.heappush(heap2,int1) 
int1 = 16 : <type 'int'>
heap2 = [13, 13] : <type 'list'>
=> heap2 = [13, 13, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 74
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [13, 13, 16] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 13, 16] : <type 'list'>
=> heap2 = [13, 16] : <type 'list'>
==================================================
int1 = 14                                                               # STEP 76
ACTION: int1 = 14 
int1 = 16 : <type 'int'>
=> int1 = 14 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 77
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [13, 13, 13, 13, 16, 16] : <type 'list'>
heap2 = [13, 16] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 79
ACTION: heaps.heappop(heap1) 
heap1 = [13, 13, 13, 13, 16, 16] : <type 'list'>
=> heap1 = [13, 13, 13, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 80
ACTION: heaps.heappop(heap1) 
heap1 = [13, 13, 13, 16, 16] : <type 'list'>
=> heap1 = [13, 16, 13, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 82
ACTION: heaps.heappush(heap1,int4) 
int4 = 8 : <type 'int'>
heap1 = [13, 16, 13, 16] : <type 'list'>
=> heap1 = [8, 13, 13, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 83
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 84
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [8, 13, 13, 16, 16] : <type 'list'>
heap2 = [13, 13, 13, 13, 13, 13, 13, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [8, 13, 13, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 85
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 86
ACTION: heaps.heappush(heap2,int0) 
int0 = 2 : <type 'int'>
heap2 = [8, 13, 13, 16, 16] : <type 'list'>
=> heap2 = [2, 13, 8, 16, 16, 13] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 87
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [8, 13, 13, 16, 16] : <type 'list'>
heap2 = [2, 13, 8, 16, 16, 13] : <type 'list'>
=> heap2 = [2, 8, 13, 13, 13, 8, 16, 16, 16, 16, 13] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 88
ACTION: int0 = 20 
int0 = 2 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 8, 13, 13, 13, 8, 16, 16, 16, 16, 13] : <type 'list'>
=> heap2 = [8, 13, 13, 13, 13, 8, 16, 16, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 90
ACTION: heap1 = heaps.heapnew() 
heap1 = [8, 13, 13, 16, 16] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 91
ACTION: heaps.heappop(heap2) 
heap2 = [8, 13, 13, 13, 13, 8, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [13, 13, 13, 16, 13, 8, 16, 16, 16] : <type 'list'>
==================================================
int4 = 13                                                               # STEP 92
ACTION: int4 = 13 
int4 = 8 : <type 'int'>
=> int4 = 13 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 93
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 13, 13, 16, 13, 8, 16, 16, 16] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [13, 13, 13, 16, 16, 8, 16, 16] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10362e440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
TEST #10 STEP #64 (0:00:30.019094) Tue May  2 19:59:34 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 32
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0724518299 TOTAL RUNTIME
20 EXECUTED
1854 TOTAL TEST OPERATIONS
28.8886015415 TIME SPENT EXECUTING TEST OPERATIONS
0.252645492554 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.938170433 TIME SPENT CHECKING PROPERTIES
57.8267719746 TOTAL TIME SPENT RUNNING SUT
0.0112609863281 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 20                                                                # STEP 0
int1 = 20                                                                # STEP 1
int2 = 6                                                                 # STEP 2
int3 = 14                                                                # STEP 3
int0 = 9                                                                 # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap2)                                                     # STEP 6
heaps.heappop(heap2)                                                     # STEP 7
heaps.heappop(heap2)                                                     # STEP 8
heaps.heappush(heap2,int3)                                               # STEP 9
heaps.heappush(heap2,int3)                                              # STEP 10
heaps.heappush(heap2,int2)                                              # STEP 11
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 13
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 14
int2 = 10                                                               # STEP 15
int3 = 16                                                               # STEP 16
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 17
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 18
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 19
heaps.heappush(heap1,int0)                                              # STEP 20
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 21
heaps.heappop(heap2)                                                    # STEP 22
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 23
int0 = 16                                                               # STEP 24
heaps.heappop(heap2)                                                    # STEP 25
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 26
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103553ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE 1
int2 = 2                                                                 # STEP 0
int1 = 9                                                                 # STEP 1
int0 = 16                                                                # STEP 2
int3 = 10                                                                # STEP 3
int4 = 19                                                                # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap2,int4)                                               # STEP 6
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 7
heaps.heappop(heap2)                                                     # STEP 8
heaps.heappop(heap2)                                                     # STEP 9
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 10
heaps.heappop(heap2)                                                    # STEP 11
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
heaps.heappop(heap2)                                                    # STEP 13
heaps.heappush(heap2,int4)                                              # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 16
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 18
heaps.heappop(heap1)                                                    # STEP 19
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 20
heaps.heappush(heap0,int1)                                              # STEP 21
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 22
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 23
int4 = 4                                                                # STEP 24
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 25
int1 = 3                                                                # STEP 26
heap1 = heaps.heapnew()                                                 # STEP 27
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 28
heaps.heappush(heap1,int0)                                              # STEP 29
heaps.heappop(heap0)                                                    # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 32
heaps.heappop(heap2)                                                    # STEP 33
heaps.heappush(heap2,int1)                                              # STEP 34
int0 = 13                                                               # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
heaps.heappop(heap0)                                                    # STEP 40
heaps.heappush(heap2,int4)                                              # STEP 41
int1 = 17                                                               # STEP 42
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 43
int4 = 13                                                               # STEP 44
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 45
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 46
heaps.heappop(heap2)                                                    # STEP 47
heaps.heappop(heap2)                                                    # STEP 48
heaps.heappush(heap0,int1)                                              # STEP 49
int1 = 8                                                                # STEP 50
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
heaps.heappop(heap0)                                                    # STEP 53
heaps.heappop(heap0)                                                    # STEP 54
heaps.heappush(heap2,int0)                                              # STEP 55
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 56
int0 = 18                                                               # STEP 57
heap2 = heaps.heapnew()                                                 # STEP 58
heaps.heappush(heap1,int1)                                              # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
int1 = 16                                                               # STEP 61
heaps.heappush(heap0,int0)                                              # STEP 62
int0 = 2                                                                # STEP 63
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 64
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 65
heaps.heappop(heap0)                                                    # STEP 66
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 67
heaps.heappush(heap2,int4)                                              # STEP 68
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 69
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 70
int4 = 8                                                                # STEP 71
heaps.heappop(heap1)                                                    # STEP 72
heaps.heappush(heap2,int1)                                              # STEP 73
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 74
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 75
int1 = 14                                                               # STEP 76
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
heaps.heappop(heap1)                                                    # STEP 79
heaps.heappop(heap1)                                                    # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
heaps.heappush(heap1,int4)                                              # STEP 82
heaps.heappop(heap0)                                                    # STEP 83
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 84
heaps.heappop(heap0)                                                    # STEP 85
heaps.heappush(heap2,int0)                                              # STEP 86
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 87
int0 = 20                                                               # STEP 88
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 89
heap1 = heaps.heapnew()                                                 # STEP 90
heaps.heappop(heap2)                                                    # STEP 91
int4 = 13                                                               # STEP 92
heaps.heappop(heap1)                                                    # STEP 93
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 94
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10362e440>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

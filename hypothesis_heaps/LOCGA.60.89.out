Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69728.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #10 STEP #55 (0:00:30.011497) Tue May  2 20:19:42 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d8a518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 54 steps

SAVING TEST AS failure.69728.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 20                                                                # STEP 0
ACTION: int2 = 20 
int2 = None : <type 'NoneType'>
=> int2 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 1
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 2
ACTION: heaps.heappush(heap1,int2) 
int2 = 20 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [20] : <type 'list'>
==================================================
int0 = 6                                                                 # STEP 3
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 4
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [20] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 3                                                                 # STEP 5
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int2 = 12                                                                # STEP 6
ACTION: int2 = 12 
int2 = 20 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
int3 = 11                                                                # STEP 7
ACTION: int3 = 11 
int3 = None : <type 'NoneType'>
=> int3 = 11 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                               # STEP 9
ACTION: heaps.heappush(heap0,int3) 
int3 = 11 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [11] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 10
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [11] : <type 'list'>
=> heap0 = [3, 11] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 11
ACTION: int4 = 6 
int4 = None : <type 'NoneType'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 12
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [3, 11] : <type 'list'>
=> heap0 = [3, 11, 3] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [3, 11, 3] : <type 'list'>
=> heap0 = [3, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 14
ACTION: heaps.heappush(heap1,int3) 
int3 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 15
ACTION: int3 = 1 
int3 = 11 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 16
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [3, 11] : <type 'list'>
heap1 = [11] : <type 'list'>
=> heap1 = [3, 3, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [3, 11] : <type 'list'>
heap1 = [3, 3, 11, 11] : <type 'list'>
=> heap0 = [3, 3, 3, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 3, 11, 11, 11] : <type 'list'>
=> heap0 = [3, 11, 3, 11, 11] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 19
ACTION: int1 = 4 
int1 = 3 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 20
ACTION: heaps.heappop(heap1) 
heap1 = [3, 3, 11, 11] : <type 'list'>
=> heap1 = [3, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 21
ACTION: heaps.heappop(heap1) 
heap1 = [3, 11, 11] : <type 'list'>
=> heap1 = [11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [3, 11, 3, 11, 11] : <type 'list'>
=> heap0 = [3, 3, 11, 3, 11, 11, 11, 3, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 23
ACTION: heaps.heappush(heap0,int2) 
int2 = 12 : <type 'int'>
heap0 = [3, 3, 11, 3, 11, 11, 11, 3, 11, 11] : <type 'list'>
=> heap0 = [3, 3, 11, 3, 11, 11, 11, 3, 11, 11, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 24
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [3, 3, 11, 3, 11, 11, 11, 3, 11, 11, 12] : <type 'list'>
heap1 = [11, 11] : <type 'list'>
=> heap1 = [3, 3, 3, 3, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 12, 12] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 11, 3, 11, 11, 11, 3, 11, 11, 12] : <type 'list'>
=> heap0 = [3, 3, 11, 3, 11, 11, 11, 12, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 3, 3, 3, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 12, 12] : <type 'list'>
=> heap1 = [3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
heap0 = [3, 3, 11, 3, 11, 11, 11, 12, 11, 11] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [3, 3, 3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12, 11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [3, 3, 11, 3, 11, 11, 11, 12, 11, 11] : <type 'list'>
heap1 = [3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
=> heap0 = [3, 3, 3, 3, 3, 11, 3, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 29
ACTION: heaps.heappop(heap1) 
heap1 = [3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
=> heap1 = [3, 11, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 3, 3, 3, 11, 3, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
=> heap0 = [3, 3, 3, 11, 3, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 31
ACTION: heaps.heappop(heap2) 
heap2 = [3, 3, 3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12, 11, 11] : <type 'list'>
=> heap2 = [3, 3, 3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12, 11] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 32
ACTION: int2 = 2 
int2 = 12 : <type 'int'>
=> int2 = 2 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 3, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12, 11] : <type 'list'>
=> heap2 = [3, 3, 3, 3, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 34
ACTION: heaps.heappop(heap2) 
heap2 = [3, 3, 3, 3, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12, 12] : <type 'list'>
=> heap2 = [3, 3, 3, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 35
ACTION: heaps.heappop(heap0) 
heap0 = [3, 3, 3, 11, 3, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11, 11] : <type 'list'>
=> heap0 = [3, 3, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 11, 11, 11, 12, 11, 3, 11, 11, 12] : <type 'list'>
=> heap2 = [3, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 37
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [3, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11] : <type 'list'>
=> heap2 = [3, 3, 3, 11, 11, 11, 6, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3, 11] : <type 'list'>
=> heap0 = [3, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 39
ACTION: heaps.heappush(heap2,int3) 
int3 = 1 : <type 'int'>
heap2 = [3, 3, 3, 11, 11, 11, 6, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11, 11] : <type 'list'>
=> heap2 = [1, 3, 3, 11, 11, 11, 3, 11, 11, 11, 11, 3, 11, 6, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 11, 3, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 11, 11] : <type 'list'>
=> heap1 = [3, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 41
ACTION: heaps.heappop(heap0) 
heap0 = [3, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11, 3] : <type 'list'>
=> heap0 = [3, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [3, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12, 11] : <type 'list'>
=> heap0 = [3, 11, 3, 11, 11, 11, 11, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12] : <type 'list'>
==================================================
int3 = 6                                                                # STEP 43
ACTION: int3 = 6 
int3 = 1 : <type 'int'>
=> int3 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 44
ACTION: heaps.heappop(heap1) 
heap1 = [3, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 11] : <type 'list'>
=> heap1 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 45
ACTION: heap0 = heaps.heapnew() 
heap0 = [3, 11, 3, 11, 11, 11, 11, 3, 11, 11, 11, 11, 3, 11, 11, 11, 12, 11, 11, 11, 3, 11, 12, 11, 11, 12] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 46
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3] : <type 'list'>
heap2 = [1, 3, 3, 11, 11, 11, 3, 11, 11, 11, 11, 3, 11, 6, 11, 12, 11, 11, 3, 12, 11, 11, 12, 11, 3, 11, 11, 11, 11] : <type 'list'>
=> heap2 = [3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 12, 12, 3] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 12, 12, 3] : <type 'list'>
=> heap2 = [3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 48
ACTION: heaps.heappop(heap2) 
heap2 = [3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3, 12, 12] : <type 'list'>
=> heap2 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 12, 12] : <type 'list'>
=> heap2 = [11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 3, 11, 11, 11, 3, 12, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 3] : <type 'list'>
=> heap1 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 12, 11, 3, 11, 11, 11, 3, 11, 12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [11, 11, 11, 11, 11, 11, 11, 12, 11, 3, 11, 11, 11, 3, 11, 12] : <type 'list'>
=> heap1 = [11, 11, 11, 11, 11, 11, 11, 12, 12, 3, 11, 11, 11, 3, 11] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 3, 11, 11, 11, 3, 12, 11, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12, 12] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [11, 11, 11, 3, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 12, 12, 11, 11, 11, 11, 11, 11, 11, 3, 11, 11, 11, 3, 11, 12, 12] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e7aab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 24
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0521512032 TOTAL RUNTIME
20 EXECUTED
1878 TOTAL TEST OPERATIONS
29.4328875542 TIME SPENT EXECUTING TEST OPERATIONS
0.234806537628 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3610842228 TIME SPENT CHECKING PROPERTIES
58.793971777 TOTAL TIME SPENT RUNNING SUT
0.0113451480865 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 20                                                                # STEP 0
heap1 = heaps.heapnew()                                                  # STEP 1
heaps.heappush(heap1,int2)                                               # STEP 2
int0 = 6                                                                 # STEP 3
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 4
int1 = 3                                                                 # STEP 5
int2 = 12                                                                # STEP 6
int3 = 11                                                                # STEP 7
heap0 = heaps.heapmerge(heap1,heap1)                                     # STEP 8
heaps.heappush(heap0,int3)                                               # STEP 9
heaps.heappush(heap0,int1)                                              # STEP 10
int4 = 6                                                                # STEP 11
heaps.heappush(heap0,int1)                                              # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
heaps.heappush(heap1,int3)                                              # STEP 14
int3 = 1                                                                # STEP 15
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 16
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 17
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 18
int1 = 4                                                                # STEP 19
heaps.heappop(heap1)                                                    # STEP 20
heaps.heappop(heap1)                                                    # STEP 21
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 22
heaps.heappush(heap0,int2)                                              # STEP 23
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 24
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 25
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 27
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 28
heaps.heappop(heap1)                                                    # STEP 29
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 30
heaps.heappop(heap2)                                                    # STEP 31
int2 = 2                                                                # STEP 32
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 33
heaps.heappop(heap2)                                                    # STEP 34
heaps.heappop(heap0)                                                    # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
heaps.heappush(heap2,int4)                                              # STEP 37
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 38
heaps.heappush(heap2,int3)                                              # STEP 39
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
heaps.heappop(heap0)                                                    # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
int3 = 6                                                                # STEP 43
heaps.heappop(heap1)                                                    # STEP 44
heap0 = heaps.heapnew()                                                 # STEP 45
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 46
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
heaps.heappop(heap2)                                                    # STEP 48
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e7aab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69559.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bc3710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 79 steps

SAVING TEST AS failure.69559.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 5                                                                 # STEP 0
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 1
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 2
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
int0 = 15                                                                # STEP 3
ACTION: int0 = 15 
int0 = None : <type 'NoneType'>
=> int0 = 15 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 4
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                               # STEP 5
ACTION: heaps.heappush(heap1,int3) 
int3 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [2] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [2, 2] : <type 'list'>
==================================================
int1 = 18                                                                # STEP 7
ACTION: int1 = 18 
int1 = None : <type 'NoneType'>
=> int1 = 18 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 8
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2] : <type 'list'>
=> heap2 = [2] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 11
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int3)                                              # STEP 12
ACTION: heaps.heappush(heap2,int3) 
int3 = 2 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [2] : <type 'list'>
==================================================
int3 = 14                                                               # STEP 13
ACTION: int3 = 14 
int3 = 2 : <type 'int'>
=> int3 = 14 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 14
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [2] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [2] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 16
ACTION: heaps.heappush(heap2,int0) 
int0 = 15 : <type 'int'>
heap2 = [2] : <type 'list'>
=> heap2 = [2, 15] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 17
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [2, 15] : <type 'list'>
=> heap2 = [2, 15, 5] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [2, 15, 5] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [2, 2, 15, 5, 15, 5] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 20
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [2, 2, 15, 5, 15, 5] : <type 'list'>
=> heap1 = [2, 2, 5, 5, 15, 5, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [2, 15, 5] : <type 'list'>
heap1 = [2, 2, 5, 5, 15, 5, 15] : <type 'list'>
=> heap1 = [2, 2, 2, 5, 5, 15, 5, 15, 5, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 22
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [2, 15, 5] : <type 'list'>
heap1 = [2, 2, 2, 5, 5, 15, 5, 15, 5, 15] : <type 'list'>
=> heap2 = [2, 2, 2, 2, 5, 5, 15, 5, 15, 5, 15, 5, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 2, 2, 2, 5, 5, 15, 5, 15, 5, 15, 5, 15] : <type 'list'>
=> heap2 = [2, 2, 2, 5, 5, 5, 15, 15, 15, 5, 15, 5] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 24
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [2, 2, 2, 5, 5, 5, 15, 15, 15, 5, 15, 5] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int0 = 17                                                               # STEP 25
ACTION: int0 = 17 
int0 = 15 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 26
ACTION: heaps.heappush(heap1,int1) 
int1 = 18 : <type 'int'>
heap1 = [2, 2, 2, 5, 5, 15, 5, 15, 5, 15] : <type 'list'>
=> heap1 = [2, 2, 2, 5, 5, 15, 5, 15, 5, 15, 18] : <type 'list'>
==================================================
int4 = 8                                                                # STEP 27
ACTION: int4 = 8 
int4 = 5 : <type 'int'>
=> int4 = 8 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 28
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 2, 2, 5, 5, 15, 5, 15, 5, 15, 18] : <type 'list'>
=> heap1 = [2, 5, 2, 5, 5, 15, 5, 15, 18, 15] : <type 'list'>
==================================================
int1 = 18                                                               # STEP 29
ACTION: int1 = 18 
int1 = 18 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 30
ACTION: heaps.heappush(heap2,int3) 
int3 = 14 : <type 'int'>
heap2 = [2, 2, 2, 5, 5, 5, 15, 15, 15, 5, 15, 5] : <type 'list'>
=> heap2 = [2, 2, 2, 5, 5, 5, 15, 15, 15, 5, 15, 5, 14] : <type 'list'>
==================================================
int3 = 10                                                               # STEP 31
ACTION: int3 = 10 
int3 = 14 : <type 'int'>
=> int3 = 10 : <type 'int'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 32
ACTION: heaps.heappush(heap2,int2) 
int2 = 9 : <type 'int'>
heap2 = [2, 2, 2, 5, 5, 5, 15, 15, 15, 5, 15, 5, 14] : <type 'list'>
=> heap2 = [2, 2, 2, 5, 5, 5, 9, 15, 15, 5, 15, 5, 14, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 33
ACTION: heaps.heappop(heap1) 
heap1 = [2, 5, 2, 5, 5, 15, 5, 15, 18, 15] : <type 'list'>
=> heap1 = [2, 5, 5, 5, 5, 15, 15, 15, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 34
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [2, 5, 5, 5, 5, 15, 15, 15, 18] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [2, 2, 2, 5, 5, 5, 9, 15, 15, 5, 15, 5, 14, 15] : <type 'list'>
=> heap2 = [2, 5, 5, 5, 5, 15, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 35
ACTION: heaps.heappush(heap2,int3) 
int3 = 10 : <type 'int'>
heap2 = [2, 5, 5, 5, 5, 15, 15, 15, 18] : <type 'list'>
=> heap2 = [2, 5, 5, 5, 5, 15, 15, 15, 18, 10] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int3 = 11                                                               # STEP 37
ACTION: int3 = 11 
int3 = 10 : <type 'int'>
=> int3 = 11 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [2, 5, 5, 5, 5, 15, 15, 15, 18, 10] : <type 'list'>
=> heap2 = [5, 5, 5, 10, 5, 15, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [2, 5, 5, 5, 5, 15, 15, 15, 18] : <type 'list'>
=> heap1 = [5, 5, 5, 15, 5, 15, 15, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 40
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [5, 5, 5, 15, 5, 15, 15, 18] : <type 'list'>
=> heap1 = [5, 5, 5, 9, 5, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 41
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 5, 9, 5, 15, 15, 18, 15] : <type 'list'>
=> heap1 = [5, 5, 5, 9, 15, 15, 15, 18] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 43
ACTION: int2 = 9 
int2 = 9 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 5, 10, 5, 15, 15, 15, 18] : <type 'list'>
=> heap2 = [5, 5, 5, 10, 18, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 45
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 5, 10, 18, 15, 15, 15] : <type 'list'>
=> heap2 = [5, 10, 5, 15, 18, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 46
ACTION: heaps.heappop(heap1) 
heap1 = [5, 5, 5, 9, 15, 15, 15, 18] : <type 'list'>
=> heap1 = [5, 9, 5, 18, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 9, 5, 18, 15, 15, 15] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 48
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 9, 5, 18, 15, 15, 15] : <type 'list'>
heap2 = [5, 10, 5, 15, 18, 15, 15] : <type 'list'>
=> heap2 = [5, 5, 9, 5, 10, 5, 15, 18, 15, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 49
ACTION: heaps.heappop(heap1) 
heap1 = [5, 9, 5, 18, 15, 15, 15] : <type 'list'>
=> heap1 = [5, 9, 15, 18, 15, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 50
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [5, 9, 15, 18, 15, 15] : <type 'list'>
=> heap1 = [5, 9, 9, 18, 15, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 51
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 52
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 9, 5, 10, 5, 15, 18, 15, 15, 15, 18, 15, 15] : <type 'list'>
=> heap2 = [5, 5, 9, 15, 10, 5, 15, 18, 15, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 53
ACTION: heaps.heappop(heap1) 
heap1 = [5, 9, 9, 18, 15, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 9, 18, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 54
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [9, 15, 9, 18, 15, 15] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [9, 9, 15, 9, 15, 9, 18, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 15, 9, 15, 9, 18, 15, 15, 18, 15, 15] : <type 'list'>
=> heap0 = [9, 9, 15, 15, 15, 9, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 56
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [9, 15, 9, 18, 15, 15] : <type 'list'>
heap0 = [9, 9, 15, 15, 15, 9, 18, 15, 15, 18, 15] : <type 'list'>
heap2 = [5, 5, 9, 15, 10, 5, 15, 18, 15, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [9, 9, 9, 15, 9, 15, 15, 15, 9, 18, 15, 15, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [9, 9, 9, 15, 9, 15, 15, 15, 9, 18, 15, 15, 18, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [9, 9, 9, 15, 15, 15, 15, 15, 9, 18, 15, 15, 18, 15, 15, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 9, 15, 15, 15, 9, 18, 15, 15, 18, 15] : <type 'list'>
=> heap0 = [9, 15, 15, 15, 15, 9, 18, 15, 15, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 9, 9, 15, 15, 15, 15, 15, 9, 18, 15, 15, 18, 15, 15, 18] : <type 'list'>
=> heap2 = [9, 15, 9, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 60
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 9, 18, 15, 15] : <type 'list'>
=> heap1 = [9, 15, 15, 18, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [9, 15, 9, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15, 15] : <type 'list'>
=> heap2 = [9, 15, 15, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 62
ACTION: heaps.heappop(heap1) 
heap1 = [9, 15, 15, 18, 15] : <type 'list'>
=> heap1 = [15, 15, 15, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 15, 18] : <type 'list'>
=> heap1 = [15, 18, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 18, 15] : <type 'list'>
=> heap1 = [15, 18] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 65
ACTION: int2 = 7 
int2 = 9 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 66
ACTION: heaps.heappush(heap2,int2) 
int2 = 7 : <type 'int'>
heap2 = [9, 15, 15, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [7, 15, 9, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15, 15] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 67
ACTION: int2 = 9 
int2 = 7 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 68
ACTION: heaps.heappop(heap0) 
heap0 = [9, 15, 15, 15, 15, 9, 18, 15, 15, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 9, 18, 18, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 15, 9, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15, 15] : <type 'list'>
=> heap2 = [9, 15, 15, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 70
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [15, 18] : <type 'list'>
heap0 = [15, 15, 15, 15, 15, 9, 18, 18, 15] : <type 'list'>
heap2 = [9, 15, 15, 9, 15, 15, 15, 15, 18, 18, 15, 15, 18, 15] : <type 'list'>
=> heap2 = [15, 15, 15, 15, 15, 15, 9, 18, 18, 18, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 71
ACTION: heaps.heappush(heap1,int1) 
int1 = 18 : <type 'int'>
heap1 = [15, 18] : <type 'list'>
=> heap1 = [15, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [15, 18, 18] : <type 'list'>
=> heap1 = [15, 15, 18, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [15, 18, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 74
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 9, 18, 18, 15] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 9, 18, 18] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 75
ACTION: heaps.heappop(heap0) 
heap0 = [15, 15, 15, 15, 15, 9, 18, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 18, 15, 9, 18] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 76
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [15, 15, 15, 15, 15, 15, 9, 18, 18, 18, 15] : <type 'list'>
heap0 = [15, 15, 15, 18, 15, 9, 18] : <type 'list'>
=> heap0 = [15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 18, 18, 18, 15, 18, 15, 9, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 77
ACTION: heaps.heappush(heap1,int3) 
int3 = 11 : <type 'int'>
heap1 = [15, 18, 18, 18, 18] : <type 'list'>
=> heap1 = [11, 18, 15, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 15, 15, 15, 15, 15, 9, 15, 15, 15, 18, 18, 18, 15, 18, 15, 9, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [15, 15, 15, 15, 15, 15, 9, 9, 15, 15, 18, 18, 18, 15, 18, 15, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d42950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #53 (0:00:30.010540) Tue May  2 19:51:31 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 15
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0779678822 TOTAL RUNTIME
20 EXECUTED
1894 TOTAL TEST OPERATIONS
29.2794623375 TIME SPENT EXECUTING TEST OPERATIONS
0.244043827057 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.2563354969 TIME SPENT CHECKING PROPERTIES
58.5357978344 TOTAL TIME SPENT RUNNING SUT
0.0113298892975 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 5                                                                 # STEP 0
int2 = 9                                                                 # STEP 1
int3 = 2                                                                 # STEP 2
int0 = 15                                                                # STEP 3
heap1 = heaps.heapnew()                                                  # STEP 4
heaps.heappush(heap1,int3)                                               # STEP 5
heap2 = heaps.heapmerge(heap1,heap1)                                     # STEP 6
int1 = 18                                                                # STEP 7
assert (min(heap1) == heaps.heappop(heap1))                              # STEP 8
assert (min(heap2) == heaps.heappop(heap2))                              # STEP 9
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
heaps.heappop(heap2)                                                    # STEP 11
heaps.heappush(heap2,int3)                                              # STEP 12
int3 = 14                                                               # STEP 13
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
heaps.heappush(heap2,int0)                                              # STEP 16
heaps.heappush(heap2,int4)                                              # STEP 17
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 18
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 19
heaps.heappush(heap1,int4)                                              # STEP 20
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 22
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 24
int0 = 17                                                               # STEP 25
heaps.heappush(heap1,int1)                                              # STEP 26
int4 = 8                                                                # STEP 27
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 28
int1 = 18                                                               # STEP 29
heaps.heappush(heap2,int3)                                              # STEP 30
int3 = 10                                                               # STEP 31
heaps.heappush(heap2,int2)                                              # STEP 32
heaps.heappop(heap1)                                                    # STEP 33
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 34
heaps.heappush(heap2,int3)                                              # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
int3 = 11                                                               # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
heaps.heappush(heap1,int2)                                              # STEP 40
heaps.heappop(heap0)                                                    # STEP 41
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 42
int2 = 9                                                                # STEP 43
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 44
heaps.heappop(heap2)                                                    # STEP 45
heaps.heappop(heap1)                                                    # STEP 46
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 47
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 48
heaps.heappop(heap1)                                                    # STEP 49
heaps.heappush(heap1,int2)                                              # STEP 50
heaps.heappop(heap0)                                                    # STEP 51
heaps.heappop(heap2)                                                    # STEP 52
heaps.heappop(heap1)                                                    # STEP 53
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 58
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 59
heaps.heappop(heap1)                                                    # STEP 60
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 61
heaps.heappop(heap1)                                                    # STEP 62
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 63
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
int2 = 7                                                                # STEP 65
heaps.heappush(heap2,int2)                                              # STEP 66
int2 = 9                                                                # STEP 67
heaps.heappop(heap0)                                                    # STEP 68
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 69
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 70
heaps.heappush(heap1,int1)                                              # STEP 71
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 72
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
heaps.heappop(heap0)                                                    # STEP 74
heaps.heappop(heap0)                                                    # STEP 75
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 76
heaps.heappush(heap1,int3)                                              # STEP 77
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 78
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d42950>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.861.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #13 STEP #96 (0:00:30.004218) Fri Apr 28 07:30:03 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d7dc20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 43 steps

SAVING TEST AS failure.861.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 1                                                                 # STEP 0
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int1 = 13                                                                # STEP 1
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
int4 = 10                                                                # STEP 3
ACTION: int4 = 10 
int4 = None : <type 'NoneType'>
=> int4 = 10 : <type 'int'>
==================================================
int3 = 2                                                                 # STEP 4
ACTION: int3 = 2 
int3 = None : <type 'NoneType'>
=> int3 = 2 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 5
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                               # STEP 6
ACTION: heaps.heappush(heap2,int1) 
int1 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
int1 = 19                                                                # STEP 7
ACTION: int1 = 19 
int1 = 13 : <type 'int'>
=> int1 = 19 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                               # STEP 8
ACTION: heaps.heappush(heap2,int1) 
int1 = 19 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [13, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 9
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [13, 19] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [13, 13, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 10
ACTION: heaps.heappush(heap0,int2) 
int2 = 1 : <type 'int'>
heap0 = [13, 13, 19, 19] : <type 'list'>
=> heap0 = [1, 13, 19, 19, 13] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 11
ACTION: int2 = 5 
int2 = 1 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [13, 19] : <type 'list'>
=> heap2 = [13, 13, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 13
ACTION: heaps.heappush(heap2,int1) 
int1 = 19 : <type 'int'>
heap2 = [13, 13, 19, 19] : <type 'list'>
=> heap2 = [13, 13, 19, 19, 19] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 14
ACTION: int1 = 7 
int1 = 19 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 15
ACTION: heaps.heappush(heap0,int1) 
int1 = 7 : <type 'int'>
heap0 = [1, 13, 19, 19, 13] : <type 'list'>
=> heap0 = [1, 13, 7, 19, 13, 19] : <type 'list'>
==================================================
int1 = 5                                                                # STEP 16
ACTION: int1 = 5 
int1 = 7 : <type 'int'>
=> int1 = 5 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [13, 13, 19, 19, 19] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [13, 13, 13, 13, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 18
ACTION: heaps.heappush(heap0,int3) 
int3 = 2 : <type 'int'>
heap0 = [1, 13, 7, 19, 13, 19] : <type 'list'>
=> heap0 = [1, 13, 2, 19, 13, 19, 7] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 19
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [1, 13, 2, 19, 13, 19, 7] : <type 'list'>
heap1 = [13, 13, 13, 13, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [1, 13, 2, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 20
ACTION: heap1 = heaps.heapnew() 
heap1 = [13, 13, 13, 13, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int3 = 5                                                                # STEP 21
ACTION: int3 = 5 
int3 = 2 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 22
ACTION: heaps.heappush(heap0,int4) 
int4 = 10 : <type 'int'>
heap0 = [1, 13, 2, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [1, 10, 2, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19, 13] : <type 'list'>
==================================================
int4 = 17                                                               # STEP 23
ACTION: int4 = 17 
int4 = 10 : <type 'int'>
=> int4 = 17 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 24
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 10, 2, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19, 13] : <type 'list'>
heap2 = [13, 13, 19, 19, 19] : <type 'list'>
=> heap2 = [1, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 25
ACTION: heaps.heappop(heap0) 
heap0 = [1, 10, 2, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19, 13] : <type 'list'>
=> heap0 = [2, 10, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 26
ACTION: heaps.heappush(heap1,int1) 
int1 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 27
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [5] : <type 'list'>
heap0 = [2, 10, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [2, 5, 10, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 28
ACTION: heaps.heappush(heap0,int3) 
int3 = 5 : <type 'int'>
heap0 = [2, 5, 10, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [2, 5, 10, 5, 13, 13, 13, 13, 13, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [2, 5, 10, 5, 13, 13, 13, 13, 13, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [5] : <type 'list'>
=> heap0 = [2, 5, 5, 10, 5, 13, 13, 13, 13, 13, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 30
ACTION: heaps.heappush(heap0,int3) 
int3 = 5 : <type 'int'>
heap0 = [2, 5, 5, 10, 5, 13, 13, 13, 13, 13, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [2, 5, 5, 10, 5, 13, 13, 13, 13, 5, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19, 13] : <type 'list'>
==================================================
int1 = 11                                                               # STEP 31
ACTION: int1 = 11 
int1 = 5 : <type 'int'>
=> int1 = 11 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 32
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [5] : <type 'list'>
=> heap1 = [5, 5] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 33
ACTION: heaps.heappush(heap2,int4) 
int4 = 17 : <type 'int'>
heap2 = [1, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 19, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19] : <type 'list'>
=> heap2 = [1, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19, 19] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 34
ACTION: int3 = 8 
int3 = 5 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
int4 = 3                                                                # STEP 35
ACTION: int4 = 3 
int4 = 17 : <type 'int'>
=> int4 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [5, 5] : <type 'list'>
heap2 = [1, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [1, 5, 5, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 37
ACTION: heap0 = heaps.heapnew() 
heap0 = [2, 5, 5, 10, 5, 13, 13, 13, 13, 5, 13, 19, 7, 19, 19, 19, 19, 19, 19, 19, 13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 38
ACTION: heaps.heappush(heap0,int0) 
int0 = 18 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 39
ACTION: heaps.heappush(heap0,int1) 
int1 = 11 : <type 'int'>
heap0 = [18] : <type 'list'>
=> heap0 = [11, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [1, 5, 5, 10, 2, 13, 13, 13, 13, 13, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [5, 2, 5, 10, 13, 13, 13, 13, 13, 19, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19] : <type 'list'>
==================================================
int1 = 9                                                                # STEP 41
ACTION: int1 = 9 
int1 = 11 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 2, 5, 10, 13, 13, 13, 13, 13, 19, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [2, 10, 5, 13, 13, 13, 13, 19, 13, 19, 13, 19, 13, 17, 7, 19, 19, 19, 19, 19, 19, 13, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d7f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 44
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0644369125 TOTAL RUNTIME
26 EXECUTED
2299 TOTAL TEST OPERATIONS
30.4592046738 TIME SPENT EXECUTING TEST OPERATIONS
0.0790908336639 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.8740549088 TIME SPENT CHECKING PROPERTIES
59.3332595825 TOTAL TIME SPENT RUNNING SUT
0.0157754421234 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int2 = 1                                                                 # STEP 0
int1 = 13                                                                # STEP 1
int0 = 18                                                                # STEP 2
int4 = 10                                                                # STEP 3
int3 = 2                                                                 # STEP 4
heap2 = heaps.heapnew()                                                  # STEP 5
heaps.heappush(heap2,int1)                                               # STEP 6
int1 = 19                                                                # STEP 7
heaps.heappush(heap2,int1)                                               # STEP 8
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 9
heaps.heappush(heap0,int2)                                              # STEP 10
int2 = 5                                                                # STEP 11
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 12
heaps.heappush(heap2,int1)                                              # STEP 13
int1 = 7                                                                # STEP 14
heaps.heappush(heap0,int1)                                              # STEP 15
int1 = 5                                                                # STEP 16
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heaps.heappush(heap0,int3)                                              # STEP 18
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 19
heap1 = heaps.heapnew()                                                 # STEP 20
int3 = 5                                                                # STEP 21
heaps.heappush(heap0,int4)                                              # STEP 22
int4 = 17                                                               # STEP 23
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 24
heaps.heappop(heap0)                                                    # STEP 25
heaps.heappush(heap1,int1)                                              # STEP 26
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 27
heaps.heappush(heap0,int3)                                              # STEP 28
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 29
heaps.heappush(heap0,int3)                                              # STEP 30
int1 = 11                                                               # STEP 31
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 32
heaps.heappush(heap2,int4)                                              # STEP 33
int3 = 8                                                                # STEP 34
int4 = 3                                                                # STEP 35
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 36
heap0 = heaps.heapnew()                                                 # STEP 37
heaps.heappush(heap0,int0)                                              # STEP 38
heaps.heappush(heap0,int1)                                              # STEP 39
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 40
int1 = 9                                                                # STEP 41
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 42
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103d7f6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

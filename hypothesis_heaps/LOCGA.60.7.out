Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.69240.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10346c4d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 65 steps

SAVING TEST AS failure.69240.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 17                                                                # STEP 0
ACTION: int1 = 17 
int1 = None : <type 'NoneType'>
=> int1 = 17 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                  # STEP 1
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int2 = 1                                                                 # STEP 2
ACTION: int2 = 1 
int2 = None : <type 'NoneType'>
=> int2 = 1 : <type 'int'>
==================================================
int0 = 7                                                                 # STEP 3
ACTION: int0 = 7 
int0 = None : <type 'NoneType'>
=> int0 = 7 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                     # STEP 4
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapnew()                                                  # STEP 5
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int3 = 9                                                                 # STEP 6
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
int4 = 19                                                                # STEP 7
ACTION: int4 = 19 
int4 = None : <type 'NoneType'>
=> int4 = 19 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 8
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                               # STEP 9
ACTION: heaps.heappush(heap2,int0) 
int0 = 7 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [7] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 13                                                               # STEP 11
ACTION: int0 = 13 
int0 = 7 : <type 'int'>
=> int0 = 13 : <type 'int'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 12
ACTION: heaps.heappush(heap2,int1) 
int1 = 17 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [17] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 4                                                                # STEP 14
ACTION: int1 = 4 
int1 = 17 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 16
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 17
ACTION: heaps.heappush(heap2,int0) 
int0 = 13 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 18
ACTION: heaps.heappush(heap2,int1) 
int1 = 4 : <type 'int'>
heap2 = [13] : <type 'list'>
=> heap2 = [4, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 19
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 20
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 2                                                                # STEP 21
ACTION: int1 = 2 
int1 = 4 : <type 'int'>
=> int1 = 2 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [4, 13] : <type 'list'>
=> heap0 = [4, 13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [4, 13] : <type 'list'>
=> heap2 = [13] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 24
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 25
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 7                                                                # STEP 26
ACTION: int0 = 7 
int0 = 13 : <type 'int'>
=> int0 = 7 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 13] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [4, 4, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 28
ACTION: heaps.heappop(heap2) 
heap2 = [4, 4, 13, 13] : <type 'list'>
=> heap2 = [4, 13, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [4, 13, 13] : <type 'list'>
heap0 = [4, 13] : <type 'list'>
=> heap0 = [4, 4, 13, 13, 13, 13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [4, 4, 13, 13, 13, 13] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [4, 4, 4, 4, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 4, 4, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 32
ACTION: heaps.heappop(heap2) 
heap2 = [4, 13, 13] : <type 'list'>
=> heap2 = [13, 13] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 33
ACTION: heaps.heappush(heap2,int4) 
int4 = 19 : <type 'int'>
heap2 = [13, 13] : <type 'list'>
=> heap2 = [13, 13, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 34
ACTION: heaps.heappush(heap2,int2) 
int2 = 1 : <type 'int'>
heap2 = [13, 13, 19] : <type 'list'>
=> heap2 = [1, 13, 19, 13] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 35
ACTION: heaps.heappush(heap1,int0) 
int0 = 7 : <type 'int'>
heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [4, 4, 4, 13, 13, 7, 13, 13, 13, 13, 13, 13] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [1, 13, 19, 13] : <type 'list'>
heap1 = [4, 4, 4, 13, 13, 7, 13, 13, 13, 13, 13, 13] : <type 'list'>
=> heap1 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 19, 13] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [1, 13, 19, 13] : <type 'list'>
=> heap2 = [13, 13, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 38
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 19, 13] : <type 'list'>
heap2 = [13, 13, 19] : <type 'list'>
heap0 = [4, 4, 13, 13, 13, 13] : <type 'list'>
=> heap0 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [13, 13, 19] : <type 'list'>
heap0 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19] : <type 'list'>
heap1 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 19, 13] : <type 'list'>
=> heap1 = [1, 4, 4, 4, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 40
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 4, 4, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19] : <type 'list'>
=> heap0 = [4, 4, 4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 41
ACTION: heaps.heappush(heap0,int2) 
int2 = 1 : <type 'int'>
heap0 = [4, 4, 4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13] : <type 'list'>
=> heap0 = [1, 4, 4, 4, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 19, 19, 13, 13] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 42
ACTION: int4 = 5 
int4 = 19 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
int0 = 15                                                               # STEP 43
ACTION: int0 = 15 
int0 = 7 : <type 'int'>
=> int0 = 15 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 4, 4, 4, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13, 19] : <type 'list'>
=> heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 13, 13, 19, 19, 13] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 45
ACTION: heaps.heappop(heap0) 
heap0 = [1, 4, 4, 4, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 19, 19, 13, 13] : <type 'list'>
=> heap0 = [4, 4, 4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 46
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 4, 4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19, 13] : <type 'list'>
=> heap0 = [4, 7, 4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 47
ACTION: heaps.heappush(heap1,int0) 
int0 = 15 : <type 'int'>
heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 13, 13, 19, 19, 13] : <type 'list'>
=> heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 13, 13, 19, 19, 13, 15] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 48
ACTION: int0 = 1 
int0 = 15 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 7, 4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 19] : <type 'list'>
=> heap0 = [4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 13, 13, 19, 19, 13, 15] : <type 'list'>
=> heap1 = [4, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 19] : <type 'list'>
heap2 = [13, 13, 19] : <type 'list'>
=> heap0 = [4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 52
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [4, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13] : <type 'list'>
=> heap1 = [4, 4, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13, 19, 15, 13, 19, 19, 13] : <type 'list'>
==================================================
int2 = 16                                                               # STEP 53
ACTION: int2 = 16 
int2 = 1 : <type 'int'>
=> int2 = 16 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 54
ACTION: heaps.heappop(heap2) 
heap2 = [13, 13, 19] : <type 'list'>
=> heap2 = [13, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 19, 19] : <type 'list'>
=> heap0 = [7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19, 13, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [4, 4, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13, 19, 15, 13, 19, 19, 13] : <type 'list'>
=> heap1 = [4, 4, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13, 19, 15, 13, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 57
ACTION: heaps.heappop(heap1) 
heap1 = [4, 4, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 13, 19, 19, 13, 19, 15, 13, 19, 19] : <type 'list'>
=> heap1 = [4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 19, 19, 19, 13, 19, 15, 13, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 58
ACTION: heaps.heappop(heap1) 
heap1 = [4, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 15, 19, 19, 19, 13, 19, 15, 13, 19] : <type 'list'>
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 15, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 19, 19, 19, 19, 13, 19, 15, 13] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 59
ACTION: heaps.heappush(heap2,int0) 
int0 = 1 : <type 'int'>
heap2 = [13, 19] : <type 'list'>
=> heap2 = [1, 19, 13] : <type 'list'>
==================================================
int0 = 4                                                                # STEP 60
ACTION: int0 = 4 
int0 = 1 : <type 'int'>
=> int0 = 4 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 61
ACTION: heaps.heappop(heap2) 
heap2 = [1, 19, 13] : <type 'list'>
=> heap2 = [13, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 62
ACTION: heaps.heappop(heap0) 
heap0 = [7, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19, 13, 19] : <type 'list'>
=> heap0 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19, 19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 19, 13, 19, 19] : <type 'list'>
=> heap0 = [13, 13, 13, 13, 13, 13, 13, 19, 13, 13, 13, 13, 13, 19, 13, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 15, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 19, 19, 19, 19, 13, 19, 15, 13] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 15, 13, 4, 13, 13, 13, 13, 13, 13, 7, 13, 13, 13, 13, 13, 19, 19, 19, 19, 19, 13, 19, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10344f5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #10 STEP #91 (0:00:30.029557) Tue May  2 18:58:04 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 77
STOPPING TESTING DUE TO TIMEOUT
16.8053244592 PERCENT COVERED
60.0580229759 TOTAL RUNTIME
20 EXECUTED
1942 TOTAL TEST OPERATIONS
29.3728830814 TIME SPENT EXECUTING TEST OPERATIONS
0.253670454025 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3114199638 TIME SPENT CHECKING PROPERTIES
58.6843030453 TOTAL TIME SPENT RUNNING SUT
0.0107131004333 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 17                                                                # STEP 0
heap2 = heaps.heapnew()                                                  # STEP 1
int2 = 1                                                                 # STEP 2
int0 = 7                                                                 # STEP 3
heaps.heappop(heap2)                                                     # STEP 4
heap0 = heaps.heapnew()                                                  # STEP 5
int3 = 9                                                                 # STEP 6
int4 = 19                                                                # STEP 7
heaps.heappop(heap0)                                                     # STEP 8
heaps.heappush(heap2,int0)                                               # STEP 9
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 10
int0 = 13                                                               # STEP 11
heaps.heappush(heap2,int1)                                              # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
int1 = 4                                                                # STEP 14
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 15
heaps.heappop(heap2)                                                    # STEP 16
heaps.heappush(heap2,int0)                                              # STEP 17
heaps.heappush(heap2,int1)                                              # STEP 18
heaps.heappop(heap0)                                                    # STEP 19
heaps.heappop(heap0)                                                    # STEP 20
int1 = 2                                                                # STEP 21
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 22
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 23
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 24
heaps.heappop(heap2)                                                    # STEP 25
int0 = 7                                                                # STEP 26
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
heaps.heappop(heap2)                                                    # STEP 28
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 29
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 30
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 31
heaps.heappop(heap2)                                                    # STEP 32
heaps.heappush(heap2,int4)                                              # STEP 33
heaps.heappush(heap2,int2)                                              # STEP 34
heaps.heappush(heap1,int0)                                              # STEP 35
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 38
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 39
heaps.heappop(heap0)                                                    # STEP 40
heaps.heappush(heap0,int2)                                              # STEP 41
int4 = 5                                                                # STEP 42
int0 = 15                                                               # STEP 43
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 44
heaps.heappop(heap0)                                                    # STEP 45
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 46
heaps.heappush(heap1,int0)                                              # STEP 47
int0 = 1                                                                # STEP 48
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 52
int2 = 16                                                               # STEP 53
heaps.heappop(heap2)                                                    # STEP 54
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 55
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 56
heaps.heappop(heap1)                                                    # STEP 57
heaps.heappop(heap1)                                                    # STEP 58
heaps.heappush(heap2,int0)                                              # STEP 59
int0 = 4                                                                # STEP 60
heaps.heappop(heap2)                                                    # STEP 61
heaps.heappop(heap0)                                                    # STEP 62
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 63
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 64
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10344f5a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

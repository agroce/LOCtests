Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.440.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104ccf0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 62 steps

SAVING TEST AS failure.440.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int4 = 20                                                                # STEP 0
ACTION: int4 = 20 
int4 = None : <type 'NoneType'>
=> int4 = 20 : <type 'int'>
==================================================
int3 = 12                                                                # STEP 1
ACTION: int3 = 12 
int3 = None : <type 'NoneType'>
=> int3 = 12 : <type 'int'>
==================================================
int0 = 18                                                                # STEP 2
ACTION: int0 = 18 
int0 = None : <type 'NoneType'>
=> int0 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 3
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 13                                                                # STEP 4
ACTION: int1 = 13 
int1 = None : <type 'NoneType'>
=> int1 = 13 : <type 'int'>
==================================================
int2 = 8                                                                 # STEP 5
ACTION: int2 = 8 
int2 = None : <type 'NoneType'>
=> int2 = 8 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 6
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                               # STEP 7
ACTION: heaps.heappush(heap1,int2) 
int2 = 8 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
int2 = 8                                                                 # STEP 8
ACTION: int2 = 8 
int2 = 8 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [8] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [8] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 10
ACTION: heaps.heappush(heap1,int0) 
int0 = 18 : <type 'int'>
heap1 = [8] : <type 'list'>
=> heap1 = [8, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 12
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [18] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 13
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 14
ACTION: int0 = 19 
int0 = 18 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 15
ACTION: heaps.heappush(heap2,int3) 
int3 = 12 : <type 'int'>
heap2 = [8] : <type 'list'>
=> heap2 = [8, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 16
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [8, 12] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 17
ACTION: heaps.heappush(heap1,int1) 
int1 = 13 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [13] : <type 'list'>
==================================================
int1 = 12                                                               # STEP 18
ACTION: int1 = 12 
int1 = 13 : <type 'int'>
=> int1 = 12 : <type 'int'>
==================================================
int3 = 2                                                                # STEP 19
ACTION: int3 = 2 
int3 = 12 : <type 'int'>
=> int3 = 2 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 20
ACTION: heap1 = heaps.heapnew() 
heap1 = [13] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 21
ACTION: heaps.heappush(heap1,int3) 
int3 = 2 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [2] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 22
ACTION: int3 = 1 
int3 = 2 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 23
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [2] : <type 'list'>
=> heap0 = [2] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 25
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [8, 12] : <type 'list'>
heap0 = [2] : <type 'list'>
heap1 = [2] : <type 'list'>
=> heap1 = [2, 8, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 26
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [2, 8, 12] : <type 'list'>
heap0 = [2] : <type 'list'>
=> heap0 = [2, 2, 8, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 27
ACTION: heaps.heappush(heap0,int3) 
int3 = 1 : <type 'int'>
heap0 = [2, 2, 8, 12] : <type 'list'>
=> heap0 = [1, 2, 8, 12, 2] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 28
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [1, 2, 8, 12, 2] : <type 'list'>
=> heap0 = [1, 2, 8, 12, 2, 20] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [8, 12] : <type 'list'>
heap1 = [2, 8, 12] : <type 'list'>
=> heap1 = [2, 8, 8, 12, 12] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 30
ACTION: heaps.heappop(heap2) 
heap2 = [8, 12] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [2, 8, 8, 12, 12] : <type 'list'>
=> heap1 = [8, 12, 8, 12] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 32
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [12] : <type 'list'>
heap1 = [8, 12, 8, 12] : <type 'list'>
=> heap2 = [8, 12, 12, 8, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 33
ACTION: heaps.heappush(heap0,int0) 
int0 = 19 : <type 'int'>
heap0 = [1, 2, 8, 12, 2, 20] : <type 'list'>
=> heap0 = [1, 2, 8, 12, 2, 20, 19] : <type 'list'>
==================================================
int0 = 1                                                                # STEP 34
ACTION: int0 = 1 
int0 = 19 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
int3 = 7                                                                # STEP 35
ACTION: int3 = 7 
int3 = 1 : <type 'int'>
=> int3 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 36
ACTION: heaps.heappush(heap0,int4) 
int4 = 20 : <type 'int'>
heap0 = [1, 2, 8, 12, 2, 20, 19] : <type 'list'>
=> heap0 = [1, 2, 8, 12, 2, 20, 19, 20] : <type 'list'>
==================================================
int4 = 5                                                                # STEP 37
ACTION: int4 = 5 
int4 = 20 : <type 'int'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 38
ACTION: heaps.heappush(heap1,int0) 
int0 = 1 : <type 'int'>
heap1 = [8, 12, 8, 12] : <type 'list'>
=> heap1 = [1, 8, 8, 12, 12] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [1, 8, 8, 12, 12] : <type 'list'>
heap0 = [1, 2, 8, 12, 2, 20, 19, 20] : <type 'list'>
=> heap1 = [1, 1, 2, 8, 8, 8, 12, 12, 12, 2, 20, 19, 20] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 40
ACTION: heaps.heappush(heap1,int3) 
int3 = 7 : <type 'int'>
heap1 = [1, 1, 2, 8, 8, 8, 12, 12, 12, 2, 20, 19, 20] : <type 'list'>
=> heap1 = [1, 1, 2, 8, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 41
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [1, 2, 8, 12, 2, 20, 19, 20] : <type 'list'>
heap2 = [8, 12, 12, 8, 12] : <type 'list'>
=> heap0 = [1, 2, 8, 8, 12, 2, 12, 12, 8, 12, 20, 19, 20] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 42
ACTION: heaps.heappush(heap2,int4) 
int4 = 5 : <type 'int'>
heap2 = [8, 12, 12, 8, 12] : <type 'list'>
=> heap2 = [5, 12, 8, 8, 12, 12] : <type 'list'>
==================================================
int4 = 10                                                               # STEP 43
ACTION: int4 = 10 
int4 = 5 : <type 'int'>
=> int4 = 10 : <type 'int'>
==================================================
int3 = 17                                                               # STEP 44
ACTION: int3 = 17 
int3 = 7 : <type 'int'>
=> int3 = 17 : <type 'int'>
==================================================
int0 = 5                                                                # STEP 45
ACTION: int0 = 5 
int0 = 1 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 46
ACTION: heaps.heappush(heap1,int1) 
int1 = 12 : <type 'int'>
heap1 = [1, 1, 2, 8, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12] : <type 'list'>
=> heap1 = [1, 1, 2, 8, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12, 12] : <type 'list'>
==================================================
int1 = 9                                                                # STEP 47
ACTION: int1 = 9 
int1 = 12 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 48
ACTION: heaps.heappush(heap2,int4) 
int4 = 10 : <type 'int'>
heap2 = [5, 12, 8, 8, 12, 12] : <type 'list'>
=> heap2 = [5, 12, 8, 8, 12, 12, 10] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 49
ACTION: heaps.heappop(heap1) 
heap1 = [1, 1, 2, 8, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12, 12] : <type 'list'>
=> heap1 = [1, 8, 2, 12, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12] : <type 'list'>
==================================================
int4 = 1                                                                # STEP 50
ACTION: int4 = 1 
int4 = 10 : <type 'int'>
=> int4 = 1 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [1, 8, 2, 12, 8, 8, 7, 12, 12, 2, 20, 19, 20, 12] : <type 'list'>
=> heap1 = [2, 8, 7, 12, 8, 8, 12, 12, 12, 2, 20, 19, 20] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [5, 12, 8, 8, 12, 12, 10] : <type 'list'>
=> heap2 = [5, 5, 12, 8, 8, 12, 12, 10, 12, 8, 8, 12, 12, 10] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [2, 8, 7, 12, 8, 8, 12, 12, 12, 2, 20, 19, 20] : <type 'list'>
heap2 = [5, 5, 12, 8, 8, 12, 12, 10, 12, 8, 8, 12, 12, 10] : <type 'list'>
=> heap1 = [2, 5, 5, 8, 7, 12, 8, 8, 12, 12, 12, 2, 12, 8, 8, 12, 12, 10, 12, 8, 8, 12, 12, 10, 20, 19, 20] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 5, 5, 8, 7, 12, 8, 8, 12, 12, 12, 2, 12, 8, 8, 12, 12, 10, 12, 8, 8, 12, 12, 10, 20, 19, 20] : <type 'list'>
=> heap1 = [5, 7, 5, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 8, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [5, 7, 5, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 8, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20, 19] : <type 'list'>
=> heap1 = [5, 7, 8, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 19, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [5, 5, 12, 8, 8, 12, 12, 10, 12, 8, 8, 12, 12, 10] : <type 'list'>
=> heap2 = [5, 8, 12, 10, 8, 12, 12, 10, 12, 8, 8, 12, 12] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 57
ACTION: heaps.heappush(heap0,int2) 
int2 = 8 : <type 'int'>
heap0 = [1, 2, 8, 8, 12, 2, 12, 12, 8, 12, 20, 19, 20] : <type 'list'>
=> heap0 = [1, 2, 8, 8, 12, 2, 8, 12, 8, 12, 20, 19, 20, 12] : <type 'list'>
==================================================
int2 = 18                                                               # STEP 58
ACTION: int2 = 18 
int2 = 8 : <type 'int'>
=> int2 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 59
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [1, 2, 8, 8, 12, 2, 8, 12, 8, 12, 20, 19, 20, 12] : <type 'list'>
heap2 = [5, 8, 12, 10, 8, 12, 12, 10, 12, 8, 8, 12, 12] : <type 'list'>
=> heap2 = [1, 1, 2, 2, 8, 8, 8, 8, 12, 2, 8, 12, 8, 12, 12, 2, 8, 12, 8, 12, 20, 19, 20, 12, 20, 19, 20, 12] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 60
ACTION: heap0 = heaps.heapmerge(heap1,heap1) 
heap1 = [5, 7, 8, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 19, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20] : <type 'list'>
heap0 = [1, 2, 8, 8, 12, 2, 8, 12, 8, 12, 20, 19, 20, 12] : <type 'list'>
=> heap0 = [5, 5, 7, 7, 8, 8, 8, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 12, 12, 8, 8, 12, 8, 12, 2, 12, 19, 8, 12, 12, 10, 12, 19, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20, 20, 8, 12, 12, 10, 20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [5, 5, 7, 7, 8, 8, 8, 8, 12, 12, 8, 8, 12, 8, 12, 2, 12, 12, 12, 8, 8, 12, 8, 12, 2, 12, 19, 8, 12, 12, 10, 12, 19, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20, 20, 8, 12, 12, 10, 20] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [5, 7, 7, 8, 8, 8, 8, 2, 12, 12, 8, 8, 12, 8, 12, 12, 12, 12, 12, 8, 8, 12, 8, 12, 2, 12, 19, 8, 12, 12, 10, 20, 19, 8, 12, 12, 10, 12, 20, 8, 12, 12, 10, 20, 20, 8, 12, 12, 10] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cf1dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #13 STEP #77 (0:00:30.012837) Fri Apr 28 06:22:38 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 81
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0420329571 TOTAL RUNTIME
25 EXECUTED
2443 TOTAL TEST OPERATIONS
29.8967945576 TIME SPENT EXECUTING TEST OPERATIONS
0.0863893032074 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.1962423325 TIME SPENT CHECKING PROPERTIES
59.09303689 TOTAL TIME SPENT RUNNING SUT
0.0127620697021 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int4 = 20                                                                # STEP 0
int3 = 12                                                                # STEP 1
int0 = 18                                                                # STEP 2
heap0 = heaps.heapnew()                                                  # STEP 3
int1 = 13                                                                # STEP 4
int2 = 8                                                                 # STEP 5
heap1 = heaps.heapnew()                                                  # STEP 6
heaps.heappush(heap1,int2)                                               # STEP 7
int2 = 8                                                                 # STEP 8
heap2 = heaps.heapmerge(heap0,heap1)                                     # STEP 9
heaps.heappush(heap1,int0)                                              # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 12
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 13
int0 = 19                                                               # STEP 14
heaps.heappush(heap2,int3)                                              # STEP 15
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 16
heaps.heappush(heap1,int1)                                              # STEP 17
int1 = 12                                                               # STEP 18
int3 = 2                                                                # STEP 19
heap1 = heaps.heapnew()                                                 # STEP 20
heaps.heappush(heap1,int3)                                              # STEP 21
int3 = 1                                                                # STEP 22
heaps.heappop(heap0)                                                    # STEP 23
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 24
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 25
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 26
heaps.heappush(heap0,int3)                                              # STEP 27
heaps.heappush(heap0,int4)                                              # STEP 28
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 29
heaps.heappop(heap2)                                                    # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 32
heaps.heappush(heap0,int0)                                              # STEP 33
int0 = 1                                                                # STEP 34
int3 = 7                                                                # STEP 35
heaps.heappush(heap0,int4)                                              # STEP 36
int4 = 5                                                                # STEP 37
heaps.heappush(heap1,int0)                                              # STEP 38
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 39
heaps.heappush(heap1,int3)                                              # STEP 40
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 41
heaps.heappush(heap2,int4)                                              # STEP 42
int4 = 10                                                               # STEP 43
int3 = 17                                                               # STEP 44
int0 = 5                                                                # STEP 45
heaps.heappush(heap1,int1)                                              # STEP 46
int1 = 9                                                                # STEP 47
heaps.heappush(heap2,int4)                                              # STEP 48
heaps.heappop(heap1)                                                    # STEP 49
int4 = 1                                                                # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 52
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 53
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heaps.heappush(heap0,int2)                                              # STEP 57
int2 = 18                                                               # STEP 58
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 59
heap0 = heaps.heapmerge(heap1,heap1)                                    # STEP 60
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cf1dd0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

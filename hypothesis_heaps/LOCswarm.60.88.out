Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.46355.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #12 STEP #69 (0:00:30.000313) Mon May  1 03:17:22 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e5d248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 61 steps

SAVING TEST AS failure.46355.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap2 = heaps.heapnew()                                                  # STEP 0
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 1
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 3                                                                 # STEP 2
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
int2 = 15                                                                # STEP 3
ACTION: int2 = 15 
int2 = None : <type 'NoneType'>
=> int2 = 15 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 4
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                     # STEP 5
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
int1 = 19                                                                # STEP 8
ACTION: int1 = 19 
int1 = None : <type 'NoneType'>
=> int1 = 19 : <type 'int'>
==================================================
int4 = 5                                                                 # STEP 9
ACTION: int4 = 5 
int4 = None : <type 'NoneType'>
=> int4 = 5 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 10
ACTION: heaps.heappush(heap1,int4) 
int4 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 12
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
int4 = 6                                                                # STEP 13
ACTION: int4 = 6 
int4 = 5 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 14
ACTION: heaps.heappush(heap1,int1) 
int1 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 16
ACTION: heaps.heappush(heap1,int1) 
int1 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 17
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 18
ACTION: heaps.heappush(heap2,int0) 
int0 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 19
ACTION: heaps.heappush(heap2,int2) 
int2 = 15 : <type 'int'>
heap2 = [3] : <type 'list'>
=> heap2 = [3, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 15] : <type 'list'>
=> heap2 = [15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 22
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 24
ACTION: heaps.heappush(heap1,int3) 
int3 = 6 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 26
ACTION: heaps.heappush(heap2,int3) 
int3 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
int1 = 16                                                               # STEP 27
ACTION: int1 = 16 
int1 = 19 : <type 'int'>
=> int1 = 16 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 29
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [3] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 30
ACTION: heaps.heappush(heap0,int2) 
int2 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 31
ACTION: heap1 = heaps.heapnew() 
heap1 = [3] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 32
ACTION: heaps.heappush(heap0,int0) 
int0 = 3 : <type 'int'>
heap0 = [15] : <type 'list'>
=> heap0 = [3, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 33
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [3, 15] : <type 'list'>
=> heap2 = [3, 15] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 34
ACTION: heaps.heappush(heap1,int3) 
int3 = 6 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 35
ACTION: heaps.heappush(heap2,int0) 
int0 = 3 : <type 'int'>
heap2 = [3, 15] : <type 'list'>
=> heap2 = [3, 15, 3] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 15] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
int3 = 1                                                                # STEP 37
ACTION: int3 = 1 
int3 = 6 : <type 'int'>
=> int3 = 1 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 38
ACTION: int2 = 15 
int2 = 15 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 39
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [3, 15, 3] : <type 'list'>
=> heap2 = [3, 6, 3, 15] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 41
ACTION: int4 = 18 
int4 = 6 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 42
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [15] : <type 'list'>
heap2 = [3, 6, 3, 15] : <type 'list'>
=> heap2 = [3, 6, 3, 15, 15] : <type 'list'>
==================================================
int0 = 20                                                               # STEP 43
ACTION: int0 = 20 
int0 = 3 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [3, 6, 3, 15, 15] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [15] : <type 'list'>
heap1 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15] : <type 'list'>
heap2 = [3, 6, 3, 15, 15] : <type 'list'>
=> heap1 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 47
ACTION: heap2 = heaps.heapmerge(heap2,heap0) 
heap2 = [3, 6, 3, 15, 15] : <type 'list'>
heap0 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 3, 6, 15, 6, 3, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [3, 3, 3, 6, 15, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3, 3, 3, 6, 15, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [3, 6, 3, 3, 15, 6, 3, 6, 15, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 51
ACTION: heap2 = heaps.heapnew() 
heap2 = [3, 6, 3, 3, 15, 6, 3, 6, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 52
ACTION: heaps.heappush(heap1,int1) 
int1 = 16 : <type 'int'>
heap1 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15] : <type 'list'>
=> heap1 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15, 16] : <type 'list'>
==================================================
int1 = 4                                                                # STEP 53
ACTION: int1 = 4 
int1 = 16 : <type 'int'>
=> int1 = 4 : <type 'int'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 54
ACTION: heaps.heappush(heap2,int4) 
int4 = 18 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 55
ACTION: heaps.heappush(heap0,int2) 
int2 = 15 : <type 'int'>
heap0 = [3, 3, 6, 15, 6, 3, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 3, 6, 15, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 56
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [3, 3, 6, 15, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
heap1 = [3, 3, 3, 6, 3, 6, 3, 6, 3, 15, 15, 15, 15, 15, 15, 16] : <type 'list'>
=> heap1 = [3, 3, 3, 3, 6, 6, 15, 6, 3, 15, 15, 15, 15, 15, 15, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 3, 6, 15, 6, 3, 15, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [3, 6, 6, 15, 15, 3, 15, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 58
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [18] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [3, 6, 6, 15, 15, 3, 15, 15, 15, 15] : <type 'list'>
=> heap0 = [6, 15, 6, 15, 15, 3, 15, 15, 15] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 15, 6, 15, 15, 3, 15, 15, 15] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [6, 15, 3, 15, 15, 15, 15, 15] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e69560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 50
STOPPING TESTING DUE TO TIMEOUT
16.1524500907 PERCENT COVERED
60.0535809994 TOTAL RUNTIME
25 EXECUTED
2127 TOTAL TEST OPERATIONS
29.4357669353 TIME SPENT EXECUTING TEST OPERATIONS
0.259270906448 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4655425549 TIME SPENT CHECKING PROPERTIES
58.9013094902 TOTAL TIME SPENT RUNNING SUT
0.0123672485352 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap2 = heaps.heapnew()                                                  # STEP 0
heap0 = heaps.heapmerge(heap2,heap2)                                     # STEP 1
int0 = 3                                                                 # STEP 2
int2 = 15                                                                # STEP 3
int3 = 6                                                                 # STEP 4
heap1 = heaps.heapmerge(heap2,heap0)                                     # STEP 5
heap2 = heaps.heapmerge(heap2,heap2)                                     # STEP 6
heap0 = heaps.heapmerge(heap0,heap0)                                     # STEP 7
int1 = 19                                                                # STEP 8
int4 = 5                                                                 # STEP 9
heaps.heappush(heap1,int4)                                              # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
heap1 = heaps.heapnew()                                                 # STEP 12
int4 = 6                                                                # STEP 13
heaps.heappush(heap1,int1)                                              # STEP 14
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 15
heaps.heappush(heap1,int1)                                              # STEP 16
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 17
heaps.heappush(heap2,int0)                                              # STEP 18
heaps.heappush(heap2,int2)                                              # STEP 19
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 21
heap0 = heaps.heapnew()                                                 # STEP 22
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 23
heaps.heappush(heap1,int3)                                              # STEP 24
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 25
heaps.heappush(heap2,int3)                                              # STEP 26
int1 = 16                                                               # STEP 27
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 28
heaps.heappush(heap1,int0)                                              # STEP 29
heaps.heappush(heap0,int2)                                              # STEP 30
heap1 = heaps.heapnew()                                                 # STEP 31
heaps.heappush(heap0,int0)                                              # STEP 32
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 33
heaps.heappush(heap1,int3)                                              # STEP 34
heaps.heappush(heap2,int0)                                              # STEP 35
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 36
int3 = 1                                                                # STEP 37
int2 = 15                                                               # STEP 38
heaps.heappush(heap2,int4)                                              # STEP 39
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
int4 = 18                                                               # STEP 41
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 42
int0 = 20                                                               # STEP 43
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 44
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 45
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 46
heap2 = heaps.heapmerge(heap2,heap0)                                    # STEP 47
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
heap2 = heaps.heapnew()                                                 # STEP 51
heaps.heappush(heap1,int1)                                              # STEP 52
int1 = 4                                                                # STEP 53
heaps.heappush(heap2,int4)                                              # STEP 54
heaps.heappush(heap0,int2)                                              # STEP 55
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 56
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 57
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 58
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 59
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 60
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103e69560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99656.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104cf8c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 76 steps

SAVING TEST AS failure.99656.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap1 = heaps.heapnew()                                                  # STEP 0
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 1
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 2
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 3
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 4
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 7                                                                 # STEP 5
ACTION: int1 = 7 
int1 = None : <type 'NoneType'>
=> int1 = 7 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 6
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 7
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 8
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [7] : <type 'list'>
=> heap1 = [7, 7] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 9
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [7, 7] : <type 'list'>
=> heap1 = [7, 7, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 7, 7] : <type 'list'>
=> heap1 = [7, 7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 7] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 12
ACTION: heaps.heappop(heap1) 
heap1 = [7] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 13
ACTION: int1 = 7 
int1 = 7 : <type 'int'>
==================================================
int3 = 9                                                                # STEP 14
ACTION: int3 = 9 
int3 = None : <type 'NoneType'>
=> int3 = 9 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int1)                                              # STEP 16
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [7] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int1)                                              # STEP 19
ACTION: heaps.heappush(heap1,int1) 
int1 = 7 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [7] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 20
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 21
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 4                                                                # STEP 22
ACTION: int2 = 4 
int2 = None : <type 'NoneType'>
=> int2 = 4 : <type 'int'>
==================================================
int4 = 11                                                               # STEP 23
ACTION: int4 = 11 
int4 = None : <type 'NoneType'>
=> int4 = 11 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 24
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 25
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 9                                                                # STEP 26
ACTION: int0 = 9 
int0 = None : <type 'NoneType'>
=> int0 = 9 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 27
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int1 = 6                                                                # STEP 28
ACTION: int1 = 6 
int1 = 7 : <type 'int'>
=> int1 = 6 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 29
ACTION: heaps.heappush(heap1,int3) 
int3 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
int3 = 8                                                                # STEP 30
ACTION: int3 = 8 
int3 = 9 : <type 'int'>
=> int3 = 8 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 31
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [9] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 34
ACTION: heaps.heappush(heap2,int1) 
int1 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [6] : <type 'list'>
heap1 = [9] : <type 'list'>
=> heap2 = [6, 9] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 9] : <type 'list'>
=> heap2 = [9] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 37
ACTION: heaps.heappop(heap2) 
heap2 = [9] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 38
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [9] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 40
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 41
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int3)                                              # STEP 42
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [9] : <type 'list'>
=> heap1 = [8, 9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [8, 9] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 44
ACTION: heaps.heappush(heap2,int1) 
int1 = 6 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [6] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 45
ACTION: heaps.heappush(heap1,int0) 
int0 = 9 : <type 'int'>
heap1 = [9] : <type 'list'>
=> heap1 = [9, 9] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
ACTION: heap0 = heaps.heapmerge(heap2,heap1) 
heap2 = [6] : <type 'list'>
heap1 = [9, 9] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [6, 9, 9] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 48
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [6, 9, 9] : <type 'list'>
heap1 = [9, 9] : <type 'list'>
=> heap1 = [6, 6, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 49
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [6, 6, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [6, 6, 8, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 50
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 8, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [6, 9, 8, 9, 9, 9] : <type 'list'>
==================================================
int0 = 10                                                               # STEP 51
ACTION: int0 = 10 
int0 = 9 : <type 'int'>
=> int0 = 10 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 52
ACTION: heaps.heappush(heap0,int4) 
int4 = 11 : <type 'int'>
heap0 = [6, 9, 9] : <type 'list'>
=> heap0 = [6, 9, 9, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 53
ACTION: heaps.heappush(heap0,int0) 
int0 = 10 : <type 'int'>
heap0 = [6, 9, 9, 11] : <type 'list'>
=> heap0 = [6, 9, 9, 11, 10] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 9, 8, 9, 9, 9] : <type 'list'>
=> heap1 = [8, 9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [8, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 9, 9] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 56
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 57
ACTION: heaps.heappush(heap0,int4) 
int4 = 11 : <type 'int'>
heap0 = [6, 9, 9, 11, 10] : <type 'list'>
=> heap0 = [6, 9, 9, 11, 10, 11] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 58
ACTION: heaps.heappush(heap1,int3) 
int3 = 8 : <type 'int'>
heap1 = [9, 9, 9, 9] : <type 'list'>
=> heap1 = [8, 9, 9, 9, 9] : <type 'list'>
==================================================
int3 = 5                                                                # STEP 59
ACTION: int3 = 5 
int3 = 8 : <type 'int'>
=> int3 = 5 : <type 'int'>
==================================================
int0 = 8                                                                # STEP 60
ACTION: int0 = 8 
int0 = 10 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 61
ACTION: heaps.heappush(heap0,int4) 
int4 = 11 : <type 'int'>
heap0 = [6, 9, 9, 11, 10, 11] : <type 'list'>
=> heap0 = [6, 9, 9, 11, 10, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 62
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [6, 9, 9, 11, 10, 11, 11] : <type 'list'>
=> heap0 = [9, 10, 9, 11, 11, 11] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 63
ACTION: int4 = 11 
int4 = 11 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 64
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [9, 10, 9, 11, 11, 11] : <type 'list'>
heap1 = [8, 9, 9, 9, 9] : <type 'list'>
=> heap1 = [9, 9, 10, 9, 10, 9, 11, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 65
ACTION: heaps.heappop(heap1) 
heap1 = [9, 9, 10, 9, 10, 9, 11, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [9, 9, 10, 11, 10, 9, 11, 11, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [9, 10, 9, 11, 11, 11] : <type 'list'>
=> heap0 = [9, 10, 11, 11, 11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 67
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 68
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 69
ACTION: heaps.heappop(heap0) 
heap0 = [9, 10, 11, 11, 11] : <type 'list'>
=> heap0 = [10, 11, 11, 11] : <type 'list'>
==================================================
int1 = 13                                                               # STEP 70
ACTION: int1 = 13 
int1 = 6 : <type 'int'>
=> int1 = 13 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 9, 10, 11, 10, 9, 11, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [9, 10, 10, 11, 11, 9, 11, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 72
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 73
ACTION: heaps.heappop(heap0) 
heap0 = [10, 11, 11, 11] : <type 'list'>
=> heap0 = [11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9, 10, 10, 11, 11, 9, 11, 11, 11, 11] : <type 'list'>
=> heap1 = [10, 11, 10, 11, 11, 9, 11, 11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 75
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [10, 11, 10, 11, 11, 9, 11, 11, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [10, 11, 9, 11, 11, 11, 11, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df7ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #14 STEP #75 (0:00:30.003670) Fri Apr 28 04:32:55 2017 [ 41 stmts 58 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 57
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0355250835 TOTAL RUNTIME
27 EXECUTED
2633 TOTAL TEST OPERATIONS
29.3722577095 TIME SPENT EXECUTING TEST OPERATIONS
0.342183589935 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3907740116 TIME SPENT CHECKING PROPERTIES
58.7630317211 TOTAL TIME SPENT RUNNING SUT
0.0124294757843 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap1 = heaps.heapnew()                                                  # STEP 0
heaps.heappop(heap1)                                                     # STEP 1
heaps.heappop(heap1)                                                     # STEP 2
heaps.heappop(heap1)                                                     # STEP 3
heaps.heappop(heap1)                                                     # STEP 4
int1 = 7                                                                 # STEP 5
heap1 = heaps.heapnew()                                                  # STEP 6
heaps.heappush(heap1,int1)                                               # STEP 7
heaps.heappush(heap1,int1)                                               # STEP 8
heaps.heappush(heap1,int1)                                               # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 11
heaps.heappop(heap1)                                                    # STEP 12
int1 = 7                                                                # STEP 13
int3 = 9                                                                # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
heaps.heappush(heap1,int1)                                              # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heaps.heappush(heap1,int1)                                              # STEP 19
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 20
heaps.heappop(heap1)                                                    # STEP 21
int2 = 4                                                                # STEP 22
int4 = 11                                                               # STEP 23
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 24
heaps.heappop(heap1)                                                    # STEP 25
int0 = 9                                                                # STEP 26
heaps.heappop(heap2)                                                    # STEP 27
int1 = 6                                                                # STEP 28
heaps.heappush(heap1,int3)                                              # STEP 29
int3 = 8                                                                # STEP 30
heaps.heappop(heap2)                                                    # STEP 31
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 32
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
heaps.heappush(heap2,int1)                                              # STEP 34
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 35
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 36
heaps.heappop(heap2)                                                    # STEP 37
heaps.heappop(heap0)                                                    # STEP 38
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 39
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 40
heaps.heappop(heap0)                                                    # STEP 41
heaps.heappush(heap1,int3)                                              # STEP 42
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 43
heaps.heappush(heap2,int1)                                              # STEP 44
heaps.heappush(heap1,int0)                                              # STEP 45
heap0 = heaps.heapmerge(heap2,heap1)                                    # STEP 46
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 47
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 48
heaps.heappush(heap1,int3)                                              # STEP 49
heaps.heappop(heap1)                                                    # STEP 50
int0 = 10                                                               # STEP 51
heaps.heappush(heap0,int4)                                              # STEP 52
heaps.heappush(heap0,int0)                                              # STEP 53
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
heaps.heappop(heap2)                                                    # STEP 56
heaps.heappush(heap0,int4)                                              # STEP 57
heaps.heappush(heap1,int3)                                              # STEP 58
int3 = 5                                                                # STEP 59
int0 = 8                                                                # STEP 60
heaps.heappush(heap0,int4)                                              # STEP 61
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 62
int4 = 11                                                               # STEP 63
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 64
heaps.heappop(heap1)                                                    # STEP 65
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 66
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 67
heaps.heappop(heap2)                                                    # STEP 68
heaps.heappop(heap0)                                                    # STEP 69
int1 = 13                                                               # STEP 70
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 71
heaps.heappop(heap2)                                                    # STEP 72
heaps.heappop(heap0)                                                    # STEP 73
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 74
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 75
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104df7ab8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1021.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #12 STEP #32 (0:00:30.024186) Fri Apr 28 07:58:14 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104de9878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 80 steps

SAVING TEST AS failure.1021.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
heap0 = heaps.heapnew()                                                  # STEP 0
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
int0 = 14                                                                # STEP 1
ACTION: int0 = 14 
int0 = None : <type 'NoneType'>
=> int0 = 14 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                               # STEP 2
ACTION: heaps.heappush(heap0,int0) 
int0 = 14 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 3
ACTION: heaps.heappop(heap0) 
heap0 = [14] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
int1 = 12                                                                # STEP 4
ACTION: int1 = 12 
int1 = None : <type 'NoneType'>
=> int1 = 12 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 5
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 8                                                                 # STEP 6
ACTION: int0 = 8 
int0 = 14 : <type 'int'>
=> int0 = 8 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                     # STEP 7
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int1)                                               # STEP 9
ACTION: heaps.heappush(heap1,int1) 
int1 = 12 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 2                                                                # STEP 11
ACTION: int2 = 2 
int2 = None : <type 'NoneType'>
=> int2 = 2 : <type 'int'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 12
ACTION: heaps.heappush(heap0,int0) 
int0 = 8 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 13
ACTION: heaps.heappush(heap0,int2) 
int2 = 2 : <type 'int'>
heap0 = [8] : <type 'list'>
=> heap0 = [2, 8] : <type 'list'>
==================================================
int0 = 19                                                               # STEP 14
ACTION: int0 = 19 
int0 = 8 : <type 'int'>
=> int0 = 19 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 15
ACTION: heaps.heappop(heap0) 
heap0 = [2, 8] : <type 'list'>
=> heap0 = [8] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 16
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [8] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 17
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 18
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [8] : <type 'list'>
=> heap1 = [8] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 19
ACTION: heaps.heappush(heap1,int0) 
int0 = 19 : <type 'int'>
heap1 = [8] : <type 'list'>
=> heap1 = [8, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 20
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [8, 19] : <type 'list'>
heap0 = [8] : <type 'list'>
=> heap1 = [8, 8, 19] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 21
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 22
ACTION: heaps.heappop(heap0) 
heap0 = [8] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 23
ACTION: heaps.heappush(heap1,int2) 
int2 = 2 : <type 'int'>
heap1 = [8, 8, 19] : <type 'list'>
=> heap1 = [2, 8, 19, 8] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [2, 8, 19, 8] : <type 'list'>
=> heap1 = [8, 8, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 25
ACTION: heaps.heappush(heap2,int0) 
int0 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 26
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 27
ACTION: heaps.heappop(heap1) 
heap1 = [8, 8, 19] : <type 'list'>
=> heap1 = [8, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 28
ACTION: heaps.heappush(heap2,int0) 
int0 = 19 : <type 'int'>
heap2 = [19] : <type 'list'>
=> heap2 = [19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [19, 19] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = [8, 19] : <type 'list'>
=> heap1 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 30
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 20                                                               # STEP 31
ACTION: int0 = 20 
int0 = 19 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
int3 = 10                                                               # STEP 32
ACTION: int3 = 10 
int3 = None : <type 'NoneType'>
=> int3 = 10 : <type 'int'>
==================================================
int2 = 5                                                                # STEP 33
ACTION: int2 = 5 
int2 = 2 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 34
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [19, 19] : <type 'list'>
heap2 = [19, 19] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 35
ACTION: heaps.heappush(heap0,int1) 
int1 = 12 : <type 'int'>
heap0 = [19, 19, 19, 19] : <type 'list'>
=> heap0 = [12, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 36
ACTION: heaps.heappop(heap2) 
heap2 = [19, 19] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 37
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [19, 19] : <type 'list'>
heap2 = [19] : <type 'list'>
=> heap2 = [19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19, 19, 19] : <type 'list'>
=> heap2 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 39
ACTION: heaps.heappop(heap1) 
heap1 = [19, 19] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 40
ACTION: heaps.heappop(heap1) 
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 11                                                               # STEP 41
ACTION: int4 = 11 
int4 = None : <type 'NoneType'>
=> int4 = 11 : <type 'int'>
==================================================
int1 = 15                                                               # STEP 42
ACTION: int1 = 15 
int1 = 12 : <type 'int'>
=> int1 = 15 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 43
ACTION: heaps.heappop(heap0) 
heap0 = [12, 19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 44
ACTION: heaps.heappush(heap2,int4) 
int4 = 11 : <type 'int'>
heap2 = [19, 19] : <type 'list'>
=> heap2 = [11, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 45
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 6                                                                # STEP 46
ACTION: int4 = 6 
int4 = 11 : <type 'int'>
=> int4 = 6 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 47
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19, 19, 19] : <type 'list'>
=> heap0 = [19, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 48
ACTION: heaps.heappush(heap2,int1) 
int1 = 15 : <type 'int'>
heap2 = [11, 19, 19] : <type 'list'>
=> heap2 = [11, 15, 19, 19] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 49
ACTION: heaps.heappush(heap1,int2) 
int2 = 5 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [5] : <type 'list'>
==================================================
int1 = 8                                                                # STEP 50
ACTION: int1 = 8 
int1 = 15 : <type 'int'>
=> int1 = 8 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 52
ACTION: heaps.heappush(heap2,int4) 
int4 = 6 : <type 'int'>
heap2 = [11, 15, 19, 19] : <type 'list'>
=> heap2 = [6, 11, 19, 19, 15] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 53
ACTION: heaps.heappop(heap2) 
heap2 = [6, 11, 19, 19, 15] : <type 'list'>
=> heap2 = [11, 15, 19, 19] : <type 'list'>
==================================================
int4 = 20                                                               # STEP 54
ACTION: int4 = 20 
int4 = 6 : <type 'int'>
=> int4 = 20 : <type 'int'>
==================================================
int2 = 15                                                               # STEP 55
ACTION: int2 = 15 
int2 = 5 : <type 'int'>
=> int2 = 15 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19, 19, 19] : <type 'list'>
=> heap0 = [19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 57
ACTION: heaps.heappop(heap0) 
heap0 = [19, 19] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 58
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int2)                                              # STEP 59
ACTION: heaps.heappush(heap0,int2) 
int2 = 15 : <type 'int'>
heap0 = [19] : <type 'list'>
=> heap0 = [15, 19] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [15, 19] : <type 'list'>
heap2 = [11, 15, 19, 19] : <type 'list'>
=> heap0 = [11, 15, 15, 19, 19, 19] : <type 'list'>
==================================================
int2 = 7                                                                # STEP 61
ACTION: int2 = 7 
int2 = 15 : <type 'int'>
=> int2 = 7 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 15, 19, 19] : <type 'list'>
=> heap2 = [15, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 63
ACTION: heaps.heappop(heap2) 
heap2 = [15, 19, 19] : <type 'list'>
=> heap2 = [19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 64
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [11, 15, 15, 19, 19, 19] : <type 'list'>
=> heap1 = [11, 15, 15, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 65
ACTION: heaps.heappop(heap1) 
heap1 = [11, 15, 15, 19, 19, 19] : <type 'list'>
=> heap1 = [15, 19, 15, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 66
ACTION: heaps.heappop(heap1) 
heap1 = [15, 19, 15, 19, 19] : <type 'list'>
=> heap1 = [15, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 67
ACTION: heaps.heappop(heap0) 
heap0 = [11, 15, 15, 19, 19, 19] : <type 'list'>
=> heap0 = [15, 19, 15, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 68
ACTION: heaps.heappop(heap2) 
heap2 = [19, 19] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15, 19, 15, 19, 19] : <type 'list'>
=> heap0 = [15, 19, 19, 19] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 70
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [15, 19, 19, 19] : <type 'list'>
heap1 = [15, 19, 19, 19] : <type 'list'>
heap2 = [19] : <type 'list'>
=> heap2 = [15, 15, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 71
ACTION: heap0 = heaps.heapnew() 
heap0 = [15, 19, 19, 19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [15, 19, 19, 19] : <type 'list'>
heap2 = [15, 15, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [15, 15, 15, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 73
ACTION: heaps.heappop(heap2) 
heap2 = [15, 15, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [15, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [15, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 75
ACTION: heaps.heappop(heap1) 
heap1 = [15, 15, 15, 19, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [15, 19, 15, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 76
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [19, 19, 19, 19, 19, 19] : <type 'list'>
heap1 = [15, 19, 15, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [15, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 77
ACTION: heaps.heappop(heap2) 
heap2 = [19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap2 = [19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [15, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
=> heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 19, 19, 19, 19, 19] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [19, 19, 19, 19, 19, 19, 19, 19, 15, 19, 19, 19, 19, 19, 19] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dfbfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 50
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0621249676 TOTAL RUNTIME
23 EXECUTED
2230 TOTAL TEST OPERATIONS
29.2621340752 TIME SPENT EXECUTING TEST OPERATIONS
0.316620349884 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.3615684509 TIME SPENT CHECKING PROPERTIES
58.6237025261 TOTAL TIME SPENT RUNNING SUT
0.0107653141022 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
heap0 = heaps.heapnew()                                                  # STEP 0
int0 = 14                                                                # STEP 1
heaps.heappush(heap0,int0)                                               # STEP 2
heaps.heappop(heap0)                                                     # STEP 3
int1 = 12                                                                # STEP 4
heaps.heappop(heap0)                                                     # STEP 5
int0 = 8                                                                 # STEP 6
heaps.heappop(heap0)                                                     # STEP 7
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 8
heaps.heappush(heap1,int1)                                               # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
int2 = 2                                                                # STEP 11
heaps.heappush(heap0,int0)                                              # STEP 12
heaps.heappush(heap0,int2)                                              # STEP 13
int0 = 19                                                               # STEP 14
heaps.heappop(heap0)                                                    # STEP 15
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 16
heaps.heappop(heap1)                                                    # STEP 17
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 18
heaps.heappush(heap1,int0)                                              # STEP 19
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 20
heap2 = heaps.heapnew()                                                 # STEP 21
heaps.heappop(heap0)                                                    # STEP 22
heaps.heappush(heap1,int2)                                              # STEP 23
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
heaps.heappush(heap2,int0)                                              # STEP 25
heaps.heappop(heap0)                                                    # STEP 26
heaps.heappop(heap1)                                                    # STEP 27
heaps.heappush(heap2,int0)                                              # STEP 28
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
heaps.heappop(heap0)                                                    # STEP 30
int0 = 20                                                               # STEP 31
int3 = 10                                                               # STEP 32
int2 = 5                                                                # STEP 33
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 34
heaps.heappush(heap0,int1)                                              # STEP 35
heaps.heappop(heap2)                                                    # STEP 36
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 37
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 38
heaps.heappop(heap1)                                                    # STEP 39
heaps.heappop(heap1)                                                    # STEP 40
int4 = 11                                                               # STEP 41
int1 = 15                                                               # STEP 42
heaps.heappop(heap0)                                                    # STEP 43
heaps.heappush(heap2,int4)                                              # STEP 44
heaps.heappop(heap1)                                                    # STEP 45
int4 = 6                                                                # STEP 46
heaps.heappop(heap0)                                                    # STEP 47
heaps.heappush(heap2,int1)                                              # STEP 48
heaps.heappush(heap1,int2)                                              # STEP 49
int1 = 8                                                                # STEP 50
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 51
heaps.heappush(heap2,int4)                                              # STEP 52
heaps.heappop(heap2)                                                    # STEP 53
int4 = 20                                                               # STEP 54
int2 = 15                                                               # STEP 55
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 56
heaps.heappop(heap0)                                                    # STEP 57
heaps.heappop(heap1)                                                    # STEP 58
heaps.heappush(heap0,int2)                                              # STEP 59
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 60
int2 = 7                                                                # STEP 61
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 62
heaps.heappop(heap2)                                                    # STEP 63
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 64
heaps.heappop(heap1)                                                    # STEP 65
heaps.heappop(heap1)                                                    # STEP 66
heaps.heappop(heap0)                                                    # STEP 67
heaps.heappop(heap2)                                                    # STEP 68
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 69
heap2 = heaps.heapmerge(heap0,heap1)                                    # STEP 70
heap0 = heaps.heapnew()                                                 # STEP 71
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 72
heaps.heappop(heap2)                                                    # STEP 73
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 74
heaps.heappop(heap1)                                                    # STEP 75
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 76
heaps.heappop(heap2)                                                    # STEP 77
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104dfbfc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

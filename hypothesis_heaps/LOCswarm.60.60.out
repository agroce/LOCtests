Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=True, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.42318.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
TEST #13 STEP #93 (0:00:30.021745) Mon May  1 02:49:12 2017 [ 41 stmts 58 branches ]
WARNING: DEADLOCK (NO ENABLED ACTIONS)
TERMINATING TEST DUE TO NO ENABLED ACTIONS
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bc21b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
Original test has 62 steps

SAVING TEST AS failure.42318.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int1 = 6                                                                 # STEP 0
ACTION: int1 = 6 
int1 = None : <type 'NoneType'>
=> int1 = 6 : <type 'int'>
==================================================
int4 = 15                                                                # STEP 1
ACTION: int4 = 15 
int4 = None : <type 'NoneType'>
=> int4 = 15 : <type 'int'>
==================================================
int3 = 6                                                                 # STEP 2
ACTION: int3 = 6 
int3 = None : <type 'NoneType'>
=> int3 = 6 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 3
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 4
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
int0 = 19                                                                # STEP 5
ACTION: int0 = 19 
int0 = None : <type 'NoneType'>
=> int0 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap1)                                     # STEP 6
ACTION: heap2 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                               # STEP 7
ACTION: heaps.heappush(heap2,int0) 
int0 = 19 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [19] : <type 'list'>
==================================================
int2 = 13                                                                # STEP 8
ACTION: int2 = 13 
int2 = None : <type 'NoneType'>
=> int2 = 13 : <type 'int'>
==================================================
int0 = 3                                                                 # STEP 9
ACTION: int0 = 3 
int0 = 19 : <type 'int'>
=> int0 = 3 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 10
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [19] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 11
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [19] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 12
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [3] : <type 'list'>
==================================================
int0 = 17                                                               # STEP 13
ACTION: int0 = 17 
int0 = 3 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 15
ACTION: heaps.heappush(heap0,int4) 
int4 = 15 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [15] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 16
ACTION: heaps.heappush(heap2,int0) 
int0 = 17 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [17] : <type 'list'>
==================================================
int4 = 18                                                               # STEP 17
ACTION: int4 = 18 
int4 = 15 : <type 'int'>
=> int4 = 18 : <type 'int'>
==================================================
int0 = 20                                                               # STEP 18
ACTION: int0 = 20 
int0 = 17 : <type 'int'>
=> int0 = 20 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 19
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [15] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [17] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 21
ACTION: heaps.heappush(heap0,int0) 
int0 = 20 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [20] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 22
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [20] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 23
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
int0 = 5                                                                # STEP 24
ACTION: int0 = 5 
int0 = 20 : <type 'int'>
=> int0 = 5 : <type 'int'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 25
ACTION: heaps.heappush(heap1,int3) 
int3 = 6 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [6] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 27
ACTION: heaps.heappush(heap0,int2) 
int2 = 13 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [13] : <type 'list'>
==================================================
int3 = 18                                                               # STEP 28
ACTION: int3 = 18 
int3 = 6 : <type 'int'>
=> int3 = 18 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [13] : <type 'list'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 30
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [13] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 32
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
int2 = 10                                                               # STEP 33
ACTION: int2 = 10 
int2 = 13 : <type 'int'>
=> int2 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 34
ACTION: heap0 = heaps.heapnew() 
heap0 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 35
ACTION: heaps.heappush(heap1,int4) 
int4 = 18 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
int4 = 7                                                                # STEP 36
ACTION: int4 = 7 
int4 = 18 : <type 'int'>
=> int4 = 7 : <type 'int'>
==================================================
heaps.heappush(heap1,int1)                                              # STEP 37
ACTION: heaps.heappush(heap1,int1) 
int1 = 6 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [6, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [18] : <type 'list'>
=> heap1 = [18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [18, 18] : <type 'list'>
=> heap1 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 41
ACTION: heaps.heappush(heap0,int4) 
int4 = 7 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [7] : <type 'list'>
==================================================
int4 = 14                                                               # STEP 42
ACTION: int4 = 14 
int4 = 7 : <type 'int'>
=> int4 = 14 : <type 'int'>
==================================================
int1 = 9                                                                # STEP 43
ACTION: int1 = 9 
int1 = 6 : <type 'int'>
=> int1 = 9 : <type 'int'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 44
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [18] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 45
ACTION: heaps.heappush(heap0,int3) 
int3 = 18 : <type 'int'>
heap0 = [7] : <type 'list'>
=> heap0 = [7, 18] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 46
ACTION: heaps.heappush(heap1,int0) 
int0 = 5 : <type 'int'>
heap1 = [18] : <type 'list'>
=> heap1 = [5, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [5, 18] : <type 'list'>
heap2 = [] : <type 'list'>
=> heap2 = [5, 5, 18, 18] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 48
ACTION: heap1 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 18] : <type 'list'>
heap2 = [5, 5, 18, 18] : <type 'list'>
heap1 = [5, 18] : <type 'list'>
=> heap1 = [5, 5, 7, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 5, 7, 18, 18, 18] : <type 'list'>
=> heap1 = [5, 18, 7, 18, 18] : <type 'list'>
==================================================
int0 = 2                                                                # STEP 50
ACTION: int0 = 2 
int0 = 5 : <type 'int'>
=> int0 = 2 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 18] : <type 'list'>
heap2 = [5, 5, 18, 18] : <type 'list'>
=> heap2 = [5, 5, 7, 18, 18, 18] : <type 'list'>
==================================================
heap0 = heaps.heapnew()                                                 # STEP 52
ACTION: heap0 = heaps.heapnew() 
heap0 = [7, 18] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 5, 7, 18, 18, 18] : <type 'list'>
=> heap2 = [5, 18, 7, 18, 18] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 54
ACTION: heap2 = heaps.heapmerge(heap1,heap0) 
heap1 = [5, 18, 7, 18, 18] : <type 'list'>
heap0 = [] : <type 'list'>
heap2 = [5, 18, 7, 18, 18] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [5, 18, 7, 18, 18] : <type 'list'>
=> heap2 = [7, 18, 18, 18] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 56
ACTION: heaps.heappush(heap0,int4) 
int4 = 14 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [14] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 57
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [14] : <type 'list'>
heap1 = [5, 18, 7, 18, 18] : <type 'list'>
=> heap1 = [5, 14, 18, 7, 18, 18] : <type 'list'>
==================================================
int4 = 4                                                                # STEP 58
ACTION: int4 = 4 
int4 = 14 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
int3 = 12                                                               # STEP 59
ACTION: int3 = 12 
int3 = 18 : <type 'int'>
=> int3 = 12 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 60
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [5, 14, 18, 7, 18, 18] : <type 'list'>
=> heap1 = [14, 7, 18, 18, 18] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [14, 7, 18, 18, 18] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap1 = [7, 18, 18, 18] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f0c560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 5
STOPPING TESTING DUE TO TIMEOUT
16.1524500907 PERCENT COVERED
60.0561749935 TOTAL RUNTIME
26 EXECUTED
2184 TOTAL TEST OPERATIONS
29.4863526821 TIME SPENT EXECUTING TEST OPERATIONS
0.280930519104 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
29.4102122784 TIME SPENT CHECKING PROPERTIES
58.8965649605 TOTAL TIME SPENT RUNNING SUT
0.0128424167633 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
int1 = 6                                                                 # STEP 0
int4 = 15                                                                # STEP 1
int3 = 6                                                                 # STEP 2
heap0 = heaps.heapnew()                                                  # STEP 3
heap1 = heaps.heapnew()                                                  # STEP 4
int0 = 19                                                                # STEP 5
heap2 = heaps.heapmerge(heap0,heap1)                                     # STEP 6
heaps.heappush(heap2,int0)                                               # STEP 7
int2 = 13                                                                # STEP 8
int0 = 3                                                                 # STEP 9
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 10
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 11
heaps.heappush(heap1,int0)                                              # STEP 12
int0 = 17                                                               # STEP 13
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 14
heaps.heappush(heap0,int4)                                              # STEP 15
heaps.heappush(heap2,int0)                                              # STEP 16
int4 = 18                                                               # STEP 17
int0 = 20                                                               # STEP 18
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 19
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
heaps.heappush(heap0,int0)                                              # STEP 21
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 22
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 23
int0 = 5                                                                # STEP 24
heaps.heappush(heap1,int3)                                              # STEP 25
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 26
heaps.heappush(heap0,int2)                                              # STEP 27
int3 = 18                                                               # STEP 28
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 29
heap2 = heaps.heapnew()                                                 # STEP 30
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 31
heap1 = heaps.heapnew()                                                 # STEP 32
int2 = 10                                                               # STEP 33
heap0 = heaps.heapnew()                                                 # STEP 34
heaps.heappush(heap1,int4)                                              # STEP 35
int4 = 7                                                                # STEP 36
heaps.heappush(heap1,int1)                                              # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 39
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 40
heaps.heappush(heap0,int4)                                              # STEP 41
int4 = 14                                                               # STEP 42
int1 = 9                                                                # STEP 43
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 44
heaps.heappush(heap0,int3)                                              # STEP 45
heaps.heappush(heap1,int0)                                              # STEP 46
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 47
heap1 = heaps.heapmerge(heap0,heap2)                                    # STEP 48
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 49
int0 = 2                                                                # STEP 50
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 51
heap0 = heaps.heapnew()                                                 # STEP 52
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
heap2 = heaps.heapmerge(heap1,heap0)                                    # STEP 54
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 55
heaps.heappush(heap0,int4)                                              # STEP 56
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 57
int4 = 4                                                                # STEP 58
int3 = 12                                                               # STEP 59
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 60
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 61
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103f0c560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5135, in act149
    assert (min(self.p_heap[1]) == heaps.heappop(self.p_heap[1]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99216.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #14 STEP #59 (0:00:30.011314) Fri Apr 28 03:23:30 2017 [ 41 stmts 58 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e14ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
Original test has 82 steps

SAVING TEST AS failure.99216.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int3 = 13                                                                # STEP 0
ACTION: int3 = 13 
int3 = None : <type 'NoneType'>
=> int3 = 13 : <type 'int'>
==================================================
int0 = 6                                                                 # STEP 1
ACTION: int0 = 6 
int0 = None : <type 'NoneType'>
=> int0 = 6 : <type 'int'>
==================================================
int2 = 9                                                                 # STEP 2
ACTION: int2 = 9 
int2 = None : <type 'NoneType'>
=> int2 = 9 : <type 'int'>
==================================================
int1 = 16                                                                # STEP 3
ACTION: int1 = 16 
int1 = None : <type 'NoneType'>
=> int1 = 16 : <type 'int'>
==================================================
int4 = 12                                                                # STEP 4
ACTION: int4 = 12 
int4 = None : <type 'NoneType'>
=> int4 = 12 : <type 'int'>
==================================================
heap1 = heaps.heapnew()                                                  # STEP 5
ACTION: heap1 = heaps.heapnew() 
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 6
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                     # STEP 8
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int2)                                               # STEP 9
ACTION: heaps.heappush(heap1,int2) 
int2 = 9 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [9] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [9] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 11
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 6                                                                # STEP 12
ACTION: int2 = 6 
int2 = 9 : <type 'int'>
=> int2 = 6 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 13
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 15
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
ACTION: heap0 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 18
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 20
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 22
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int4)                                              # STEP 23
ACTION: heaps.heappush(heap1,int4) 
int4 = 12 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [12] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [12] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int4 = 2                                                                # STEP 25
ACTION: int4 = 2 
int4 = 12 : <type 'int'>
=> int4 = 2 : <type 'int'>
==================================================
heaps.heappop(heap0)                                                    # STEP 26
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 27
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 29
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 30
ACTION: heap1 = heaps.heapnew() 
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 31
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int1)                                              # STEP 32
ACTION: heaps.heappush(heap2,int1) 
int1 = 16 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [16] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 33
ACTION: heaps.heappush(heap2,int1) 
int1 = 16 : <type 'int'>
heap2 = [16] : <type 'list'>
=> heap2 = [16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 34
ACTION: heap1 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
int1 = 10                                                               # STEP 35
ACTION: int1 = 10 
int1 = 16 : <type 'int'>
=> int1 = 10 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
ACTION: heap0 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [16, 16] : <type 'list'>
=> heap0 = [16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 37
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int4)                                              # STEP 38
ACTION: heaps.heappush(heap0,int4) 
int4 = 2 : <type 'int'>
heap0 = [16, 16] : <type 'list'>
=> heap0 = [2, 16, 16] : <type 'list'>
==================================================
int4 = 7                                                                # STEP 39
ACTION: int4 = 7 
int4 = 2 : <type 'int'>
=> int4 = 7 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [2, 16, 16] : <type 'list'>
=> heap0 = [16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int4)                                              # STEP 41
ACTION: heaps.heappush(heap2,int4) 
int4 = 7 : <type 'int'>
heap2 = [16, 16] : <type 'list'>
=> heap2 = [7, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 42
ACTION: heaps.heappop(heap0) 
heap0 = [16, 16] : <type 'list'>
=> heap0 = [16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [7, 16, 16] : <type 'list'>
=> heap2 = [7, 7, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 44
ACTION: heaps.heappop(heap2) 
heap2 = [7, 7, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [7, 16, 16, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 45
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [7, 16, 16, 16, 16] : <type 'list'>
heap1 = [] : <type 'list'>
=> heap1 = [7, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int0)                                              # STEP 46
ACTION: heaps.heappush(heap2,int0) 
int0 = 6 : <type 'int'>
heap2 = [7, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [6, 16, 7, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int1)                                              # STEP 47
ACTION: heaps.heappush(heap2,int1) 
int1 = 10 : <type 'int'>
heap2 = [6, 16, 7, 16, 16, 16] : <type 'list'>
=> heap2 = [6, 16, 7, 16, 16, 16, 10] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [16] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 16, 7, 16, 16, 16, 10] : <type 'list'>
=> heap2 = [7, 16, 10, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [7, 16, 10, 16, 16, 16] : <type 'list'>
=> heap2 = [10, 16, 16, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 51
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [7, 16, 16, 16, 16] : <type 'list'>
heap0 = [] : <type 'list'>
=> heap0 = [7, 16, 16, 16, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 52
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [7, 16, 16, 16, 16] : <type 'list'>
heap2 = [10, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [7, 10, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [7, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int0)                                              # STEP 54
ACTION: heaps.heappush(heap1,int0) 
int0 = 6 : <type 'int'>
heap1 = [7, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [6, 16, 7, 16, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 55
ACTION: heap1 = heaps.heapmerge(heap1,heap1) 
heap1 = [6, 16, 7, 16, 16, 16] : <type 'list'>
=> heap1 = [6, 6, 16, 7, 16, 16, 16, 16, 7, 16, 16, 16] : <type 'list'>
==================================================
int1 = 17                                                               # STEP 56
ACTION: int1 = 17 
int1 = 10 : <type 'int'>
=> int1 = 17 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 57
ACTION: heaps.heappop(heap1) 
heap1 = [6, 6, 16, 7, 16, 16, 16, 16, 7, 16, 16, 16] : <type 'list'>
=> heap1 = [6, 7, 16, 7, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [6, 7, 16, 7, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap1,int2)                                              # STEP 59
ACTION: heaps.heappush(heap1,int2) 
int2 = 6 : <type 'int'>
heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [6, 7, 16, 16, 7, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 60
ACTION: heaps.heappush(heap2,int2) 
int2 = 6 : <type 'int'>
heap2 = [7, 10, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [6, 7, 16, 16, 10, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 61
ACTION: heaps.heappop(heap0) 
heap0 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap2,int3)                                              # STEP 62
ACTION: heaps.heappush(heap2,int3) 
int3 = 13 : <type 'int'>
heap2 = [6, 7, 16, 16, 10, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [6, 7, 13, 16, 10, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 63
ACTION: heaps.heappop(heap1) 
heap1 = [6, 7, 16, 16, 7, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap2 = [6, 7, 13, 16, 10, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [6, 7, 7, 7, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
int2 = 5                                                                # STEP 65
ACTION: int2 = 5 
int2 = 6 : <type 'int'>
=> int2 = 5 : <type 'int'>
==================================================
int0 = 1                                                                # STEP 66
ACTION: int0 = 1 
int0 = 6 : <type 'int'>
=> int0 = 1 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [6, 7, 7, 7, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [7, 7, 7, 16, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 68
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 7, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 69
ACTION: heaps.heappop(heap0) 
heap0 = [7, 7, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 16, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappush(heap0,int0)                                              # STEP 70
ACTION: heaps.heappush(heap0,int0) 
int0 = 1 : <type 'int'>
heap0 = [7, 16, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [1, 7, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 7, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 16, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
int0 = 9                                                                # STEP 72
ACTION: int0 = 9 
int0 = 1 : <type 'int'>
=> int0 = 9 : <type 'int'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [7, 7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 74
ACTION: heaps.heappop(heap1) 
heap1 = [7, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 75
ACTION: heaps.heappop(heap2) 
heap2 = [7, 7, 7, 16, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [7, 13, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 76
ACTION: heaps.heappop(heap2) 
heap2 = [7, 13, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [7, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 77
ACTION: heaps.heappop(heap0) 
heap0 = [7, 16, 7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap0 = [7, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
==================================================
heap1 = heaps.heapnew()                                                 # STEP 78
ACTION: heap1 = heaps.heapnew() 
heap1 = [16, 16, 16, 16, 16, 16, 16, 16] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 79
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 80
ACTION: heaps.heappop(heap2) 
heap2 = [7, 13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16, 16] : <type 'list'>
=> heap2 = [13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [13, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16, 16] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap2 = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 10, 16, 16] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e4b680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f0c3f8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
Original test has 81 steps

SAVING TEST AS failure.99216.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
int2 = 17                                                                # STEP 0
ACTION: int2 = 17 
int2 = None : <type 'NoneType'>
=> int2 = 17 : <type 'int'>
==================================================
heap0 = heaps.heapnew()                                                  # STEP 1
ACTION: heap0 = heaps.heapnew() 
heap0 = None : <type 'NoneType'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                     # STEP 2
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                     # STEP 3
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap0,int2)                                               # STEP 4
ACTION: heaps.heappush(heap0,int2) 
int2 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 5
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
ACTION: heap1 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap1 = None : <type 'NoneType'>
=> heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                     # STEP 7
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapnew()                                                  # STEP 8
ACTION: heap2 = heaps.heapnew() 
heap2 = None : <type 'NoneType'>
=> heap2 = [] : <type 'list'>
==================================================
int0 = 3                                                                 # STEP 9
ACTION: int0 = 3 
int0 = None : <type 'NoneType'>
=> int0 = 3 : <type 'int'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 10
ACTION: heaps.heappush(heap0,int2) 
int2 = 17 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [17] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 11
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 12
ACTION: heap0 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
heap0 = [17] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 13
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 14
ACTION: heap2 = heaps.heapmerge(heap0,heap2) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
int3 = 19                                                               # STEP 15
ACTION: int3 = 19 
int3 = None : <type 'NoneType'>
=> int3 = 19 : <type 'int'>
==================================================
heaps.heappop(heap1)                                                    # STEP 16
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap2)                                                    # STEP 17
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 18
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 19
ACTION: heaps.heappush(heap2,int0) 
int0 = 3 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [3] : <type 'list'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [3] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 21
ACTION: heap1 = heaps.heapmerge(heap2,heap0) 
heap2 = [] : <type 'list'>
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
ACTION: heap0 = heaps.heapmerge(heap1,heap0) 
heap1 = [] : <type 'list'>
heap0 = [] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 23
ACTION: heap2 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 24
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int4 = 11                                                               # STEP 25
ACTION: int4 = 11 
int4 = None : <type 'NoneType'>
=> int4 = 11 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
ACTION: heap2 = heaps.heapmerge(heap1,heap1) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
ACTION: heap0 = heaps.heapmerge(heap0,heap0) 
heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 28
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 29
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
ACTION: heap1 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappush(heap1,int3)                                              # STEP 31
ACTION: heaps.heappush(heap1,int3) 
int3 = 19 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [19] : <type 'list'>
==================================================
heaps.heappush(heap0,int3)                                              # STEP 32
ACTION: heaps.heappush(heap0,int3) 
int3 = 19 : <type 'int'>
heap0 = [] : <type 'list'>
=> heap0 = [19] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [19] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int2 = 12                                                               # STEP 34
ACTION: int2 = 12 
int2 = 17 : <type 'int'>
=> int2 = 12 : <type 'int'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [19] : <type 'list'>
=> heap0 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 36
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap1,int0)                                              # STEP 37
ACTION: heaps.heappush(heap1,int0) 
int0 = 3 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [3] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [3] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
int1 = 3                                                                # STEP 39
ACTION: int1 = 3 
int1 = None : <type 'NoneType'>
=> int1 = 3 : <type 'int'>
==================================================
int3 = 19                                                               # STEP 40
ACTION: int3 = 19 
int3 = 19 : <type 'int'>
==================================================
heap2 = heaps.heapnew()                                                 # STEP 41
ACTION: heap2 = heaps.heapnew() 
heap2 = [] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
ACTION: heap1 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 43
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 11                                                               # STEP 44
ACTION: int0 = 11 
int0 = 3 : <type 'int'>
=> int0 = 11 : <type 'int'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 45
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [] : <type 'list'>
heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 46
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 47
ACTION: heap1 = heaps.heapmerge(heap2,heap2) 
heap2 = [] : <type 'list'>
heap1 = [] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 48
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappush(heap2,int0)                                              # STEP 49
ACTION: heaps.heappush(heap2,int0) 
int0 = 11 : <type 'int'>
heap2 = [] : <type 'list'>
=> heap2 = [11] : <type 'list'>
==================================================
heaps.heappush(heap2,int2)                                              # STEP 50
ACTION: heaps.heappush(heap2,int2) 
int2 = 12 : <type 'int'>
heap2 = [11] : <type 'list'>
=> heap2 = [11, 12] : <type 'list'>
==================================================
heaps.heappop(heap0)                                                    # STEP 51
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 52
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 12] : <type 'list'>
=> heap2 = [12] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 54
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap1)                                                    # STEP 55
ACTION: heaps.heappop(heap1) 
heap1 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int0 = 17                                                               # STEP 56
ACTION: int0 = 17 
int0 = 11 : <type 'int'>
=> int0 = 17 : <type 'int'>
==================================================
heaps.heappop(heap2)                                                    # STEP 57
ACTION: heaps.heappop(heap2) 
heap2 = [12] : <type 'list'>
=> heap2 = [] : <type 'list'>
==================================================
heaps.heappop(heap2)                                                    # STEP 58
ACTION: heaps.heappop(heap2) 
heap2 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
heaps.heappop(heap0)                                                    # STEP 59
ACTION: heaps.heappop(heap0) 
heap0 = [] : <type 'list'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ValueError'> Empty heap
==================================================
int2 = 1                                                                # STEP 60
ACTION: int2 = 1 
int2 = 12 : <type 'int'>
=> int2 = 1 : <type 'int'>
==================================================
heaps.heappush(heap1,int4)                                              # STEP 61
ACTION: heaps.heappush(heap1,int4) 
int4 = 11 : <type 'int'>
heap1 = [] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 62
ACTION: heap2 = heaps.heapmerge(heap2,heap1) 
heap2 = [] : <type 'list'>
heap1 = [11] : <type 'list'>
=> heap2 = [11] : <type 'list'>
==================================================
int4 = 4                                                                # STEP 63
ACTION: int4 = 4 
int4 = 11 : <type 'int'>
=> int4 = 4 : <type 'int'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 64
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [] : <type 'list'>
heap1 = [11] : <type 'list'>
=> heap0 = [11] : <type 'list'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 65
ACTION: heaps.heappush(heap0,int1) 
int1 = 3 : <type 'int'>
heap0 = [11] : <type 'list'>
=> heap0 = [3, 11] : <type 'list'>
==================================================
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 66
ACTION: heap1 = heaps.heapmerge(heap2,heap1) 
heap2 = [11] : <type 'list'>
heap1 = [11] : <type 'list'>
=> heap1 = [11, 11] : <type 'list'>
==================================================
heaps.heappush(heap0,int2)                                              # STEP 67
ACTION: heaps.heappush(heap0,int2) 
int2 = 1 : <type 'int'>
heap0 = [3, 11] : <type 'list'>
=> heap0 = [1, 11, 3] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 68
ACTION: heap2 = heaps.heapmerge(heap2,heap2) 
heap2 = [11] : <type 'list'>
=> heap2 = [11, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
ACTION: heap0 = heaps.heapmerge(heap2,heap0) 
heap2 = [11, 11] : <type 'list'>
heap0 = [1, 11, 3] : <type 'list'>
=> heap0 = [1, 11, 11, 11, 3] : <type 'list'>
==================================================
heaps.heappush(heap0,int4)                                              # STEP 70
ACTION: heaps.heappush(heap0,int4) 
int4 = 4 : <type 'int'>
heap0 = [1, 11, 11, 11, 3] : <type 'list'>
=> heap0 = [1, 11, 4, 11, 3, 11] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [1, 11, 4, 11, 3, 11] : <type 'list'>
=> heap0 = [4, 11, 11, 11, 3] : <type 'list'>
==================================================
int2 = 9                                                                # STEP 72
ACTION: int2 = 9 
int2 = 1 : <type 'int'>
=> int2 = 9 : <type 'int'>
==================================================
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
ACTION: assert (min(heap2) == heaps.heappop(heap2)) 
heap2 = [11, 11] : <type 'list'>
=> heap2 = [11] : <type 'list'>
==================================================
int1 = 7                                                                # STEP 74
ACTION: int1 = 7 
int1 = 3 : <type 'int'>
=> int1 = 7 : <type 'int'>
==================================================
heaps.heappush(heap0,int1)                                              # STEP 75
ACTION: heaps.heappush(heap0,int1) 
int1 = 7 : <type 'int'>
heap0 = [4, 11, 11, 11, 3] : <type 'list'>
=> heap0 = [4, 11, 7, 11, 3, 11] : <type 'list'>
==================================================
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 76
ACTION: heap0 = heaps.heapmerge(heap0,heap1) 
heap0 = [4, 11, 7, 11, 3, 11] : <type 'list'>
heap1 = [11, 11] : <type 'list'>
=> heap0 = [4, 11, 7, 11, 3, 11, 11, 11] : <type 'list'>
==================================================
heaps.heappop(heap1)                                                    # STEP 77
ACTION: heaps.heappop(heap1) 
heap1 = [11, 11] : <type 'list'>
=> heap1 = [11] : <type 'list'>
==================================================
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 78
ACTION: heap2 = heaps.heapmerge(heap1,heap2) 
heap1 = [11] : <type 'list'>
heap2 = [11] : <type 'list'>
=> heap2 = [11, 11] : <type 'list'>
==================================================
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
ACTION: assert (min(heap1) == heaps.heappop(heap1)) 
heap1 = [11] : <type 'list'>
=> heap1 = [] : <type 'list'>
==================================================
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
ACTION: assert (min(heap0) == heaps.heappop(heap0)) 
heap0 = [4, 11, 7, 11, 3, 11, 11, 11] : <type 'list'>
RAISED EXCEPTION: <type 'exceptions.AssertionError'> 
=> heap0 = [7, 11, 11, 11, 3, 11, 11] : <type 'list'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f36710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 82
STOPPING TESTING DUE TO TIMEOUT
16.3120567376 PERCENT COVERED
60.0510179996 TOTAL RUNTIME
27 EXECUTED
2645 TOTAL TEST OPERATIONS
28.8895530701 TIME SPENT EXECUTING TEST OPERATIONS
0.389925479889 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
28.9247477055 TIME SPENT CHECKING PROPERTIES
57.8143007755 TOTAL TIME SPENT RUNNING SUT
0.0121021270752 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
int3 = 13                                                                # STEP 0
int0 = 6                                                                 # STEP 1
int2 = 9                                                                 # STEP 2
int1 = 16                                                                # STEP 3
int4 = 12                                                                # STEP 4
heap1 = heaps.heapnew()                                                  # STEP 5
heaps.heappop(heap1)                                                     # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heaps.heappop(heap1)                                                     # STEP 8
heaps.heappush(heap1,int2)                                               # STEP 9
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 10
heaps.heappop(heap1)                                                    # STEP 11
int2 = 6                                                                # STEP 12
heaps.heappop(heap1)                                                    # STEP 13
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 14
heaps.heappop(heap1)                                                    # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heap0 = heaps.heapmerge(heap2,heap2)                                    # STEP 17
heaps.heappop(heap0)                                                    # STEP 18
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 19
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 20
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 21
heaps.heappop(heap1)                                                    # STEP 22
heaps.heappush(heap1,int4)                                              # STEP 23
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 24
int4 = 2                                                                # STEP 25
heaps.heappop(heap0)                                                    # STEP 26
heaps.heappop(heap0)                                                    # STEP 27
heap1 = heaps.heapmerge(heap0,heap0)                                    # STEP 28
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 29
heap1 = heaps.heapnew()                                                 # STEP 30
heaps.heappop(heap1)                                                    # STEP 31
heaps.heappush(heap2,int1)                                              # STEP 32
heaps.heappush(heap2,int1)                                              # STEP 33
heap1 = heaps.heapmerge(heap1,heap0)                                    # STEP 34
int1 = 10                                                               # STEP 35
heap0 = heaps.heapmerge(heap0,heap2)                                    # STEP 36
heaps.heappop(heap1)                                                    # STEP 37
heaps.heappush(heap0,int4)                                              # STEP 38
int4 = 7                                                                # STEP 39
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 40
heaps.heappush(heap2,int4)                                              # STEP 41
heaps.heappop(heap0)                                                    # STEP 42
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 43
heaps.heappop(heap2)                                                    # STEP 44
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 45
heaps.heappush(heap2,int0)                                              # STEP 46
heaps.heappush(heap2,int1)                                              # STEP 47
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 48
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 49
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 50
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 51
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 52
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 53
heaps.heappush(heap1,int0)                                              # STEP 54
heap1 = heaps.heapmerge(heap1,heap1)                                    # STEP 55
int1 = 17                                                               # STEP 56
heaps.heappop(heap1)                                                    # STEP 57
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 58
heaps.heappush(heap1,int2)                                              # STEP 59
heaps.heappush(heap2,int2)                                              # STEP 60
heaps.heappop(heap0)                                                    # STEP 61
heaps.heappush(heap2,int3)                                              # STEP 62
heaps.heappop(heap1)                                                    # STEP 63
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 64
int2 = 5                                                                # STEP 65
int0 = 1                                                                # STEP 66
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 67
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 68
heaps.heappop(heap0)                                                    # STEP 69
heaps.heappush(heap0,int0)                                              # STEP 70
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
int0 = 9                                                                # STEP 72
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 73
heaps.heappop(heap1)                                                    # STEP 74
heaps.heappop(heap2)                                                    # STEP 75
heaps.heappop(heap2)                                                    # STEP 76
heaps.heappop(heap0)                                                    # STEP 77
heap1 = heaps.heapnew()                                                 # STEP 78
heaps.heappop(heap1)                                                    # STEP 79
heaps.heappop(heap2)                                                    # STEP 80
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 81
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104e4b680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5170, in act150
    assert (min(self.p_heap[2]) == heaps.heappop(self.p_heap[2]))
FAILURE 1
int2 = 17                                                                # STEP 0
heap0 = heaps.heapnew()                                                  # STEP 1
heaps.heappop(heap0)                                                     # STEP 2
heaps.heappop(heap0)                                                     # STEP 3
heaps.heappush(heap0,int2)                                               # STEP 4
assert (min(heap0) == heaps.heappop(heap0))                              # STEP 5
heap1 = heaps.heapmerge(heap0,heap0)                                     # STEP 6
heaps.heappop(heap1)                                                     # STEP 7
heap2 = heaps.heapnew()                                                  # STEP 8
int0 = 3                                                                 # STEP 9
heaps.heappush(heap0,int2)                                              # STEP 10
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 11
heap0 = heaps.heapmerge(heap1,heap2)                                    # STEP 12
heaps.heappop(heap0)                                                    # STEP 13
heap2 = heaps.heapmerge(heap0,heap2)                                    # STEP 14
int3 = 19                                                               # STEP 15
heaps.heappop(heap1)                                                    # STEP 16
heaps.heappop(heap2)                                                    # STEP 17
heaps.heappop(heap1)                                                    # STEP 18
heaps.heappush(heap2,int0)                                              # STEP 19
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 20
heap1 = heaps.heapmerge(heap2,heap0)                                    # STEP 21
heap0 = heaps.heapmerge(heap1,heap0)                                    # STEP 22
heap2 = heaps.heapmerge(heap0,heap0)                                    # STEP 23
heaps.heappop(heap2)                                                    # STEP 24
int4 = 11                                                               # STEP 25
heap2 = heaps.heapmerge(heap1,heap1)                                    # STEP 26
heap0 = heaps.heapmerge(heap0,heap0)                                    # STEP 27
heaps.heappop(heap1)                                                    # STEP 28
heaps.heappop(heap0)                                                    # STEP 29
heap1 = heaps.heapmerge(heap0,heap1)                                    # STEP 30
heaps.heappush(heap1,int3)                                              # STEP 31
heaps.heappush(heap0,int3)                                              # STEP 32
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 33
int2 = 12                                                               # STEP 34
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 35
heaps.heappop(heap0)                                                    # STEP 36
heaps.heappush(heap1,int0)                                              # STEP 37
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 38
int1 = 3                                                                # STEP 39
int3 = 19                                                               # STEP 40
heap2 = heaps.heapnew()                                                 # STEP 41
heap1 = heaps.heapmerge(heap1,heap2)                                    # STEP 42
heaps.heappop(heap0)                                                    # STEP 43
int0 = 11                                                               # STEP 44
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 45
heaps.heappop(heap1)                                                    # STEP 46
heap1 = heaps.heapmerge(heap2,heap2)                                    # STEP 47
heaps.heappop(heap1)                                                    # STEP 48
heaps.heappush(heap2,int0)                                              # STEP 49
heaps.heappush(heap2,int2)                                              # STEP 50
heaps.heappop(heap0)                                                    # STEP 51
heaps.heappop(heap1)                                                    # STEP 52
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 53
heaps.heappop(heap1)                                                    # STEP 54
heaps.heappop(heap1)                                                    # STEP 55
int0 = 17                                                               # STEP 56
heaps.heappop(heap2)                                                    # STEP 57
heaps.heappop(heap2)                                                    # STEP 58
heaps.heappop(heap0)                                                    # STEP 59
int2 = 1                                                                # STEP 60
heaps.heappush(heap1,int4)                                              # STEP 61
heap2 = heaps.heapmerge(heap2,heap1)                                    # STEP 62
int4 = 4                                                                # STEP 63
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 64
heaps.heappush(heap0,int1)                                              # STEP 65
heap1 = heaps.heapmerge(heap2,heap1)                                    # STEP 66
heaps.heappush(heap0,int2)                                              # STEP 67
heap2 = heaps.heapmerge(heap2,heap2)                                    # STEP 68
heap0 = heaps.heapmerge(heap2,heap0)                                    # STEP 69
heaps.heappush(heap0,int4)                                              # STEP 70
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 71
int2 = 9                                                                # STEP 72
assert (min(heap2) == heaps.heappop(heap2))                             # STEP 73
int1 = 7                                                                # STEP 74
heaps.heappush(heap0,int1)                                              # STEP 75
heap0 = heaps.heapmerge(heap0,heap1)                                    # STEP 76
heaps.heappop(heap1)                                                    # STEP 77
heap2 = heaps.heapmerge(heap1,heap2)                                    # STEP 78
assert (min(heap1) == heaps.heappop(heap1))                             # STEP 79
assert (min(heap0) == heaps.heappop(heap0))                             # STEP 80
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104f36710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 7453, in safely
    act[2]()
  File "/Users/alex/tstl/examples/hypothesis_heaps/sut.py", line 5100, in act148
    assert (min(self.p_heap[0]) == heaps.heappop(self.p_heap[0]))
58 BRANCHES COVERED
41 STATEMENTS COVERED

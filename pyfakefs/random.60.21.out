Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=True, timedProgress=30, silentFail=True, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.4345.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #438 STEP #0 (0:00:30.000772) Sat Jul 22 00:21:27 2017 [ 897 stmts 1164 branches ] 43700 TOTAL ACTIONS (1456.62918277/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x1043381b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 72 steps

SAVING TEST AS failure.4345.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component3 = "epsilon"                                                   # STEP 0
component4 = "g"                                                         # STEP 1
component1 = "d"                                                         # STEP 2
component2 = "d"                                                         # STEP 3
component0 = "c"                                                         # STEP 4
os0 = newFakeOS()                                                        # STEP 5
path0 = "/Volumes/ramdisk/test"                                          # STEP 6
os0.symlink(path0,path0)                                                 # STEP 7
bytes4 = 0                                                               # STEP 8
path0 += "/" + component0                                                # STEP 9
stat4 = os0.stat(path0)                                                 # STEP 10
result = os0.path.islink(path0)                                         # STEP 11
opener0 = newFakeOpener(os0)                                            # STEP 12
result = os0.path.exists(path0)                                         # STEP 13
fd0 = os0.open(path0, os.O_CREAT | os.O_EXCL)                           # STEP 14
stat2 = os0.stat(path0)                                                 # STEP 15
result = os0.path.dirname(path0)                                        # STEP 16
component0 = "c"                                                        # STEP 17
result = os0.path.lexists(path0)                                        # STEP 18
stat3 = os0.stat(path0)                                                 # STEP 19
stat4 = os0.lstat(path0)                                                # STEP 20
result = stat4.st_size                                                  # STEP 21
os0.makedirs(path0)                                                     # STEP 22
result = os0.path.lexists(path0)                                        # STEP 23
stat0 = os0.stat(path0)                                                 # STEP 24
os0.close(fd0)                                                          # STEP 25
os0.makedirs(path0)                                                     # STEP 26
stat4 = os0.fstat(fd0)                                                  # STEP 27
stat1 = os0.lstat(path0)                                                # STEP 28
result = stat4.st_size                                                  # STEP 29
result = stat4.st_nlink                                                 # STEP 30
os0.remove(path0)                                                       # STEP 31
path3 = "/Volumes/ramdisk/test"                                         # STEP 32
os0.link(path3,path3)                                                   # STEP 33
path4 = "/Volumes/ramdisk/test"                                         # STEP 34
result = stat4.st_nlink                                                 # STEP 35
result = stat2.st_nlink                                                 # STEP 36
file0 = opener0(path4)                                                  # STEP 37
file0 = opener0(path4,'a')                                              # STEP 38
file0 = opener0(path0,'a')                                              # STEP 39
result = file0.read(bytes4)                                             # STEP 40
path3 = "/Volumes/ramdisk/test"                                         # STEP 41
os0.path.getsize(path0)                                                 # STEP 42
os0.symlink(path4,path0)                                                # STEP 43
path3 += "/" + component4                                               # STEP 44
os0.makedirs(path3)                                                     # STEP 45
bytes4 = 0                                                              # STEP 46
os0.removedirs(path4)                                                   # STEP 47
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 48
os0.link(path4,path3)                                                   # STEP 49
os0.mkdir(path0)                                                        # STEP 50
os0.link(path0,path0)                                                   # STEP 51
result = stat1.st_nlink                                                 # STEP 52
stat1 = os0.lstat(path0)                                                # STEP 53
result = sorted(os0.listdir(path3))                                     # STEP 54
file0.next()                                                            # STEP 55
result = stat1.st_size                                                  # STEP 56
result = os0.path.isfile(path0)                                         # STEP 57
os0.link(path3,path3)                                                   # STEP 58
path4 += "/" + component2                                               # STEP 59
stat4 = os0.lstat(path4)                                                # STEP 60
result = os0.path.isfile(path3)                                         # STEP 61
result = stat2.st_size                                                  # STEP 62
stat1 = os0.stat(path4)                                                 # STEP 63
component2 = "h"                                                        # STEP 64
os0.rename(path4,path0)                                                 # STEP 65
os0.link(path4,path4)                                                   # STEP 66
stat2 = os0.fstat(fd0)                                                  # STEP 67
component4 = "beta"                                                     # STEP 68
bytes3 = 0                                                              # STEP 69
result = os0.read(fd0,bytes4)                                           # STEP 70
result = file0.read(bytes3)                                             # STEP 71
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10706de18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 40
STOPPING TESTING DUE TO TIMEOUT
42.9208472687 PERCENT COVERED
60.3179199696 TOTAL RUNTIME
869 EXECUTED
86812 TOTAL TEST OPERATIONS
52.5041115284 TIME SPENT EXECUTING TEST OPERATIONS
4.19881033897 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.0525162220001 TIME SPENT CHECKING PROPERTIES
52.5566277504 TOTAL TIME SPENT RUNNING SUT
2.53589320183 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
component3 = "epsilon"                                                   # STEP 0
component4 = "g"                                                         # STEP 1
component1 = "d"                                                         # STEP 2
component2 = "d"                                                         # STEP 3
component0 = "c"                                                         # STEP 4
os0 = newFakeOS()                                                        # STEP 5
path0 = "/Volumes/ramdisk/test"                                          # STEP 6
os0.symlink(path0,path0)                                                 # STEP 7
bytes4 = 0                                                               # STEP 8
path0 += "/" + component0                                                # STEP 9
stat4 = os0.stat(path0)                                                 # STEP 10
result = os0.path.islink(path0)                                         # STEP 11
opener0 = newFakeOpener(os0)                                            # STEP 12
result = os0.path.exists(path0)                                         # STEP 13
fd0 = os0.open(path0, os.O_CREAT | os.O_EXCL)                           # STEP 14
stat2 = os0.stat(path0)                                                 # STEP 15
result = os0.path.dirname(path0)                                        # STEP 16
component0 = "c"                                                        # STEP 17
result = os0.path.lexists(path0)                                        # STEP 18
stat3 = os0.stat(path0)                                                 # STEP 19
stat4 = os0.lstat(path0)                                                # STEP 20
result = stat4.st_size                                                  # STEP 21
os0.makedirs(path0)                                                     # STEP 22
result = os0.path.lexists(path0)                                        # STEP 23
stat0 = os0.stat(path0)                                                 # STEP 24
os0.close(fd0)                                                          # STEP 25
os0.makedirs(path0)                                                     # STEP 26
stat4 = os0.fstat(fd0)                                                  # STEP 27
stat1 = os0.lstat(path0)                                                # STEP 28
result = stat4.st_size                                                  # STEP 29
result = stat4.st_nlink                                                 # STEP 30
os0.remove(path0)                                                       # STEP 31
path3 = "/Volumes/ramdisk/test"                                         # STEP 32
os0.link(path3,path3)                                                   # STEP 33
path4 = "/Volumes/ramdisk/test"                                         # STEP 34
result = stat4.st_nlink                                                 # STEP 35
result = stat2.st_nlink                                                 # STEP 36
file0 = opener0(path4)                                                  # STEP 37
file0 = opener0(path4,'a')                                              # STEP 38
file0 = opener0(path0,'a')                                              # STEP 39
result = file0.read(bytes4)                                             # STEP 40
path3 = "/Volumes/ramdisk/test"                                         # STEP 41
os0.path.getsize(path0)                                                 # STEP 42
os0.symlink(path4,path0)                                                # STEP 43
path3 += "/" + component4                                               # STEP 44
os0.makedirs(path3)                                                     # STEP 45
bytes4 = 0                                                              # STEP 46
os0.removedirs(path4)                                                   # STEP 47
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 48
os0.link(path4,path3)                                                   # STEP 49
os0.mkdir(path0)                                                        # STEP 50
os0.link(path0,path0)                                                   # STEP 51
result = stat1.st_nlink                                                 # STEP 52
stat1 = os0.lstat(path0)                                                # STEP 53
result = sorted(os0.listdir(path3))                                     # STEP 54
file0.next()                                                            # STEP 55
result = stat1.st_size                                                  # STEP 56
result = os0.path.isfile(path0)                                         # STEP 57
os0.link(path3,path3)                                                   # STEP 58
path4 += "/" + component2                                               # STEP 59
stat4 = os0.lstat(path4)                                                # STEP 60
result = os0.path.isfile(path3)                                         # STEP 61
result = stat2.st_size                                                  # STEP 62
stat1 = os0.stat(path4)                                                 # STEP 63
component2 = "h"                                                        # STEP 64
os0.rename(path4,path0)                                                 # STEP 65
os0.link(path4,path4)                                                   # STEP 66
stat2 = os0.fstat(fd0)                                                  # STEP 67
component4 = "beta"                                                     # STEP 68
bytes3 = 0                                                              # STEP 69
result = os0.read(fd0,bytes4)                                           # STEP 70
result = file0.read(bytes3)                                             # STEP 71
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10706de18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
1189 BRANCHES COVERED
911 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=True, timedProgress=30, silentFail=True, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.5395.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10830b0e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 67 steps

SAVING TEST AS failure.5395.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component2 = "c"                                                         # STEP 0
component1 = "lambda"                                                    # STEP 1
component3 = "g"                                                         # STEP 2
component4 = "alpha"                                                     # STEP 3
os0 = newFakeOS()                                                        # STEP 4
path0 = "/Volumes/ramdisk/test"                                          # STEP 5
component0 = "delta"                                                     # STEP 6
result = os0.path.isabs(path0)                                           # STEP 7
result = sorted(os0.listdir(path0))                                      # STEP 8
bytes2 = 0                                                               # STEP 9
result = os0.readlink(path0)                                            # STEP 10
bytes1 = 0                                                              # STEP 11
result = os0.path.isdir(path0)                                          # STEP 12
path0 += "/" + component4                                               # STEP 13
stat0 = os0.lstat(path0)                                                # STEP 14
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY)                         # STEP 15
str4 = ""                                                               # STEP 16
component4 = "h"                                                        # STEP 17
str4 += 'd'                                                             # STEP 18
str4 += 's'                                                             # STEP 19
os0.close(fd0)                                                          # STEP 20
stat1 = os0.stat(path0)                                                 # STEP 21
str4 += 'd'                                                             # STEP 22
stat3 = os0.lstat(path0)                                                # STEP 23
result = os0.path.abspath(path0)                                        # STEP 24
stat2 = os0.lstat(path0)                                                # STEP 25
str4 += 'h'                                                             # STEP 26
str4 += 'c'                                                             # STEP 27
str4 += 'b'                                                             # STEP 28
str1 = ""                                                               # STEP 29
stat0 = os0.lstat(path0)                                                # STEP 30
str4 += 'j'                                                             # STEP 31
result = os0.read(fd0,bytes1)                                           # STEP 32
str4 += 'a'                                                             # STEP 33
str1 += 'p'                                                             # STEP 34
str0 = ""                                                               # STEP 35
str0 += 'r'                                                             # STEP 36
result = os0.path.islink(path0)                                         # STEP 37
str0 += 'g'                                                             # STEP 38
str1 += 'p'                                                             # STEP 39
str4 += 'u'                                                             # STEP 40
str0 += 'y'                                                             # STEP 41
bytes3 = 0                                                              # STEP 42
str4 += 'h'                                                             # STEP 43
result = os0.path.isdir(path0)                                          # STEP 44
str4 += 'a'                                                             # STEP 45
str1 = ""                                                               # STEP 46
result = os0.path.lexists(path0)                                        # STEP 47
stat4 = os0.fstat(fd0)                                                  # STEP 48
str1 += 'j'                                                             # STEP 49
str0 += 'x'                                                             # STEP 50
str4 += 't'                                                             # STEP 51
str0 += 's'                                                             # STEP 52
result = stat3.st_size                                                  # STEP 53
opener0 = newFakeOpener(os0)                                            # STEP 54
file0 = opener0(path0,'w')                                              # STEP 55
result = os0.read(fd0,bytes3)                                           # STEP 56
file0.write(str1)                                                       # STEP 57
result = os0.path.islink(path0)                                         # STEP 58
bytes1 = 0                                                              # STEP 59
path0 += "/" + component1                                               # STEP 60
os0.path.getsize(path0)                                                 # STEP 61
str1 += 'g'                                                             # STEP 62
fd0 = os0.open(path0, os.O_WRONLY | os.O_APPEND)                        # STEP 63
str1 += 'q'                                                             # STEP 64
str4 += " "                                                             # STEP 65
result = file0.readline(bytes3)                                         # STEP 66
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x103f01fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #467 STEP #37 (0:00:30.001832) Sat Jul 22 05:35:11 2017 [ 900 stmts 1171 branches ] 46604 TOTAL ACTIONS (1553.371807/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 58
STOPPING TESTING DUE TO TIMEOUT
42.2891118543 PERCENT COVERED
60.3327789307 TOTAL RUNTIME
894 EXECUTED
89325 TOTAL TEST OPERATIONS
52.3982179165 TIME SPENT EXECUTING TEST OPERATIONS
4.22904634476 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.0531723499298 TIME SPENT CHECKING PROPERTIES
52.4513902664 TOTAL TIME SPENT RUNNING SUT
2.62177801132 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
component2 = "c"                                                         # STEP 0
component1 = "lambda"                                                    # STEP 1
component3 = "g"                                                         # STEP 2
component4 = "alpha"                                                     # STEP 3
os0 = newFakeOS()                                                        # STEP 4
path0 = "/Volumes/ramdisk/test"                                          # STEP 5
component0 = "delta"                                                     # STEP 6
result = os0.path.isabs(path0)                                           # STEP 7
result = sorted(os0.listdir(path0))                                      # STEP 8
bytes2 = 0                                                               # STEP 9
result = os0.readlink(path0)                                            # STEP 10
bytes1 = 0                                                              # STEP 11
result = os0.path.isdir(path0)                                          # STEP 12
path0 += "/" + component4                                               # STEP 13
stat0 = os0.lstat(path0)                                                # STEP 14
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY)                         # STEP 15
str4 = ""                                                               # STEP 16
component4 = "h"                                                        # STEP 17
str4 += 'd'                                                             # STEP 18
str4 += 's'                                                             # STEP 19
os0.close(fd0)                                                          # STEP 20
stat1 = os0.stat(path0)                                                 # STEP 21
str4 += 'd'                                                             # STEP 22
stat3 = os0.lstat(path0)                                                # STEP 23
result = os0.path.abspath(path0)                                        # STEP 24
stat2 = os0.lstat(path0)                                                # STEP 25
str4 += 'h'                                                             # STEP 26
str4 += 'c'                                                             # STEP 27
str4 += 'b'                                                             # STEP 28
str1 = ""                                                               # STEP 29
stat0 = os0.lstat(path0)                                                # STEP 30
str4 += 'j'                                                             # STEP 31
result = os0.read(fd0,bytes1)                                           # STEP 32
str4 += 'a'                                                             # STEP 33
str1 += 'p'                                                             # STEP 34
str0 = ""                                                               # STEP 35
str0 += 'r'                                                             # STEP 36
result = os0.path.islink(path0)                                         # STEP 37
str0 += 'g'                                                             # STEP 38
str1 += 'p'                                                             # STEP 39
str4 += 'u'                                                             # STEP 40
str0 += 'y'                                                             # STEP 41
bytes3 = 0                                                              # STEP 42
str4 += 'h'                                                             # STEP 43
result = os0.path.isdir(path0)                                          # STEP 44
str4 += 'a'                                                             # STEP 45
str1 = ""                                                               # STEP 46
result = os0.path.lexists(path0)                                        # STEP 47
stat4 = os0.fstat(fd0)                                                  # STEP 48
str1 += 'j'                                                             # STEP 49
str0 += 'x'                                                             # STEP 50
str4 += 't'                                                             # STEP 51
str0 += 's'                                                             # STEP 52
result = stat3.st_size                                                  # STEP 53
opener0 = newFakeOpener(os0)                                            # STEP 54
file0 = opener0(path0,'w')                                              # STEP 55
result = os0.read(fd0,bytes3)                                           # STEP 56
file0.write(str1)                                                       # STEP 57
result = os0.path.islink(path0)                                         # STEP 58
bytes1 = 0                                                              # STEP 59
path0 += "/" + component1                                               # STEP 60
os0.path.getsize(path0)                                                 # STEP 61
str1 += 'g'                                                             # STEP 62
fd0 = os0.open(path0, os.O_WRONLY | os.O_APPEND)                        # STEP 63
str1 += 'q'                                                             # STEP 64
str4 += " "                                                             # STEP 65
result = file0.readline(bytes3)                                         # STEP 66
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x103f01fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
1175 BRANCHES COVERED
902 STATEMENTS COVERED

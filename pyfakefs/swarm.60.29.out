Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=True, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=True, timedProgress=30, silentFail=True, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.4543.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x104d21e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 60 steps

SAVING TEST AS failure.4543.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component2 = "beta"                                                      # STEP 0
component0 = "g"                                                         # STEP 1
component4 = "lambda"                                                    # STEP 2
component3 = "lambda"                                                    # STEP 3
str3 = ""                                                                # STEP 4
path3 = "/Volumes/ramdisk/test"                                          # STEP 5
component1 = "e"                                                         # STEP 6
path3 += "/" + component4                                                # STEP 7
component4 = "e"                                                         # STEP 8
path4 = "/Volumes/ramdisk/test"                                          # STEP 9
bytes0 = 0                                                              # STEP 10
path3 += "/" + component4                                               # STEP 11
component4 = "a"                                                        # STEP 12
path3 = "/Volumes/ramdisk/test"                                         # STEP 13
path1 = "/Volumes/ramdisk/test"                                         # STEP 14
path3 += "/" + component4                                               # STEP 15
component4 = "phi"                                                      # STEP 16
bytes0 += 1                                                             # STEP 17
path3 += "/" + component0                                               # STEP 18
str2 = ""                                                               # STEP 19
path1 += "/" + component4                                               # STEP 20
path4 += "/" + component4                                               # STEP 21
os0 = newFakeOS()                                                       # STEP 22
fd0 = os0.open(path4, os.O_CREAT)                                       # STEP 23
bytes3 = 0                                                              # STEP 24
stat3 = os0.lstat(path4)                                                # STEP 25
component0 = "f"                                                        # STEP 26
os0.makedirs(path1)                                                     # STEP 27
component4 = "lambda"                                                   # STEP 28
result = os0.path.islink(path4)                                         # STEP 29
path1 += "/" + component0                                               # STEP 30
stat0 = os0.lstat(path1)                                                # STEP 31
os0.path.getsize(path1)                                                 # STEP 32
result = os0.path.abspath(path1)                                        # STEP 33
os0.makedirs(path4)                                                     # STEP 34
component0 = "h"                                                        # STEP 35
str4 = ""                                                               # STEP 36
stat2 = os0.lstat(path4)                                                # STEP 37
stat4 = os0.fstat(fd0)                                                  # STEP 38
path3 += "/" + component3                                               # STEP 39
os0.close(fd0)                                                          # STEP 40
result = os0.path.isdir(path4)                                          # STEP 41
path3 += "/" + component2                                               # STEP 42
result = os0.path.islink(path4)                                         # STEP 43
os0.makedirs(path4)                                                     # STEP 44
path3 += "/" + component3                                               # STEP 45
component2 = "c"                                                        # STEP 46
component3 = "lambda"                                                   # STEP 47
opener0 = newFakeOpener(os0)                                            # STEP 48
os0.makedirs(path4)                                                     # STEP 49
file0 = opener0(path4,'a')                                              # STEP 50
path4 += "/" + component2                                               # STEP 51
path0 = "/Volumes/ramdisk/test"                                         # STEP 52
result = os0.path.lexists(path3)                                        # STEP 53
fd0 = os0.open(path4, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 54
os0.rename(path1,path3)                                                 # STEP 55
component2 = "f"                                                        # STEP 56
os0.write(fd0,str3)                                                     # STEP 57
os0.path.getsize(path1)                                                 # STEP 58
result = file0.read(bytes3)                                             # STEP 59
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x1097b4c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #386 STEP #38 (0:00:30.001060) Sat Jul 22 01:14:45 2017 [ 879 stmts 1144 branches ] 38498 TOTAL ACTIONS (1283.22132579/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 58
STOPPING TESTING DUE TO TIMEOUT
42.1033073207 PERCENT COVERED
60.3071250916 TOTAL RUNTIME
737 EXECUTED
73618 TOTAL TEST OPERATIONS
54.0146150589 TIME SPENT EXECUTING TEST OPERATIONS
2.40394020081 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.0465512275696 TIME SPENT CHECKING PROPERTIES
54.0611662865 TOTAL TIME SPENT RUNNING SUT
2.23122167587 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
component2 = "beta"                                                      # STEP 0
component0 = "g"                                                         # STEP 1
component4 = "lambda"                                                    # STEP 2
component3 = "lambda"                                                    # STEP 3
str3 = ""                                                                # STEP 4
path3 = "/Volumes/ramdisk/test"                                          # STEP 5
component1 = "e"                                                         # STEP 6
path3 += "/" + component4                                                # STEP 7
component4 = "e"                                                         # STEP 8
path4 = "/Volumes/ramdisk/test"                                          # STEP 9
bytes0 = 0                                                              # STEP 10
path3 += "/" + component4                                               # STEP 11
component4 = "a"                                                        # STEP 12
path3 = "/Volumes/ramdisk/test"                                         # STEP 13
path1 = "/Volumes/ramdisk/test"                                         # STEP 14
path3 += "/" + component4                                               # STEP 15
component4 = "phi"                                                      # STEP 16
bytes0 += 1                                                             # STEP 17
path3 += "/" + component0                                               # STEP 18
str2 = ""                                                               # STEP 19
path1 += "/" + component4                                               # STEP 20
path4 += "/" + component4                                               # STEP 21
os0 = newFakeOS()                                                       # STEP 22
fd0 = os0.open(path4, os.O_CREAT)                                       # STEP 23
bytes3 = 0                                                              # STEP 24
stat3 = os0.lstat(path4)                                                # STEP 25
component0 = "f"                                                        # STEP 26
os0.makedirs(path1)                                                     # STEP 27
component4 = "lambda"                                                   # STEP 28
result = os0.path.islink(path4)                                         # STEP 29
path1 += "/" + component0                                               # STEP 30
stat0 = os0.lstat(path1)                                                # STEP 31
os0.path.getsize(path1)                                                 # STEP 32
result = os0.path.abspath(path1)                                        # STEP 33
os0.makedirs(path4)                                                     # STEP 34
component0 = "h"                                                        # STEP 35
str4 = ""                                                               # STEP 36
stat2 = os0.lstat(path4)                                                # STEP 37
stat4 = os0.fstat(fd0)                                                  # STEP 38
path3 += "/" + component3                                               # STEP 39
os0.close(fd0)                                                          # STEP 40
result = os0.path.isdir(path4)                                          # STEP 41
path3 += "/" + component2                                               # STEP 42
result = os0.path.islink(path4)                                         # STEP 43
os0.makedirs(path4)                                                     # STEP 44
path3 += "/" + component3                                               # STEP 45
component2 = "c"                                                        # STEP 46
component3 = "lambda"                                                   # STEP 47
opener0 = newFakeOpener(os0)                                            # STEP 48
os0.makedirs(path4)                                                     # STEP 49
file0 = opener0(path4,'a')                                              # STEP 50
path4 += "/" + component2                                               # STEP 51
path0 = "/Volumes/ramdisk/test"                                         # STEP 52
result = os0.path.lexists(path3)                                        # STEP 53
fd0 = os0.open(path4, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 54
os0.rename(path1,path3)                                                 # STEP 55
component2 = "f"                                                        # STEP 56
os0.write(fd0,str3)                                                     # STEP 57
os0.path.getsize(path1)                                                 # STEP 58
result = file0.read(bytes3)                                             # STEP 59
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x1097b4c20>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28528, in act567
    result = self.p_file[0].read(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
1165 BRANCHES COVERED
895 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=True, timedProgress=30, silentFail=True, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.4539.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10ab1e128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 50 steps

SAVING TEST AS failure.4539.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "epsilon"                                                   # STEP 0
component2 = "omega"                                                     # STEP 1
str1 = ""                                                                # STEP 2
path0 = "/Volumes/ramdisk/test"                                          # STEP 3
component0 = "c"                                                         # STEP 4
str1 += 'y'                                                              # STEP 5
str1 += 'k'                                                              # STEP 6
component3 = "b"                                                         # STEP 7
str1 += 'a'                                                              # STEP 8
str1 += 'j'                                                              # STEP 9
str1 += 'y'                                                             # STEP 10
component4 = "alpha"                                                    # STEP 11
os0 = newFakeOS()                                                       # STEP 12
str1 += 's'                                                             # STEP 13
os0.link(path0,path0)                                                   # STEP 14
bytes3 = 0                                                              # STEP 15
os0.makedirs(path0)                                                     # STEP 16
path0 += "/" + component0                                               # STEP 17
str1 += 'r'                                                             # STEP 18
bytes4 = 0                                                              # STEP 19
stat2 = os0.stat(path0)                                                 # STEP 20
str1 += 't'                                                             # STEP 21
result = os0.path.isabs(path0)                                          # STEP 22
stat1 = os0.lstat(path0)                                                # STEP 23
str1 += 'j'                                                             # STEP 24
stat2 = os0.stat(path0)                                                 # STEP 25
stat3 = os0.stat(path0)                                                 # STEP 26
result = sorted(os0.listdir(path0))                                     # STEP 27
os0.link(path0,path0)                                                   # STEP 28
str1 += 'w'                                                             # STEP 29
result = os0.path.lexists(path0)                                        # STEP 30
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)            # STEP 31
result = os0.readlink(path0)                                            # STEP 32
os0.symlink(path0,path0)                                                # STEP 33
os0.close(fd0)                                                          # STEP 34
opener0 = newFakeOpener(os0)                                            # STEP 35
component0 = "epsilon"                                                  # STEP 36
file0 = opener0(path0,'w')                                              # STEP 37
bytes1 = 0                                                              # STEP 38
os0.path.getsize(path0)                                                 # STEP 39
stat0 = os0.stat(path0)                                                 # STEP 40
path0 += "/" + component1                                               # STEP 41
os0.mkdir(path0)                                                        # STEP 42
result = os0.readlink(path0)                                            # STEP 43
file0.seek(bytes3)                                                      # STEP 44
os0.write(fd0,str1)                                                     # STEP 45
result = os0.path.exists(path0)                                         # STEP 46
os0.symlink(path0,path0)                                                # STEP 47
str1 += 'r'                                                             # STEP 48
result = file0.readline(bytes3)                                         # STEP 49
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10410b1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #417 STEP #70 (0:00:30.000990) Sat Jul 22 01:13:39 2017 [ 892 stmts 1162 branches ] 41620 TOTAL ACTIONS (1387.28755682/s)
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 93
STOPPING TESTING DUE TO TIMEOUT
42.735042735 PERCENT COVERED
60.3110220432 TOTAL RUNTIME
847 EXECUTED
84643 TOTAL TEST OPERATIONS
52.9500877857 TIME SPENT EXECUTING TEST OPERATIONS
3.89794254303 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.0542569160461 TIME SPENT CHECKING PROPERTIES
53.0043447018 TOTAL TIME SPENT RUNNING SUT
2.45102858543 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
component1 = "epsilon"                                                   # STEP 0
component2 = "omega"                                                     # STEP 1
str1 = ""                                                                # STEP 2
path0 = "/Volumes/ramdisk/test"                                          # STEP 3
component0 = "c"                                                         # STEP 4
str1 += 'y'                                                              # STEP 5
str1 += 'k'                                                              # STEP 6
component3 = "b"                                                         # STEP 7
str1 += 'a'                                                              # STEP 8
str1 += 'j'                                                              # STEP 9
str1 += 'y'                                                             # STEP 10
component4 = "alpha"                                                    # STEP 11
os0 = newFakeOS()                                                       # STEP 12
str1 += 's'                                                             # STEP 13
os0.link(path0,path0)                                                   # STEP 14
bytes3 = 0                                                              # STEP 15
os0.makedirs(path0)                                                     # STEP 16
path0 += "/" + component0                                               # STEP 17
str1 += 'r'                                                             # STEP 18
bytes4 = 0                                                              # STEP 19
stat2 = os0.stat(path0)                                                 # STEP 20
str1 += 't'                                                             # STEP 21
result = os0.path.isabs(path0)                                          # STEP 22
stat1 = os0.lstat(path0)                                                # STEP 23
str1 += 'j'                                                             # STEP 24
stat2 = os0.stat(path0)                                                 # STEP 25
stat3 = os0.stat(path0)                                                 # STEP 26
result = sorted(os0.listdir(path0))                                     # STEP 27
os0.link(path0,path0)                                                   # STEP 28
str1 += 'w'                                                             # STEP 29
result = os0.path.lexists(path0)                                        # STEP 30
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)            # STEP 31
result = os0.readlink(path0)                                            # STEP 32
os0.symlink(path0,path0)                                                # STEP 33
os0.close(fd0)                                                          # STEP 34
opener0 = newFakeOpener(os0)                                            # STEP 35
component0 = "epsilon"                                                  # STEP 36
file0 = opener0(path0,'w')                                              # STEP 37
bytes1 = 0                                                              # STEP 38
os0.path.getsize(path0)                                                 # STEP 39
stat0 = os0.stat(path0)                                                 # STEP 40
path0 += "/" + component1                                               # STEP 41
os0.mkdir(path0)                                                        # STEP 42
result = os0.readlink(path0)                                            # STEP 43
file0.seek(bytes3)                                                      # STEP 44
os0.write(fd0,str1)                                                     # STEP 45
result = os0.path.exists(path0)                                         # STEP 46
os0.symlink(path0,path0)                                                # STEP 47
str1 += 'r'                                                             # STEP 48
result = file0.readline(bytes3)                                         # STEP 49
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10410b1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
1181 BRANCHES COVERED
907 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=True, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=True, timedProgress=30, silentFail=True, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.4875.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x102728ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 53 steps

SAVING TEST AS failure.4875.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "b"                                                         # STEP 0
component2 = "a"                                                         # STEP 1
component3 = "delta"                                                     # STEP 2
component0 = "d"                                                         # STEP 3
str1 = ""                                                                # STEP 4
path3 = "/Volumes/ramdisk/test"                                          # STEP 5
component4 = "gamma"                                                     # STEP 6
bytes0 = 0                                                               # STEP 7
bytes1 = 0                                                               # STEP 8
path3 += "/" + component1                                                # STEP 9
path3 += "/" + component2                                               # STEP 10
component2 = "omega"                                                    # STEP 11
str0 = ""                                                               # STEP 12
os0 = newFakeOS()                                                       # STEP 13
path3 = "/Volumes/ramdisk/test"                                         # STEP 14
path0 = "/Volumes/ramdisk/test"                                         # STEP 15
result = sorted(os0.listdir(path3))                                     # STEP 16
component1 = "b"                                                        # STEP 17
bytes2 = 0                                                              # STEP 18
os0.remove(path0)                                                       # STEP 19
path3 = "/Volumes/ramdisk/test"                                         # STEP 20
path3 += "/" + component2                                               # STEP 21
opener0 = newFakeOpener(os0)                                            # STEP 22
path3 += "/" + component1                                               # STEP 23
path0 += "/" + component4                                               # STEP 24
component4 = "gamma"                                                    # STEP 25
os0.makedirs(path0)                                                     # STEP 26
result = sorted(os0.listdir(path0))                                     # STEP 27
component1 = "e"                                                        # STEP 28
path3 += "/" + component4                                               # STEP 29
os0.remove(path0)                                                       # STEP 30
bytes4 = 0                                                              # STEP 31
path0 += "/" + component2                                               # STEP 32
bytes3 = 0                                                              # STEP 33
component2 = "phi"                                                      # STEP 34
os0.remove(path3)                                                       # STEP 35
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 36
stat4 = os0.lstat(path3)                                                # STEP 37
component4 = "epsilon"                                                  # STEP 38
str3 = ""                                                               # STEP 39
path3 += "/" + component3                                               # STEP 40
stat3 = os0.lstat(path3)                                                # STEP 41
path3 += "/" + component4                                               # STEP 42
result = os0.path.abspath(path3)                                        # STEP 43
stat1 = os0.lstat(path3)                                                # STEP 44
component4 = "f"                                                        # STEP 45
os0.close(fd0)                                                          # STEP 46
result = os0.read(fd0,bytes3)                                           # STEP 47
component3 = "alpha"                                                    # STEP 48
file0 = opener0(path0,'a')                                              # STEP 49
stat0 = os0.lstat(path0)                                                # STEP 50
result = os0.read(fd0,bytes3)                                           # STEP 51
result = file0.readline(bytes3)                                         # STEP 52
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x103f510e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #366 STEP #54 (0:00:30.000668) Sat Jul 22 02:46:23 2017 [ 888 stmts 1152 branches ] 36507 TOTAL ACTIONS (1216.87290231/s)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x105076320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28701, in act570
    result = self.p_file[0].readline(self.p_bytes[0])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
Original test has 70 steps

SAVING TEST AS failure.4875.test.1
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component3 = "h"                                                         # STEP 0
os0 = newFakeOS()                                                        # STEP 1
component2 = "f"                                                         # STEP 2
bytes4 = 0                                                               # STEP 3
path3 = "/Volumes/ramdisk/test"                                          # STEP 4
result = os0.path.islink(path3)                                          # STEP 5
component0 = "e"                                                         # STEP 6
os0.remove(path3)                                                        # STEP 7
result = os0.path.exists(path3)                                          # STEP 8
component4 = "epsilon"                                                   # STEP 9
component1 = "delta"                                                    # STEP 10
result = os0.path.isdir(path3)                                          # STEP 11
str4 = ""                                                               # STEP 12
path3 += "/" + component2                                               # STEP 13
fd0 = os0.open(path3, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 14
component2 = "g"                                                        # STEP 15
bytes2 = 0                                                              # STEP 16
result = os0.path.abspath(path3)                                        # STEP 17
os0.remove(path3)                                                       # STEP 18
os0.close(fd0)                                                          # STEP 19
os0.remove(path3)                                                       # STEP 20
bytes2 += 1                                                             # STEP 21
path3 += "/" + component2                                               # STEP 22
fd0 = os0.open(path3, os.O_CREAT | os.O_WRONLY)                         # STEP 23
result = os0.path.isdir(path3)                                          # STEP 24
component2 = "gamma"                                                    # STEP 25
path3 += "/" + component4                                               # STEP 26
bytes0 = 0                                                              # STEP 27
str1 = ""                                                               # STEP 28
result = os0.path.isdir(path3)                                          # STEP 29
str3 = ""                                                               # STEP 30
component4 = "phi"                                                      # STEP 31
stat1 = os0.fstat(fd0)                                                  # STEP 32
bytes3 = 0                                                              # STEP 33
bytes3 += 1                                                             # STEP 34
bytes4 += 1                                                             # STEP 35
path3 = "/Volumes/ramdisk/test"                                         # STEP 36
bytes3 = 0                                                              # STEP 37
bytes2 += 1                                                             # STEP 38
stat3 = os0.fstat(fd0)                                                  # STEP 39
bytes0 += 1                                                             # STEP 40
opener0 = newFakeOpener(os0)                                            # STEP 41
path3 += "/" + component2                                               # STEP 42
file0 = opener0(path3,'w')                                              # STEP 43
result = os0.path.islink(path3)                                         # STEP 44
result = os0.path.isdir(path3)                                          # STEP 45
path0 = "/Volumes/ramdisk/test"                                         # STEP 46
path0 += "/" + component4                                               # STEP 47
component2 = "f"                                                        # STEP 48
result = os0.path.lexists(path0)                                        # STEP 49
bytes1 = 0                                                              # STEP 50
bytes4 += 1                                                             # STEP 51
path3 += "/" + component2                                               # STEP 52
path3 += "/" + component3                                               # STEP 53
bytes0 = 0                                                              # STEP 54
os0.path.getsize(path3)                                                 # STEP 55
result = os0.path.lexists(path0)                                        # STEP 56
component4 = "beta"                                                     # STEP 57
file0.write(str4)                                                       # STEP 58
os0.path.getsize(path0)                                                 # STEP 59
component2 = "e"                                                        # STEP 60
component3 = "b"                                                        # STEP 61
stat1 = os0.fstat(fd0)                                                  # STEP 62
os0.write(fd0,str3)                                                     # STEP 63
os0.remove(path3)                                                       # STEP 64
path0 += "/" + component1                                               # STEP 65
bytes4 = 0                                                              # STEP 66
path0 += "/" + component0                                               # STEP 67
component0 = "beta"                                                     # STEP 68
result = file0.readline(bytes0)                                         # STEP 69
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10508e9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28701, in act570
    result = self.p_file[0].readline(self.p_bytes[0])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE IS NEW, STORING; NOW 2 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 58
STOPPING TESTING DUE TO TIMEOUT
42.066146414 PERCENT COVERED
60.3401138783 TOTAL RUNTIME
734 EXECUTED
73281 TOTAL TEST OPERATIONS
54.1611549854 TIME SPENT EXECUTING TEST OPERATIONS
2.27887701988 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.0447235107422 TIME SPENT CHECKING PROPERTIES
54.2058784962 TOTAL TIME SPENT RUNNING SUT
2.18630409241 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
2 FAILED
0 REPEATS OF FAILURES
2 ACTUAL DISTINCT FAILURES

FAILURE 0
component1 = "b"                                                         # STEP 0
component2 = "a"                                                         # STEP 1
component3 = "delta"                                                     # STEP 2
component0 = "d"                                                         # STEP 3
str1 = ""                                                                # STEP 4
path3 = "/Volumes/ramdisk/test"                                          # STEP 5
component4 = "gamma"                                                     # STEP 6
bytes0 = 0                                                               # STEP 7
bytes1 = 0                                                               # STEP 8
path3 += "/" + component1                                                # STEP 9
path3 += "/" + component2                                               # STEP 10
component2 = "omega"                                                    # STEP 11
str0 = ""                                                               # STEP 12
os0 = newFakeOS()                                                       # STEP 13
path3 = "/Volumes/ramdisk/test"                                         # STEP 14
path0 = "/Volumes/ramdisk/test"                                         # STEP 15
result = sorted(os0.listdir(path3))                                     # STEP 16
component1 = "b"                                                        # STEP 17
bytes2 = 0                                                              # STEP 18
os0.remove(path0)                                                       # STEP 19
path3 = "/Volumes/ramdisk/test"                                         # STEP 20
path3 += "/" + component2                                               # STEP 21
opener0 = newFakeOpener(os0)                                            # STEP 22
path3 += "/" + component1                                               # STEP 23
path0 += "/" + component4                                               # STEP 24
component4 = "gamma"                                                    # STEP 25
os0.makedirs(path0)                                                     # STEP 26
result = sorted(os0.listdir(path0))                                     # STEP 27
component1 = "e"                                                        # STEP 28
path3 += "/" + component4                                               # STEP 29
os0.remove(path0)                                                       # STEP 30
bytes4 = 0                                                              # STEP 31
path0 += "/" + component2                                               # STEP 32
bytes3 = 0                                                              # STEP 33
component2 = "phi"                                                      # STEP 34
os0.remove(path3)                                                       # STEP 35
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 36
stat4 = os0.lstat(path3)                                                # STEP 37
component4 = "epsilon"                                                  # STEP 38
str3 = ""                                                               # STEP 39
path3 += "/" + component3                                               # STEP 40
stat3 = os0.lstat(path3)                                                # STEP 41
path3 += "/" + component4                                               # STEP 42
result = os0.path.abspath(path3)                                        # STEP 43
stat1 = os0.lstat(path3)                                                # STEP 44
component4 = "f"                                                        # STEP 45
os0.close(fd0)                                                          # STEP 46
result = os0.read(fd0,bytes3)                                           # STEP 47
component3 = "alpha"                                                    # STEP 48
file0 = opener0(path0,'a')                                              # STEP 49
stat0 = os0.lstat(path0)                                                # STEP 50
result = os0.read(fd0,bytes3)                                           # STEP 51
result = file0.readline(bytes3)                                         # STEP 52
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x103f510e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28881, in act573
    result = self.p_file[0].readline(self.p_bytes[3])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
FAILURE 1
component3 = "h"                                                         # STEP 0
os0 = newFakeOS()                                                        # STEP 1
component2 = "f"                                                         # STEP 2
bytes4 = 0                                                               # STEP 3
path3 = "/Volumes/ramdisk/test"                                          # STEP 4
result = os0.path.islink(path3)                                          # STEP 5
component0 = "e"                                                         # STEP 6
os0.remove(path3)                                                        # STEP 7
result = os0.path.exists(path3)                                          # STEP 8
component4 = "epsilon"                                                   # STEP 9
component1 = "delta"                                                    # STEP 10
result = os0.path.isdir(path3)                                          # STEP 11
str4 = ""                                                               # STEP 12
path3 += "/" + component2                                               # STEP 13
fd0 = os0.open(path3, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 14
component2 = "g"                                                        # STEP 15
bytes2 = 0                                                              # STEP 16
result = os0.path.abspath(path3)                                        # STEP 17
os0.remove(path3)                                                       # STEP 18
os0.close(fd0)                                                          # STEP 19
os0.remove(path3)                                                       # STEP 20
bytes2 += 1                                                             # STEP 21
path3 += "/" + component2                                               # STEP 22
fd0 = os0.open(path3, os.O_CREAT | os.O_WRONLY)                         # STEP 23
result = os0.path.isdir(path3)                                          # STEP 24
component2 = "gamma"                                                    # STEP 25
path3 += "/" + component4                                               # STEP 26
bytes0 = 0                                                              # STEP 27
str1 = ""                                                               # STEP 28
result = os0.path.isdir(path3)                                          # STEP 29
str3 = ""                                                               # STEP 30
component4 = "phi"                                                      # STEP 31
stat1 = os0.fstat(fd0)                                                  # STEP 32
bytes3 = 0                                                              # STEP 33
bytes3 += 1                                                             # STEP 34
bytes4 += 1                                                             # STEP 35
path3 = "/Volumes/ramdisk/test"                                         # STEP 36
bytes3 = 0                                                              # STEP 37
bytes2 += 1                                                             # STEP 38
stat3 = os0.fstat(fd0)                                                  # STEP 39
bytes0 += 1                                                             # STEP 40
opener0 = newFakeOpener(os0)                                            # STEP 41
path3 += "/" + component2                                               # STEP 42
file0 = opener0(path3,'w')                                              # STEP 43
result = os0.path.islink(path3)                                         # STEP 44
result = os0.path.isdir(path3)                                          # STEP 45
path0 = "/Volumes/ramdisk/test"                                         # STEP 46
path0 += "/" + component4                                               # STEP 47
component2 = "f"                                                        # STEP 48
result = os0.path.lexists(path0)                                        # STEP 49
bytes1 = 0                                                              # STEP 50
bytes4 += 1                                                             # STEP 51
path3 += "/" + component2                                               # STEP 52
path3 += "/" + component3                                               # STEP 53
bytes0 = 0                                                              # STEP 54
os0.path.getsize(path3)                                                 # STEP 55
result = os0.path.lexists(path0)                                        # STEP 56
component4 = "beta"                                                     # STEP 57
file0.write(str4)                                                       # STEP 58
os0.path.getsize(path0)                                                 # STEP 59
component2 = "e"                                                        # STEP 60
component3 = "b"                                                        # STEP 61
stat1 = os0.fstat(fd0)                                                  # STEP 62
os0.write(fd0,str3)                                                     # STEP 63
os0.remove(path3)                                                       # STEP 64
path0 += "/" + component1                                               # STEP 65
bytes4 = 0                                                              # STEP 66
path0 += "/" + component0                                               # STEP 67
component0 = "beta"                                                     # STEP 68
result = file0.readline(bytes0)                                         # STEP 69
ERROR: (<type 'exceptions.OSError'>, OSError(9, 'File is not open for reading.'), <traceback object at 0x10508e9e0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 38007, in safely
    act[2]()
  File "/Users/alex/tstl/examples/pyfakefs/sut.py", line 28701, in act570
    result = self.p_file[0].readline(self.p_bytes[0])
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4284, in read_error
    self._raise('File is not open for reading.')
  File "/Users/alex/tstl/examples/pyfakefs/pyfakefs/fake_filesystem.py", line 4112, in _raise
    raise OSError(errno.EBADF, message)
1168 BRANCHES COVERED
896 STATEMENTS COVERED

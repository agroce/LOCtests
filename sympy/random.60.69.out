Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1286.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #73 (0:00:30.032931) Fri Apr 28 09:03:52 2017 [ 5011 stmts 6655 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AttributeError'>, AttributeError("'NaN' object has no attribute '_mpf_'",), <traceback object at 0x1074fe7e8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 44014, in act928
    self.p_expr[3] = self.p_expr[2] % self.p_expr[0]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 77, in __sympifyit_wrapper
    return func(a, b)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 118, in binary_op_wrapper
    return func(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 174, in __mod__
    return Mod(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 58, in doit
    d = int(r)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 195, in __int__
    r = self.round(2)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3151, in round
    return i.round(p) + S.ImaginaryUnit*r.round(p)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3159, in round
    mag_first_dig = _mag(x)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3241, in _mag
    mag_first_dig = int(ceil(Float(mpf_log(xpos._mpf_, 53))/log(10)))
Original test has 81 steps

SAVING TEST AS failure.1286.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
expr0 = sympy.I                                                          # STEP 0
ACTION: expr0 = sympy.I 
expr0 = None : <type 'NoneType'>
=> expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
v1 = sympy.Symbol('y')                                                   # STEP 1
ACTION: v1 = sympy.Symbol('y') 
v1 = None : <type 'NoneType'>
=> v1 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(1)                                                    # STEP 2
ACTION: c1 = sympy.Integer(1) 
c1 = None : <type 'NoneType'>
=> c1 = 1 : <class 'sympy.core.numbers.One'>
==================================================
v0 = sympy.Symbol('a')                                                   # STEP 3
ACTION: v0 = sympy.Symbol('a') 
v0 = None : <type 'NoneType'>
=> v0 = a : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('c')                                                   # STEP 4
ACTION: v3 = sympy.Symbol('c') 
v3 = None : <type 'NoneType'>
=> v3 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = v1                                                               # STEP 5
ACTION: expr2 = v1 
v1 = y : <class 'sympy.core.symbol.Symbol'>
expr2 = None : <type 'NoneType'>
=> expr2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1 = expr0 ** expr0                                                   # STEP 6
ACTION: expr1 = expr0 ** expr0 
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr1 = None : <type 'NoneType'>
=> expr1 = I**I : <class 'sympy.core.power.Pow'>
==================================================
expr0 = v1                                                               # STEP 7
ACTION: expr0 = v1 
v1 = y : <class 'sympy.core.symbol.Symbol'>
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr0 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c2 = sympy.Integer(7)                                                    # STEP 8
ACTION: c2 = sympy.Integer(7) 
c2 = None : <type 'NoneType'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = expr2 % expr1                                                    # STEP 9
ACTION: expr3 = expr2 % expr1 
expr2 = y : <class 'sympy.core.symbol.Symbol'>
expr1 = I**I : <class 'sympy.core.power.Pow'>
expr3 = None : <type 'NoneType'>
=> expr3 = Mod(y, I**I) : Mod
==================================================
v1 = sympy.Symbol('g',positive=True)                                    # STEP 10
ACTION: v1 = sympy.Symbol('g',positive=True) 
v1 = y : <class 'sympy.core.symbol.Symbol'>
=> v1 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1 = expr1.subs(expr3,expr2)                                         # STEP 11
ACTION: expr1 = expr1.subs(expr3,expr2) 
expr1 = I**I : <class 'sympy.core.power.Pow'>
expr3 = Mod(y, I**I) : Mod
expr2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = expr0 + expr0                                                   # STEP 12
ACTION: expr2 = expr0 + expr0 
expr0 = y : <class 'sympy.core.symbol.Symbol'>
expr2 = y : <class 'sympy.core.symbol.Symbol'>
=> expr2 = 2*y : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.expand_power_base(expr1)                                  # STEP 13
ACTION: expr0 = sympy.expand_power_base(expr1) 
expr1 = I**I : <class 'sympy.core.power.Pow'>
expr0 = y : <class 'sympy.core.symbol.Symbol'>
=> expr0 = I**I : <class 'sympy.core.power.Pow'>
==================================================
expr1 = sympy.Product(expr3,(v3,c2,c1))                                 # STEP 14
ACTION: expr1 = sympy.Product(expr3,(v3,c2,c1)) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c1 = 1 : <class 'sympy.core.numbers.One'>
v3 = c : <class 'sympy.core.symbol.Symbol'>
expr3 = Mod(y, I**I) : Mod
expr1 = I**I : <class 'sympy.core.power.Pow'>
=> expr1 = Product(Mod(y, I**I), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.Product(expr3,(v0,c1,c1))                                 # STEP 15
ACTION: expr3 = sympy.Product(expr3,(v0,c1,c1)) 
c1 = 1 : <class 'sympy.core.numbers.One'>
v0 = a : <class 'sympy.core.symbol.Symbol'>
expr3 = Mod(y, I**I) : Mod
=> expr3 = Product(Mod(y, I**I), (a, 1, 1)) : <class 'sympy.concrete.products.Product'>
==================================================
v2 = sympy.Symbol('h',positive=True)                                    # STEP 16
ACTION: v2 = sympy.Symbol('h',positive=True) 
v2 = None : <type 'NoneType'>
=> v2 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(1)                                                   # STEP 17
ACTION: c1 = sympy.Integer(1) 
c1 = 1 : <class 'sympy.core.numbers.One'>
==================================================
term3 = c2 * v1 ** c1                                                   # STEP 18
ACTION: term3 = c2 * v1 ** c1 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c1 = 1 : <class 'sympy.core.numbers.One'>
v1 = g : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 7*g : <class 'sympy.core.mul.Mul'>
==================================================
c2 = sympy.Integer(6)                                                   # STEP 19
ACTION: c2 = sympy.Integer(6) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
=> c2 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
term0 = c2 * v0 ** c2                                                   # STEP 20
ACTION: term0 = c2 * v0 ** c2 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = a : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 6*a**6 : <class 'sympy.core.mul.Mul'>
==================================================
c1 = sympy.Integer(4)                                                   # STEP 21
ACTION: c1 = sympy.Integer(4) 
c1 = 1 : <class 'sympy.core.numbers.One'>
=> c1 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(3)                                                   # STEP 22
ACTION: c2 = sympy.Integer(3) 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
=> c2 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
term1 = c2 * v1 ** c2                                                   # STEP 23
ACTION: term1 = c2 * v1 ** c2 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
v1 = g : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 3*g**3 : <class 'sympy.core.mul.Mul'>
==================================================
c3 = sympy.Integer(3)                                                   # STEP 24
ACTION: c3 = sympy.Integer(3) 
c3 = None : <type 'NoneType'>
=> c3 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
term2 = c3 * v2 ** c3                                                   # STEP 25
ACTION: term2 = c3 * v2 ** c3 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
v2 = h : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 3*h**3 : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('l',positive=True)                                    # STEP 26
ACTION: v1 = sympy.Symbol('l',positive=True) 
v1 = g : <class 'sympy.core.symbol.Symbol'>
=> v1 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
poly1 = term2 + term0                                                   # STEP 27
ACTION: poly1 = term2 + term0 
poly1 = None : <type 'NoneType'>
term2 = 3*h**3 : <class 'sympy.core.mul.Mul'>
term0 = 6*a**6 : <class 'sympy.core.mul.Mul'>
=> poly1 = 6*a**6 + 3*h**3 : <class 'sympy.core.add.Add'>
==================================================
poly0 = term0 + term0                                                   # STEP 28
ACTION: poly0 = term0 + term0 
poly0 = None : <type 'NoneType'>
term0 = 6*a**6 : <class 'sympy.core.mul.Mul'>
=> poly0 = 12*a**6 : <class 'sympy.core.mul.Mul'>
==================================================
v3 = sympy.Symbol('g',positive=True)                                    # STEP 29
ACTION: v3 = sympy.Symbol('g',positive=True) 
v3 = c : <class 'sympy.core.symbol.Symbol'>
=> v3 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
poly2 = term3 + term1                                                   # STEP 30
ACTION: poly2 = term3 + term1 
poly2 = None : <type 'NoneType'>
term3 = 7*g : <class 'sympy.core.mul.Mul'>
term1 = 3*g**3 : <class 'sympy.core.mul.Mul'>
=> poly2 = 3*g**3 + 7*g : <class 'sympy.core.add.Add'>
==================================================
term0 = c2 * v2 ** c3                                                   # STEP 31
ACTION: term0 = c2 * v2 ** c3 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c3 = 3 : <class 'sympy.core.numbers.Integer'>
v2 = h : <class 'sympy.core.symbol.Symbol'>
term0 = 6*a**6 : <class 'sympy.core.mul.Mul'>
=> term0 = 3*h**3 : <class 'sympy.core.mul.Mul'>
==================================================
c2 = sympy.Integer(6)                                                   # STEP 32
ACTION: c2 = sympy.Integer(6) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
=> c2 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c1 * v1 ** c1                                                   # STEP 33
ACTION: term3 = c1 * v1 ** c1 
c1 = 4 : <class 'sympy.core.numbers.Integer'>
v1 = l : <class 'sympy.core.symbol.Symbol'>
term3 = 7*g : <class 'sympy.core.mul.Mul'>
=> term3 = 4*l**4 : <class 'sympy.core.mul.Mul'>
==================================================
poly3 = term0 + term2                                                   # STEP 34
ACTION: poly3 = term0 + term2 
poly3 = None : <type 'NoneType'>
term0 = 3*h**3 : <class 'sympy.core.mul.Mul'>
term2 = 3*h**3 : <class 'sympy.core.mul.Mul'>
=> poly3 = 6*h**3 : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('a')                                                  # STEP 35
ACTION: v1 = sympy.Symbol('a') 
v1 = l : <class 'sympy.core.symbol.Symbol'>
=> v1 = a : <class 'sympy.core.symbol.Symbol'>
==================================================
term1 = c2 * v1 ** c2                                                   # STEP 36
ACTION: term1 = c2 * v1 ** c2 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = a : <class 'sympy.core.symbol.Symbol'>
term1 = 3*g**3 : <class 'sympy.core.mul.Mul'>
=> term1 = 6*a**6 : <class 'sympy.core.mul.Mul'>
==================================================
c3 = sympy.Integer(1)                                                   # STEP 37
ACTION: c3 = sympy.Integer(1) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
=> c3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
term0 = c3 * v1 ** c2                                                   # STEP 38
ACTION: term0 = c3 * v1 ** c2 
c3 = 1 : <class 'sympy.core.numbers.One'>
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = a : <class 'sympy.core.symbol.Symbol'>
term0 = 3*h**3 : <class 'sympy.core.mul.Mul'>
=> term0 = a**6 : <class 'sympy.core.power.Pow'>
==================================================
term2 = c3 * v1 ** c2                                                   # STEP 39
ACTION: term2 = c3 * v1 ** c2 
c3 = 1 : <class 'sympy.core.numbers.One'>
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = a : <class 'sympy.core.symbol.Symbol'>
term2 = 3*h**3 : <class 'sympy.core.mul.Mul'>
=> term2 = a**6 : <class 'sympy.core.power.Pow'>
==================================================
v2 = sympy.Symbol('y')                                                  # STEP 40
ACTION: v2 = sympy.Symbol('y') 
v2 = h : <class 'sympy.core.symbol.Symbol'>
=> v2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(7)                                                   # STEP 41
ACTION: c1 = sympy.Integer(7) 
c1 = 4 : <class 'sympy.core.numbers.Integer'>
=> c1 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
v1 = sympy.Symbol('c')                                                  # STEP 42
ACTION: v1 = sympy.Symbol('c') 
v1 = a : <class 'sympy.core.symbol.Symbol'>
=> v1 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('f',positive=True)                                    # STEP 43
ACTION: v0 = sympy.Symbol('f',positive=True) 
v0 = a : <class 'sympy.core.symbol.Symbol'>
=> v0 = f : <class 'sympy.core.symbol.Symbol'>
==================================================
c0 = sympy.Integer(7)                                                   # STEP 44
ACTION: c0 = sympy.Integer(7) 
c0 = None : <type 'NoneType'>
=> c0 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0.evalf()                                                           # STEP 45
ACTION: expr0.evalf() 
expr0 = I**I : <class 'sympy.core.power.Pow'>
==================================================
expr0 = sympy.Product(expr3,(v1,c0,c3))                                 # STEP 46
ACTION: expr0 = sympy.Product(expr3,(v1,c0,c3)) 
c0 = 7 : <class 'sympy.core.numbers.Integer'>
c3 = 1 : <class 'sympy.core.numbers.One'>
v1 = c : <class 'sympy.core.symbol.Symbol'>
expr3 = Product(Mod(y, I**I), (a, 1, 1)) : <class 'sympy.concrete.products.Product'>
expr0 = I**I : <class 'sympy.core.power.Pow'>
=> expr0 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.Product(expr1,(v1,c3,c0))                                 # STEP 47
ACTION: expr3 = sympy.Product(expr1,(v1,c3,c0)) 
c3 = 1 : <class 'sympy.core.numbers.One'>
c0 = 7 : <class 'sympy.core.numbers.Integer'>
v1 = c : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Mod(y, I**I), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
expr3 = Product(Mod(y, I**I), (a, 1, 1)) : <class 'sympy.concrete.products.Product'>
=> expr3 = Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
expr1 = sympy.Sum(expr1,(v0,c3,c0))                                     # STEP 48
ACTION: expr1 = sympy.Sum(expr1,(v0,c3,c0)) 
c3 = 1 : <class 'sympy.core.numbers.One'>
c0 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = f : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Mod(y, I**I), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1)), (f, 1, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c0 = sympy.Integer(6)                                                   # STEP 49
ACTION: c0 = sympy.Integer(6) 
c0 = 7 : <class 'sympy.core.numbers.Integer'>
=> c0 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('y')                                                  # STEP 50
ACTION: v0 = sympy.Symbol('y') 
v0 = f : <class 'sympy.core.symbol.Symbol'>
=> v0 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
v1 = sympy.Symbol('l',positive=True)                                    # STEP 51
ACTION: v1 = sympy.Symbol('l',positive=True) 
v1 = c : <class 'sympy.core.symbol.Symbol'>
=> v1 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(6)                                                   # STEP 52
ACTION: c3 = sympy.Integer(6) 
c3 = 1 : <class 'sympy.core.numbers.One'>
=> c3 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(0)                                                   # STEP 53
ACTION: c2 = sympy.Integer(0) 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
=> c2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1.evalf()                                                           # STEP 54
ACTION: expr1.evalf() 
expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1)), (f, 1, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.Sum(expr3,(v0,c1,c0))                                     # STEP 55
ACTION: expr1 = sympy.Sum(expr3,(v0,c1,c0)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr3 = Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)) : <class 'sympy.concrete.products.Product'>
expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1)), (f, 1, 7)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = sympy.Rational(c1,c1)                                           # STEP 56
ACTION: expr3 = sympy.Rational(c1,c1) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
expr3 = Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)) : <class 'sympy.concrete.products.Product'>
=> expr3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
v0 = sympy.Symbol('l',positive=True)                                    # STEP 57
ACTION: v0 = sympy.Symbol('l',positive=True) 
v0 = y : <class 'sympy.core.symbol.Symbol'>
=> v0 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2.evalf()                                                           # STEP 58
ACTION: expr2.evalf() 
expr2 = 2*y : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.Product(expr0,(v3,c1,c0))                                 # STEP 59
ACTION: expr2 = sympy.Product(expr0,(v3,c1,c0)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v3 = g : <class 'sympy.core.symbol.Symbol'>
expr0 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
expr2 = 2*y : <class 'sympy.core.mul.Mul'>
=> expr2 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0 = expr3.subs(expr1,expr3)                                         # STEP 60
ACTION: expr0 = expr3.subs(expr1,expr3) 
expr3 = 1 : <class 'sympy.core.numbers.One'>
expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1)) : <class 'sympy.concrete.products.Product'>
=> expr0 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr1 = sympy.Product(expr1,(v0,c3,c0))                                 # STEP 61
ACTION: expr1 = sympy.Product(expr1,(v0,c3,c0)) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = l : <class 'sympy.core.symbol.Symbol'>
expr1 = Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.collect(expr0,expr3)                                      # STEP 62
ACTION: expr3 = sympy.collect(expr0,expr3) 
expr0 = 1 : <class 'sympy.core.numbers.One'>
expr3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr0 = sympy.Product(expr1,(v0,c3,c2))                                 # STEP 63
ACTION: expr0 = sympy.Product(expr1,(v0,c3,c2)) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v0 = l : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
expr0 = 1 : <class 'sympy.core.numbers.One'>
=> expr0 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)) : <class 'sympy.concrete.products.Product'>
==================================================
expr1 = sympy.Product(expr2,(v2,c2,c1))                                 # STEP 64
ACTION: expr1 = sympy.Product(expr2,(v2,c2,c1)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = y : <class 'sympy.core.symbol.Symbol'>
expr2 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
expr1 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = sympy.factor(expr3)                                             # STEP 65
ACTION: expr2 = sympy.factor(expr3) 
expr3 = 1 : <class 'sympy.core.numbers.One'>
expr2 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
=> expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3 = sympy.Sum(expr0,(v2,c1,c0))                                     # STEP 66
ACTION: expr3 = sympy.Sum(expr0,(v2,c1,c0)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v2 = y : <class 'sympy.core.symbol.Symbol'>
expr0 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)) : <class 'sympy.concrete.products.Product'>
expr3 = 1 : <class 'sympy.core.numbers.One'>
=> expr3 = Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr0 = sympy.Product(expr3,(v2,c1,c2))                                 # STEP 67
ACTION: expr0 = sympy.Product(expr3,(v2,c1,c2)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v2 = y : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)) : <class 'sympy.concrete.products.Product'>
=> expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.Product(expr0,(v1,c0,c3))                                 # STEP 68
ACTION: expr3 = sympy.Product(expr0,(v1,c0,c3)) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
c3 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = l : <class 'sympy.core.symbol.Symbol'>
expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0)) : <class 'sympy.concrete.products.Product'>
expr3 = Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0 = sympy.Product(expr0,(v3,c2,c0))                                 # STEP 69
ACTION: expr0 = sympy.Product(expr0,(v3,c2,c0)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v3 = g : <class 'sympy.core.symbol.Symbol'>
expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0)) : <class 'sympy.concrete.products.Product'>
=> expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (g, 0, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0.evalf()                                                           # STEP 70
ACTION: expr0.evalf() 
expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (g, 0, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0 = sympy.factorial(expr0)                                          # STEP 71
ACTION: expr0 = sympy.factorial(expr0) 
expr0 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (g, 0, 6)) : <class 'sympy.concrete.products.Product'>
=> expr0 = factorial(Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (g, 0, 6))) : factorial
==================================================
v3 = sympy.Symbol('j',positive=True)                                    # STEP 72
ACTION: v3 = sympy.Symbol('j',positive=True) 
v3 = g : <class 'sympy.core.symbol.Symbol'>
=> v3 = j : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2.evalf()                                                           # STEP 73
ACTION: expr2.evalf() 
expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr2 = sympy.Sum(expr1,(v3,c1,c0))                                     # STEP 74
ACTION: expr2 = sympy.Sum(expr1,(v3,c1,c0)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v3 = j : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)) : <class 'sympy.concrete.products.Product'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
=> expr2 = Sum(Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)), (j, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.Sum(expr1,(v2,c3,c1))                                     # STEP 75
ACTION: expr1 = sympy.Sum(expr1,(v2,c3,c1)) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = y : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Sum(Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)), (y, 6, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c1 = sympy.Integer(4)                                                   # STEP 76
ACTION: c1 = sympy.Integer(4) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
=> c1 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(9)                                                   # STEP 77
ACTION: c2 = sympy.Integer(9) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
=> c2 = 9 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('l',positive=True)                                    # STEP 78
ACTION: v3 = sympy.Symbol('l',positive=True) 
v3 = j : <class 'sympy.core.symbol.Symbol'>
=> v3 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3.evalf()                                                           # STEP 79
ACTION: expr3.evalf() 
expr3 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = expr2 % expr0                                                   # STEP 80
ACTION: expr3 = expr2 % expr0 
expr2 = Sum(Product(Mod(y, I**I), (a, 1, 1), (c, 7, 1), (g, 7, 6), (y, 0, 7)), (j, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
expr0 = factorial(Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (g, 0, 6))) : factorial
expr3 = Product(Sum(Product(Sum(Product(Mod(y, I**I), (c, 7, 1), (c, 1, 7)), (y, 7, 6)), (l, 6, 6), (l, 6, 0)), (y, 7, 6)), (y, 7, 0), (l, 6, 6)) : <class 'sympy.concrete.products.Product'>
RAISED EXCEPTION: <type 'exceptions.AttributeError'> 'NaN' object has no attribute '_mpf_'
ERROR: (<type 'exceptions.AttributeError'>, AttributeError("'NaN' object has no attribute '_mpf_'",), <traceback object at 0x10be52cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 44014, in act928
    self.p_expr[3] = self.p_expr[2] % self.p_expr[0]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 77, in __sympifyit_wrapper
    return func(a, b)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 118, in binary_op_wrapper
    return func(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 174, in __mod__
    return Mod(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 58, in doit
    d = int(r)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 195, in __int__
    r = self.round(2)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3151, in round
    return i.round(p) + S.ImaginaryUnit*r.round(p)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3159, in round
    mag_first_dig = _mag(x)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3241, in _mag
    mag_first_dig = int(ceil(Float(mpf_log(xpos._mpf_, 53))/log(10)))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 63
STOPPING TESTING DUE TO TIMEOUT
3.50590786689 PERCENT COVERED
86.4051311016 TOTAL RUNTIME
2 EXECUTED
144 TOTAL TEST OPERATIONS
4.4743976593 TIME SPENT EXECUTING TEST OPERATIONS
0.256947278976 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
53.0503821373 TIME SPENT CHECKING PROPERTIES
57.5247797966 TOTAL TIME SPENT RUNNING SUT
0.00715708732605 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
expr0 = sympy.I                                                          # STEP 0
v1 = sympy.Symbol('y')                                                   # STEP 1
c1 = sympy.Integer(1)                                                    # STEP 2
v0 = sympy.Symbol('a')                                                   # STEP 3
v3 = sympy.Symbol('c')                                                   # STEP 4
expr2 = v1                                                               # STEP 5
expr1 = expr0 ** expr0                                                   # STEP 6
expr0 = v1                                                               # STEP 7
c2 = sympy.Integer(7)                                                    # STEP 8
expr3 = expr2 % expr1                                                    # STEP 9
v1 = sympy.Symbol('g',positive=True)                                    # STEP 10
expr1 = expr1.subs(expr3,expr2)                                         # STEP 11
expr2 = expr0 + expr0                                                   # STEP 12
expr0 = sympy.expand_power_base(expr1)                                  # STEP 13
expr1 = sympy.Product(expr3,(v3,c2,c1))                                 # STEP 14
expr3 = sympy.Product(expr3,(v0,c1,c1))                                 # STEP 15
v2 = sympy.Symbol('h',positive=True)                                    # STEP 16
c1 = sympy.Integer(1)                                                   # STEP 17
term3 = c2 * v1 ** c1                                                   # STEP 18
c2 = sympy.Integer(6)                                                   # STEP 19
term0 = c2 * v0 ** c2                                                   # STEP 20
c1 = sympy.Integer(4)                                                   # STEP 21
c2 = sympy.Integer(3)                                                   # STEP 22
term1 = c2 * v1 ** c2                                                   # STEP 23
c3 = sympy.Integer(3)                                                   # STEP 24
term2 = c3 * v2 ** c3                                                   # STEP 25
v1 = sympy.Symbol('l',positive=True)                                    # STEP 26
poly1 = term2 + term0                                                   # STEP 27
poly0 = term0 + term0                                                   # STEP 28
v3 = sympy.Symbol('g',positive=True)                                    # STEP 29
poly2 = term3 + term1                                                   # STEP 30
term0 = c2 * v2 ** c3                                                   # STEP 31
c2 = sympy.Integer(6)                                                   # STEP 32
term3 = c1 * v1 ** c1                                                   # STEP 33
poly3 = term0 + term2                                                   # STEP 34
v1 = sympy.Symbol('a')                                                  # STEP 35
term1 = c2 * v1 ** c2                                                   # STEP 36
c3 = sympy.Integer(1)                                                   # STEP 37
term0 = c3 * v1 ** c2                                                   # STEP 38
term2 = c3 * v1 ** c2                                                   # STEP 39
v2 = sympy.Symbol('y')                                                  # STEP 40
c1 = sympy.Integer(7)                                                   # STEP 41
v1 = sympy.Symbol('c')                                                  # STEP 42
v0 = sympy.Symbol('f',positive=True)                                    # STEP 43
c0 = sympy.Integer(7)                                                   # STEP 44
expr0.evalf()                                                           # STEP 45
expr0 = sympy.Product(expr3,(v1,c0,c3))                                 # STEP 46
expr3 = sympy.Product(expr1,(v1,c3,c0))                                 # STEP 47
expr1 = sympy.Sum(expr1,(v0,c3,c0))                                     # STEP 48
c0 = sympy.Integer(6)                                                   # STEP 49
v0 = sympy.Symbol('y')                                                  # STEP 50
v1 = sympy.Symbol('l',positive=True)                                    # STEP 51
c3 = sympy.Integer(6)                                                   # STEP 52
c2 = sympy.Integer(0)                                                   # STEP 53
expr1.evalf()                                                           # STEP 54
expr1 = sympy.Sum(expr3,(v0,c1,c0))                                     # STEP 55
expr3 = sympy.Rational(c1,c1)                                           # STEP 56
v0 = sympy.Symbol('l',positive=True)                                    # STEP 57
expr2.evalf()                                                           # STEP 58
expr2 = sympy.Product(expr0,(v3,c1,c0))                                 # STEP 59
expr0 = expr3.subs(expr1,expr3)                                         # STEP 60
expr1 = sympy.Product(expr1,(v0,c3,c0))                                 # STEP 61
expr3 = sympy.collect(expr0,expr3)                                      # STEP 62
expr0 = sympy.Product(expr1,(v0,c3,c2))                                 # STEP 63
expr1 = sympy.Product(expr2,(v2,c2,c1))                                 # STEP 64
expr2 = sympy.factor(expr3)                                             # STEP 65
expr3 = sympy.Sum(expr0,(v2,c1,c0))                                     # STEP 66
expr0 = sympy.Product(expr3,(v2,c1,c2))                                 # STEP 67
expr3 = sympy.Product(expr0,(v1,c0,c3))                                 # STEP 68
expr0 = sympy.Product(expr0,(v3,c2,c0))                                 # STEP 69
expr0.evalf()                                                           # STEP 70
expr0 = sympy.factorial(expr0)                                          # STEP 71
v3 = sympy.Symbol('j',positive=True)                                    # STEP 72
expr2.evalf()                                                           # STEP 73
expr2 = sympy.Sum(expr1,(v3,c1,c0))                                     # STEP 74
expr1 = sympy.Sum(expr1,(v2,c3,c1))                                     # STEP 75
c1 = sympy.Integer(4)                                                   # STEP 76
c2 = sympy.Integer(9)                                                   # STEP 77
v3 = sympy.Symbol('l',positive=True)                                    # STEP 78
expr3.evalf()                                                           # STEP 79
expr3 = expr2 % expr0                                                   # STEP 80
ERROR: (<type 'exceptions.AttributeError'>, AttributeError("'NaN' object has no attribute '_mpf_'",), <traceback object at 0x10be52cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 44014, in act928
    self.p_expr[3] = self.p_expr[2] % self.p_expr[0]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 77, in __sympifyit_wrapper
    return func(a, b)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/decorators.py", line 118, in binary_op_wrapper
    return func(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 174, in __mod__
    return Mod(self, other)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 58, in doit
    d = int(r)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 195, in __int__
    r = self.round(2)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3151, in round
    return i.round(p) + S.ImaginaryUnit*r.round(p)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3159, in round
    mag_first_dig = _mag(x)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 3241, in _mag
    mag_first_dig = int(ceil(Float(mpf_log(xpos._mpf_, 53))/log(10)))
7760 BRANCHES COVERED
5792 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.73428.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #80 (0:00:30.613898) Wed May  3 02:34:59 2017 [ 6248 stmts 8403 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x10c343cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 539, in TR5
    return _TR56(rv, sin, cos, lambda x: 1 - x, max=max, pow=pow)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
Original test has 91 steps

SAVING TEST AS failure.73428.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
expr1 = sympy.E                                                          # STEP 0
ACTION: expr1 = sympy.E 
expr1 = None : <type 'NoneType'>
=> expr1 = E : <class 'sympy.core.numbers.Exp1'>
==================================================
expr1.evalf()                                                            # STEP 1
ACTION: expr1.evalf() 
expr1 = E : <class 'sympy.core.numbers.Exp1'>
==================================================
expr1 = sympy.pi                                                         # STEP 2
ACTION: expr1 = sympy.pi 
expr1 = E : <class 'sympy.core.numbers.Exp1'>
=> expr1 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr2 = sympy.simplify(expr1)                                            # STEP 3
ACTION: expr2 = sympy.simplify(expr1) 
expr1 = pi : <class 'sympy.core.numbers.Pi'>
expr2 = None : <type 'NoneType'>
=> expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr0 = sympy.cancel(expr1)                                              # STEP 4
ACTION: expr0 = sympy.cancel(expr1) 
expr1 = pi : <class 'sympy.core.numbers.Pi'>
expr0 = None : <type 'NoneType'>
=> expr0 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr1 = sympy.atan(expr2)                                                # STEP 5
ACTION: expr1 = sympy.atan(expr2) 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr1 = pi : <class 'sympy.core.numbers.Pi'>
=> expr1 = atan(pi) : atan
==================================================
expr2 = expr2.doit()                                                     # STEP 6
ACTION: expr2 = expr2.doit() 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr3 = sympy.trigsimp(expr1)                                            # STEP 7
ACTION: expr3 = sympy.trigsimp(expr1) 
expr1 = atan(pi) : atan
expr3 = None : <type 'NoneType'>
=> expr3 = atan(pi) : atan
==================================================
expr1 = sympy.powsimp(expr2)                                             # STEP 8
ACTION: expr1 = sympy.powsimp(expr2) 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr1 = atan(pi) : atan
=> expr1 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr2 = sympy.apart(expr1)                                               # STEP 9
ACTION: expr2 = sympy.apart(expr1) 
expr1 = pi : <class 'sympy.core.numbers.Pi'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr1 = sympy.I                                                         # STEP 10
ACTION: expr1 = sympy.I 
expr1 = pi : <class 'sympy.core.numbers.Pi'>
=> expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
c3 = sympy.Integer(6)                                                   # STEP 11
ACTION: c3 = sympy.Integer(6) 
c3 = None : <type 'NoneType'>
=> c3 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0.evalf()                                                           # STEP 12
ACTION: expr0.evalf() 
expr0 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr0 = sympy.trigsimp(expr2)                                           # STEP 13
ACTION: expr0 = sympy.trigsimp(expr2) 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr0 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr2 = sympy.powsimp(expr0)                                            # STEP 14
ACTION: expr2 = sympy.powsimp(expr0) 
expr0 = pi : <class 'sympy.core.numbers.Pi'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr0 = sympy.tan(expr2)                                                # STEP 15
ACTION: expr0 = sympy.tan(expr2) 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr0 = pi : <class 'sympy.core.numbers.Pi'>
=> expr0 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2 = sympy.expand(expr2)                                             # STEP 16
ACTION: expr2 = sympy.expand(expr2) 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr1.evalf()                                                           # STEP 17
ACTION: expr1.evalf() 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr1 = sympy.trigsimp(expr1)                                           # STEP 18
ACTION: expr1 = sympy.trigsimp(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
v3 = sympy.Symbol('h',positive=True)                                    # STEP 19
ACTION: v3 = sympy.Symbol('h',positive=True) 
v3 = None : <type 'NoneType'>
=> v3 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('e',positive=True)                                    # STEP 20
ACTION: v0 = sympy.Symbol('e',positive=True) 
v0 = None : <type 'NoneType'>
=> v0 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
v2 = sympy.Symbol('d')                                                  # STEP 21
ACTION: v2 = sympy.Symbol('d') 
v2 = None : <type 'NoneType'>
=> v2 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
v1 = sympy.Symbol('j',positive=True)                                    # STEP 22
ACTION: v1 = sympy.Symbol('j',positive=True) 
v1 = None : <type 'NoneType'>
=> v1 = j : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3.evalf()                                                           # STEP 23
ACTION: expr3.evalf() 
expr3 = atan(pi) : atan
==================================================
expr3 = expr0 % expr2                                                   # STEP 24
ACTION: expr3 = expr0 % expr2 
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr3 = atan(pi) : atan
=> expr3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr0 = expr1 * expr2                                                   # STEP 25
ACTION: expr0 = expr1 * expr2 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr0 = I*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.Rational(c3,c3)                                           # STEP 26
ACTION: expr2 = sympy.Rational(c3,c3) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
=> expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr1 = sympy.cancel(expr1)                                             # STEP 27
ACTION: expr1 = sympy.cancel(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
term1 = c3 * v3 ** c3                                                   # STEP 28
ACTION: term1 = c3 * v3 ** c3 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
v3 = h : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
poly1 = term1                                                           # STEP 29
ACTION: poly1 = term1 
poly1 = None : <type 'NoneType'>
term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
=> poly1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
v3 = sympy.Symbol('y')                                                  # STEP 30
ACTION: v3 = sympy.Symbol('y') 
v3 = h : <class 'sympy.core.symbol.Symbol'>
=> v3 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr0.evalf()                                                           # STEP 31
ACTION: expr0.evalf() 
expr0 = I*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = expr2 / expr0                                                   # STEP 32
ACTION: expr0 = expr2 / expr0 
expr2 = 1 : <class 'sympy.core.numbers.One'>
expr0 = I*pi : <class 'sympy.core.mul.Mul'>
=> expr0 = -I/pi : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.sqrt(expr3)                                               # STEP 33
ACTION: expr2 = sympy.sqrt(expr3) 
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
=> expr2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr3 = sympy.acos(expr3)                                               # STEP 34
ACTION: expr3 = sympy.acos(expr3) 
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr3 = pi/2 : <class 'sympy.core.mul.Mul'>
==================================================
poly3 = term1                                                           # STEP 35
ACTION: poly3 = term1 
poly3 = None : <type 'NoneType'>
term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
=> poly3 = 6*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
poly2 = term1                                                           # STEP 36
ACTION: poly2 = term1 
poly2 = None : <type 'NoneType'>
term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
=> poly2 = 6*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
expr2.evalf()                                                           # STEP 37
ACTION: expr2.evalf() 
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2 = expr0.doit()                                                    # STEP 38
ACTION: expr2 = expr0.doit() 
expr0 = -I/pi : <class 'sympy.core.mul.Mul'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr2 = -I/pi : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.asin(expr2)                                               # STEP 39
ACTION: expr0 = sympy.asin(expr2) 
expr2 = -I/pi : <class 'sympy.core.mul.Mul'>
expr0 = -I/pi : <class 'sympy.core.mul.Mul'>
=> expr0 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.tan(expr3)                                                # STEP 40
ACTION: expr2 = sympy.tan(expr3) 
expr3 = pi/2 : <class 'sympy.core.mul.Mul'>
expr2 = -I/pi : <class 'sympy.core.mul.Mul'>
=> expr2 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
==================================================
expr3 = expr3 % expr1                                                   # STEP 41
ACTION: expr3 = expr3 % expr1 
expr3 = pi/2 : <class 'sympy.core.mul.Mul'>
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr3 = Mod(pi/2, I) : Mod
==================================================
expr1 = sympy.atan(expr1)                                               # STEP 42
ACTION: expr1 = sympy.atan(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr1 = oo*I : <class 'sympy.core.mul.Mul'>
==================================================
poly0 = term1                                                           # STEP 43
ACTION: poly0 = term1 
poly0 = None : <type 'NoneType'>
term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
=> poly0 = 6*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
c1 = sympy.Integer(8)                                                   # STEP 44
ACTION: c1 = sympy.Integer(8) 
c1 = None : <type 'NoneType'>
=> c1 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c3 * v1 ** c1                                                   # STEP 45
ACTION: term3 = c3 * v1 ** c1 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v1 = j : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 6*j**8 : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c1 * v0 ** c1                                                   # STEP 46
ACTION: term1 = c1 * v0 ** c1 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v0 = e : <class 'sympy.core.symbol.Symbol'>
term1 = 6*h**6 : <class 'sympy.core.mul.Mul'>
=> term1 = 8*e**8 : <class 'sympy.core.mul.Mul'>
==================================================
expr1.evalf()                                                           # STEP 47
ACTION: expr1.evalf() 
expr1 = oo*I : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.expand_trig(expr0)                                        # STEP 48
ACTION: expr1 = sympy.expand_trig(expr0) 
expr0 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
expr1 = oo*I : <class 'sympy.core.mul.Mul'>
=> expr1 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.trigsimp(expr3)                                           # STEP 49
ACTION: expr0 = sympy.trigsimp(expr3) 
expr3 = Mod(pi/2, I) : Mod
expr0 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
=> expr0 = Mod(pi/2, I) : Mod
==================================================
expr3 = sympy.simplify(expr0)                                           # STEP 50
ACTION: expr3 = sympy.simplify(expr0) 
expr0 = Mod(pi/2, I) : Mod
expr3 = Mod(pi/2, I) : Mod
==================================================
expr0 = expr2 ** expr0                                                  # STEP 51
ACTION: expr0 = expr2 ** expr0 
expr2 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
expr0 = Mod(pi/2, I) : Mod
=> expr0 = zoo**Mod(pi/2, I) : <class 'sympy.core.power.Pow'>
==================================================
expr0.evalf()                                                           # STEP 52
ACTION: expr0.evalf() 
expr0 = zoo**Mod(pi/2, I) : <class 'sympy.core.power.Pow'>
==================================================
expr0 = sympy.trigsimp(expr2)                                           # STEP 53
ACTION: expr0 = sympy.trigsimp(expr2) 
expr2 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
expr0 = zoo**Mod(pi/2, I) : <class 'sympy.core.power.Pow'>
=> expr0 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
==================================================
expr2 = sympy.atan(expr3)                                               # STEP 54
ACTION: expr2 = sympy.atan(expr3) 
expr3 = Mod(pi/2, I) : Mod
expr2 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
=> expr2 = atan(Mod(pi/2, I)) : atan
==================================================
expr3 = sympy.expand_func(expr0)                                        # STEP 55
ACTION: expr3 = sympy.expand_func(expr0) 
expr0 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
expr3 = Mod(pi/2, I) : Mod
=> expr3 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
==================================================
expr0 = sympy.sin(expr0)                                                # STEP 56
ACTION: expr0 = sympy.sin(expr0) 
expr0 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
=> expr0 = sin(zoo) : sin
==================================================
c3 = sympy.Integer(1)                                                   # STEP 57
ACTION: c3 = sympy.Integer(1) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
=> c3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3.evalf()                                                           # STEP 58
ACTION: expr3.evalf() 
expr3 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
==================================================
expr3 = sympy.trigsimp(expr1)                                           # STEP 59
ACTION: expr3 = sympy.trigsimp(expr1) 
expr1 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
expr3 = zoo : <class 'sympy.core.numbers.ComplexInfinity'>
=> expr3 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = v0                                                              # STEP 60
ACTION: expr1 = v0 
v0 = e : <class 'sympy.core.symbol.Symbol'>
expr1 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
=> expr1 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
term2 = c1 * v2 ** c3                                                   # STEP 61
ACTION: term2 = c1 * v2 ** c3 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
c3 = 1 : <class 'sympy.core.numbers.One'>
v2 = d : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 8*d : <class 'sympy.core.mul.Mul'>
==================================================
expr2.evalf()                                                           # STEP 62
ACTION: expr2.evalf() 
expr2 = atan(Mod(pi/2, I)) : atan
==================================================
expr2 = sympy.powsimp(expr2)                                            # STEP 63
ACTION: expr2 = sympy.powsimp(expr2) 
expr2 = atan(Mod(pi/2, I)) : atan
==================================================
term0 = c3 * v3 ** c3                                                   # STEP 64
ACTION: term0 = c3 * v3 ** c3 
c3 = 1 : <class 'sympy.core.numbers.One'>
v3 = y : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3.evalf()                                                           # STEP 65
ACTION: expr3.evalf() 
expr3 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = expr2.doit()                                                    # STEP 66
ACTION: expr3 = expr2.doit() 
expr2 = atan(Mod(pi/2, I)) : atan
expr3 = -I*asinh(1/pi) : <class 'sympy.core.mul.Mul'>
=> expr3 = atan(Mod(pi/2, I)) : atan
==================================================
expr2 = sympy.expand_log(expr0)                                         # STEP 67
ACTION: expr2 = sympy.expand_log(expr0) 
expr0 = sin(zoo) : sin
expr2 = atan(Mod(pi/2, I)) : atan
=> expr2 = sin(zoo) : sin
==================================================
expr0 = sympy.simplify(expr2)                                           # STEP 68
ACTION: expr0 = sympy.simplify(expr2) 
expr2 = sin(zoo) : sin
expr0 = sin(zoo) : sin
==================================================
v3 = sympy.Symbol('x')                                                  # STEP 69
ACTION: v3 = sympy.Symbol('x') 
v3 = y : <class 'sympy.core.symbol.Symbol'>
=> v3 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = sympy.I                                                         # STEP 70
ACTION: expr2 = sympy.I 
expr2 = sin(zoo) : sin
=> expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
v2 = sympy.Symbol('y')                                                  # STEP 71
ACTION: v2 = sympy.Symbol('y') 
v2 = d : <class 'sympy.core.symbol.Symbol'>
=> v2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(7)                                                   # STEP 72
ACTION: c3 = sympy.Integer(7) 
c3 = 1 : <class 'sympy.core.numbers.One'>
=> c3 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3.evalf()                                                           # STEP 73
ACTION: expr3.evalf() 
expr3 = atan(Mod(pi/2, I)) : atan
==================================================
expr3 = expr3.doit()                                                    # STEP 74
ACTION: expr3 = expr3.doit() 
expr3 = atan(Mod(pi/2, I)) : atan
==================================================
v1 = sympy.Symbol('k',positive=True)                                    # STEP 75
ACTION: v1 = sympy.Symbol('k',positive=True) 
v1 = j : <class 'sympy.core.symbol.Symbol'>
=> v1 = k : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1.evalf()                                                           # STEP 76
ACTION: expr1.evalf() 
expr1 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1 = expr2 ** expr3                                                  # STEP 77
ACTION: expr1 = expr2 ** expr3 
expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr3 = atan(Mod(pi/2, I)) : atan
expr1 = e : <class 'sympy.core.symbol.Symbol'>
=> expr1 = I**atan(Mod(pi/2, I)) : <class 'sympy.core.power.Pow'>
==================================================
expr3 = expr2 / expr3                                                   # STEP 78
ACTION: expr3 = expr2 / expr3 
expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr3 = atan(Mod(pi/2, I)) : atan
=> expr3 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.cos(expr2)                                                # STEP 79
ACTION: expr2 = sympy.cos(expr2) 
expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr2 = cosh(1) : cosh
==================================================
v0 = sympy.Symbol('x')                                                  # STEP 80
ACTION: v0 = sympy.Symbol('x') 
v0 = e : <class 'sympy.core.symbol.Symbol'>
=> v0 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(8)                                                   # STEP 81
ACTION: c1 = sympy.Integer(8) 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(3)                                                   # STEP 82
ACTION: c2 = sympy.Integer(3) 
c2 = None : <type 'NoneType'>
=> c2 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1.evalf()                                                           # STEP 83
ACTION: expr1.evalf() 
expr1 = I**atan(Mod(pi/2, I)) : <class 'sympy.core.power.Pow'>
==================================================
expr1 = sympy.trigsimp(expr3)                                           # STEP 84
ACTION: expr1 = sympy.trigsimp(expr3) 
expr3 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
expr1 = I**atan(Mod(pi/2, I)) : <class 'sympy.core.power.Pow'>
=> expr1 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = sympy.trigsimp(expr1)                                           # STEP 85
ACTION: expr3 = sympy.trigsimp(expr1) 
expr1 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
expr3 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.expand(expr2,force=True)                                  # STEP 86
ACTION: expr1 = sympy.expand(expr2,force=True) 
expr2 = cosh(1) : cosh
expr1 = I/atan(Mod(pi/2, I)) : <class 'sympy.core.mul.Mul'>
=> expr1 = cosh(1) : cosh
==================================================
expr2 = sympy.I                                                         # STEP 87
ACTION: expr2 = sympy.I 
expr2 = cosh(1) : cosh
=> expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr1.evalf()                                                           # STEP 88
ACTION: expr1.evalf() 
expr1 = cosh(1) : cosh
==================================================
expr1 = sympy.asin(expr0)                                               # STEP 89
ACTION: expr1 = sympy.asin(expr0) 
expr0 = sin(zoo) : sin
expr1 = cosh(1) : cosh
=> expr1 = asin(sin(zoo)) : asin
==================================================
expr0 = expr0 ** expr2                                                  # STEP 90
ACTION: expr0 = expr0 ** expr2 
expr0 = sin(zoo) : sin
expr2 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr0 = sin(zoo)**I : <class 'sympy.core.power.Pow'>
==================================================
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x111e938c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 539, in TR5
    return _TR56(rv, sin, cos, lambda x: 1 - x, max=max, pow=pow)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
3.80760320261 PERCENT COVERED
110.949033976 TOTAL RUNTIME
2 EXECUTED
91 TOTAL TEST OPERATIONS
2.82012581825 TIME SPENT EXECUTING TEST OPERATIONS
0.986691236496 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
38.9454584122 TIME SPENT CHECKING PROPERTIES
41.7655842304 TOTAL TIME SPENT RUNNING SUT
0.0085620880127 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
expr1 = sympy.E                                                          # STEP 0
expr1.evalf()                                                            # STEP 1
expr1 = sympy.pi                                                         # STEP 2
expr2 = sympy.simplify(expr1)                                            # STEP 3
expr0 = sympy.cancel(expr1)                                              # STEP 4
expr1 = sympy.atan(expr2)                                                # STEP 5
expr2 = expr2.doit()                                                     # STEP 6
expr3 = sympy.trigsimp(expr1)                                            # STEP 7
expr1 = sympy.powsimp(expr2)                                             # STEP 8
expr2 = sympy.apart(expr1)                                               # STEP 9
expr1 = sympy.I                                                         # STEP 10
c3 = sympy.Integer(6)                                                   # STEP 11
expr0.evalf()                                                           # STEP 12
expr0 = sympy.trigsimp(expr2)                                           # STEP 13
expr2 = sympy.powsimp(expr0)                                            # STEP 14
expr0 = sympy.tan(expr2)                                                # STEP 15
expr2 = sympy.expand(expr2)                                             # STEP 16
expr1.evalf()                                                           # STEP 17
expr1 = sympy.trigsimp(expr1)                                           # STEP 18
v3 = sympy.Symbol('h',positive=True)                                    # STEP 19
v0 = sympy.Symbol('e',positive=True)                                    # STEP 20
v2 = sympy.Symbol('d')                                                  # STEP 21
v1 = sympy.Symbol('j',positive=True)                                    # STEP 22
expr3.evalf()                                                           # STEP 23
expr3 = expr0 % expr2                                                   # STEP 24
expr0 = expr1 * expr2                                                   # STEP 25
expr2 = sympy.Rational(c3,c3)                                           # STEP 26
expr1 = sympy.cancel(expr1)                                             # STEP 27
term1 = c3 * v3 ** c3                                                   # STEP 28
poly1 = term1                                                           # STEP 29
v3 = sympy.Symbol('y')                                                  # STEP 30
expr0.evalf()                                                           # STEP 31
expr0 = expr2 / expr0                                                   # STEP 32
expr2 = sympy.sqrt(expr3)                                               # STEP 33
expr3 = sympy.acos(expr3)                                               # STEP 34
poly3 = term1                                                           # STEP 35
poly2 = term1                                                           # STEP 36
expr2.evalf()                                                           # STEP 37
expr2 = expr0.doit()                                                    # STEP 38
expr0 = sympy.asin(expr2)                                               # STEP 39
expr2 = sympy.tan(expr3)                                                # STEP 40
expr3 = expr3 % expr1                                                   # STEP 41
expr1 = sympy.atan(expr1)                                               # STEP 42
poly0 = term1                                                           # STEP 43
c1 = sympy.Integer(8)                                                   # STEP 44
term3 = c3 * v1 ** c1                                                   # STEP 45
term1 = c1 * v0 ** c1                                                   # STEP 46
expr1.evalf()                                                           # STEP 47
expr1 = sympy.expand_trig(expr0)                                        # STEP 48
expr0 = sympy.trigsimp(expr3)                                           # STEP 49
expr3 = sympy.simplify(expr0)                                           # STEP 50
expr0 = expr2 ** expr0                                                  # STEP 51
expr0.evalf()                                                           # STEP 52
expr0 = sympy.trigsimp(expr2)                                           # STEP 53
expr2 = sympy.atan(expr3)                                               # STEP 54
expr3 = sympy.expand_func(expr0)                                        # STEP 55
expr0 = sympy.sin(expr0)                                                # STEP 56
c3 = sympy.Integer(1)                                                   # STEP 57
expr3.evalf()                                                           # STEP 58
expr3 = sympy.trigsimp(expr1)                                           # STEP 59
expr1 = v0                                                              # STEP 60
term2 = c1 * v2 ** c3                                                   # STEP 61
expr2.evalf()                                                           # STEP 62
expr2 = sympy.powsimp(expr2)                                            # STEP 63
term0 = c3 * v3 ** c3                                                   # STEP 64
expr3.evalf()                                                           # STEP 65
expr3 = expr2.doit()                                                    # STEP 66
expr2 = sympy.expand_log(expr0)                                         # STEP 67
expr0 = sympy.simplify(expr2)                                           # STEP 68
v3 = sympy.Symbol('x')                                                  # STEP 69
expr2 = sympy.I                                                         # STEP 70
v2 = sympy.Symbol('y')                                                  # STEP 71
c3 = sympy.Integer(7)                                                   # STEP 72
expr3.evalf()                                                           # STEP 73
expr3 = expr3.doit()                                                    # STEP 74
v1 = sympy.Symbol('k',positive=True)                                    # STEP 75
expr1.evalf()                                                           # STEP 76
expr1 = expr2 ** expr3                                                  # STEP 77
expr3 = expr2 / expr3                                                   # STEP 78
expr2 = sympy.cos(expr2)                                                # STEP 79
v0 = sympy.Symbol('x')                                                  # STEP 80
c1 = sympy.Integer(8)                                                   # STEP 81
c2 = sympy.Integer(3)                                                   # STEP 82
expr1.evalf()                                                           # STEP 83
expr1 = sympy.trigsimp(expr3)                                           # STEP 84
expr3 = sympy.trigsimp(expr1)                                           # STEP 85
expr1 = sympy.expand(expr2,force=True)                                  # STEP 86
expr2 = sympy.I                                                         # STEP 87
expr1.evalf()                                                           # STEP 88
expr1 = sympy.asin(expr0)                                               # STEP 89
expr0 = expr0 ** expr2                                                  # STEP 90
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x111e938c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 539, in TR5
    return _TR56(rv, sin, cos, lambda x: 1 - x, max=max, pow=pow)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
8539 BRANCHES COVERED
6337 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=0.8, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.73383.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.8, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #40 (0:00:30.067846) Wed May  3 02:21:55 2017 [ 6214 stmts 8284 branches ]
UNCAUGHT EXCEPTION
ERROR: (<class 'sympy.polys.polyerrors.NotAlgebraic'>, NotAlgebraic("Product(0, (g, 7, 6)) doesn't seem to be an algebraic element",), <traceback object at 0x10bab7fc8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 194320, in act3550
    self.p_expr[2] = sympy.apart(self.p_expr[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/utilities/decorator.py", line 37, in threaded_func
    return func(expr, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/partfrac.py", line 83, in apart
    (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4168, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4246, in _parallel_poly_from_expr
    opt.domain, coeffs_list = construct_domain(coeffs_list, opt=opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 238, in construct_domain
    result = _construct_simple(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 45, in _construct_simple
    domain, result = _construct_algebraic(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 93, in _construct_algebraic
    g, span, H = primitive_element(exts, ex=True, polys=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 857, in primitive_element
    f = minpoly(ext, y)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 657, in minimal_polynomial
    result = _minpoly_compose(ex, x, dom)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 578, in _minpoly_compose
    raise NotAlgebraic("%s doesn't seem to be an algebraic element" % ex)
Original test has 63 steps

SAVING TEST AS failure.73383.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
c1 = sympy.Integer(7)                                                    # STEP 0
ACTION: c1 = sympy.Integer(7) 
c1 = None : <type 'NoneType'>
=> c1 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
v2 = sympy.Symbol('g',positive=True)                                     # STEP 1
ACTION: v2 = sympy.Symbol('g',positive=True) 
v2 = None : <type 'NoneType'>
=> v2 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('c')                                                   # STEP 2
ACTION: v0 = sympy.Symbol('c') 
v0 = None : <type 'NoneType'>
=> v0 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1 = sympy.I                                                          # STEP 3
ACTION: expr1 = sympy.I 
expr1 = None : <type 'NoneType'>
=> expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr0 = sympy.expand_power_base(expr1)                                   # STEP 4
ACTION: expr0 = sympy.expand_power_base(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr0 = None : <type 'NoneType'>
=> expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr3 = sympy.expand(expr1,force=True)                                   # STEP 5
ACTION: expr3 = sympy.expand(expr1,force=True) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr3 = None : <type 'NoneType'>
=> expr3 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr2 = sympy.cos(expr1)                                                 # STEP 6
ACTION: expr2 = sympy.cos(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr2 = None : <type 'NoneType'>
=> expr2 = cosh(1) : cosh
==================================================
expr1 = sympy.Sum(expr2,(v2,c1,c1))                                      # STEP 7
ACTION: expr1 = sympy.Sum(expr2,(v2,c1,c1)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
expr2 = cosh(1) : cosh
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr1 = Sum(cosh(1), (g, 7, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.asin(expr3)                                                # STEP 8
ACTION: expr2 = sympy.asin(expr3) 
expr3 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr2 = cosh(1) : cosh
=> expr2 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
==================================================
v3 = sympy.Symbol('h',positive=True)                                     # STEP 9
ACTION: v3 = sympy.Symbol('h',positive=True) 
v3 = None : <type 'NoneType'>
=> v3 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3 = sympy.atan(expr1)                                               # STEP 10
ACTION: expr3 = sympy.atan(expr1) 
expr1 = Sum(cosh(1), (g, 7, 7)) : <class 'sympy.concrete.summations.Sum'>
expr3 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr3 = atan(Sum(cosh(1), (g, 7, 7))) : atan
==================================================
expr1 = expr0.subs(expr0,expr2)                                         # STEP 11
ACTION: expr1 = expr0.subs(expr0,expr2) 
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr2 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
expr1 = Sum(cosh(1), (g, 7, 7)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
==================================================
c2 = sympy.Integer(8)                                                   # STEP 12
ACTION: c2 = sympy.Integer(8) 
c2 = None : <type 'NoneType'>
=> c2 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
expr2 = sympy.apart(expr3)                                              # STEP 13
ACTION: expr2 = sympy.apart(expr3) 
expr3 = atan(Sum(cosh(1), (g, 7, 7))) : atan
expr2 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
=> expr2 = atan(Sum(cosh(1), (g, 7, 7))) : atan
==================================================
expr0 = sympy.expand_log(expr0)                                         # STEP 14
ACTION: expr0 = sympy.expand_log(expr0) 
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
c0 = sympy.Integer(5)                                                   # STEP 15
ACTION: c0 = sympy.Integer(5) 
c0 = None : <type 'NoneType'>
=> c0 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = expr2 + expr2                                                   # STEP 16
ACTION: expr3 = expr2 + expr2 
expr2 = atan(Sum(cosh(1), (g, 7, 7))) : atan
expr3 = atan(Sum(cosh(1), (g, 7, 7))) : atan
=> expr3 = 2*atan(Sum(cosh(1), (g, 7, 7))) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.Sum(expr0,(v0,c1,c0))                                     # STEP 17
ACTION: expr2 = sympy.Sum(expr0,(v0,c1,c0)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = c : <class 'sympy.core.symbol.Symbol'>
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr2 = atan(Sum(cosh(1), (g, 7, 7))) : atan
=> expr2 = Sum(I, (c, 7, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term0 = c1 * v0 ** c1                                                   # STEP 18
ACTION: term0 = c1 * v0 ** c1 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = c : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 7*c**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = expr3 / expr3                                                   # STEP 19
ACTION: expr0 = expr3 / expr3 
expr3 = 2*atan(Sum(cosh(1), (g, 7, 7))) : <class 'sympy.core.mul.Mul'>
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr0 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3 = expr3 / expr2                                                   # STEP 20
ACTION: expr3 = expr3 / expr2 
expr3 = 2*atan(Sum(cosh(1), (g, 7, 7))) : <class 'sympy.core.mul.Mul'>
expr2 = Sum(I, (c, 7, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c2 * v2 ** c2                                                   # STEP 21
ACTION: term1 = c2 * v2 ** c2 
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 8*g**8 : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.collect(expr3,expr0)                                      # STEP 22
ACTION: expr2 = sympy.collect(expr3,expr0) 
expr3 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
expr0 = 1 : <class 'sympy.core.numbers.One'>
expr2 = Sum(I, (c, 7, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr2 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = sympy.acos(expr0)                                               # STEP 23
ACTION: expr3 = sympy.acos(expr0) 
expr0 = 1 : <class 'sympy.core.numbers.One'>
expr3 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
=> expr3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
c2 = sympy.Integer(7)                                                   # STEP 24
ACTION: c2 = sympy.Integer(7) 
c2 = 8 : <class 'sympy.core.numbers.Integer'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(6)                                                   # STEP 25
ACTION: c3 = sympy.Integer(6) 
c3 = None : <type 'NoneType'>
=> c3 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0 = expr2.subs(expr3,expr1)                                         # STEP 26
ACTION: expr0 = expr2.subs(expr3,expr1) 
expr2 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
expr0 = 1 : <class 'sympy.core.numbers.One'>
=> expr0 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.apart(expr2)                                              # STEP 27
ACTION: expr1 = sympy.apart(expr2) 
expr2 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
expr1 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.NotImplementedError'> multivariate partial fraction decomposition
==================================================
expr2 = sympy.Product(expr1,(v2,c0,c1))                                 # STEP 28
ACTION: expr2 = sympy.Product(expr1,(v2,c0,c1)) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
expr1 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
expr2 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
=> expr2 = Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
poly3 = term0                                                           # STEP 29
ACTION: poly3 = term0 
poly3 = None : <type 'NoneType'>
term0 = 7*c**7 : <class 'sympy.core.mul.Mul'>
=> poly3 = 7*c**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = expr0.subs(expr0,expr3)                                         # STEP 30
ACTION: expr1 = expr0.subs(expr0,expr3) 
expr0 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = I*log(1 + sqrt(2)) : <class 'sympy.core.mul.Mul'>
=> expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr3 = sympy.Product(expr3,(v2,c2,c3))                                 # STEP 31
ACTION: expr3 = sympy.Product(expr3,(v2,c2,c3)) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c3 = 6 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr3 = Product(0, (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0 = sympy.Sum(expr1,(v0,c1,c2))                                     # STEP 32
ACTION: expr0 = sympy.Sum(expr1,(v0,c1,c2)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = c : <class 'sympy.core.symbol.Symbol'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
expr0 = 2*atan(Sum(cosh(1), (g, 7, 7)))/Sum(I, (c, 7, 5)) : <class 'sympy.core.mul.Mul'>
=> expr0 = Sum(0, (c, 7, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term0 = c0 * v0 ** c1                                                   # STEP 33
ACTION: term0 = c0 * v0 ** c1 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = c : <class 'sympy.core.symbol.Symbol'>
term0 = 7*c**7 : <class 'sympy.core.mul.Mul'>
=> term0 = 5*c**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.sqrt(expr2)                                               # STEP 34
ACTION: expr1 = sympy.sqrt(expr2) 
expr2 = Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.concrete.products.Product'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr1 = sqrt(Product(I*log(1 + sqrt(2)), (g, 5, 7))) : <class 'sympy.core.power.Pow'>
==================================================
term2 = c3 * v2 ** c2                                                   # STEP 35
ACTION: term2 = c3 * v2 ** c2 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 6*g**7 : <class 'sympy.core.mul.Mul'>
==================================================
v0 = sympy.Symbol('l',positive=True)                                    # STEP 36
ACTION: v0 = sympy.Symbol('l',positive=True) 
v0 = c : <class 'sympy.core.symbol.Symbol'>
=> v0 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = expr3 * expr2                                                   # STEP 37
ACTION: expr2 = expr3 * expr2 
expr3 = Product(0, (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
expr2 = Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.concrete.products.Product'>
=> expr2 = Product(0, (g, 7, 6))*Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = sympy.Sum(expr3,(v0,c0,c1))                                     # STEP 38
ACTION: expr3 = sympy.Sum(expr3,(v0,c0,c1)) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = l : <class 'sympy.core.symbol.Symbol'>
expr3 = Product(0, (g, 7, 6)) : <class 'sympy.concrete.products.Product'>
=> expr3 = Sum(Product(0, (g, 7, 6)), (l, 5, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c3 = sympy.Integer(10)                                                  # STEP 39
ACTION: c3 = sympy.Integer(10) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
=> c3 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
poly0 = term2                                                           # STEP 40
ACTION: poly0 = term2 
poly0 = None : <type 'NoneType'>
term2 = 6*g**7 : <class 'sympy.core.mul.Mul'>
=> poly0 = 6*g**7 : <class 'sympy.core.mul.Mul'>
==================================================
term3 = c2 * v0 ** c2                                                   # STEP 41
ACTION: term3 = c2 * v0 ** c2 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = l : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 7*l**7 : <class 'sympy.core.mul.Mul'>
==================================================
v0 = sympy.Symbol('g',positive=True)                                    # STEP 42
ACTION: v0 = sympy.Symbol('g',positive=True) 
v0 = l : <class 'sympy.core.symbol.Symbol'>
=> v0 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
poly2 = term1                                                           # STEP 43
ACTION: poly2 = term1 
poly2 = None : <type 'NoneType'>
term1 = 8*g**8 : <class 'sympy.core.mul.Mul'>
=> poly2 = 8*g**8 : <class 'sympy.core.mul.Mul'>
==================================================
poly1 = term3 + term0                                                   # STEP 44
ACTION: poly1 = term3 + term0 
poly1 = None : <type 'NoneType'>
term3 = 7*l**7 : <class 'sympy.core.mul.Mul'>
term0 = 5*c**7 : <class 'sympy.core.mul.Mul'>
=> poly1 = 5*c**7 + 7*l**7 : <class 'sympy.core.add.Add'>
==================================================
c1 = sympy.Integer(3)                                                   # STEP 45
ACTION: c1 = sympy.Integer(3) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
=> c1 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
term0 = c0 * v2 ** c2                                                   # STEP 46
ACTION: term0 = c0 * v2 ** c2 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = g : <class 'sympy.core.symbol.Symbol'>
term0 = 5*c**7 : <class 'sympy.core.mul.Mul'>
=> term0 = 5*g**7 : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('g',positive=True)                                    # STEP 47
ACTION: v1 = sympy.Symbol('g',positive=True) 
v1 = None : <type 'NoneType'>
=> v1 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
term2 = c0 * v3 ** c1                                                   # STEP 48
ACTION: term2 = c0 * v3 ** c1 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c1 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = h : <class 'sympy.core.symbol.Symbol'>
term2 = 6*g**7 : <class 'sympy.core.mul.Mul'>
=> term2 = 5*h**3 : <class 'sympy.core.mul.Mul'>
==================================================
c0 = sympy.Integer(10)                                                  # STEP 49
ACTION: c0 = sympy.Integer(10) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
=> c0 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c2 * v3 ** c3                                                   # STEP 50
ACTION: term3 = c2 * v3 ** c3 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c3 = 10 : <class 'sympy.core.numbers.Integer'>
v3 = h : <class 'sympy.core.symbol.Symbol'>
term3 = 7*l**7 : <class 'sympy.core.mul.Mul'>
=> term3 = 7*h**10 : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c0 * v1 ** c0                                                   # STEP 51
ACTION: term1 = c0 * v1 ** c0 
c0 = 10 : <class 'sympy.core.numbers.Integer'>
v1 = g : <class 'sympy.core.symbol.Symbol'>
term1 = 8*g**8 : <class 'sympy.core.mul.Mul'>
=> term1 = 10*g**10 : <class 'sympy.core.mul.Mul'>
==================================================
v2 = sympy.Symbol('i',positive=True)                                    # STEP 52
ACTION: v2 = sympy.Symbol('i',positive=True) 
v2 = g : <class 'sympy.core.symbol.Symbol'>
=> v2 = i : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1.evalf()                                                           # STEP 53
ACTION: expr1.evalf() 
expr1 = sqrt(Product(I*log(1 + sqrt(2)), (g, 5, 7))) : <class 'sympy.core.power.Pow'>
==================================================
expr1 = sympy.Product(expr1,(v1,c1,c1))                                 # STEP 54
ACTION: expr1 = sympy.Product(expr1,(v1,c1,c1)) 
c1 = 3 : <class 'sympy.core.numbers.Integer'>
v1 = g : <class 'sympy.core.symbol.Symbol'>
expr1 = sqrt(Product(I*log(1 + sqrt(2)), (g, 5, 7))) : <class 'sympy.core.power.Pow'>
=> expr1 = Product(sqrt(Product(I*log(1 + sqrt(2)), (g, 5, 7))), (g, 3, 3)) : <class 'sympy.concrete.products.Product'>
==================================================
v3 = sympy.Symbol('b')                                                  # STEP 55
ACTION: v3 = sympy.Symbol('b') 
v3 = h : <class 'sympy.core.symbol.Symbol'>
=> v3 = b : <class 'sympy.core.symbol.Symbol'>
==================================================
c0 = sympy.Integer(3)                                                   # STEP 56
ACTION: c0 = sympy.Integer(3) 
c0 = 10 : <class 'sympy.core.numbers.Integer'>
=> c0 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(10)                                                  # STEP 57
ACTION: c2 = sympy.Integer(10) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
=> c2 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(10)                                                  # STEP 58
ACTION: c3 = sympy.Integer(10) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
v1 = sympy.Symbol('j',positive=True)                                    # STEP 59
ACTION: v1 = sympy.Symbol('j',positive=True) 
v1 = g : <class 'sympy.core.symbol.Symbol'>
=> v1 = j : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(0)                                                   # STEP 60
ACTION: c1 = sympy.Integer(0) 
c1 = 3 : <class 'sympy.core.numbers.Integer'>
=> c1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2.evalf()                                                           # STEP 61
ACTION: expr2.evalf() 
expr2 = Product(0, (g, 7, 6))*Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.apart(expr2)                                              # STEP 62
ACTION: expr2 = sympy.apart(expr2) 
expr2 = Product(0, (g, 7, 6))*Product(I*log(1 + sqrt(2)), (g, 5, 7)) : <class 'sympy.core.mul.Mul'>
RAISED EXCEPTION: <class 'sympy.polys.polyerrors.NotAlgebraic'> Product(0, (g, 7, 6)) doesn't seem to be an algebraic element
ERROR: (<class 'sympy.polys.polyerrors.NotAlgebraic'>, NotAlgebraic("Product(0, (g, 7, 6)) doesn't seem to be an algebraic element",), <traceback object at 0x107dc8518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 194320, in act3550
    self.p_expr[2] = sympy.apart(self.p_expr[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/utilities/decorator.py", line 37, in threaded_func
    return func(expr, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/partfrac.py", line 83, in apart
    (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4168, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4246, in _parallel_poly_from_expr
    opt.domain, coeffs_list = construct_domain(coeffs_list, opt=opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 238, in construct_domain
    result = _construct_simple(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 45, in _construct_simple
    domain, result = _construct_algebraic(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 93, in _construct_algebraic
    g, span, H = primitive_element(exts, ex=True, polys=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 857, in primitive_element
    f = minpoly(ext, y)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 657, in minimal_polynomial
    result = _minpoly_compose(ex, x, dom)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 578, in _minpoly_compose
    raise NotAlgebraic("%s doesn't seem to be an algebraic element" % ex)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 31
STOPPING TESTING DUE TO TIMEOUT
3.89603114584 PERCENT COVERED
87.900796175 TOTAL RUNTIME
2 EXECUTED
94 TOTAL TEST OPERATIONS
3.18398356438 TIME SPENT EXECUTING TEST OPERATIONS
0.11885881424 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
55.6200649738 TIME SPENT CHECKING PROPERTIES
58.8040485382 TOTAL TIME SPENT RUNNING SUT
0.00739097595215 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
c1 = sympy.Integer(7)                                                    # STEP 0
v2 = sympy.Symbol('g',positive=True)                                     # STEP 1
v0 = sympy.Symbol('c')                                                   # STEP 2
expr1 = sympy.I                                                          # STEP 3
expr0 = sympy.expand_power_base(expr1)                                   # STEP 4
expr3 = sympy.expand(expr1,force=True)                                   # STEP 5
expr2 = sympy.cos(expr1)                                                 # STEP 6
expr1 = sympy.Sum(expr2,(v2,c1,c1))                                      # STEP 7
expr2 = sympy.asin(expr3)                                                # STEP 8
v3 = sympy.Symbol('h',positive=True)                                     # STEP 9
expr3 = sympy.atan(expr1)                                               # STEP 10
expr1 = expr0.subs(expr0,expr2)                                         # STEP 11
c2 = sympy.Integer(8)                                                   # STEP 12
expr2 = sympy.apart(expr3)                                              # STEP 13
expr0 = sympy.expand_log(expr0)                                         # STEP 14
c0 = sympy.Integer(5)                                                   # STEP 15
expr3 = expr2 + expr2                                                   # STEP 16
expr2 = sympy.Sum(expr0,(v0,c1,c0))                                     # STEP 17
term0 = c1 * v0 ** c1                                                   # STEP 18
expr0 = expr3 / expr3                                                   # STEP 19
expr3 = expr3 / expr2                                                   # STEP 20
term1 = c2 * v2 ** c2                                                   # STEP 21
expr2 = sympy.collect(expr3,expr0)                                      # STEP 22
expr3 = sympy.acos(expr0)                                               # STEP 23
c2 = sympy.Integer(7)                                                   # STEP 24
c3 = sympy.Integer(6)                                                   # STEP 25
expr0 = expr2.subs(expr3,expr1)                                         # STEP 26
expr1 = sympy.apart(expr2)                                              # STEP 27
expr2 = sympy.Product(expr1,(v2,c0,c1))                                 # STEP 28
poly3 = term0                                                           # STEP 29
expr1 = expr0.subs(expr0,expr3)                                         # STEP 30
expr3 = sympy.Product(expr3,(v2,c2,c3))                                 # STEP 31
expr0 = sympy.Sum(expr1,(v0,c1,c2))                                     # STEP 32
term0 = c0 * v0 ** c1                                                   # STEP 33
expr1 = sympy.sqrt(expr2)                                               # STEP 34
term2 = c3 * v2 ** c2                                                   # STEP 35
v0 = sympy.Symbol('l',positive=True)                                    # STEP 36
expr2 = expr3 * expr2                                                   # STEP 37
expr3 = sympy.Sum(expr3,(v0,c0,c1))                                     # STEP 38
c3 = sympy.Integer(10)                                                  # STEP 39
poly0 = term2                                                           # STEP 40
term3 = c2 * v0 ** c2                                                   # STEP 41
v0 = sympy.Symbol('g',positive=True)                                    # STEP 42
poly2 = term1                                                           # STEP 43
poly1 = term3 + term0                                                   # STEP 44
c1 = sympy.Integer(3)                                                   # STEP 45
term0 = c0 * v2 ** c2                                                   # STEP 46
v1 = sympy.Symbol('g',positive=True)                                    # STEP 47
term2 = c0 * v3 ** c1                                                   # STEP 48
c0 = sympy.Integer(10)                                                  # STEP 49
term3 = c2 * v3 ** c3                                                   # STEP 50
term1 = c0 * v1 ** c0                                                   # STEP 51
v2 = sympy.Symbol('i',positive=True)                                    # STEP 52
expr1.evalf()                                                           # STEP 53
expr1 = sympy.Product(expr1,(v1,c1,c1))                                 # STEP 54
v3 = sympy.Symbol('b')                                                  # STEP 55
c0 = sympy.Integer(3)                                                   # STEP 56
c2 = sympy.Integer(10)                                                  # STEP 57
c3 = sympy.Integer(10)                                                  # STEP 58
v1 = sympy.Symbol('j',positive=True)                                    # STEP 59
c1 = sympy.Integer(0)                                                   # STEP 60
expr2.evalf()                                                           # STEP 61
expr2 = sympy.apart(expr2)                                              # STEP 62
ERROR: (<class 'sympy.polys.polyerrors.NotAlgebraic'>, NotAlgebraic("Product(0, (g, 7, 6)) doesn't seem to be an algebraic element",), <traceback object at 0x107dc8518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 194320, in act3550
    self.p_expr[2] = sympy.apart(self.p_expr[2])
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/utilities/decorator.py", line 37, in threaded_func
    return func(expr, *args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/partfrac.py", line 83, in apart
    (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4168, in parallel_poly_from_expr
    return _parallel_poly_from_expr(exprs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/polytools.py", line 4246, in _parallel_poly_from_expr
    opt.domain, coeffs_list = construct_domain(coeffs_list, opt=opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 238, in construct_domain
    result = _construct_simple(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 45, in _construct_simple
    domain, result = _construct_algebraic(coeffs, opt)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/constructor.py", line 93, in _construct_algebraic
    g, span, H = primitive_element(exts, ex=True, polys=True)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 857, in primitive_element
    f = minpoly(ext, y)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 657, in minimal_polynomial
    result = _minpoly_compose(ex, x, dom)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/sympy/polys/numberfields.py", line 578, in _minpoly_compose
    raise NotAlgebraic("%s doesn't seem to be an algebraic element" % ex)
8695 BRANCHES COVERED
6503 STATEMENTS COVERED

Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.662.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #57 (0:00:30.050799) Fri Apr 28 06:57:08 2017 [ 5890 stmts 7805 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.ValueError'>, ValueError('gamma function pole',), <traceback object at 0x10d69ff80>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238940, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[3]") or (sympy.simplify(self.p_expr[0]-self.p_expr[3]) != 0) or (self.p_expr[0].equals(self.p_expr[3]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1284, in evalf
    re, im = x._eval_evalf(prec).as_real_imag()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 503, in _eval_evalf
    v = func(*args)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/ctx_mp_python.py", line 993, in f
    return ctx.make_mpf(mpf_f(x._mpf_, prec, rounding))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 2350, in mpf_factorial
    return mpf_gamma(x, prec, rnd, 1)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 1947, in mpf_gamma
    raise ValueError("gamma function pole")
Original test has 18 steps

SAVING TEST AS failure.662.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
v0 = sympy.Symbol('z')                                                   # STEP 0
ACTION: v0 = sympy.Symbol('z') 
v0 = None : <type 'NoneType'>
=> v0 = z : <class 'sympy.core.symbol.Symbol'>
==================================================
c2 = sympy.Integer(7)                                                    # STEP 1
ACTION: c2 = sympy.Integer(7) 
c2 = None : <type 'NoneType'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
v1 = sympy.Symbol('x')                                                   # STEP 2
ACTION: v1 = sympy.Symbol('x') 
v1 = None : <type 'NoneType'>
=> v1 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(10)                                                   # STEP 3
ACTION: c3 = sympy.Integer(10) 
c3 = None : <type 'NoneType'>
=> c3 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1 = sympy.Rational(c3,c3)                                            # STEP 4
ACTION: expr1 = sympy.Rational(c3,c3) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
expr1 = None : <type 'NoneType'>
=> expr1 = 1 : <class 'sympy.core.numbers.One'>
==================================================
term0 = c2 * v0 ** c2                                                    # STEP 5
ACTION: term0 = c2 * v0 ** c2 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = z : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 7*z**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.powsimp(expr1)                                             # STEP 6
ACTION: expr0 = sympy.powsimp(expr1) 
expr1 = 1 : <class 'sympy.core.numbers.One'>
expr0 = None : <type 'NoneType'>
=> expr0 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3 = c2                                                               # STEP 7
ACTION: expr3 = c2 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
expr3 = None : <type 'NoneType'>
=> expr3 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
expr2 = expr0.subs(expr3,expr0)                                          # STEP 8
ACTION: expr2 = expr0.subs(expr3,expr0) 
expr0 = 1 : <class 'sympy.core.numbers.One'>
expr3 = 7 : <class 'sympy.core.numbers.Integer'>
expr2 = None : <type 'NoneType'>
=> expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3 = expr3.subs(expr2,expr2)                                          # STEP 9
ACTION: expr3 = expr3.subs(expr2,expr2) 
expr3 = 7 : <class 'sympy.core.numbers.Integer'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr2 = sympy.Sum(expr2,(v0,c3,c2))                                     # STEP 10
ACTION: expr2 = sympy.Sum(expr2,(v0,c3,c2)) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = z : <class 'sympy.core.symbol.Symbol'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
=> expr2 = Sum(1, (z, 10, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr0 = sympy.Product(expr3,(v0,c3,c2))                                 # STEP 11
ACTION: expr0 = sympy.Product(expr3,(v0,c3,c2)) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v0 = z : <class 'sympy.core.symbol.Symbol'>
expr3 = 7 : <class 'sympy.core.numbers.Integer'>
expr0 = 1 : <class 'sympy.core.numbers.One'>
=> expr0 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
c1 = sympy.Integer(4)                                                   # STEP 12
ACTION: c1 = sympy.Integer(4) 
c1 = None : <type 'NoneType'>
=> c1 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1 = sympy.Sum(expr3,(v1,c1,c2))                                     # STEP 13
ACTION: expr1 = sympy.Sum(expr3,(v1,c1,c2)) 
c1 = 4 : <class 'sympy.core.numbers.Integer'>
c2 = 7 : <class 'sympy.core.numbers.Integer'>
v1 = x : <class 'sympy.core.symbol.Symbol'>
expr3 = 7 : <class 'sympy.core.numbers.Integer'>
expr1 = 1 : <class 'sympy.core.numbers.One'>
=> expr1 = Sum(7, (x, 4, 7)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = sympy.collect(expr0,expr1)                                      # STEP 14
ACTION: expr3 = sympy.collect(expr0,expr1) 
expr0 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
expr1 = Sum(7, (x, 4, 7)) : <class 'sympy.concrete.summations.Sum'>
expr3 = 7 : <class 'sympy.core.numbers.Integer'>
=> expr3 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
term2 = c1 * v1 ** c1                                                   # STEP 15
ACTION: term2 = c1 * v1 ** c1 
c1 = 4 : <class 'sympy.core.numbers.Integer'>
v1 = x : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 4*x**4 : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.Product(expr3,(v1,c3,c3))                                 # STEP 16
ACTION: expr0 = sympy.Product(expr3,(v1,c3,c3)) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
v1 = x : <class 'sympy.core.symbol.Symbol'>
expr3 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
expr0 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
=> expr0 = Product(7, (z, 10, 7), (x, 10, 10)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.factorial(expr2)                                          # STEP 17
ACTION: expr3 = sympy.factorial(expr2) 
expr2 = Sum(1, (z, 10, 7)) : <class 'sympy.concrete.summations.Sum'>
expr3 = Product(7, (z, 10, 7)) : <class 'sympy.concrete.products.Product'>
=> expr3 = factorial(Sum(1, (z, 10, 7))) : factorial
==================================================
ERROR: (<type 'exceptions.ValueError'>, ValueError('gamma function pole',), <traceback object at 0x10f57a5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238940, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[3]") or (sympy.simplify(self.p_expr[0]-self.p_expr[3]) != 0) or (self.p_expr[0].equals(self.p_expr[3]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1284, in evalf
    re, im = x._eval_evalf(prec).as_real_imag()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 503, in _eval_evalf
    v = func(*args)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/ctx_mp_python.py", line 993, in f
    return ctx.make_mpf(mpf_f(x._mpf_, prec, rounding))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 2350, in mpf_factorial
    return mpf_gamma(x, prec, rnd, 1)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 1947, in mpf_gamma
    raise ValueError("gamma function pole")
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 13
STOPPING TESTING DUE TO TIMEOUT
3.68956590283 PERCENT COVERED
89.913285017 TOTAL RUNTIME
3 EXECUTED
131 TOTAL TEST OPERATIONS
5.00136160851 TIME SPENT EXECUTING TEST OPERATIONS
0.343629598618 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
51.4619932175 TIME SPENT CHECKING PROPERTIES
56.463354826 TOTAL TIME SPENT RUNNING SUT
0.0131721496582 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
v0 = sympy.Symbol('z')                                                   # STEP 0
c2 = sympy.Integer(7)                                                    # STEP 1
v1 = sympy.Symbol('x')                                                   # STEP 2
c3 = sympy.Integer(10)                                                   # STEP 3
expr1 = sympy.Rational(c3,c3)                                            # STEP 4
term0 = c2 * v0 ** c2                                                    # STEP 5
expr0 = sympy.powsimp(expr1)                                             # STEP 6
expr3 = c2                                                               # STEP 7
expr2 = expr0.subs(expr3,expr0)                                          # STEP 8
expr3 = expr3.subs(expr2,expr2)                                          # STEP 9
expr2 = sympy.Sum(expr2,(v0,c3,c2))                                     # STEP 10
expr0 = sympy.Product(expr3,(v0,c3,c2))                                 # STEP 11
c1 = sympy.Integer(4)                                                   # STEP 12
expr1 = sympy.Sum(expr3,(v1,c1,c2))                                     # STEP 13
expr3 = sympy.collect(expr0,expr1)                                      # STEP 14
term2 = c1 * v1 ** c1                                                   # STEP 15
expr0 = sympy.Product(expr3,(v1,c3,c3))                                 # STEP 16
expr3 = sympy.factorial(expr2)                                          # STEP 17
ERROR: (<type 'exceptions.ValueError'>, ValueError('gamma function pole',), <traceback object at 0x10f57a5f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238940, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[3]") or (sympy.simplify(self.p_expr[0]-self.p_expr[3]) != 0) or (self.p_expr[0].equals(self.p_expr[3]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1284, in evalf
    re, im = x._eval_evalf(prec).as_real_imag()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 503, in _eval_evalf
    v = func(*args)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/ctx_mp_python.py", line 993, in f
    return ctx.make_mpf(mpf_f(x._mpf_, prec, rounding))
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 2350, in mpf_factorial
    return mpf_gamma(x, prec, rnd, 1)
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/gammazeta.py", line 1947, in mpf_gamma
    raise ValueError("gamma function pole")
8175 BRANCHES COVERED
6142 STATEMENTS COVERED

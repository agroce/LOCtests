Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.1239.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #53 (0:00:30.049269) Fri Apr 28 08:36:05 2017 [ 5211 stmts 6952 branches ]
PROPERLY VIOLATION
ERROR: (<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('integer division or modulo by zero',), <traceback object at 0x1098801b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/products.py", line 227, in doit
    return f.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1519, in doit
    for term in self.args]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 173, in doit
    f = self.function.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1520, in doit
    return self.func(*terms)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 48, in doit
    return (p % q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/numbers.py", line 1824, in __mod__
    return Integer(self.p % other.p)
Original test has 69 steps

SAVING TEST AS failure.1239.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
c1 = sympy.Integer(5)                                                    # STEP 0
ACTION: c1 = sympy.Integer(5) 
c1 = None : <type 'NoneType'>
=> c1 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('y')                                                   # STEP 1
ACTION: v0 = sympy.Symbol('y') 
v0 = None : <type 'NoneType'>
=> v0 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c2 = sympy.Integer(0)                                                    # STEP 2
ACTION: c2 = sympy.Integer(0) 
c2 = None : <type 'NoneType'>
=> c2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
c0 = sympy.Integer(4)                                                    # STEP 3
ACTION: c0 = sympy.Integer(4) 
c0 = None : <type 'NoneType'>
=> c0 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = sympy.pi                                                         # STEP 4
ACTION: expr3 = sympy.pi 
expr3 = None : <type 'NoneType'>
=> expr3 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr1 = sympy.Product(expr3,(v0,c2,c2))                                  # STEP 5
ACTION: expr1 = sympy.Product(expr3,(v0,c2,c2)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr3 = pi : <class 'sympy.core.numbers.Pi'>
expr1 = None : <type 'NoneType'>
=> expr1 = Product(pi, (y, 0, 0)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = sympy.Sum(expr3,(v0,c2,c2))                                      # STEP 6
ACTION: expr3 = sympy.Sum(expr3,(v0,c2,c2)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr3 = pi : <class 'sympy.core.numbers.Pi'>
=> expr3 = Sum(pi, (y, 0, 0)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term2 = c0 * v0 ** c2                                                    # STEP 7
ACTION: term2 = c0 * v0 ** c2 
c0 = 4 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0 = expr1 ** expr1                                                   # STEP 8
ACTION: expr0 = expr1 ** expr1 
expr1 = Product(pi, (y, 0, 0)) : <class 'sympy.concrete.products.Product'>
expr0 = None : <type 'NoneType'>
=> expr0 = Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)) : <class 'sympy.core.power.Pow'>
==================================================
expr1 = sympy.sqrt(expr0)                                                # STEP 9
ACTION: expr1 = sympy.sqrt(expr0) 
expr0 = Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)) : <class 'sympy.core.power.Pow'>
expr1 = Product(pi, (y, 0, 0)) : <class 'sympy.concrete.products.Product'>
=> expr1 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
==================================================
expr2 = expr1 / expr1                                                   # STEP 10
ACTION: expr2 = expr1 / expr1 
expr1 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
expr2 = None : <type 'NoneType'>
=> expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr0 = sympy.powsimp(expr1)                                            # STEP 11
ACTION: expr0 = sympy.powsimp(expr1) 
expr1 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
expr0 = Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)) : <class 'sympy.core.power.Pow'>
=> expr0 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
==================================================
v2 = sympy.Symbol('d')                                                  # STEP 12
ACTION: v2 = sympy.Symbol('d') 
v2 = None : <type 'NoneType'>
=> v2 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
c2 = sympy.Integer(0)                                                   # STEP 13
ACTION: c2 = sympy.Integer(0) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = sympy.factorial(expr1)                                          # STEP 14
ACTION: expr1 = sympy.factorial(expr1) 
expr1 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
=> expr1 = factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))) : factorial
==================================================
term3 = c2 * v2 ** c1                                                   # STEP 15
ACTION: term3 = c2 * v2 ** c1 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v2 = d : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
v2 = sympy.Symbol('l',positive=True)                                    # STEP 16
ACTION: v2 = sympy.Symbol('l',positive=True) 
v2 = d : <class 'sympy.core.symbol.Symbol'>
=> v2 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
term1 = c1 * v2 ** c2                                                   # STEP 17
ACTION: term1 = c1 * v2 ** c2 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v2 = l : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
poly1 = term2 + term2                                                   # STEP 18
ACTION: poly1 = term2 + term2 
poly1 = None : <type 'NoneType'>
term2 = 4 : <class 'sympy.core.numbers.Integer'>
=> poly1 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
v1 = sympy.Symbol('d')                                                  # STEP 19
ACTION: v1 = sympy.Symbol('d') 
v1 = None : <type 'NoneType'>
=> v1 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
v2 = sympy.Symbol('h',positive=True)                                    # STEP 20
ACTION: v2 = sympy.Symbol('h',positive=True) 
v2 = l : <class 'sympy.core.symbol.Symbol'>
=> v2 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
poly0 = term1 + term3                                                   # STEP 21
ACTION: poly0 = term1 + term3 
poly0 = None : <type 'NoneType'>
term1 = 5 : <class 'sympy.core.numbers.Integer'>
term3 = 0 : <class 'sympy.core.numbers.Zero'>
=> poly0 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
c0 = sympy.Integer(6)                                                   # STEP 22
ACTION: c0 = sympy.Integer(6) 
c0 = 4 : <class 'sympy.core.numbers.Integer'>
=> c0 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('a')                                                  # STEP 23
ACTION: v3 = sympy.Symbol('a') 
v3 = None : <type 'NoneType'>
=> v3 = a : <class 'sympy.core.symbol.Symbol'>
==================================================
term0 = c0 * v0 ** c0                                                   # STEP 24
ACTION: term0 = c0 * v0 ** c0 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 6*y**6 : <class 'sympy.core.mul.Mul'>
==================================================
poly2 = term3 + term1                                                   # STEP 25
ACTION: poly2 = term3 + term1 
poly2 = None : <type 'NoneType'>
term3 = 0 : <class 'sympy.core.numbers.Zero'>
term1 = 5 : <class 'sympy.core.numbers.Integer'>
=> poly2 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0.evalf()                                                           # STEP 26
ACTION: expr0.evalf() 
expr0 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
==================================================
expr0 = sympy.Product(expr1,(v3,c1,c1))                                 # STEP 27
ACTION: expr0 = sympy.Product(expr1,(v3,c1,c1)) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = a : <class 'sympy.core.symbol.Symbol'>
expr1 = factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))) : factorial
expr0 = sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0))) : <class 'sympy.core.power.Pow'>
=> expr0 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
term1 = c2 * v3 ** c0                                                   # STEP 28
ACTION: term1 = c2 * v3 ** c0 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v3 = a : <class 'sympy.core.symbol.Symbol'>
term1 = 5 : <class 'sympy.core.numbers.Integer'>
=> term1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = sympy.Sum(expr3,(v2,c1,c1))                                     # STEP 29
ACTION: expr1 = sympy.Sum(expr3,(v2,c1,c1)) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v2 = h : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(pi, (y, 0, 0)) : <class 'sympy.concrete.summations.Sum'>
expr1 = factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))) : factorial
=> expr1 = Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = expr0.subs(expr1,expr2)                                         # STEP 30
ACTION: expr3 = expr0.subs(expr1,expr2) 
expr0 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
expr1 = Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
expr3 = Sum(pi, (y, 0, 0)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = expr3.subs(expr3,expr2)                                         # STEP 31
ACTION: expr2 = expr3.subs(expr3,expr2) 
expr3 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr3 = sympy.combsimp(expr2)                                           # STEP 32
ACTION: expr3 = sympy.combsimp(expr2) 
expr2 = 1 : <class 'sympy.core.numbers.One'>
expr3 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
=> expr3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr0 = sympy.Sum(expr1,(v1,c0,c1))                                     # STEP 33
ACTION: expr0 = sympy.Sum(expr1,(v1,c0,c1)) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v1 = d : <class 'sympy.core.symbol.Symbol'>
expr1 = Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Product(factorial(sqrt(Product(pi, (y, 0, 0))**Product(pi, (y, 0, 0)))), (a, 5, 5)) : <class 'sympy.concrete.products.Product'>
=> expr0 = Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.Product(expr3,(v3,c0,c1))                                 # STEP 34
ACTION: expr2 = sympy.Product(expr3,(v3,c0,c1)) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = a : <class 'sympy.core.symbol.Symbol'>
expr3 = 1 : <class 'sympy.core.numbers.One'>
expr2 = 1 : <class 'sympy.core.numbers.One'>
=> expr2 = Product(1, (a, 6, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
expr1 = expr2 * expr1                                                   # STEP 35
ACTION: expr1 = expr2 * expr1 
expr2 = Product(1, (a, 6, 5)) : <class 'sympy.concrete.products.Product'>
expr1 = Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = sympy.Sum(expr3,(v1,c0,c2))                                     # STEP 36
ACTION: expr3 = sympy.Sum(expr3,(v1,c0,c2)) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v1 = d : <class 'sympy.core.symbol.Symbol'>
expr3 = 1 : <class 'sympy.core.numbers.One'>
=> expr3 = Sum(1, (d, 6, 0)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = expr0 + expr1                                                   # STEP 37
ACTION: expr2 = expr0 + expr1 
expr0 = Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.core.mul.Mul'>
expr2 = Product(1, (a, 6, 5)) : <class 'sympy.concrete.products.Product'>
=> expr2 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.add.Add'>
==================================================
expr1 = sympy.Sum(expr1,(v3,c1,c1))                                     # STEP 38
ACTION: expr1 = sympy.Sum(expr1,(v3,c1,c1)) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = a : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) : <class 'sympy.core.mul.Mul'>
=> expr1 = Sum(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)), (a, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr0 = expr3 * expr0                                                   # STEP 39
ACTION: expr0 = expr3 * expr0 
expr3 = Sum(1, (d, 6, 0)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = expr3.subs(expr1,expr1)                                         # STEP 40
ACTION: expr3 = expr3.subs(expr1,expr1) 
expr3 = Sum(1, (d, 6, 0)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Sum(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)), (a, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term2 = c2 * v2 ** c2                                                   # STEP 41
ACTION: term2 = c2 * v2 ** c2 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v2 = h : <class 'sympy.core.symbol.Symbol'>
term2 = 4 : <class 'sympy.core.numbers.Integer'>
=> term2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
v1 = sympy.Symbol('h',positive=True)                                    # STEP 42
ACTION: v1 = sympy.Symbol('h',positive=True) 
v1 = d : <class 'sympy.core.symbol.Symbol'>
=> v1 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1 = sympy.Product(expr2,(v1,c2,c2))                                 # STEP 43
ACTION: expr1 = sympy.Product(expr2,(v1,c2,c2)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v1 = h : <class 'sympy.core.symbol.Symbol'>
expr2 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.add.Add'>
expr1 = Sum(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)), (a, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Product(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (h, 0, 0)) : <class 'sympy.concrete.products.Product'>
==================================================
poly3 = term2 + term2                                                   # STEP 44
ACTION: poly3 = term2 + term2 
poly3 = None : <type 'NoneType'>
term2 = 0 : <class 'sympy.core.numbers.Zero'>
=> poly3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2 = sympy.Product(expr3,(v1,c0,c1))                                 # STEP 45
ACTION: expr2 = sympy.Product(expr3,(v1,c0,c1)) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v1 = h : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(1, (d, 6, 0)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.add.Add'>
=> expr2 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
expr3 = expr2.subs(expr1,expr0)                                         # STEP 46
ACTION: expr3 = expr2.subs(expr1,expr0) 
expr2 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
expr1 = Product(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (h, 0, 0)) : <class 'sympy.concrete.products.Product'>
expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
expr3 = Sum(1, (d, 6, 0)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
expr1 = sympy.Sum(expr0,(v0,c2,c1))                                     # STEP 47
ACTION: expr1 = sympy.Sum(expr0,(v0,c2,c1)) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
expr1 = Product(Product(1, (a, 6, 5))*Sum(pi, (y, 0, 0), (h, 5, 5)) + Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (h, 0, 0)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr0 = expr2.subs(expr3,expr0)                                         # STEP 48
ACTION: expr0 = expr2.subs(expr3,expr0) 
expr2 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
expr3 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.Sum(expr2,(v0,c1,c2))                                     # STEP 49
ACTION: expr2 = sympy.Sum(expr2,(v0,c1,c2)) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr2 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
=> expr2 = Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = expr2 % expr1                                                   # STEP 50
ACTION: expr3 = expr2 % expr1 
expr2 = Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5)) : <class 'sympy.concrete.summations.Sum'>
expr3 = Product(Sum(1, (d, 6, 0)), (h, 6, 5)) : <class 'sympy.concrete.products.Product'>
=> expr3 = Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))) : Mod
==================================================
expr2 = poly1                                                           # STEP 51
ACTION: expr2 = poly1 
poly1 = 8 : <class 'sympy.core.numbers.Integer'>
expr2 = Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)) : <class 'sympy.concrete.summations.Sum'>
=> expr2 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1 = sympy.apart(expr3)                                              # STEP 52
ACTION: expr1 = sympy.apart(expr3) 
expr3 = Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))) : Mod
expr1 = Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))) : Mod
==================================================
expr3 = sympy.Sum(expr3,(v1,c1,c2))                                     # STEP 53
ACTION: expr3 = sympy.Sum(expr3,(v1,c1,c2)) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 0 : <class 'sympy.core.numbers.Zero'>
v1 = h : <class 'sympy.core.symbol.Symbol'>
expr3 = Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))) : Mod
=> expr3 = Sum(Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))), (h, 5, 0)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term3 = c2 * v3 ** c1                                                   # STEP 54
ACTION: term3 = c2 * v3 ** c1 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
c1 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = a : <class 'sympy.core.symbol.Symbol'>
term3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
c2 = sympy.Integer(7)                                                   # STEP 55
ACTION: c2 = sympy.Integer(7) 
c2 = 0 : <class 'sympy.core.numbers.Zero'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
c1 = sympy.Integer(7)                                                   # STEP 56
ACTION: c1 = sympy.Integer(7) 
c1 = 5 : <class 'sympy.core.numbers.Integer'>
=> c1 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
term2 = c2 * v1 ** c0                                                   # STEP 57
ACTION: term2 = c2 * v1 ** c0 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = h : <class 'sympy.core.symbol.Symbol'>
term2 = 0 : <class 'sympy.core.numbers.Zero'>
=> term2 = 7*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
poly1 = term1                                                           # STEP 58
ACTION: poly1 = term1 
poly1 = 8 : <class 'sympy.core.numbers.Integer'>
term1 = 0 : <class 'sympy.core.numbers.Zero'>
=> poly1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
term1 = c0 * v0 ** c0                                                   # STEP 59
ACTION: term1 = c0 * v0 ** c0 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
term1 = 0 : <class 'sympy.core.numbers.Zero'>
=> term1 = 6*y**6 : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('h',positive=True)                                    # STEP 60
ACTION: v1 = sympy.Symbol('h',positive=True) 
v1 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(9)                                                   # STEP 61
ACTION: c3 = sympy.Integer(9) 
c3 = None : <type 'NoneType'>
=> c3 = 9 : <class 'sympy.core.numbers.Integer'>
==================================================
c0 = sympy.Integer(3)                                                   # STEP 62
ACTION: c0 = sympy.Integer(3) 
c0 = 6 : <class 'sympy.core.numbers.Integer'>
=> c0 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(2)                                                   # STEP 63
ACTION: c2 = sympy.Integer(2) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
=> c2 = 2 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('b')                                                  # STEP 64
ACTION: v3 = sympy.Symbol('b') 
v3 = a : <class 'sympy.core.symbol.Symbol'>
=> v3 = b : <class 'sympy.core.symbol.Symbol'>
==================================================
v2 = sympy.Symbol('c')                                                  # STEP 65
ACTION: v2 = sympy.Symbol('c') 
v2 = h : <class 'sympy.core.symbol.Symbol'>
=> v2 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('i',positive=True)                                    # STEP 66
ACTION: v0 = sympy.Symbol('i',positive=True) 
v0 = y : <class 'sympy.core.symbol.Symbol'>
=> v0 = i : <class 'sympy.core.symbol.Symbol'>
==================================================
expr0.evalf()                                                           # STEP 67
ACTION: expr0.evalf() 
expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.Product(expr3,(v2,c0,c1))                                 # STEP 68
ACTION: expr0 = sympy.Product(expr3,(v2,c0,c1)) 
c0 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v2 = c : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))), (h, 5, 0)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)) : <class 'sympy.core.mul.Mul'>
=> expr0 = Product(Sum(Mod(Sum(Product(Sum(1, (d, 6, 0)), (h, 6, 5)), (y, 5, 0)), Sum(Sum(1, (d, 6, 0))*Sum(pi, (y, 0, 0), (h, 5, 5), (d, 6, 5)), (y, 0, 5))), (h, 5, 0)), (c, 3, 7)) : <class 'sympy.concrete.products.Product'>
==================================================
ERROR: (<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('integer division or modulo by zero',), <traceback object at 0x10f1ca560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/products.py", line 227, in doit
    return f.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1519, in doit
    for term in self.args]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 173, in doit
    f = self.function.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1520, in doit
    return self.func(*terms)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 48, in doit
    return (p % q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/numbers.py", line 1824, in __mod__
    return Integer(self.p % other.p)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 0
STOPPING TESTING DUE TO TIMEOUT
3.13379027773 PERCENT COVERED
107.196363926 TOTAL RUNTIME
2 EXECUTED
69 TOTAL TEST OPERATIONS
2.17091393471 TIME SPENT EXECUTING TEST OPERATIONS
0.197503805161 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
38.0781636238 TIME SPENT CHECKING PROPERTIES
40.2490775585 TOTAL TIME SPENT RUNNING SUT
0.00744605064392 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
c1 = sympy.Integer(5)                                                    # STEP 0
v0 = sympy.Symbol('y')                                                   # STEP 1
c2 = sympy.Integer(0)                                                    # STEP 2
c0 = sympy.Integer(4)                                                    # STEP 3
expr3 = sympy.pi                                                         # STEP 4
expr1 = sympy.Product(expr3,(v0,c2,c2))                                  # STEP 5
expr3 = sympy.Sum(expr3,(v0,c2,c2))                                      # STEP 6
term2 = c0 * v0 ** c2                                                    # STEP 7
expr0 = expr1 ** expr1                                                   # STEP 8
expr1 = sympy.sqrt(expr0)                                                # STEP 9
expr2 = expr1 / expr1                                                   # STEP 10
expr0 = sympy.powsimp(expr1)                                            # STEP 11
v2 = sympy.Symbol('d')                                                  # STEP 12
c2 = sympy.Integer(0)                                                   # STEP 13
expr1 = sympy.factorial(expr1)                                          # STEP 14
term3 = c2 * v2 ** c1                                                   # STEP 15
v2 = sympy.Symbol('l',positive=True)                                    # STEP 16
term1 = c1 * v2 ** c2                                                   # STEP 17
poly1 = term2 + term2                                                   # STEP 18
v1 = sympy.Symbol('d')                                                  # STEP 19
v2 = sympy.Symbol('h',positive=True)                                    # STEP 20
poly0 = term1 + term3                                                   # STEP 21
c0 = sympy.Integer(6)                                                   # STEP 22
v3 = sympy.Symbol('a')                                                  # STEP 23
term0 = c0 * v0 ** c0                                                   # STEP 24
poly2 = term3 + term1                                                   # STEP 25
expr0.evalf()                                                           # STEP 26
expr0 = sympy.Product(expr1,(v3,c1,c1))                                 # STEP 27
term1 = c2 * v3 ** c0                                                   # STEP 28
expr1 = sympy.Sum(expr3,(v2,c1,c1))                                     # STEP 29
expr3 = expr0.subs(expr1,expr2)                                         # STEP 30
expr2 = expr3.subs(expr3,expr2)                                         # STEP 31
expr3 = sympy.combsimp(expr2)                                           # STEP 32
expr0 = sympy.Sum(expr1,(v1,c0,c1))                                     # STEP 33
expr2 = sympy.Product(expr3,(v3,c0,c1))                                 # STEP 34
expr1 = expr2 * expr1                                                   # STEP 35
expr3 = sympy.Sum(expr3,(v1,c0,c2))                                     # STEP 36
expr2 = expr0 + expr1                                                   # STEP 37
expr1 = sympy.Sum(expr1,(v3,c1,c1))                                     # STEP 38
expr0 = expr3 * expr0                                                   # STEP 39
expr3 = expr3.subs(expr1,expr1)                                         # STEP 40
term2 = c2 * v2 ** c2                                                   # STEP 41
v1 = sympy.Symbol('h',positive=True)                                    # STEP 42
expr1 = sympy.Product(expr2,(v1,c2,c2))                                 # STEP 43
poly3 = term2 + term2                                                   # STEP 44
expr2 = sympy.Product(expr3,(v1,c0,c1))                                 # STEP 45
expr3 = expr2.subs(expr1,expr0)                                         # STEP 46
expr1 = sympy.Sum(expr0,(v0,c2,c1))                                     # STEP 47
expr0 = expr2.subs(expr3,expr0)                                         # STEP 48
expr2 = sympy.Sum(expr2,(v0,c1,c2))                                     # STEP 49
expr3 = expr2 % expr1                                                   # STEP 50
expr2 = poly1                                                           # STEP 51
expr1 = sympy.apart(expr3)                                              # STEP 52
expr3 = sympy.Sum(expr3,(v1,c1,c2))                                     # STEP 53
term3 = c2 * v3 ** c1                                                   # STEP 54
c2 = sympy.Integer(7)                                                   # STEP 55
c1 = sympy.Integer(7)                                                   # STEP 56
term2 = c2 * v1 ** c0                                                   # STEP 57
poly1 = term1                                                           # STEP 58
term1 = c0 * v0 ** c0                                                   # STEP 59
v1 = sympy.Symbol('h',positive=True)                                    # STEP 60
c3 = sympy.Integer(9)                                                   # STEP 61
c0 = sympy.Integer(3)                                                   # STEP 62
c2 = sympy.Integer(2)                                                   # STEP 63
v3 = sympy.Symbol('b')                                                  # STEP 64
v2 = sympy.Symbol('c')                                                  # STEP 65
v0 = sympy.Symbol('i',positive=True)                                    # STEP 66
expr0.evalf()                                                           # STEP 67
expr0 = sympy.Product(expr3,(v2,c0,c1))                                 # STEP 68
ERROR: (<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('integer division or modulo by zero',), <traceback object at 0x10f1ca560>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/products.py", line 227, in doit
    return f.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1519, in doit
    for term in self.args]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 173, in doit
    f = self.function.doit(**hints)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/basic.py", line 1520, in doit
    return self.func(*terms)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 385, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/function.py", line 209, in __new__
    evaluated = cls.eval(*args)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 76, in eval
    rv = doit(p, q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/mod.py", line 48, in doit
    return (p % q)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/numbers.py", line 1824, in __mod__
    return Integer(self.p % other.p)
6991 BRANCHES COVERED
5225 STATEMENTS COVERED

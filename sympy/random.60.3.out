Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99229.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #55 (0:00:30.418782) Fri Apr 28 03:26:09 2017 [ 4531 stmts 6050 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("'mpf' object is not iterable",), <traceback object at 0x109617cf8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 201206, in act3716
    self.p_expr[0].evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1181, in evalf_sum
    re, im, re_acc, im_acc = evalf(s, prec2, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 530, in evalf_mul
    arg = evalf(arg, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 841, in evalf_atan
    return mpf_atan(xre, prec, rnd), None, prec, None
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/libelefun.py", line 843, in mpf_atan
    sign, man, exp, bc = x
Original test has 79 steps

SAVING TEST AS failure.99229.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
expr3 = sympy.pi                                                         # STEP 0
ACTION: expr3 = sympy.pi 
expr3 = None : <type 'NoneType'>
=> expr3 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr2 = sympy.apart(expr3)                                               # STEP 1
ACTION: expr2 = sympy.apart(expr3) 
expr3 = pi : <class 'sympy.core.numbers.Pi'>
expr2 = None : <type 'NoneType'>
=> expr2 = pi : <class 'sympy.core.numbers.Pi'>
==================================================
expr1 = expr2 + expr2                                                    # STEP 2
ACTION: expr1 = expr2 + expr2 
expr2 = pi : <class 'sympy.core.numbers.Pi'>
expr1 = None : <type 'NoneType'>
=> expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = expr3.subs(expr3,expr1)                                          # STEP 3
ACTION: expr3 = expr3.subs(expr3,expr1) 
expr3 = pi : <class 'sympy.core.numbers.Pi'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
=> expr3 = 2*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.combsimp(expr3)                                            # STEP 4
ACTION: expr1 = sympy.combsimp(expr3) 
expr3 = 2*pi : <class 'sympy.core.mul.Mul'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = expr1 % expr3                                                    # STEP 5
ACTION: expr2 = expr1 % expr3 
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
expr3 = 2*pi : <class 'sympy.core.mul.Mul'>
expr2 = pi : <class 'sympy.core.numbers.Pi'>
=> expr2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
v3 = sympy.Symbol('z')                                                   # STEP 6
ACTION: v3 = sympy.Symbol('z') 
v3 = None : <type 'NoneType'>
=> v3 = z : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3 = expr3 ** expr1                                                   # STEP 7
ACTION: expr3 = expr3 ** expr1 
expr3 = 2*pi : <class 'sympy.core.mul.Mul'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
=> expr3 = (2*pi)**(2*pi) : <class 'sympy.core.power.Pow'>
==================================================
expr0 = expr3.subs(expr3,expr2)                                          # STEP 8
ACTION: expr0 = expr3.subs(expr3,expr2) 
expr3 = (2*pi)**(2*pi) : <class 'sympy.core.power.Pow'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
expr0 = None : <type 'NoneType'>
=> expr0 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2 = expr3 / expr1                                                    # STEP 9
ACTION: expr2 = expr3 / expr1 
expr3 = (2*pi)**(2*pi) : <class 'sympy.core.power.Pow'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr2 = (2*pi)**(2*pi)/(2*pi) : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('i',positive=True)                                    # STEP 10
ACTION: v1 = sympy.Symbol('i',positive=True) 
v1 = None : <type 'NoneType'>
=> v1 = i : <class 'sympy.core.symbol.Symbol'>
==================================================
c0 = sympy.Integer(9)                                                   # STEP 11
ACTION: c0 = sympy.Integer(9) 
c0 = None : <type 'NoneType'>
=> c0 = 9 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = expr3.subs(expr1,expr3)                                         # STEP 12
ACTION: expr3 = expr3.subs(expr1,expr3) 
expr3 = (2*pi)**(2*pi) : <class 'sympy.core.power.Pow'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
=> expr3 = (2*pi)**(2*pi*(2*pi)**(2*pi)) : <class 'sympy.core.power.Pow'>
==================================================
expr1 = sympy.logcombine(expr1)                                         # STEP 13
ACTION: expr1 = sympy.logcombine(expr1) 
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr2.evalf()                                                           # STEP 14
ACTION: expr2.evalf() 
expr2 = (2*pi)**(2*pi)/(2*pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.collect(expr2,expr3)                                      # STEP 15
ACTION: expr2 = sympy.collect(expr2,expr3) 
expr2 = (2*pi)**(2*pi)/(2*pi) : <class 'sympy.core.mul.Mul'>
expr3 = (2*pi)**(2*pi*(2*pi)**(2*pi)) : <class 'sympy.core.power.Pow'>
==================================================
expr3 = v3                                                              # STEP 16
ACTION: expr3 = v3 
v3 = z : <class 'sympy.core.symbol.Symbol'>
expr3 = (2*pi)**(2*pi*(2*pi)**(2*pi)) : <class 'sympy.core.power.Pow'>
=> expr3 = z : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('j',positive=True)                                    # STEP 17
ACTION: v3 = sympy.Symbol('j',positive=True) 
v3 = z : <class 'sympy.core.symbol.Symbol'>
=> v3 = j : <class 'sympy.core.symbol.Symbol'>
==================================================
c2 = sympy.Integer(3)                                                   # STEP 18
ACTION: c2 = sympy.Integer(3) 
c2 = None : <type 'NoneType'>
=> c2 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(5)                                                   # STEP 19
ACTION: c3 = sympy.Integer(5) 
c3 = None : <type 'NoneType'>
=> c3 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
c1 = sympy.Integer(1)                                                   # STEP 20
ACTION: c1 = sympy.Integer(1) 
c1 = None : <type 'NoneType'>
=> c1 = 1 : <class 'sympy.core.numbers.One'>
==================================================
term0 = c2 * v3 ** c1                                                   # STEP 21
ACTION: term0 = c2 * v3 ** c1 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 1 : <class 'sympy.core.numbers.One'>
v3 = j : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 3*j : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c0 * v3 ** c0                                                   # STEP 22
ACTION: term1 = c0 * v3 ** c0 
c0 = 9 : <class 'sympy.core.numbers.Integer'>
v3 = j : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 9*j**9 : <class 'sympy.core.mul.Mul'>
==================================================
c1 = sympy.Integer(9)                                                   # STEP 23
ACTION: c1 = sympy.Integer(9) 
c1 = 1 : <class 'sympy.core.numbers.One'>
=> c1 = 9 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(3)                                                   # STEP 24
ACTION: c2 = sympy.Integer(3) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
term2 = c1 * v3 ** c3                                                   # STEP 25
ACTION: term2 = c1 * v3 ** c3 
c1 = 9 : <class 'sympy.core.numbers.Integer'>
c3 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = j : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 9*j**5 : <class 'sympy.core.mul.Mul'>
==================================================
term3 = c2 * v1 ** c3                                                   # STEP 26
ACTION: term3 = c2 * v1 ** c3 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c3 = 5 : <class 'sympy.core.numbers.Integer'>
v1 = i : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 3*i**5 : <class 'sympy.core.mul.Mul'>
==================================================
poly0 = term1 + term0                                                   # STEP 27
ACTION: poly0 = term1 + term0 
poly0 = None : <type 'NoneType'>
term1 = 9*j**9 : <class 'sympy.core.mul.Mul'>
term0 = 3*j : <class 'sympy.core.mul.Mul'>
=> poly0 = 9*j**9 + 3*j : <class 'sympy.core.add.Add'>
==================================================
term1 = c1 * v3 ** c3                                                   # STEP 28
ACTION: term1 = c1 * v3 ** c3 
c1 = 9 : <class 'sympy.core.numbers.Integer'>
c3 = 5 : <class 'sympy.core.numbers.Integer'>
v3 = j : <class 'sympy.core.symbol.Symbol'>
term1 = 9*j**9 : <class 'sympy.core.mul.Mul'>
=> term1 = 9*j**5 : <class 'sympy.core.mul.Mul'>
==================================================
v2 = sympy.Symbol('a')                                                  # STEP 29
ACTION: v2 = sympy.Symbol('a') 
v2 = None : <type 'NoneType'>
=> v2 = a : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('b')                                                  # STEP 30
ACTION: v3 = sympy.Symbol('b') 
v3 = j : <class 'sympy.core.symbol.Symbol'>
=> v3 = b : <class 'sympy.core.symbol.Symbol'>
==================================================
v1 = sympy.Symbol('k',positive=True)                                    # STEP 31
ACTION: v1 = sympy.Symbol('k',positive=True) 
v1 = i : <class 'sympy.core.symbol.Symbol'>
=> v1 = k : <class 'sympy.core.symbol.Symbol'>
==================================================
c0 = sympy.Integer(0)                                                   # STEP 32
ACTION: c0 = sympy.Integer(0) 
c0 = 9 : <class 'sympy.core.numbers.Integer'>
=> c0 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
term0 = c1 * v3 ** c1                                                   # STEP 33
ACTION: term0 = c1 * v3 ** c1 
c1 = 9 : <class 'sympy.core.numbers.Integer'>
v3 = b : <class 'sympy.core.symbol.Symbol'>
term0 = 3*j : <class 'sympy.core.mul.Mul'>
=> term0 = 9*b**9 : <class 'sympy.core.mul.Mul'>
==================================================
poly3 = term3 + term2                                                   # STEP 34
ACTION: poly3 = term3 + term2 
poly3 = None : <type 'NoneType'>
term3 = 3*i**5 : <class 'sympy.core.mul.Mul'>
term2 = 9*j**5 : <class 'sympy.core.mul.Mul'>
=> poly3 = 3*i**5 + 9*j**5 : <class 'sympy.core.add.Add'>
==================================================
term3 = c2 * v3 ** c0                                                   # STEP 35
ACTION: term3 = c2 * v3 ** c0 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c0 = 0 : <class 'sympy.core.numbers.Zero'>
v3 = b : <class 'sympy.core.symbol.Symbol'>
term3 = 3*i**5 : <class 'sympy.core.mul.Mul'>
=> term3 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
c0 = sympy.Integer(3)                                                   # STEP 36
ACTION: c0 = sympy.Integer(3) 
c0 = 0 : <class 'sympy.core.numbers.Zero'>
=> c0 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('k',positive=True)                                    # STEP 37
ACTION: v0 = sympy.Symbol('k',positive=True) 
v0 = None : <type 'NoneType'>
=> v0 = k : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(8)                                                   # STEP 38
ACTION: c1 = sympy.Integer(8) 
c1 = 9 : <class 'sympy.core.numbers.Integer'>
=> c1 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
term2 = c3 * v3 ** c2                                                   # STEP 39
ACTION: term2 = c3 * v3 ** c2 
c3 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = b : <class 'sympy.core.symbol.Symbol'>
term2 = 9*j**5 : <class 'sympy.core.mul.Mul'>
=> term2 = 5*b**3 : <class 'sympy.core.mul.Mul'>
==================================================
c3 = sympy.Integer(4)                                                   # STEP 40
ACTION: c3 = sympy.Integer(4) 
c3 = 5 : <class 'sympy.core.numbers.Integer'>
=> c3 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('e',positive=True)                                    # STEP 41
ACTION: v3 = sympy.Symbol('e',positive=True) 
v3 = b : <class 'sympy.core.symbol.Symbol'>
=> v3 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
poly2 = term3 + term3                                                   # STEP 42
ACTION: poly2 = term3 + term3 
poly2 = None : <type 'NoneType'>
term3 = 3 : <class 'sympy.core.numbers.Integer'>
=> poly2 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c2 * v0 ** c2                                                   # STEP 43
ACTION: term3 = c2 * v0 ** c2 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
v0 = k : <class 'sympy.core.symbol.Symbol'>
term3 = 3 : <class 'sympy.core.numbers.Integer'>
=> term3 = 3*k**3 : <class 'sympy.core.mul.Mul'>
==================================================
v0 = sympy.Symbol('x')                                                  # STEP 44
ACTION: v0 = sympy.Symbol('x') 
v0 = k : <class 'sympy.core.symbol.Symbol'>
=> v0 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1.evalf()                                                           # STEP 45
ACTION: expr1.evalf() 
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = expr0.doit()                                                    # STEP 46
ACTION: expr1 = expr0.doit() 
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = 2*pi : <class 'sympy.core.mul.Mul'>
=> expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr0 = sympy.Sum(expr3,(v1,c3,c3))                                     # STEP 47
ACTION: expr0 = sympy.Sum(expr3,(v1,c3,c3)) 
c3 = 4 : <class 'sympy.core.numbers.Integer'>
v1 = k : <class 'sympy.core.symbol.Symbol'>
expr3 = z : <class 'sympy.core.symbol.Symbol'>
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr0 = Sum(z, (k, 4, 4)) : <class 'sympy.concrete.summations.Sum'>
==================================================
poly1 = term1                                                           # STEP 48
ACTION: poly1 = term1 
poly1 = None : <type 'NoneType'>
term1 = 9*j**5 : <class 'sympy.core.mul.Mul'>
=> poly1 = 9*j**5 : <class 'sympy.core.mul.Mul'>
==================================================
expr3 = sympy.Sum(expr3,(v3,c1,c1))                                     # STEP 49
ACTION: expr3 = sympy.Sum(expr3,(v3,c1,c1)) 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v3 = e : <class 'sympy.core.symbol.Symbol'>
expr3 = z : <class 'sympy.core.symbol.Symbol'>
=> expr3 = Sum(z, (e, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
term1 = c0 * v2 ** c1                                                   # STEP 50
ACTION: term1 = c0 * v2 ** c1 
c0 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v2 = a : <class 'sympy.core.symbol.Symbol'>
term1 = 9*j**5 : <class 'sympy.core.mul.Mul'>
=> term1 = 3*a**8 : <class 'sympy.core.mul.Mul'>
==================================================
expr3.evalf()                                                           # STEP 51
ACTION: expr3.evalf() 
expr3 = Sum(z, (e, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = expr3.subs(expr0,expr2)                                         # STEP 52
ACTION: expr3 = expr3.subs(expr0,expr2) 
expr3 = Sum(z, (e, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
expr0 = Sum(z, (k, 4, 4)) : <class 'sympy.concrete.summations.Sum'>
expr2 = (2*pi)**(2*pi)/(2*pi) : <class 'sympy.core.mul.Mul'>
==================================================
expr0 = sympy.powsimp(expr1)                                            # STEP 53
ACTION: expr0 = sympy.powsimp(expr1) 
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
expr0 = Sum(z, (k, 4, 4)) : <class 'sympy.concrete.summations.Sum'>
=> expr0 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
c2 = sympy.Integer(3)                                                   # STEP 54
ACTION: c2 = sympy.Integer(3) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
expr2 = sympy.combsimp(expr0)                                           # STEP 55
ACTION: expr2 = sympy.combsimp(expr0) 
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
expr2 = (2*pi)**(2*pi)/(2*pi) : <class 'sympy.core.mul.Mul'>
=> expr2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr0 = sympy.Sum(expr2,(v0,c2,c0))                                     # STEP 56
ACTION: expr0 = sympy.Sum(expr2,(v0,c2,c0)) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c0 = 3 : <class 'sympy.core.numbers.Integer'>
v0 = x : <class 'sympy.core.symbol.Symbol'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
expr0 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr0 = Sum(0, (x, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = expr3 % expr2                                                   # STEP 57
ACTION: expr2 = expr3 % expr2 
expr3 = Sum(z, (e, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.ZeroDivisionError'> integer division or modulo by zero
==================================================
expr3 = sympy.Sum(expr0,(v3,c1,c2))                                     # STEP 58
ACTION: expr3 = sympy.Sum(expr0,(v3,c1,c2)) 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
c2 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = e : <class 'sympy.core.symbol.Symbol'>
expr0 = Sum(0, (x, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
expr3 = Sum(z, (e, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Sum(0, (x, 3, 3), (e, 8, 3)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr0 = sympy.Sum(expr1,(v0,c2,c1))                                     # STEP 59
ACTION: expr0 = sympy.Sum(expr1,(v0,c2,c1)) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v0 = x : <class 'sympy.core.symbol.Symbol'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
expr0 = Sum(0, (x, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
=> expr0 = Sum(0, (x, 3, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.Product(expr2,(v2,c3,c1))                                 # STEP 60
ACTION: expr1 = sympy.Product(expr2,(v2,c3,c1)) 
c3 = 4 : <class 'sympy.core.numbers.Integer'>
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v2 = a : <class 'sympy.core.symbol.Symbol'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr1 = Product(0, (a, 4, 8)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = sympy.Product(expr1,(v3,c0,c1))                                 # STEP 61
ACTION: expr2 = sympy.Product(expr1,(v3,c0,c1)) 
c0 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v3 = e : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(0, (a, 4, 8)) : <class 'sympy.concrete.products.Product'>
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr2 = Product(0, (a, 4, 8), (e, 3, 8)) : <class 'sympy.concrete.products.Product'>
==================================================
c2 = sympy.Integer(5)                                                   # STEP 62
ACTION: c2 = sympy.Integer(5) 
c2 = 3 : <class 'sympy.core.numbers.Integer'>
=> c2 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
c0 = sympy.Integer(10)                                                  # STEP 63
ACTION: c0 = sympy.Integer(10) 
c0 = 3 : <class 'sympy.core.numbers.Integer'>
=> c0 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1 = sympy.apart(expr0)                                              # STEP 64
ACTION: expr1 = sympy.apart(expr0) 
expr0 = Sum(0, (x, 3, 8)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Product(0, (a, 4, 8)) : <class 'sympy.concrete.products.Product'>
RAISED EXPECTED EXCEPTION: <class 'sympy.polys.polyerrors.PolynomialError'> can't construct polynomials from Sum(0, (x, 3, 8)), 1
==================================================
expr0 = sympy.atan(expr0)                                               # STEP 65
ACTION: expr0 = sympy.atan(expr0) 
expr0 = Sum(0, (x, 3, 8)) : <class 'sympy.concrete.summations.Sum'>
=> expr0 = atan(Sum(0, (x, 3, 8))) : atan
==================================================
v1 = sympy.Symbol('c')                                                  # STEP 66
ACTION: v1 = sympy.Symbol('c') 
v1 = k : <class 'sympy.core.symbol.Symbol'>
=> v1 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(3)                                                   # STEP 67
ACTION: c3 = sympy.Integer(3) 
c3 = 4 : <class 'sympy.core.numbers.Integer'>
=> c3 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('y')                                                  # STEP 68
ACTION: v0 = sympy.Symbol('y') 
v0 = x : <class 'sympy.core.symbol.Symbol'>
=> v0 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('x')                                                  # STEP 69
ACTION: v3 = sympy.Symbol('x') 
v3 = e : <class 'sympy.core.symbol.Symbol'>
=> v3 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(2)                                                   # STEP 70
ACTION: c1 = sympy.Integer(2) 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
=> c1 = 2 : <class 'sympy.core.numbers.Integer'>
==================================================
v2 = sympy.Symbol('y')                                                  # STEP 71
ACTION: v2 = sympy.Symbol('y') 
v2 = a : <class 'sympy.core.symbol.Symbol'>
=> v2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2.evalf()                                                           # STEP 72
ACTION: expr2.evalf() 
expr2 = Product(0, (a, 4, 8), (e, 3, 8)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = sympy.powdenest(expr0)                                          # STEP 73
ACTION: expr2 = sympy.powdenest(expr0) 
expr0 = atan(Sum(0, (x, 3, 8))) : atan
expr2 = Product(0, (a, 4, 8), (e, 3, 8)) : <class 'sympy.concrete.products.Product'>
=> expr2 = atan(Sum(0, (x, 3, 8))) : atan
==================================================
expr0 = sympy.Sum(expr0,(v0,c3,c0))                                     # STEP 74
ACTION: expr0 = sympy.Sum(expr0,(v0,c3,c0)) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c0 = 10 : <class 'sympy.core.numbers.Integer'>
v0 = y : <class 'sympy.core.symbol.Symbol'>
expr0 = atan(Sum(0, (x, 3, 8))) : atan
=> expr0 = Sum(atan(Sum(0, (x, 3, 8))), (y, 3, 10)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c0 = sympy.Integer(6)                                                   # STEP 75
ACTION: c0 = sympy.Integer(6) 
c0 = 10 : <class 'sympy.core.numbers.Integer'>
=> c0 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(4)                                                   # STEP 76
ACTION: c3 = sympy.Integer(4) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
=> c3 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('e',positive=True)                                    # STEP 77
ACTION: v0 = sympy.Symbol('e',positive=True) 
v0 = y : <class 'sympy.core.symbol.Symbol'>
=> v0 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
expr0.evalf()                                                           # STEP 78
ACTION: expr0.evalf() 
expr0 = Sum(atan(Sum(0, (x, 3, 8))), (y, 3, 10)) : <class 'sympy.concrete.summations.Sum'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> 'mpf' object is not iterable
ERROR: (<type 'exceptions.TypeError'>, TypeError("'mpf' object is not iterable",), <traceback object at 0x10bf70998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 201206, in act3716
    self.p_expr[0].evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1181, in evalf_sum
    re, im, re_acc, im_acc = evalf(s, prec2, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 530, in evalf_mul
    arg = evalf(arg, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 841, in evalf_atan
    return mpf_atan(xre, prec, rnd), None, prec, None
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/libelefun.py", line 843, in mpf_atan
    sign, man, exp, bc = x
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 35
STOPPING TESTING DUE TO TIMEOUT
3.69556779942 PERCENT COVERED
91.6245419979 TOTAL RUNTIME
2 EXECUTED
114 TOTAL TEST OPERATIONS
4.37663197517 TIME SPENT EXECUTING TEST OPERATIONS
0.303253412247 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
53.5443162918 TIME SPENT CHECKING PROPERTIES
57.920948267 TOTAL TIME SPENT RUNNING SUT
0.00829005241394 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
expr3 = sympy.pi                                                         # STEP 0
expr2 = sympy.apart(expr3)                                               # STEP 1
expr1 = expr2 + expr2                                                    # STEP 2
expr3 = expr3.subs(expr3,expr1)                                          # STEP 3
expr1 = sympy.combsimp(expr3)                                            # STEP 4
expr2 = expr1 % expr3                                                    # STEP 5
v3 = sympy.Symbol('z')                                                   # STEP 6
expr3 = expr3 ** expr1                                                   # STEP 7
expr0 = expr3.subs(expr3,expr2)                                          # STEP 8
expr2 = expr3 / expr1                                                    # STEP 9
v1 = sympy.Symbol('i',positive=True)                                    # STEP 10
c0 = sympy.Integer(9)                                                   # STEP 11
expr3 = expr3.subs(expr1,expr3)                                         # STEP 12
expr1 = sympy.logcombine(expr1)                                         # STEP 13
expr2.evalf()                                                           # STEP 14
expr2 = sympy.collect(expr2,expr3)                                      # STEP 15
expr3 = v3                                                              # STEP 16
v3 = sympy.Symbol('j',positive=True)                                    # STEP 17
c2 = sympy.Integer(3)                                                   # STEP 18
c3 = sympy.Integer(5)                                                   # STEP 19
c1 = sympy.Integer(1)                                                   # STEP 20
term0 = c2 * v3 ** c1                                                   # STEP 21
term1 = c0 * v3 ** c0                                                   # STEP 22
c1 = sympy.Integer(9)                                                   # STEP 23
c2 = sympy.Integer(3)                                                   # STEP 24
term2 = c1 * v3 ** c3                                                   # STEP 25
term3 = c2 * v1 ** c3                                                   # STEP 26
poly0 = term1 + term0                                                   # STEP 27
term1 = c1 * v3 ** c3                                                   # STEP 28
v2 = sympy.Symbol('a')                                                  # STEP 29
v3 = sympy.Symbol('b')                                                  # STEP 30
v1 = sympy.Symbol('k',positive=True)                                    # STEP 31
c0 = sympy.Integer(0)                                                   # STEP 32
term0 = c1 * v3 ** c1                                                   # STEP 33
poly3 = term3 + term2                                                   # STEP 34
term3 = c2 * v3 ** c0                                                   # STEP 35
c0 = sympy.Integer(3)                                                   # STEP 36
v0 = sympy.Symbol('k',positive=True)                                    # STEP 37
c1 = sympy.Integer(8)                                                   # STEP 38
term2 = c3 * v3 ** c2                                                   # STEP 39
c3 = sympy.Integer(4)                                                   # STEP 40
v3 = sympy.Symbol('e',positive=True)                                    # STEP 41
poly2 = term3 + term3                                                   # STEP 42
term3 = c2 * v0 ** c2                                                   # STEP 43
v0 = sympy.Symbol('x')                                                  # STEP 44
expr1.evalf()                                                           # STEP 45
expr1 = expr0.doit()                                                    # STEP 46
expr0 = sympy.Sum(expr3,(v1,c3,c3))                                     # STEP 47
poly1 = term1                                                           # STEP 48
expr3 = sympy.Sum(expr3,(v3,c1,c1))                                     # STEP 49
term1 = c0 * v2 ** c1                                                   # STEP 50
expr3.evalf()                                                           # STEP 51
expr3 = expr3.subs(expr0,expr2)                                         # STEP 52
expr0 = sympy.powsimp(expr1)                                            # STEP 53
c2 = sympy.Integer(3)                                                   # STEP 54
expr2 = sympy.combsimp(expr0)                                           # STEP 55
expr0 = sympy.Sum(expr2,(v0,c2,c0))                                     # STEP 56
expr2 = expr3 % expr2                                                   # STEP 57
expr3 = sympy.Sum(expr0,(v3,c1,c2))                                     # STEP 58
expr0 = sympy.Sum(expr1,(v0,c2,c1))                                     # STEP 59
expr1 = sympy.Product(expr2,(v2,c3,c1))                                 # STEP 60
expr2 = sympy.Product(expr1,(v3,c0,c1))                                 # STEP 61
c2 = sympy.Integer(5)                                                   # STEP 62
c0 = sympy.Integer(10)                                                  # STEP 63
expr1 = sympy.apart(expr0)                                              # STEP 64
expr0 = sympy.atan(expr0)                                               # STEP 65
v1 = sympy.Symbol('c')                                                  # STEP 66
c3 = sympy.Integer(3)                                                   # STEP 67
v0 = sympy.Symbol('y')                                                  # STEP 68
v3 = sympy.Symbol('x')                                                  # STEP 69
c1 = sympy.Integer(2)                                                   # STEP 70
v2 = sympy.Symbol('y')                                                  # STEP 71
expr2.evalf()                                                           # STEP 72
expr2 = sympy.powdenest(expr0)                                          # STEP 73
expr0 = sympy.Sum(expr0,(v0,c3,c0))                                     # STEP 74
c0 = sympy.Integer(6)                                                   # STEP 75
c3 = sympy.Integer(4)                                                   # STEP 76
v0 = sympy.Symbol('e',positive=True)                                    # STEP 77
expr0.evalf()                                                           # STEP 78
ERROR: (<type 'exceptions.TypeError'>, TypeError("'mpf' object is not iterable",), <traceback object at 0x10bf70998>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 201206, in act3716
    self.p_expr[0].evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1181, in evalf_sum
    re, im, re_acc, im_acc = evalf(s, prec2, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 530, in evalf_mul
    arg = evalf(arg, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 841, in evalf_atan
    return mpf_atan(xre, prec, rnd), None, prec, None
  File "/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/mpmath/libmp/libelefun.py", line 843, in mpf_atan
    sign, man, exp, bc = x
8204 BRANCHES COVERED
6124 STATEMENTS COVERED

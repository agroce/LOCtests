Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.399.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
TEST #1 STEP #50 (0:00:30.877065) Fri Apr 28 06:15:58 2017 [ 4029 stmts 5342 branches ]
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.ValueError'>, ValueError('Invalid limits given: (((g, 3, 3), (f, 10, 10)),)',), <traceback object at 0x108d95b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 200833, in act3707
    self.p_expr[1] = sympy.combsimp(self.p_expr[3])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/combsimp.py", line 464, in combsimp
    was = factor(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 6063, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5755, in _generic_factor
    return _symbolic_factor(sympify(expr), opt, method)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5699, in _symbolic_factor
    return expr._eval_factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 417, in _eval_factor
    summand = self.func(self.function, self.limits[0:-1]).factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 155, in __new__
    obj = AddWithLimits.__new__(cls, function, *symbols, **assumptions)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 368, in __new__
    limits, orientation = _process_limits(*symbols)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 69, in _process_limits
    raise ValueError('Invalid limits given: %s' % str(symbols))
Original test has 62 steps

SAVING TEST AS failure.399.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
v1 = sympy.Symbol('j',positive=True)                                     # STEP 0
ACTION: v1 = sympy.Symbol('j',positive=True) 
v1 = None : <type 'NoneType'>
=> v1 = j : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('g',positive=True)                                     # STEP 1
ACTION: v0 = sympy.Symbol('g',positive=True) 
v0 = None : <type 'NoneType'>
=> v0 = g : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('d')                                                   # STEP 2
ACTION: v3 = sympy.Symbol('d') 
v3 = None : <type 'NoneType'>
=> v3 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(7)                                                    # STEP 3
ACTION: c1 = sympy.Integer(7) 
c1 = None : <type 'NoneType'>
=> c1 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(3)                                                    # STEP 4
ACTION: c3 = sympy.Integer(3) 
c3 = None : <type 'NoneType'>
=> c3 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(8)                                                    # STEP 5
ACTION: c2 = sympy.Integer(8) 
c2 = None : <type 'NoneType'>
=> c2 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
term0 = c3 * v1 ** c1                                                    # STEP 6
ACTION: term0 = c3 * v1 ** c1 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 7 : <class 'sympy.core.numbers.Integer'>
v1 = j : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = 3*j**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = sympy.Rational(c2,c3)                                            # STEP 7
ACTION: expr2 = sympy.Rational(c2,c3) 
c2 = 8 : <class 'sympy.core.numbers.Integer'>
c3 = 3 : <class 'sympy.core.numbers.Integer'>
expr2 = None : <type 'NoneType'>
=> expr2 = 8/3 : <class 'sympy.core.numbers.Rational'>
==================================================
v2 = sympy.Symbol('b')                                                   # STEP 8
ACTION: v2 = sympy.Symbol('b') 
v2 = None : <type 'NoneType'>
=> v2 = b : <class 'sympy.core.symbol.Symbol'>
==================================================
term1 = c1 * v3 ** c2                                                    # STEP 9
ACTION: term1 = c1 * v3 ** c2 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v3 = d : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 7*d**8 : <class 'sympy.core.mul.Mul'>
==================================================
poly1 = term0 + term0                                                   # STEP 10
ACTION: poly1 = term0 + term0 
poly1 = None : <type 'NoneType'>
term0 = 3*j**7 : <class 'sympy.core.mul.Mul'>
=> poly1 = 6*j**7 : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = c3                                                              # STEP 11
ACTION: expr1 = c3 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
expr1 = None : <type 'NoneType'>
=> expr1 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = sympy.Sum(expr1,(v0,c2,c2))                                     # STEP 12
ACTION: expr3 = sympy.Sum(expr1,(v0,c2,c2)) 
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
expr1 = 3 : <class 'sympy.core.numbers.Integer'>
expr3 = None : <type 'NoneType'>
=> expr3 = Sum(3, (g, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.Product(expr1,(v0,c3,c2))                                 # STEP 13
ACTION: expr1 = sympy.Product(expr1,(v0,c3,c2)) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
expr1 = 3 : <class 'sympy.core.numbers.Integer'>
=> expr1 = Product(3, (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
==================================================
expr0 = sympy.Sum(expr3,(v3,c1,c2))                                     # STEP 14
ACTION: expr0 = sympy.Sum(expr3,(v3,c1,c2)) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v3 = d : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(3, (g, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
expr0 = None : <type 'NoneType'>
=> expr0 = Sum(3, (g, 8, 8), (d, 7, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
v1 = sympy.Symbol('l',positive=True)                                    # STEP 15
ACTION: v1 = sympy.Symbol('l',positive=True) 
v1 = j : <class 'sympy.core.symbol.Symbol'>
=> v1 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3 = expr2 * expr1                                                   # STEP 16
ACTION: expr3 = expr2 * expr1 
expr2 = 8/3 : <class 'sympy.core.numbers.Rational'>
expr1 = Product(3, (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
expr3 = Sum(3, (g, 8, 8)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = 8*Product(3, (g, 3, 8))/3 : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.Product(expr0,(v0,c3,c2))                                 # STEP 17
ACTION: expr1 = sympy.Product(expr0,(v0,c3,c2)) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c2 = 8 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
expr0 = Sum(3, (g, 8, 8), (d, 7, 8)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Product(3, (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = expr0 ** expr3                                                  # STEP 18
ACTION: expr2 = expr0 ** expr3 
expr0 = Sum(3, (g, 8, 8), (d, 7, 8)) : <class 'sympy.concrete.summations.Sum'>
expr3 = 8*Product(3, (g, 3, 8))/3 : <class 'sympy.core.mul.Mul'>
expr2 = 8/3 : <class 'sympy.core.numbers.Rational'>
=> expr2 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
==================================================
expr3 = expr1 ** expr3                                                  # STEP 19
ACTION: expr3 = expr1 ** expr3 
expr1 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
expr3 = 8*Product(3, (g, 3, 8))/3 : <class 'sympy.core.mul.Mul'>
=> expr3 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
==================================================
expr0 = sympy.cancel(expr0)                                             # STEP 20
ACTION: expr0 = sympy.cancel(expr0) 
expr0 = Sum(3, (g, 8, 8), (d, 7, 8)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.Sum(expr1,(v0,c3,c3))                                     # STEP 21
ACTION: expr1 = sympy.Sum(expr1,(v0,c3,c3)) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
expr1 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)) : <class 'sympy.concrete.products.Product'>
=> expr1 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c1 = sympy.Integer(6)                                                   # STEP 22
ACTION: c1 = sympy.Integer(6) 
c1 = 7 : <class 'sympy.core.numbers.Integer'>
=> c1 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(10)                                                  # STEP 23
ACTION: c2 = sympy.Integer(10) 
c2 = 8 : <class 'sympy.core.numbers.Integer'>
=> c2 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(3)                                                   # STEP 24
ACTION: c3 = sympy.Integer(3) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c3 * v1 ** c1                                                   # STEP 25
ACTION: term3 = c3 * v1 ** c1 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c1 = 6 : <class 'sympy.core.numbers.Integer'>
v1 = l : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 3*l**6 : <class 'sympy.core.mul.Mul'>
==================================================
term0 = c3 * v3 ** c3                                                   # STEP 26
ACTION: term0 = c3 * v3 ** c3 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = d : <class 'sympy.core.symbol.Symbol'>
term0 = 3*j**7 : <class 'sympy.core.mul.Mul'>
=> term0 = 3*d**3 : <class 'sympy.core.mul.Mul'>
==================================================
term2 = c3 * v3 ** c3                                                   # STEP 27
ACTION: term2 = c3 * v3 ** c3 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = d : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 3*d**3 : <class 'sympy.core.mul.Mul'>
==================================================
poly3 = term0 + term2                                                   # STEP 28
ACTION: poly3 = term0 + term2 
poly3 = None : <type 'NoneType'>
term0 = 3*d**3 : <class 'sympy.core.mul.Mul'>
term2 = 3*d**3 : <class 'sympy.core.mul.Mul'>
=> poly3 = 6*d**3 : <class 'sympy.core.mul.Mul'>
==================================================
v1 = sympy.Symbol('z')                                                  # STEP 29
ACTION: v1 = sympy.Symbol('z') 
v1 = l : <class 'sympy.core.symbol.Symbol'>
=> v1 = z : <class 'sympy.core.symbol.Symbol'>
==================================================
poly0 = term0 + term2                                                   # STEP 30
ACTION: poly0 = term0 + term2 
poly0 = None : <type 'NoneType'>
term0 = 3*d**3 : <class 'sympy.core.mul.Mul'>
term2 = 3*d**3 : <class 'sympy.core.mul.Mul'>
=> poly0 = 6*d**3 : <class 'sympy.core.mul.Mul'>
==================================================
poly2 = term1                                                           # STEP 31
ACTION: poly2 = term1 
poly2 = None : <type 'NoneType'>
term1 = 7*d**8 : <class 'sympy.core.mul.Mul'>
=> poly2 = 7*d**8 : <class 'sympy.core.mul.Mul'>
==================================================
term0 = c2 * v0 ** c1                                                   # STEP 32
ACTION: term0 = c2 * v0 ** c1 
c2 = 10 : <class 'sympy.core.numbers.Integer'>
c1 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
term0 = 3*d**3 : <class 'sympy.core.mul.Mul'>
=> term0 = 10*g**6 : <class 'sympy.core.mul.Mul'>
==================================================
term2 = c3 * v0 ** c2                                                   # STEP 33
ACTION: term2 = c3 * v0 ** c2 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
c2 = 10 : <class 'sympy.core.numbers.Integer'>
v0 = g : <class 'sympy.core.symbol.Symbol'>
term2 = 3*d**3 : <class 'sympy.core.mul.Mul'>
=> term2 = 3*g**10 : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c2 * v2 ** c2                                                   # STEP 34
ACTION: term1 = c2 * v2 ** c2 
c2 = 10 : <class 'sympy.core.numbers.Integer'>
v2 = b : <class 'sympy.core.symbol.Symbol'>
term1 = 7*d**8 : <class 'sympy.core.mul.Mul'>
=> term1 = 10*b**10 : <class 'sympy.core.mul.Mul'>
==================================================
v2 = sympy.Symbol('l',positive=True)                                    # STEP 35
ACTION: v2 = sympy.Symbol('l',positive=True) 
v2 = b : <class 'sympy.core.symbol.Symbol'>
=> v2 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(9)                                                   # STEP 36
ACTION: c1 = sympy.Integer(9) 
c1 = 6 : <class 'sympy.core.numbers.Integer'>
=> c1 = 9 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(6)                                                   # STEP 37
ACTION: c2 = sympy.Integer(6) 
c2 = 10 : <class 'sympy.core.numbers.Integer'>
=> c2 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('f',positive=True)                                    # STEP 38
ACTION: v3 = sympy.Symbol('f',positive=True) 
v3 = d : <class 'sympy.core.symbol.Symbol'>
=> v3 = f : <class 'sympy.core.symbol.Symbol'>
==================================================
c0 = sympy.Integer(3)                                                   # STEP 39
ACTION: c0 = sympy.Integer(3) 
c0 = None : <type 'NoneType'>
=> c0 = 3 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('l',positive=True)                                    # STEP 40
ACTION: v0 = sympy.Symbol('l',positive=True) 
v0 = g : <class 'sympy.core.symbol.Symbol'>
=> v0 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(10)                                                  # STEP 41
ACTION: c3 = sympy.Integer(10) 
c3 = 3 : <class 'sympy.core.numbers.Integer'>
=> c3 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3.evalf()                                                           # STEP 42
ACTION: expr3.evalf() 
expr3 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
==================================================
expr3 = expr2.subs(expr3,expr1)                                         # STEP 43
ACTION: expr3 = expr2.subs(expr3,expr1) 
expr2 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
expr3 = Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
expr1 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
==================================================
expr2 = sympy.Sum(expr1,(v3,c3,c3))                                     # STEP 44
ACTION: expr2 = sympy.Sum(expr1,(v3,c3,c3)) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
v3 = f : <class 'sympy.core.symbol.Symbol'>
expr1 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
=> expr2 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10)) : <class 'sympy.concrete.summations.Sum'>
==================================================
c3 = sympy.Integer(8)                                                   # STEP 45
ACTION: c3 = sympy.Integer(8) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
=> c3 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
expr1 = sympy.Sum(expr3,(v1,c2,c1))                                     # STEP 46
ACTION: expr1 = sympy.Sum(expr3,(v1,c2,c1)) 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
c1 = 9 : <class 'sympy.core.numbers.Integer'>
v1 = z : <class 'sympy.core.symbol.Symbol'>
expr3 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
expr1 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = sympy.Sum(expr1,(v2,c3,c1))                                     # STEP 47
ACTION: expr3 = sympy.Sum(expr1,(v2,c3,c1)) 
c3 = 8 : <class 'sympy.core.numbers.Integer'>
c1 = 9 : <class 'sympy.core.numbers.Integer'>
v2 = l : <class 'sympy.core.symbol.Symbol'>
expr1 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)) : <class 'sympy.concrete.summations.Sum'>
expr3 = Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3) : <class 'sympy.core.power.Pow'>
=> expr3 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9), (l, 8, 9)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.collect(expr1,expr2)                                      # STEP 48
ACTION: expr1 = sympy.collect(expr1,expr2) 
expr1 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.expand_func(expr2)                                        # STEP 49
ACTION: expr2 = sympy.expand_func(expr2) 
expr2 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10)) : <class 'sympy.concrete.summations.Sum'>
==================================================
v1 = sympy.Symbol('x')                                                  # STEP 50
ACTION: v1 = sympy.Symbol('x') 
v1 = z : <class 'sympy.core.symbol.Symbol'>
=> v1 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(6)                                                   # STEP 51
ACTION: c3 = sympy.Integer(6) 
c3 = 8 : <class 'sympy.core.numbers.Integer'>
=> c3 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
v3 = sympy.Symbol('e',positive=True)                                    # STEP 52
ACTION: v3 = sympy.Symbol('e',positive=True) 
v3 = f : <class 'sympy.core.symbol.Symbol'>
=> v3 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(6)                                                   # STEP 53
ACTION: c1 = sympy.Integer(6) 
c1 = 9 : <class 'sympy.core.numbers.Integer'>
=> c1 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
c2 = sympy.Integer(7)                                                   # STEP 54
ACTION: c2 = sympy.Integer(7) 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
v2 = sympy.Symbol('i',positive=True)                                    # STEP 55
ACTION: v2 = sympy.Symbol('i',positive=True) 
v2 = l : <class 'sympy.core.symbol.Symbol'>
=> v2 = i : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3.evalf()                                                           # STEP 56
ACTION: expr3.evalf() 
expr3 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9), (l, 8, 9)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr3 = sympy.Sum(expr2,(v3,c1,c0))                                     # STEP 57
ACTION: expr3 = sympy.Sum(expr2,(v3,c1,c0)) 
c1 = 6 : <class 'sympy.core.numbers.Integer'>
c0 = 3 : <class 'sympy.core.numbers.Integer'>
v3 = e : <class 'sympy.core.symbol.Symbol'>
expr2 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10)) : <class 'sympy.concrete.summations.Sum'>
expr3 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9), (l, 8, 9)) : <class 'sympy.concrete.summations.Sum'>
=> expr3 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10), (e, 6, 3)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.Product(expr1,(v2,c3,c0))                                 # STEP 58
ACTION: expr2 = sympy.Product(expr1,(v2,c3,c0)) 
c3 = 6 : <class 'sympy.core.numbers.Integer'>
c0 = 3 : <class 'sympy.core.numbers.Integer'>
v2 = i : <class 'sympy.core.symbol.Symbol'>
expr1 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10)) : <class 'sympy.concrete.summations.Sum'>
=> expr2 = Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)) : <class 'sympy.concrete.products.Product'>
==================================================
expr1 = sympy.Sum(expr2,(v2,c2,c1))                                     # STEP 59
ACTION: expr1 = sympy.Sum(expr2,(v2,c2,c1)) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c1 = 6 : <class 'sympy.core.numbers.Integer'>
v2 = i : <class 'sympy.core.symbol.Symbol'>
expr2 = Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)) : <class 'sympy.concrete.products.Product'>
expr1 = Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)) : <class 'sympy.concrete.summations.Sum'>
=> expr1 = Sum(Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)), (i, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.powdenest(expr1)                                          # STEP 60
ACTION: expr2 = sympy.powdenest(expr1) 
expr1 = Sum(Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)), (i, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)) : <class 'sympy.concrete.products.Product'>
=> expr2 = Sum(Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)), (i, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr1 = sympy.combsimp(expr3)                                           # STEP 61
ACTION: expr1 = sympy.combsimp(expr3) 
expr3 = Sum(Product(Sum(3, (g, 8, 8), (d, 7, 8)), (g, 3, 8)), (g, 3, 3), (f, 10, 10), (e, 6, 3)) : <class 'sympy.concrete.summations.Sum'>
expr1 = Sum(Product(Sum(Sum(3, (g, 8, 8), (d, 7, 8))**(8*Product(3, (g, 3, 8))/3), (z, 6, 9)), (i, 6, 3)), (i, 7, 6)) : <class 'sympy.concrete.summations.Sum'>
RAISED EXCEPTION: <type 'exceptions.ValueError'> Invalid limits given: (((g, 3, 3), (f, 10, 10)),)
ERROR: (<type 'exceptions.ValueError'>, ValueError('Invalid limits given: (((g, 3, 3), (f, 10, 10)),)',), <traceback object at 0x10acd7ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 200833, in act3707
    self.p_expr[1] = sympy.combsimp(self.p_expr[3])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/combsimp.py", line 464, in combsimp
    was = factor(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 6063, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5755, in _generic_factor
    return _symbolic_factor(sympify(expr), opt, method)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5699, in _symbolic_factor
    return expr._eval_factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 417, in _eval_factor
    summand = self.func(self.function, self.limits[0:-1]).factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 155, in __new__
    obj = AddWithLimits.__new__(cls, function, *symbols, **assumptions)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 368, in __new__
    limits, orientation = _process_limits(*symbols)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 69, in _process_limits
    raise ValueError('Invalid limits given: %s' % str(symbols))
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 52
STOPPING TESTING DUE TO TIMEOUT
2.77447673465 PERCENT COVERED
89.3309011459 TOTAL RUNTIME
2 EXECUTED
114 TOTAL TEST OPERATIONS
4.05489873886 TIME SPENT EXECUTING TEST OPERATIONS
0.413856506348 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
53.4611837864 TIME SPENT CHECKING PROPERTIES
57.5160825253 TOTAL TIME SPENT RUNNING SUT
0.00740504264832 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
v1 = sympy.Symbol('j',positive=True)                                     # STEP 0
v0 = sympy.Symbol('g',positive=True)                                     # STEP 1
v3 = sympy.Symbol('d')                                                   # STEP 2
c1 = sympy.Integer(7)                                                    # STEP 3
c3 = sympy.Integer(3)                                                    # STEP 4
c2 = sympy.Integer(8)                                                    # STEP 5
term0 = c3 * v1 ** c1                                                    # STEP 6
expr2 = sympy.Rational(c2,c3)                                            # STEP 7
v2 = sympy.Symbol('b')                                                   # STEP 8
term1 = c1 * v3 ** c2                                                    # STEP 9
poly1 = term0 + term0                                                   # STEP 10
expr1 = c3                                                              # STEP 11
expr3 = sympy.Sum(expr1,(v0,c2,c2))                                     # STEP 12
expr1 = sympy.Product(expr1,(v0,c3,c2))                                 # STEP 13
expr0 = sympy.Sum(expr3,(v3,c1,c2))                                     # STEP 14
v1 = sympy.Symbol('l',positive=True)                                    # STEP 15
expr3 = expr2 * expr1                                                   # STEP 16
expr1 = sympy.Product(expr0,(v0,c3,c2))                                 # STEP 17
expr2 = expr0 ** expr3                                                  # STEP 18
expr3 = expr1 ** expr3                                                  # STEP 19
expr0 = sympy.cancel(expr0)                                             # STEP 20
expr1 = sympy.Sum(expr1,(v0,c3,c3))                                     # STEP 21
c1 = sympy.Integer(6)                                                   # STEP 22
c2 = sympy.Integer(10)                                                  # STEP 23
c3 = sympy.Integer(3)                                                   # STEP 24
term3 = c3 * v1 ** c1                                                   # STEP 25
term0 = c3 * v3 ** c3                                                   # STEP 26
term2 = c3 * v3 ** c3                                                   # STEP 27
poly3 = term0 + term2                                                   # STEP 28
v1 = sympy.Symbol('z')                                                  # STEP 29
poly0 = term0 + term2                                                   # STEP 30
poly2 = term1                                                           # STEP 31
term0 = c2 * v0 ** c1                                                   # STEP 32
term2 = c3 * v0 ** c2                                                   # STEP 33
term1 = c2 * v2 ** c2                                                   # STEP 34
v2 = sympy.Symbol('l',positive=True)                                    # STEP 35
c1 = sympy.Integer(9)                                                   # STEP 36
c2 = sympy.Integer(6)                                                   # STEP 37
v3 = sympy.Symbol('f',positive=True)                                    # STEP 38
c0 = sympy.Integer(3)                                                   # STEP 39
v0 = sympy.Symbol('l',positive=True)                                    # STEP 40
c3 = sympy.Integer(10)                                                  # STEP 41
expr3.evalf()                                                           # STEP 42
expr3 = expr2.subs(expr3,expr1)                                         # STEP 43
expr2 = sympy.Sum(expr1,(v3,c3,c3))                                     # STEP 44
c3 = sympy.Integer(8)                                                   # STEP 45
expr1 = sympy.Sum(expr3,(v1,c2,c1))                                     # STEP 46
expr3 = sympy.Sum(expr1,(v2,c3,c1))                                     # STEP 47
expr1 = sympy.collect(expr1,expr2)                                      # STEP 48
expr2 = sympy.expand_func(expr2)                                        # STEP 49
v1 = sympy.Symbol('x')                                                  # STEP 50
c3 = sympy.Integer(6)                                                   # STEP 51
v3 = sympy.Symbol('e',positive=True)                                    # STEP 52
c1 = sympy.Integer(6)                                                   # STEP 53
c2 = sympy.Integer(7)                                                   # STEP 54
v2 = sympy.Symbol('i',positive=True)                                    # STEP 55
expr3.evalf()                                                           # STEP 56
expr3 = sympy.Sum(expr2,(v3,c1,c0))                                     # STEP 57
expr2 = sympy.Product(expr1,(v2,c3,c0))                                 # STEP 58
expr1 = sympy.Sum(expr2,(v2,c2,c1))                                     # STEP 59
expr2 = sympy.powdenest(expr1)                                          # STEP 60
expr1 = sympy.combsimp(expr3)                                           # STEP 61
ERROR: (<type 'exceptions.ValueError'>, ValueError('Invalid limits given: (((g, 3, 3), (f, 10, 10)),)',), <traceback object at 0x10acd7ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 239573, in safely
    act[2]()
  File "/Users/alex/tstl/examples/sympy/sut.py", line 200833, in act3707
    self.p_expr[1] = sympy.combsimp(self.p_expr[3])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/combsimp.py", line 464, in combsimp
    was = factor(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 6063, in factor
    return _generic_factor(f, gens, args, method='factor')
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5755, in _generic_factor
    return _symbolic_factor(sympify(expr), opt, method)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/polys/polytools.py", line 5699, in _symbolic_factor
    return expr._eval_factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 417, in _eval_factor
    summand = self.func(self.function, self.limits[0:-1]).factor()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/summations.py", line 155, in __new__
    obj = AddWithLimits.__new__(cls, function, *symbols, **assumptions)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 368, in __new__
    limits, orientation = _process_limits(*symbols)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/concrete/expr_with_limits.py", line 69, in _process_limits
    raise ValueError('Invalid limits given: %s' % str(symbols))
6134 BRANCHES COVERED
4612 STATEMENTS COVERED

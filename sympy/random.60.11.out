Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.99504.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.ValueError'>, ValueError('got complex zero with unknown accuracy',), <traceback object at 0x1085058c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238935, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[2]") or (sympy.simplify(self.p_expr[0]-self.p_expr[2]) != 0) or (self.p_expr[0].equals(self.p_expr[2]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 669, in evalf_pow
    return finalize_complex(re, im, target_prec)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 250, in finalize_complex
    raise ValueError("got complex zero with unknown accuracy")
Original test has 53 steps

SAVING TEST AS failure.99504.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
c0 = sympy.Integer(5)                                                    # STEP 0
ACTION: c0 = sympy.Integer(5) 
c0 = None : <type 'NoneType'>
=> c0 = 5 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('d')                                                   # STEP 1
ACTION: v0 = sympy.Symbol('d') 
v0 = None : <type 'NoneType'>
=> v0 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
c3 = sympy.Integer(0)                                                    # STEP 2
ACTION: c3 = sympy.Integer(0) 
c3 = None : <type 'NoneType'>
=> c3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
term1 = c0 * v0 ** c0                                                    # STEP 3
ACTION: term1 = c0 * v0 ** c0 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = d : <class 'sympy.core.symbol.Symbol'>
term1 = None : <type 'NoneType'>
=> term1 = 5*d**5 : <class 'sympy.core.mul.Mul'>
==================================================
v0 = sympy.Symbol('d')                                                   # STEP 4
ACTION: v0 = sympy.Symbol('d') 
v0 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = sympy.Rational(c3,c3)                                            # STEP 5
ACTION: expr2 = sympy.Rational(c3,c3) 
c3 = 0 : <class 'sympy.core.numbers.Zero'>
expr2 = None : <type 'NoneType'>
=> expr2 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
c2 = sympy.Integer(6)                                                    # STEP 6
ACTION: c2 = sympy.Integer(6) 
c2 = None : <type 'NoneType'>
=> c2 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
expr3 = sympy.acos(expr2)                                                # STEP 7
ACTION: expr3 = sympy.acos(expr2) 
expr2 = nan : <class 'sympy.core.numbers.NaN'>
expr3 = None : <type 'NoneType'>
=> expr3 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
c3 = sympy.Integer(1)                                                    # STEP 8
ACTION: c3 = sympy.Integer(1) 
c3 = 0 : <class 'sympy.core.numbers.Zero'>
=> c3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
expr1 = sympy.Sum(expr3,(v0,c0,c2))                                      # STEP 9
ACTION: expr1 = sympy.Sum(expr3,(v0,c0,c2)) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = d : <class 'sympy.core.symbol.Symbol'>
expr3 = nan : <class 'sympy.core.numbers.NaN'>
expr1 = None : <type 'NoneType'>
=> expr1 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
expr0 = sympy.expand_log(expr2)                                         # STEP 10
ACTION: expr0 = sympy.expand_log(expr2) 
expr2 = nan : <class 'sympy.core.numbers.NaN'>
expr0 = None : <type 'NoneType'>
=> expr0 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
expr2 = sympy.factorial(expr3)                                          # STEP 11
ACTION: expr2 = sympy.factorial(expr3) 
expr3 = nan : <class 'sympy.core.numbers.NaN'>
expr2 = nan : <class 'sympy.core.numbers.NaN'>
=> expr2 = factorial(nan) : factorial
==================================================
expr3 = sympy.expand(expr2)                                             # STEP 12
ACTION: expr3 = sympy.expand(expr2) 
expr2 = factorial(nan) : factorial
expr3 = nan : <class 'sympy.core.numbers.NaN'>
=> expr3 = factorial(nan) : factorial
==================================================
expr2 = expr1.subs(expr1,expr2)                                         # STEP 13
ACTION: expr2 = expr1.subs(expr1,expr2) 
expr1 = nan : <class 'sympy.core.numbers.NaN'>
expr2 = factorial(nan) : factorial
==================================================
expr1 = expr1 * expr1                                                   # STEP 14
ACTION: expr1 = expr1 * expr1 
expr1 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
v1 = sympy.Symbol('e',positive=True)                                    # STEP 15
ACTION: v1 = sympy.Symbol('e',positive=True) 
v1 = None : <type 'NoneType'>
=> v1 = e : <class 'sympy.core.symbol.Symbol'>
==================================================
v0 = sympy.Symbol('h',positive=True)                                    # STEP 16
ACTION: v0 = sympy.Symbol('h',positive=True) 
v0 = d : <class 'sympy.core.symbol.Symbol'>
=> v0 = h : <class 'sympy.core.symbol.Symbol'>
==================================================
term2 = c0 * v0 ** c2                                                   # STEP 17
ACTION: term2 = c0 * v0 ** c2 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c2 = 6 : <class 'sympy.core.numbers.Integer'>
v0 = h : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 5*h**6 : <class 'sympy.core.mul.Mul'>
==================================================
poly3 = term2 + term1                                                   # STEP 18
ACTION: poly3 = term2 + term1 
poly3 = None : <type 'NoneType'>
term2 = 5*h**6 : <class 'sympy.core.mul.Mul'>
term1 = 5*d**5 : <class 'sympy.core.mul.Mul'>
=> poly3 = 5*d**5 + 5*h**6 : <class 'sympy.core.add.Add'>
==================================================
c2 = sympy.Integer(4)                                                   # STEP 19
ACTION: c2 = sympy.Integer(4) 
c2 = 6 : <class 'sympy.core.numbers.Integer'>
=> c2 = 4 : <class 'sympy.core.numbers.Integer'>
==================================================
expr0.evalf()                                                           # STEP 20
ACTION: expr0.evalf() 
expr0 = nan : <class 'sympy.core.numbers.NaN'>
==================================================
expr0 = sympy.Sum(expr2,(v1,c0,c0))                                     # STEP 21
ACTION: expr0 = sympy.Sum(expr2,(v1,c0,c0)) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v1 = e : <class 'sympy.core.symbol.Symbol'>
expr2 = factorial(nan) : factorial
expr0 = nan : <class 'sympy.core.numbers.NaN'>
=> expr0 = Sum(factorial(nan), (e, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
==================================================
expr2 = sympy.Product(expr2,(v0,c2,c0))                                 # STEP 22
ACTION: expr2 = sympy.Product(expr2,(v0,c2,c0)) 
c2 = 4 : <class 'sympy.core.numbers.Integer'>
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = h : <class 'sympy.core.symbol.Symbol'>
expr2 = factorial(nan) : factorial
=> expr2 = Product(factorial(nan), (h, 4, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
term0 = c3 * v1 ** c2                                                   # STEP 23
ACTION: term0 = c3 * v1 ** c2 
c3 = 1 : <class 'sympy.core.numbers.One'>
c2 = 4 : <class 'sympy.core.numbers.Integer'>
v1 = e : <class 'sympy.core.symbol.Symbol'>
term0 = None : <type 'NoneType'>
=> term0 = e**4 : <class 'sympy.core.power.Pow'>
==================================================
v1 = sympy.Symbol('y')                                                  # STEP 24
ACTION: v1 = sympy.Symbol('y') 
v1 = e : <class 'sympy.core.symbol.Symbol'>
=> v1 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('d')                                                  # STEP 25
ACTION: v3 = sympy.Symbol('d') 
v3 = None : <type 'NoneType'>
=> v3 = d : <class 'sympy.core.symbol.Symbol'>
==================================================
term3 = c0 * v0 ** c3                                                   # STEP 26
ACTION: term3 = c0 * v0 ** c3 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
c3 = 1 : <class 'sympy.core.numbers.One'>
v0 = h : <class 'sympy.core.symbol.Symbol'>
term3 = None : <type 'NoneType'>
=> term3 = 5*h : <class 'sympy.core.mul.Mul'>
==================================================
v0 = sympy.Symbol('f',positive=True)                                    # STEP 27
ACTION: v0 = sympy.Symbol('f',positive=True) 
v0 = h : <class 'sympy.core.symbol.Symbol'>
=> v0 = f : <class 'sympy.core.symbol.Symbol'>
==================================================
term1 = c0 * v0 ** c0                                                   # STEP 28
ACTION: term1 = c0 * v0 ** c0 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = f : <class 'sympy.core.symbol.Symbol'>
term1 = 5*d**5 : <class 'sympy.core.mul.Mul'>
=> term1 = 5*f**5 : <class 'sympy.core.mul.Mul'>
==================================================
c3 = sympy.Integer(10)                                                  # STEP 29
ACTION: c3 = sympy.Integer(10) 
c3 = 1 : <class 'sympy.core.numbers.One'>
=> c3 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
term2 = c0 * v1 ** c0                                                   # STEP 30
ACTION: term2 = c0 * v1 ** c0 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v1 = y : <class 'sympy.core.symbol.Symbol'>
term2 = 5*h**6 : <class 'sympy.core.mul.Mul'>
=> term2 = 5*y**5 : <class 'sympy.core.mul.Mul'>
==================================================
c1 = sympy.Integer(1)                                                   # STEP 31
ACTION: c1 = sympy.Integer(1) 
c1 = None : <type 'NoneType'>
=> c1 = 1 : <class 'sympy.core.numbers.One'>
==================================================
v1 = sympy.Symbol('l',positive=True)                                    # STEP 32
ACTION: v1 = sympy.Symbol('l',positive=True) 
v1 = y : <class 'sympy.core.symbol.Symbol'>
=> v1 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
poly2 = term1 + term0                                                   # STEP 33
ACTION: poly2 = term1 + term0 
poly2 = None : <type 'NoneType'>
term1 = 5*f**5 : <class 'sympy.core.mul.Mul'>
term0 = e**4 : <class 'sympy.core.power.Pow'>
=> poly2 = e**4 + 5*f**5 : <class 'sympy.core.add.Add'>
==================================================
term0 = c1 * v3 ** c3                                                   # STEP 34
ACTION: term0 = c1 * v3 ** c3 
c1 = 1 : <class 'sympy.core.numbers.One'>
c3 = 10 : <class 'sympy.core.numbers.Integer'>
v3 = d : <class 'sympy.core.symbol.Symbol'>
term0 = e**4 : <class 'sympy.core.power.Pow'>
=> term0 = d**10 : <class 'sympy.core.power.Pow'>
==================================================
v2 = sympy.Symbol('a')                                                  # STEP 35
ACTION: v2 = sympy.Symbol('a') 
v2 = None : <type 'NoneType'>
=> v2 = a : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('l',positive=True)                                    # STEP 36
ACTION: v3 = sympy.Symbol('l',positive=True) 
v3 = d : <class 'sympy.core.symbol.Symbol'>
=> v3 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
term1 = c3 * v2 ** c1                                                   # STEP 37
ACTION: term1 = c3 * v2 ** c1 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
c1 = 1 : <class 'sympy.core.numbers.One'>
v2 = a : <class 'sympy.core.symbol.Symbol'>
term1 = 5*f**5 : <class 'sympy.core.mul.Mul'>
=> term1 = 10*a : <class 'sympy.core.mul.Mul'>
==================================================
c1 = sympy.Integer(6)                                                   # STEP 38
ACTION: c1 = sympy.Integer(6) 
c1 = 1 : <class 'sympy.core.numbers.One'>
=> c1 = 6 : <class 'sympy.core.numbers.Integer'>
==================================================
poly1 = term1 + term3                                                   # STEP 39
ACTION: poly1 = term1 + term3 
poly1 = None : <type 'NoneType'>
term1 = 10*a : <class 'sympy.core.mul.Mul'>
term3 = 5*h : <class 'sympy.core.mul.Mul'>
=> poly1 = 10*a + 5*h : <class 'sympy.core.add.Add'>
==================================================
v2 = sympy.Symbol('x')                                                  # STEP 40
ACTION: v2 = sympy.Symbol('x') 
v2 = a : <class 'sympy.core.symbol.Symbol'>
=> v2 = x : <class 'sympy.core.symbol.Symbol'>
==================================================
term3 = c3 * v1 ** c2                                                   # STEP 41
ACTION: term3 = c3 * v1 ** c2 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
c2 = 4 : <class 'sympy.core.numbers.Integer'>
v1 = l : <class 'sympy.core.symbol.Symbol'>
term3 = 5*h : <class 'sympy.core.mul.Mul'>
=> term3 = 10*l**4 : <class 'sympy.core.mul.Mul'>
==================================================
c2 = sympy.Integer(7)                                                   # STEP 42
ACTION: c2 = sympy.Integer(7) 
c2 = 4 : <class 'sympy.core.numbers.Integer'>
=> c2 = 7 : <class 'sympy.core.numbers.Integer'>
==================================================
poly0 = term3                                                           # STEP 43
ACTION: poly0 = term3 
poly0 = None : <type 'NoneType'>
term3 = 10*l**4 : <class 'sympy.core.mul.Mul'>
=> poly0 = 10*l**4 : <class 'sympy.core.mul.Mul'>
==================================================
term1 = c2 * v2 ** c1                                                   # STEP 44
ACTION: term1 = c2 * v2 ** c1 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
c1 = 6 : <class 'sympy.core.numbers.Integer'>
v2 = x : <class 'sympy.core.symbol.Symbol'>
term1 = 10*a : <class 'sympy.core.mul.Mul'>
=> term1 = 7*x**6 : <class 'sympy.core.mul.Mul'>
==================================================
c2 = sympy.Integer(8)                                                   # STEP 45
ACTION: c2 = sympy.Integer(8) 
c2 = 7 : <class 'sympy.core.numbers.Integer'>
=> c2 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
term3 = c0 * v0 ** c0                                                   # STEP 46
ACTION: term3 = c0 * v0 ** c0 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
v0 = f : <class 'sympy.core.symbol.Symbol'>
term3 = 10*l**4 : <class 'sympy.core.mul.Mul'>
=> term3 = 5*f**5 : <class 'sympy.core.mul.Mul'>
==================================================
c0 = sympy.Integer(10)                                                  # STEP 47
ACTION: c0 = sympy.Integer(10) 
c0 = 5 : <class 'sympy.core.numbers.Integer'>
=> c0 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
c3 = sympy.Integer(1)                                                   # STEP 48
ACTION: c3 = sympy.Integer(1) 
c3 = 10 : <class 'sympy.core.numbers.Integer'>
=> c3 = 1 : <class 'sympy.core.numbers.One'>
==================================================
v0 = sympy.Symbol('l',positive=True)                                    # STEP 49
ACTION: v0 = sympy.Symbol('l',positive=True) 
v0 = f : <class 'sympy.core.symbol.Symbol'>
=> v0 = l : <class 'sympy.core.symbol.Symbol'>
==================================================
v1 = sympy.Symbol('y')                                                  # STEP 50
ACTION: v1 = sympy.Symbol('y') 
v1 = l : <class 'sympy.core.symbol.Symbol'>
=> v1 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2.evalf()                                                           # STEP 51
ACTION: expr2.evalf() 
expr2 = Product(factorial(nan), (h, 4, 5)) : <class 'sympy.concrete.products.Product'>
==================================================
expr2 = sympy.Product(expr0,(v3,c1,c0))                                 # STEP 52
ACTION: expr2 = sympy.Product(expr0,(v3,c1,c0)) 
c1 = 6 : <class 'sympy.core.numbers.Integer'>
c0 = 10 : <class 'sympy.core.numbers.Integer'>
v3 = l : <class 'sympy.core.symbol.Symbol'>
expr0 = Sum(factorial(nan), (e, 5, 5)) : <class 'sympy.concrete.summations.Sum'>
expr2 = Product(factorial(nan), (h, 4, 5)) : <class 'sympy.concrete.products.Product'>
=> expr2 = Product(Sum(factorial(nan), (e, 5, 5)), (l, 6, 10)) : <class 'sympy.concrete.products.Product'>
==================================================
ERROR: (<type 'exceptions.ValueError'>, ValueError('got complex zero with unknown accuracy',), <traceback object at 0x10abb8050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238935, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[2]") or (sympy.simplify(self.p_expr[0]-self.p_expr[2]) != 0) or (self.p_expr[0].equals(self.p_expr[2]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 669, in evalf_pow
    return finalize_complex(re, im, target_prec)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 250, in finalize_complex
    raise ValueError("got complex zero with unknown accuracy")
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #2 STEP #31 (0:00:31.029946) Fri Apr 28 04:09:22 2017 [ 5770 stmts 7727 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 42
STOPPING TESTING DUE TO TIMEOUT
3.7103724777 PERCENT COVERED
91.3331100941 TOTAL RUNTIME
2 EXECUTED
95 TOTAL TEST OPERATIONS
3.21912741661 TIME SPENT EXECUTING TEST OPERATIONS
0.11111998558 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
49.5495505333 TIME SPENT CHECKING PROPERTIES
52.7686779499 TOTAL TIME SPENT RUNNING SUT
0.0069363117218 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
c0 = sympy.Integer(5)                                                    # STEP 0
v0 = sympy.Symbol('d')                                                   # STEP 1
c3 = sympy.Integer(0)                                                    # STEP 2
term1 = c0 * v0 ** c0                                                    # STEP 3
v0 = sympy.Symbol('d')                                                   # STEP 4
expr2 = sympy.Rational(c3,c3)                                            # STEP 5
c2 = sympy.Integer(6)                                                    # STEP 6
expr3 = sympy.acos(expr2)                                                # STEP 7
c3 = sympy.Integer(1)                                                    # STEP 8
expr1 = sympy.Sum(expr3,(v0,c0,c2))                                      # STEP 9
expr0 = sympy.expand_log(expr2)                                         # STEP 10
expr2 = sympy.factorial(expr3)                                          # STEP 11
expr3 = sympy.expand(expr2)                                             # STEP 12
expr2 = expr1.subs(expr1,expr2)                                         # STEP 13
expr1 = expr1 * expr1                                                   # STEP 14
v1 = sympy.Symbol('e',positive=True)                                    # STEP 15
v0 = sympy.Symbol('h',positive=True)                                    # STEP 16
term2 = c0 * v0 ** c2                                                   # STEP 17
poly3 = term2 + term1                                                   # STEP 18
c2 = sympy.Integer(4)                                                   # STEP 19
expr0.evalf()                                                           # STEP 20
expr0 = sympy.Sum(expr2,(v1,c0,c0))                                     # STEP 21
expr2 = sympy.Product(expr2,(v0,c2,c0))                                 # STEP 22
term0 = c3 * v1 ** c2                                                   # STEP 23
v1 = sympy.Symbol('y')                                                  # STEP 24
v3 = sympy.Symbol('d')                                                  # STEP 25
term3 = c0 * v0 ** c3                                                   # STEP 26
v0 = sympy.Symbol('f',positive=True)                                    # STEP 27
term1 = c0 * v0 ** c0                                                   # STEP 28
c3 = sympy.Integer(10)                                                  # STEP 29
term2 = c0 * v1 ** c0                                                   # STEP 30
c1 = sympy.Integer(1)                                                   # STEP 31
v1 = sympy.Symbol('l',positive=True)                                    # STEP 32
poly2 = term1 + term0                                                   # STEP 33
term0 = c1 * v3 ** c3                                                   # STEP 34
v2 = sympy.Symbol('a')                                                  # STEP 35
v3 = sympy.Symbol('l',positive=True)                                    # STEP 36
term1 = c3 * v2 ** c1                                                   # STEP 37
c1 = sympy.Integer(6)                                                   # STEP 38
poly1 = term1 + term3                                                   # STEP 39
v2 = sympy.Symbol('x')                                                  # STEP 40
term3 = c3 * v1 ** c2                                                   # STEP 41
c2 = sympy.Integer(7)                                                   # STEP 42
poly0 = term3                                                           # STEP 43
term1 = c2 * v2 ** c1                                                   # STEP 44
c2 = sympy.Integer(8)                                                   # STEP 45
term3 = c0 * v0 ** c0                                                   # STEP 46
c0 = sympy.Integer(10)                                                  # STEP 47
c3 = sympy.Integer(1)                                                   # STEP 48
v0 = sympy.Symbol('l',positive=True)                                    # STEP 49
v1 = sympy.Symbol('y')                                                  # STEP 50
expr2.evalf()                                                           # STEP 51
expr2 = sympy.Product(expr0,(v3,c1,c0))                                 # STEP 52
ERROR: (<type 'exceptions.ValueError'>, ValueError('got complex zero with unknown accuracy',), <traceback object at 0x10abb8050>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238935, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[2]") or (sympy.simplify(self.p_expr[0]-self.p_expr[2]) != 0) or (self.p_expr[0].equals(self.p_expr[2]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 514, in simplify
    original_expr = expr = signsimp(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 374, in signsimp
    e = sub_post(sub_pre(expr))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/cse_opts.py", line 15, in sub_pre
    reps = [a for a in e.atoms(Add) if a.could_extract_minus_sign()]
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 2133, in could_extract_minus_sign
    return bool(self.sort_key() < negative_self.sort_key())
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/cache.py", line 93, in wrapper
    retval = cfunc(*args, **kwargs)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/compatibility.py", line 899, in wrapper
    result = user_function(*args, **kwds)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 79, in sort_key
    args = expr.as_ordered_terms(order=order)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 888, in as_ordered_terms
    terms, gens = self.as_terms()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 927, in as_terms
    coeff *= complex(factor)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 229, in __complex__
    result = self.evalf()
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1385, in evalf
    result = evalf(self, prec + 4, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1143, in evalf_prod
    re, im, re_acc, im_acc = evalf(expr.doit(), prec=prec, options=options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 1278, in evalf
    r = rf(x, prec, options)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 669, in evalf_pow
    return finalize_complex(re, im, target_prec)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/evalf.py", line 250, in finalize_complex
    raise ValueError("got complex zero with unknown accuracy")
8269 BRANCHES COVERED
6154 STATEMENTS COVERED

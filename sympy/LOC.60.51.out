Random testing using config=Config(swarmSwitch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, exploit=None, seed=None, generalize=False, useHints=False, localize=False, total=False, speed='FAST', probs='locsample.probs', normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, noCoverageExploit=False, quickTests=False, relax=False, internal=False, uniqueValuesAnalysis=False, swarm=False, html=None, fastQuickAnalysis=False, progress=False, swarmLength=None, profile=False, LOCBaseline=0.2, full=True, multiple=True, timedProgress=30, silentFail=False, stopWhenStatements=None, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.845.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, noReassign=False, exploitCeiling=0.1, logging=None, LOCProbs=False, noCheck=False, maxTests=-1, keep=False, noExceptionMatch=False, Pmutate=0.0, depth=100, showActions=False, throughput=False, noCover=False, timeout=60, stutter=None, uncaught=False, markov=None, startExploit=0)
PROPERLY VIOLATION
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x108cd9200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 560, in TR6
    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
Original test has 36 steps

SAVING TEST AS failure.845.test.0
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
expr2 = sympy.E                                                          # STEP 0
ACTION: expr2 = sympy.E 
expr2 = None : <type 'NoneType'>
=> expr2 = E : <class 'sympy.core.numbers.Exp1'>
==================================================
expr3 = sympy.simplify(expr2)                                            # STEP 1
ACTION: expr3 = sympy.simplify(expr2) 
expr2 = E : <class 'sympy.core.numbers.Exp1'>
expr3 = None : <type 'NoneType'>
=> expr3 = E : <class 'sympy.core.numbers.Exp1'>
==================================================
expr2 = expr2 - expr2                                                    # STEP 2
ACTION: expr2 = expr2 - expr2 
expr2 = E : <class 'sympy.core.numbers.Exp1'>
=> expr2 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = sympy.simplify(expr3)                                            # STEP 3
ACTION: expr1 = sympy.simplify(expr3) 
expr3 = E : <class 'sympy.core.numbers.Exp1'>
expr1 = None : <type 'NoneType'>
=> expr1 = E : <class 'sympy.core.numbers.Exp1'>
==================================================
expr0 = sympy.cos(expr1)                                                 # STEP 4
ACTION: expr0 = sympy.cos(expr1) 
expr1 = E : <class 'sympy.core.numbers.Exp1'>
expr0 = None : <type 'NoneType'>
=> expr0 = cos(E) : cos
==================================================
expr3 = sympy.powsimp(expr2)                                             # STEP 5
ACTION: expr3 = sympy.powsimp(expr2) 
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
expr3 = E : <class 'sympy.core.numbers.Exp1'>
=> expr3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = sympy.sin(expr2)                                                 # STEP 6
ACTION: expr1 = sympy.sin(expr2) 
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = E : <class 'sympy.core.numbers.Exp1'>
=> expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr2 = sympy.acos(expr2)                                                # STEP 7
ACTION: expr2 = sympy.acos(expr2) 
expr2 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr2 = pi/2 : <class 'sympy.core.mul.Mul'>
==================================================
v2 = sympy.Symbol('y')                                                   # STEP 8
ACTION: v2 = sympy.Symbol('y') 
v2 = None : <type 'NoneType'>
=> v2 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1.evalf()                                                            # STEP 9
ACTION: expr1.evalf() 
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = expr0 % expr2                                                   # STEP 10
ACTION: expr1 = expr0 % expr2 
expr0 = cos(E) : cos
expr2 = pi/2 : <class 'sympy.core.mul.Mul'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr1 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
==================================================
expr0 = sympy.trigsimp(expr0)                                           # STEP 11
ACTION: expr0 = sympy.trigsimp(expr0) 
expr0 = cos(E) : cos
==================================================
expr2 = sympy.trigsimp(expr1)                                           # STEP 12
ACTION: expr2 = sympy.trigsimp(expr1) 
expr1 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
expr2 = pi/2 : <class 'sympy.core.mul.Mul'>
=> expr2 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
==================================================
expr1 = sympy.cancel(expr3)                                             # STEP 13
ACTION: expr1 = sympy.cancel(expr3) 
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
expr1 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
=> expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr3 = sympy.trigsimp(expr3)                                           # STEP 14
ACTION: expr3 = sympy.trigsimp(expr3) 
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
v3 = sympy.Symbol('c')                                                  # STEP 15
ACTION: v3 = sympy.Symbol('c') 
v3 = None : <type 'NoneType'>
=> v3 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
expr1.evalf()                                                           # STEP 16
ACTION: expr1.evalf() 
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr1 = sympy.cos(expr2)                                                # STEP 17
ACTION: expr1 = sympy.cos(expr2) 
expr2 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
expr1 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr1 = -sin(cos(E)) : <class 'sympy.core.mul.Mul'>
==================================================
expr2 = v3                                                              # STEP 18
ACTION: expr2 = v3 
v3 = c : <class 'sympy.core.symbol.Symbol'>
expr2 = cos(E) + pi/2 : <class 'sympy.core.add.Add'>
=> expr2 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
v3 = sympy.Symbol('y')                                                  # STEP 19
ACTION: v3 = sympy.Symbol('y') 
v3 = c : <class 'sympy.core.symbol.Symbol'>
=> v3 = y : <class 'sympy.core.symbol.Symbol'>
==================================================
c1 = sympy.Integer(8)                                                   # STEP 20
ACTION: c1 = sympy.Integer(8) 
c1 = None : <type 'NoneType'>
=> c1 = 8 : <class 'sympy.core.numbers.Integer'>
==================================================
v0 = sympy.Symbol('z')                                                  # STEP 21
ACTION: v0 = sympy.Symbol('z') 
v0 = None : <type 'NoneType'>
=> v0 = z : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3.evalf()                                                           # STEP 22
ACTION: expr3.evalf() 
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
==================================================
expr3 = sympy.combsimp(expr2)                                           # STEP 23
ACTION: expr3 = sympy.combsimp(expr2) 
expr2 = c : <class 'sympy.core.symbol.Symbol'>
expr3 = 0 : <class 'sympy.core.numbers.Zero'>
=> expr3 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
expr2 = sympy.trigsimp(expr0)                                           # STEP 24
ACTION: expr2 = sympy.trigsimp(expr0) 
expr0 = cos(E) : cos
expr2 = c : <class 'sympy.core.symbol.Symbol'>
=> expr2 = cos(E) : cos
==================================================
expr0 = sympy.I                                                         # STEP 25
ACTION: expr0 = sympy.I 
expr0 = cos(E) : cos
=> expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
term2 = c1 * v3 ** c1                                                   # STEP 26
ACTION: term2 = c1 * v3 ** c1 
c1 = 8 : <class 'sympy.core.numbers.Integer'>
v3 = y : <class 'sympy.core.symbol.Symbol'>
term2 = None : <type 'NoneType'>
=> term2 = 8*y**8 : <class 'sympy.core.mul.Mul'>
==================================================
c0 = sympy.Integer(10)                                                  # STEP 27
ACTION: c0 = sympy.Integer(10) 
c0 = None : <type 'NoneType'>
=> c0 = 10 : <class 'sympy.core.numbers.Integer'>
==================================================
poly2 = term2                                                           # STEP 28
ACTION: poly2 = term2 
poly2 = None : <type 'NoneType'>
term2 = 8*y**8 : <class 'sympy.core.mul.Mul'>
=> poly2 = 8*y**8 : <class 'sympy.core.mul.Mul'>
==================================================
poly0 = term2                                                           # STEP 29
ACTION: poly0 = term2 
poly0 = None : <type 'NoneType'>
term2 = 8*y**8 : <class 'sympy.core.mul.Mul'>
=> poly0 = 8*y**8 : <class 'sympy.core.mul.Mul'>
==================================================
expr1.evalf()                                                           # STEP 30
ACTION: expr1.evalf() 
expr1 = -sin(cos(E)) : <class 'sympy.core.mul.Mul'>
==================================================
expr1 = sympy.expand(expr0)                                             # STEP 31
ACTION: expr1 = sympy.expand(expr0) 
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr1 = -sin(cos(E)) : <class 'sympy.core.mul.Mul'>
=> expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr0 = sympy.expand(expr0)                                             # STEP 32
ACTION: expr0 = sympy.expand(expr0) 
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
==================================================
expr3.evalf()                                                           # STEP 33
ACTION: expr3.evalf() 
expr3 = c : <class 'sympy.core.symbol.Symbol'>
==================================================
expr3 = sympy.sqrt(expr1)                                               # STEP 34
ACTION: expr3 = sympy.sqrt(expr1) 
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr3 = c : <class 'sympy.core.symbol.Symbol'>
=> expr3 = (-1)**(1/4) : <class 'sympy.core.power.Pow'>
==================================================
expr1 = expr2 ** expr0                                                  # STEP 35
ACTION: expr1 = expr2 ** expr0 
expr2 = cos(E) : cos
expr0 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
expr1 = I : <class 'sympy.core.numbers.ImaginaryUnit'>
=> expr1 = cos(E)**I : <class 'sympy.core.power.Pow'>
==================================================
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x10bd0bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 560, in TR6
    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
FAILURE IS NEW, STORING; NOW 1 DISTINCT FAILURES
TEST #2 STEP #0 (0:00:41.129674) Fri Apr 28 07:28:02 2017 [ 5725 stmts 7661 branches ]
STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 36
STOPPING TESTING DUE TO TIMEOUT
3.86642178929 PERCENT COVERED
88.8024389744 TOTAL RUNTIME
2 EXECUTED
72 TOTAL TEST OPERATIONS
2.66074085236 TIME SPENT EXECUTING TEST OPERATIONS
0.813897132874 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
35.5474455357 TIME SPENT CHECKING PROPERTIES
38.208186388 TOTAL TIME SPENT RUNNING SUT
0.00784802436829 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
1 FAILED
0 REPEATS OF FAILURES
1 ACTUAL DISTINCT FAILURES

FAILURE 0
expr2 = sympy.E                                                          # STEP 0
expr3 = sympy.simplify(expr2)                                            # STEP 1
expr2 = expr2 - expr2                                                    # STEP 2
expr1 = sympy.simplify(expr3)                                            # STEP 3
expr0 = sympy.cos(expr1)                                                 # STEP 4
expr3 = sympy.powsimp(expr2)                                             # STEP 5
expr1 = sympy.sin(expr2)                                                 # STEP 6
expr2 = sympy.acos(expr2)                                                # STEP 7
v2 = sympy.Symbol('y')                                                   # STEP 8
expr1.evalf()                                                            # STEP 9
expr1 = expr0 % expr2                                                   # STEP 10
expr0 = sympy.trigsimp(expr0)                                           # STEP 11
expr2 = sympy.trigsimp(expr1)                                           # STEP 12
expr1 = sympy.cancel(expr3)                                             # STEP 13
expr3 = sympy.trigsimp(expr3)                                           # STEP 14
v3 = sympy.Symbol('c')                                                  # STEP 15
expr1.evalf()                                                           # STEP 16
expr1 = sympy.cos(expr2)                                                # STEP 17
expr2 = v3                                                              # STEP 18
v3 = sympy.Symbol('y')                                                  # STEP 19
c1 = sympy.Integer(8)                                                   # STEP 20
v0 = sympy.Symbol('z')                                                  # STEP 21
expr3.evalf()                                                           # STEP 22
expr3 = sympy.combsimp(expr2)                                           # STEP 23
expr2 = sympy.trigsimp(expr0)                                           # STEP 24
expr0 = sympy.I                                                         # STEP 25
term2 = c1 * v3 ** c1                                                   # STEP 26
c0 = sympy.Integer(10)                                                  # STEP 27
poly2 = term2                                                           # STEP 28
poly0 = term2                                                           # STEP 29
expr1.evalf()                                                           # STEP 30
expr1 = sympy.expand(expr0)                                             # STEP 31
expr0 = sympy.expand(expr0)                                             # STEP 32
expr3.evalf()                                                           # STEP 33
expr3 = sympy.sqrt(expr1)                                               # STEP 34
expr1 = expr2 ** expr0                                                  # STEP 35
ERROR: (<type 'exceptions.TypeError'>, TypeError('Invalid comparison of complex I',), <traceback object at 0x10bd0bf38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/sympy/sut.py", line 238930, in check
    try: assert ("self.p_expr[0]" == "self.p_expr[1]") or (sympy.simplify(self.p_expr[0]-self.p_expr[1]) != 0) or (self.p_expr[0].equals(self.p_expr[1]))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 568, in simplify
    expr = trigsimp(expr, deep=True)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 513, in trigsimp
    return trigsimpfunc(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 506, in <lambda>
    'matching': (lambda x: futrig(x)),
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in futrig
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 927, in bottom_up
    for a in rv.args])
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1083, in <lambda>
    e = bottom_up(e, lambda x: _futrig(x, **kwargs))
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/trigsimp.py", line 1151, in _futrig
    e = greedy(tree, objective=Lops)(e)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 117, in minrule
    return min([rule(expr) for rule in rules], key=objective)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/strategies/core.py", line 44, in chain_rl
    expr = rule(expr)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 560, in TR6
    return _TR56(rv, cos, sin, lambda x: 1 - x, max=max, pow=pow)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 518, in _TR56
    return bottom_up(rv, _f)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/simplify.py", line 930, in bottom_up
    rv = F(rv)
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/simplify/fu.py", line 498, in _f
    if (rv.exp < 0) == True:
  File "/Users/alex/Library/Python/2.7/lib/python/site-packages/sympy/core/expr.py", line 299, in __lt__
    raise TypeError("Invalid comparison of complex %s" % me)
8576 BRANCHES COVERED
6411 STATEMENTS COVERED
